// This is a subset of ddisasm rules for basic block propagation

.type input_reg <: symbol
.type reg_nullable <: symbol
.type register <: reg_nullable
.type address <: unsigned
.type operand_code <: unsigned
.type operand_index <: unsigned
.type condition_code <: symbol
.type block_type <: symbol
.type symbol_position <: symbol
.type limit_type <: symbol
.type access_mode <: symbol

.decl last_value_reg_limit(From:address,To:address,Reg:register,Value:number,LimitType:limit_type,Steps:unsigned)
.output last_value_reg_limit
.printsize last_value_reg_limit

.decl value_reg_limit(From:address, To:address, Reg:register, Value:number, LimitType:limit_type) 
.input value_reg_limit(IO=file, filename="value_reg_limit.csv")

.decl step_limit_small(Limit:unsigned) 
// .input step_limit_small(IO=file, filename="step_limit_small.csv", delimiter=",")
step_limit_small(3).

.decl code_in_block(EA:address, Block:address) 
.input code_in_block(IO=file, filename="code_in_block.csv")

.decl block_next(Block:address, BlockEnd:address, NextBlock:address) 
.input block_next(IO=file, filename="block_next.csv")

.decl defined_in_block(Block:address, Var:register)
.input defined_in_block(IO=file, filename="reg_def_use.defined_in_block.csv")

.decl conditional_jump(src:address)
.input conditional_jump(IO=file, filename="conditional_jump.csv")

.decl cmp_defines(EA_jmp:address,EA_dst:address,Reg:register)
.input cmp_defines(IO=file, filename="cmp_defines.csv")

.decl limit_reg_op(EA:address,DstReg:register,SrcReg:register,Offset:number)
.input limit_reg_op(IO=file, filename="limit_reg_op.csv")

.decl block_last_def(EA:address,EA_def:address,Var:register)
.input block_last_def(IO=file, filename="reg_def_use.block_last_def.csv")

.decl block_last_instruction(Block:address,EA:address)
.input block_last_instruction(IO=file, filename="block_last_instruction.csv")

.decl may_fallthrough(o:address,d:address)
.input may_fallthrough(IO=file, filename="may_fallthrough.csv")

.decl no_value_reg_limit(EA_jmp:address)
.input no_value_reg_limit(IO=file, filename="no_value_reg_limit.csv")

last_value_reg_limit(From,To,Reg,Value,LimitType,0) :- 
   value_reg_limit(From,To,Reg,Value,LimitType).

last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- 
   step_limit_small(StepLimit),
   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),
   Steps <= StepLimit,
   code_in_block(EA,Block),
   block_next(Block,BlockEnd,BlockNext),
   !defined_in_block(Block,PropagatedReg),
   !conditional_jump(BlockEnd).


last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- 
   step_limit_small(StepLimit),
   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),
   Steps <= StepLimit,
   code_in_block(EA,Block),
   block_next(Block,BlockEnd,BlockNext),
   !defined_in_block(Block,PropagatedReg),
   no_value_reg_limit(BlockEnd).

last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- 
   step_limit_small(StepLimit),
   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),
   Steps <= StepLimit,
   code_in_block(EA,Block),
   block_next(Block,BlockEnd,BlockNext),
   !defined_in_block(Block,PropagatedReg),
   cmp_defines(BlockEnd,BlockNext,Reg),
   Reg != PropagatedReg.

last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- 
   step_limit_small(StepLimit),
   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),
   Steps <= StepLimit,
   code_in_block(EA,Block),
   block_next(Block,BlockEnd,BlockNext),
   !defined_in_block(Block,PropagatedReg),
   cmp_defines(BlockEnd,DefinedNext,PropagatedReg),
   BlockNext != DefinedNext.

last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- 
   step_limit_small(StepLimit),
   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),
   Steps <= StepLimit,
   code_in_block(EA,Block),
   block_next(Block,BlockEnd,BlockNext),
   !defined_in_block(Block,PropagatedReg),
   value_reg_limit(BlockEnd,BlockNext,Reg,_,_),
   Reg != PropagatedReg.

last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- 
   step_limit_small(StepLimit),
   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),
   Steps <= StepLimit,
   code_in_block(EA,Block),
   block_next(Block,BlockEnd,BlockNext),
   !defined_in_block(Block,PropagatedReg),
   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),
   PropagatedType = "MAX",
   Type = "MAX",
   PropagatedVal < Val.

last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- 
   step_limit_small(StepLimit),
   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),
   Steps <= StepLimit,
   code_in_block(EA,Block),
   block_next(Block,BlockEnd,BlockNext),
   !defined_in_block(Block,PropagatedReg),
   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),
   PropagatedType = "MIN",
   Type = "MIN",
   PropagatedVal > Val.

last_value_reg_limit(BlockEnd,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- 
   step_limit_small(StepLimit),
   last_value_reg_limit(_,EA,SrcReg,PropagatedVal,PropagatedType,Steps),
   Steps <= StepLimit,
   code_in_block(EA,Block),
   block_last_instruction(Block,BlockEnd),
   limit_reg_op(BlockEnd,DstReg,SrcReg,Offset),
   EA <= BlockEnd,
   BlockEnd <= BlockEnd,
   code_in_block(BlockEnd,Block),
   block_next(Block,BlockEnd,EA_next),
   !block_last_def(BlockEnd,_,SrcReg).

last_value_reg_limit(BlockEnd,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- 
   step_limit_small(StepLimit),
   last_value_reg_limit(From,EA,SrcReg,PropagatedVal,PropagatedType,Steps),
   Steps <= StepLimit,
   code_in_block(EA,Block),
   block_last_instruction(Block,BlockEnd),
   limit_reg_op(BlockEnd,DstReg,SrcReg,Offset),
   EA <= BlockEnd,
   BlockEnd <= BlockEnd,
   code_in_block(BlockEnd,Block),
   block_next(Block,BlockEnd,EA_next),
   block_last_def(BlockEnd,From,SrcReg).

last_value_reg_limit(EA_mov,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- 
   step_limit_small(StepLimit),
   last_value_reg_limit(From,EA,SrcReg,PropagatedVal,PropagatedType,Steps),
   Steps <= StepLimit,
   code_in_block(EA,Block),
   block_last_instruction(Block,BlockEnd),
   limit_reg_op(EA_mov,DstReg,SrcReg,Offset),
   EA <= EA_mov,
   EA_mov <= BlockEnd,
   code_in_block(EA_mov,Block),
   EA_mov != BlockEnd,
   code_in_block(EA_mov,inlined_Block_185),
   may_fallthrough(EA_mov,EA_next),
   code_in_block(EA_next,inlined_Block_185),
   block_last_def(EA_mov,From,SrcReg).

last_value_reg_limit(EA_mov,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- 
   step_limit_small(StepLimit),
   last_value_reg_limit(_,EA,SrcReg,PropagatedVal,PropagatedType,Steps),
   Steps <= StepLimit,
   code_in_block(EA,Block),
   block_last_instruction(Block,BlockEnd),
   limit_reg_op(EA_mov,DstReg,SrcReg,Offset),
   EA <= EA_mov,
   EA_mov <= BlockEnd,
   code_in_block(EA_mov,Block),
   EA_mov != BlockEnd,
   code_in_block(EA_mov,inlined_Block_186),
   may_fallthrough(EA_mov,EA_next),
   code_in_block(EA_next,inlined_Block_186),
   !block_last_def(EA_mov,_,SrcReg).
