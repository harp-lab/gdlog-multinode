(PROGRAM 
  (DECLARATION 
    (RELATION base_address ( (ATTRIBUTE ea u:address)) )
    (RELATION +disconnected0 () )
    (RELATION address_in_data ( (ATTRIBUTE EA u:address) (ATTRIBUTE Value u:address)) )
    (RELATION aligned_address_in_data ( (ATTRIBUTE EA u:address) (ATTRIBUTE Value u:address)) )
    (RELATION arch.call_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION arch.call_operation_op_index ( (ATTRIBUTE Operation s:symbol) (ATTRIBUTE operand_index u:operand_index)) )
    (RELATION instruction ( (ATTRIBUTE ea u:address) (ATTRIBUTE size u:unsigned) (ATTRIBUTE prefix s:symbol) (ATTRIBUTE opcode s:symbol) (ATTRIBUTE op1 u:operand_code) (ATTRIBUTE op2 u:operand_code) (ATTRIBUTE op3 u:operand_code) (ATTRIBUTE op4 u:operand_code) (ATTRIBUTE immOffset u:unsigned) (ATTRIBUTE displacementOffset u:unsigned)) )
    (RELATION arch.call ( (ATTRIBUTE EA u:address) (ATTRIBUTE DestOperandIndex u:operand_index)) )
    (RELATION instruction_get_op ( (ATTRIBUTE ea u:address) (ATTRIBUTE index u:operand_index) (ATTRIBUTE operator u:operand_code)) )
    (RELATION next ( (ATTRIBUTE n u:address) (ATTRIBUTE m u:address)) )
    (RELATION arch.instruction_at ( (ATTRIBUTE EA u:address) (ATTRIBUTE Instruction u:address)) )
    (RELATION max_instruction_size ( (ATTRIBUTE Size u:unsigned)) )
    (RELATION arch.move_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION arch.jump_condition_code ( (ATTRIBUTE Operation s:symbol) (ATTRIBUTE CC s:condition_code)) )
    (RELATION arch.loop_operation ( (ATTRIBUTE Operation s:symbol) (ATTRIBUTE CC s:condition_code)) )
    (RELATION arch.jump_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION arch.jump_operation_op_index ( (ATTRIBUTE Operation s:symbol) (ATTRIBUTE operand_index u:operand_index)) )
    (RELATION arch.conditional_operation ( (ATTRIBUTE Operation s:symbol) (ATTRIBUTE CC s:condition_code)) )
    (RELATION arch.conditional ( (ATTRIBUTE EA u:address) (ATTRIBUTE CC s:condition_code)) )
    (RELATION arch.cmp_zero_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION binary_format ( (ATTRIBUTE Format s:symbol)) )
    (RELATION no_return_function ( (ATTRIBUTE Name s:symbol)) )
    (RELATION arch.integer_reg_param ( (ATTRIBUTE Reg s:register) (ATTRIBUTE Index u:unsigned)) )
    (RELATION tls_segment_register ( (ATTRIBUTE Reg s:input_reg)) )
    (RELATION binary_type ( (ATTRIBUTE Type s:symbol)) )
    (RELATION relocation_active_symbol_table ( (ATTRIBUTE Name s:symbol)) )
    (RELATION instruction_op_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE AccessMode s:access_mode)) )
    (RELATION instruction_get_dest_op ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Op u:operand_code)) )
    (RELATION instruction_get_src_op ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Op u:operand_code)) )
    (RELATION op_regdirect ( (ATTRIBUTE code u:operand_code) (ATTRIBUTE register_name s:input_reg)) )
    (RELATION arch.data_access_size ( (ATTRIBUTE Operation s:symbol) (ATTRIBUTE DestReg s:register) (ATTRIBUTE Size u:unsigned)) )
    (RELATION op_register_bitfield ( (ATTRIBUTE code u:operand_code) (ATTRIBUTE Index u:unsigned) (ATTRIBUTE register_name s:input_reg)) )
    (RELATION arch.reg_map_rule ( (ATTRIBUTE RegIn s:input_reg) (ATTRIBUTE Reg s:register)) )
    (RELATION op_indirect ( (ATTRIBUTE code u:operand_code) (ATTRIBUTE reg1 s:input_reg) (ATTRIBUTE reg2 s:input_reg) (ATTRIBUTE reg3 s:input_reg) (ATTRIBUTE multiplier i:number) (ATTRIBUTE offset i:number) (ATTRIBUTE size_value u:unsigned)) )
    (RELATION instruction_displacement_offset ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Offset u:unsigned) (ATTRIBUTE Size u:unsigned)) )
    (RELATION op_shifted_w_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Reg s:input_reg) (ATTRIBUTE Type s:symbol)) )
    (RELATION register_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE Register s:input_reg) (ATTRIBUTE AccessMode s:access_mode)) )
    (RELATION reg_map_nullable ( (ATTRIBUTE RegIn s:input_reg) (ATTRIBUTE Reg s:reg_nullable)) )
    (RELATION reg_map ( (ATTRIBUTE RegIn s:input_reg) (ATTRIBUTE Reg s:register)) )
    (RELATION op_regdirect_contains_reg ( (ATTRIBUTE Op u:operand_code) (ATTRIBUTE Reg s:register)) )
    (RELATION reg_call ( (ATTRIBUTE Src u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION is_xor_reset ( (ATTRIBUTE EA u:address)) )
    (RELATION arch.move_reg_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dst s:register) (ATTRIBUTE Src s:register)) )
    (RELATION op_indirect_contains_reg ( (ATTRIBUTE Op u:operand_code) (ATTRIBUTE Reg s:register)) )
    (RELATION op_indirect_mapped ( (ATTRIBUTE Op u:operand_code) (ATTRIBUTE Reg1 s:reg_nullable) (ATTRIBUTE Reg2 s:reg_nullable) (ATTRIBUTE Reg3 s:reg_nullable) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number) (ATTRIBUTE Size u:unsigned)) )
    (RELATION arch.memory_access ( (ATTRIBUTE AccessType s:symbol) (ATTRIBUTE EA u:address) (ATTRIBUTE SrcOp u:operand_index) (ATTRIBUTE DstOp u:operand_index) (ATTRIBUTE DirectReg s:register) (ATTRIBUTE BaseReg s:reg_nullable) (ATTRIBUTE IndexReg s:reg_nullable) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION arch.reg_reg_arithmetic_operation ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dst s:register) (ATTRIBUTE Src1 s:register) (ATTRIBUTE Src2 s:register) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION @delta_arch.reg_reg_arithmetic_operation ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dst s:register) (ATTRIBUTE Src1 s:register) (ATTRIBUTE Src2 s:register) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION @new_arch.reg_reg_arithmetic_operation ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dst s:register) (ATTRIBUTE Src1 s:register) (ATTRIBUTE Src2 s:register) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION op_immediate ( (ATTRIBUTE code u:operand_code) (ATTRIBUTE offset i:number)) )
    (RELATION instruction_immediate_offset ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Offset u:unsigned) (ATTRIBUTE Size u:unsigned)) )
    (RELATION arch.reg_arithmetic_operation ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dst s:register) (ATTRIBUTE Src s:register) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION arch.is_nop ( (ATTRIBUTE EA u:address)) )
    (RELATION limit_reg_op ( (ATTRIBUTE EA u:address) (ATTRIBUTE DstReg s:register) (ATTRIBUTE SrcReg s:register) (ATTRIBUTE Offset i:number)) )
    (RELATION arch.move_reg_imm ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dst s:register) (ATTRIBUTE Imm i:number) (ATTRIBUTE ImmIndex u:operand_index)) )
    (RELATION op_immediate_and_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Operation s:symbol) (ATTRIBUTE Reg s:register) (ATTRIBUTE Imm_index u:operand_index) (ATTRIBUTE Immediate i:number)) )
    (RELATION relocation ( (ATTRIBUTE EA u:address) (ATTRIBUTE Type s:symbol) (ATTRIBUTE Name s:symbol) (ATTRIBUTE Addend i:number) (ATTRIBUTE SymbolIndex u:unsigned) (ATTRIBUTE Section s:symbol) (ATTRIBUTE RelType s:symbol)) )
    (RELATION instruction_has_relocation ( (ATTRIBUTE EA u:address) (ATTRIBUTE Rel u:address)) )
    (RELATION tls_index ( (ATTRIBUTE EA u:address) (ATTRIBUTE Offset u:unsigned)) )
    (RELATION zero_relocation ( (ATTRIBUTE EA u:address)) )
    (RELATION pe_export_entry ( (ATTRIBUTE Address u:address) (ATTRIBUTE Ordinal i:number) (ATTRIBUTE Name s:symbol)) )
    (RELATION pe_import_entry ( (ATTRIBUTE Address u:address) (ATTRIBUTE Ordinal i:number) (ATTRIBUTE Function s:symbol) (ATTRIBUTE Library s:symbol)) )
    (RELATION symbol ( (ATTRIBUTE ea u:address) (ATTRIBUTE size u:unsigned) (ATTRIBUTE type s:symbol) (ATTRIBUTE scope s:symbol) (ATTRIBUTE visibility s:symbol) (ATTRIBUTE sectionIndex u:unsigned) (ATTRIBUTE originTable s:symbol) (ATTRIBUTE tableIndex u:unsigned) (ATTRIBUTE name s:symbol)) )
    (RELATION pc_relative_operand ( (ATTRIBUTE src u:address) (ATTRIBUTE index u:operand_index) (ATTRIBUTE dest u:address)) )
    (RELATION arch.pc_relative_addr ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Target u:address)) )
    (RELATION pc_relative_call ( (ATTRIBUTE Src u:address) (ATTRIBUTE DataPointer u:address)) )
    (RELATION take_address ( (ATTRIBUTE Src u:address) (ATTRIBUTE Address_taken u:address)) )
    (RELATION defined_symbol ( (ATTRIBUTE ea u:address) (ATTRIBUTE size u:unsigned) (ATTRIBUTE type s:symbol) (ATTRIBUTE scope s:symbol) (ATTRIBUTE visibility s:symbol) (ATTRIBUTE sectionIndex u:unsigned) (ATTRIBUTE originTable s:symbol) (ATTRIBUTE tableIndex u:unsigned) (ATTRIBUTE name s:symbol)) )
    (RELATION direct_call ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION pc_load_call ( (ATTRIBUTE Src u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION ifunc_scope_score ( (ATTRIBUTE Scope s:symbol) (ATTRIBUTE Score u:unsigned)) )
    (RELATION symbol_visibility_score ( (ATTRIBUTE Visibility s:symbol) (ATTRIBUTE Score u:unsigned)) )
    (RELATION ifunc_symbol_score ( (ATTRIBUTE EA u:address) (ATTRIBUTE SymbolName s:symbol) (ATTRIBUTE Score u:unsigned)) )
    (RELATION best_ifunc_symbol ( (ATTRIBUTE EA u:address) (ATTRIBUTE SymbolName s:symbol)) )
    (RELATION function_symbol ( (ATTRIBUTE ea u:address) (ATTRIBUTE name s:symbol)) )
    (RELATION symbol_set ( (ATTRIBUTE ea u:address) (ATTRIBUTE size u:unsigned) (ATTRIBUTE type s:symbol) (ATTRIBUTE scope s:symbol) (ATTRIBUTE visibility s:symbol) (ATTRIBUTE sectionIndex u:unsigned) (ATTRIBUTE name s:symbol)) )
    (RELATION ambiguous_symbol ( (ATTRIBUTE name s:symbol)) )
    (RELATION symbol_scope_score ( (ATTRIBUTE Scope s:symbol) (ATTRIBUTE Score u:unsigned)) )
    (RELATION symbol_type_score ( (ATTRIBUTE Type s:symbol) (ATTRIBUTE Scope u:unsigned)) )
    (RELATION copy_relocated_symbol ( (ATTRIBUTE EA u:address) (ATTRIBUTE Name s:symbol)) )
    (RELATION @delta_copy_relocated_symbol ( (ATTRIBUTE EA u:address) (ATTRIBUTE Name s:symbol)) )
    (RELATION @new_copy_relocated_symbol ( (ATTRIBUTE EA u:address) (ATTRIBUTE Name s:symbol)) )
    (RELATION trivial_relocation ( (ATTRIBUTE EA u:address)) )
    (RELATION byte_interval ( (ATTRIBUTE BegAddr u:address) (ATTRIBUTE EndAddr u:address)) )
    (RELATION section ( (ATTRIBUTE Name s:symbol) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE EA u:address) (ATTRIBUTE Align u:unsigned) (ATTRIBUTE Index u:unsigned)) )
    (RELATION symbol_at_section_end ( (ATTRIBUTE EA u:address) (ATTRIBUTE SymbolName s:symbol)) )
    (RELATION symbol_before_section_beg ( (ATTRIBUTE EA u:address) (ATTRIBUTE SymbolName s:symbol) (ATTRIBUTE NewEA u:address)) )
    (RELATION section_property ( (ATTRIBUTE Name s:symbol) (ATTRIBUTE Property s:symbol)) )
    (RELATION code_section ( (ATTRIBUTE name s:symbol)) )
    (RELATION loaded_section ( (ATTRIBUTE Beg u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Name s:symbol)) )
    (RELATION possible_rva_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Dest u:address)) )
    (RELATION got_reference_pointer ( (ATTRIBUTE EA u:address)) )
    (RELATION abi_intrinsic ( (ATTRIBUTE EA u:address) (ATTRIBUTE Name s:symbol)) )
    (RELATION bss_section ( (ATTRIBUTE name s:symbol)) )
    (RELATION __agg_subclause4 ( (ATTRIBUTE Name0 s:symbol) (ATTRIBUTE X0 u:address)) )
    (RELATION __agg_single7 ( (ATTRIBUTE z u:address)) )
    (RELATION __agg_subclause5 ( (ATTRIBUTE Name s:symbol) (ATTRIBUTE X u:address)) )
    (RELATION __agg_single8 ( (ATTRIBUTE z0 u:address)) )
    (RELATION bss_section_limits ( (ATTRIBUTE Begin u:address) (ATTRIBUTE End u:address)) )
    (RELATION dynamic_entry ( (ATTRIBUTE tag s:symbol) (ATTRIBUTE value u:unsigned)) )
    (RELATION entry_point ( (ATTRIBUTE ea u:address)) )
    (RELATION start_function ( (ATTRIBUTE ea u:address)) )
    (RELATION fde_entry ( (ATTRIBUTE FdeAddr u:address) (ATTRIBUTE Length u:unsigned) (ATTRIBUTE Cie u:address) (ATTRIBUTE Start u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Lsda u:address)) )
    (RELATION fde_addresses ( (ATTRIBUTE start u:address) (ATTRIBUTE end u:address)) )
    (RELATION misaligned_fde_start ( (ATTRIBUTE start u:address) (ATTRIBUTE start_adjusted u:address)) )
    (RELATION known_code ( (ATTRIBUTE EA u:address)) )
    (RELATION lsda_callsite ( (ATTRIBUTE CallSiteTable_address u:address) (ATTRIBUTE EA_start u:address) (ATTRIBUTE Start u:address) (ATTRIBUTE EA_end u:address) (ATTRIBUTE End u:address) (ATTRIBUTE EA_landingPad u:address) (ATTRIBUTE LandingPad u:address) (ATTRIBUTE EA_endLandindPad u:address)) )
    (RELATION lsda_callsite_addresses ( (ATTRIBUTE Start u:address) (ATTRIBUTE End u:address) (ATTRIBUTE LandingPad u:address)) )
    (RELATION pe_data_directory ( (ATTRIBUTE Type s:symbol) (ATTRIBUTE Address u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION pe_debug_data ( (ATTRIBUTE Type s:symbol) (ATTRIBUTE Address u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION merged_data_region ( (ATTRIBUTE Start u:address) (ATTRIBUTE End u:address)) )
    (RELATION __agg_single4 ( (ATTRIBUTE z u:address)) )
    (RELATION arch.return_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION arch.return ( (ATTRIBUTE EA u:address)) )
    (RELATION arch.jump ( (ATTRIBUTE EA u:address)) )
    (RELATION unconditional_jump ( (ATTRIBUTE n u:address)) )
    (RELATION conditional_jump ( (ATTRIBUTE src u:address)) )
    (RELATION pc_relative_jump ( (ATTRIBUTE Src u:address) (ATTRIBUTE DataPointer u:address)) )
    (RELATION indirect_jump ( (ATTRIBUTE Src u:address)) )
    (RELATION reg_jump ( (ATTRIBUTE Src u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION conditional_return ( (ATTRIBUTE EA u:address)) )
    (RELATION unconditional_return ( (ATTRIBUTE EA u:address)) )
    (RELATION indirect_call ( (ATTRIBUTE Src u:address)) )
    (RELATION arch.loop_prefix ( (ATTRIBUTE Prefix s:symbol)) )
    (RELATION instruction_has_loop_prefix ( (ATTRIBUTE EA u:address)) )
    (RELATION direct_jump ( (ATTRIBUTE src u:address) (ATTRIBUTE dest u:address)) )
    (RELATION npad ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION @delta_npad ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION @new_npad ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION direct_or_pcrel_jump ( (ATTRIBUTE Src u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION repeated_byte ( (ATTRIBUTE EA u:address) (ATTRIBUTE Value u:unsigned) (ATTRIBUTE Count u:unsigned)) )
    (RELATION incremental_linking_candidate ( (ATTRIBUTE First u:address) (ATTRIBUTE Last u:address)) )
    (RELATION @delta_incremental_linking_candidate ( (ATTRIBUTE First u:address) (ATTRIBUTE Last u:address)) )
    (RELATION @new_incremental_linking_candidate ( (ATTRIBUTE First u:address) (ATTRIBUTE Last u:address)) )
    (RELATION incremental_linking ( (ATTRIBUTE First u:address) (ATTRIBUTE Last u:address)) )
    (RELATION data_region ( (ATTRIBUTE Begin u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION invalid_op_code ( (ATTRIBUTE ea u:address)) )
    (RELATION arch.interrupt_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION arch.syscall_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION arch.halt_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION halt ( (ATTRIBUTE EA u:address)) )
    (RELATION plt_section ( (ATTRIBUTE name s:symbol)) )
    (RELATION plt_entry ( (ATTRIBUTE EA u:address) (ATTRIBUTE function s:symbol)) )
    (RELATION no_return_call ( (ATTRIBUTE EA u:address)) )
    (RELATION may_fallthrough ( (ATTRIBUTE o u:address) (ATTRIBUTE d u:address)) )
    (RELATION must_fallthrough ( (ATTRIBUTE From u:address) (ATTRIBUTE To u:address)) )
    (RELATION invalid ( (ATTRIBUTE EA u:address) (ATTRIBUTE Type s:symbol)) )
    (RELATION @delta_invalid ( (ATTRIBUTE EA u:address) (ATTRIBUTE Type s:symbol)) )
    (RELATION @new_invalid ( (ATTRIBUTE EA u:address) (ATTRIBUTE Type s:symbol)) )
    (RELATION jump_table_prelude ( (ATTRIBUTE EA u:address) (ATTRIBUTE Steps u:unsigned)) )
    (RELATION @delta_jump_table_prelude ( (ATTRIBUTE EA u:address) (ATTRIBUTE Steps u:unsigned)) )
    (RELATION @new_jump_table_prelude ( (ATTRIBUTE EA u:address) (ATTRIBUTE Steps u:unsigned)) )
    (RELATION relative_address_start ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE DestIsFirstOrSecond s:symbol)) )
    (RELATION @delta_relative_address_start ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE DestIsFirstOrSecond s:symbol)) )
    (RELATION @new_relative_address_start ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE DestIsFirstOrSecond s:symbol)) )
    (RELATION relative_address ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE TableStart u:address) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE DestIsFirstOrSecond s:symbol)) )
    (RELATION @delta_relative_address ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE TableStart u:address) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE DestIsFirstOrSecond s:symbol)) )
    (RELATION @new_relative_address ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE TableStart u:address) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE DestIsFirstOrSecond s:symbol)) )
    (RELATION basic_target ( (ATTRIBUTE ea u:address)) )
    (RELATION block_limit ( (ATTRIBUTE EA u:address)) )
    (RELATION instruction_memory_access_size ( (ATTRIBUTE EA u:address) (ATTRIBUTE Op_index u:operand_index) (ATTRIBUTE Size u:unsigned)) )
    (RELATION arch.simple_data_load ( (ATTRIBUTE EA u:address) (ATTRIBUTE Data u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION arch.reg_relative_load ( (ATTRIBUTE LoadEA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Offset i:number) (ATTRIBUTE Size u:unsigned)) )
    (RELATION arch.extend_load ( (ATTRIBUTE EA u:address) (ATTRIBUTE Signed u:unsigned) (ATTRIBUTE SrcBits u:unsigned)) )
    (RELATION is_padding ( (ATTRIBUTE EA u:address)) )
    (RELATION @delta_is_padding ( (ATTRIBUTE EA u:address)) )
    (RELATION @new_is_padding ( (ATTRIBUTE EA u:address)) )
    (RELATION arch.logic_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION may_have_symbolic_immediate ( (ATTRIBUTE src u:address) (ATTRIBUTE dest u:address)) )
    (RELATION after_end ( (ATTRIBUTE EA u:address) (ATTRIBUTE End u:address)) )
    (RELATION @delta_after_end ( (ATTRIBUTE EA u:address) (ATTRIBUTE End u:address)) )
    (RELATION @new_after_end ( (ATTRIBUTE EA u:address) (ATTRIBUTE End u:address)) )
    (RELATION code_in_block_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_block u:address)) )
    (RELATION @delta_code_in_block_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_block u:address)) )
    (RELATION @new_code_in_block_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_block u:address)) )
    (RELATION possible_target ( (ATTRIBUTE Target u:address)) )
    (RELATION @delta_possible_target ( (ATTRIBUTE Target u:address)) )
    (RELATION @new_possible_target ( (ATTRIBUTE Target u:address)) )
    (RELATION possible_target_from ( (ATTRIBUTE dest u:address) (ATTRIBUTE src u:address)) )
    (RELATION @delta_possible_target_from ( (ATTRIBUTE dest u:address) (ATTRIBUTE src u:address)) )
    (RELATION @new_possible_target_from ( (ATTRIBUTE dest u:address) (ATTRIBUTE src u:address)) )
    (RELATION common_tail ( (ATTRIBUTE EA u:address)) )
    (RELATION code_in_block_candidate_refined ( (ATTRIBUTE EA u:address) (ATTRIBUTE Block u:address)) )
    (RELATION @delta_code_in_block_candidate_refined ( (ATTRIBUTE EA u:address) (ATTRIBUTE Block u:address)) )
    (RELATION @new_code_in_block_candidate_refined ( (ATTRIBUTE EA u:address) (ATTRIBUTE Block u:address)) )
    (RELATION arch.condition_flags_reg ( (ATTRIBUTE Reg s:register)) )
    (RELATION arch.frame_pointer ( (ATTRIBUTE Reg s:register)) )
    (RELATION arch.general_purpose_reg ( (ATTRIBUTE Reg s:register)) )
    (RELATION arch.return_reg ( (ATTRIBUTE Reg s:register)) )
    (RELATION arch.stack_pointer ( (ATTRIBUTE Reg s:register)) )
    (RELATION track_register ( (ATTRIBUTE Reg s:register)) )
    (RELATION basic_reg_def_use.used_explicit ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Index u:operand_index)) )
    (RELATION basic_reg_def_use.used ( (ATTRIBUTE EA u:address) (ATTRIBUTE Var s:register) (ATTRIBUTE Index u:operand_index)) )
    (RELATION basic_reg_def_use.def ( (ATTRIBUTE EA u:address) (ATTRIBUTE Var s:register)) )
    (RELATION straight_line_last_def ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_def u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION @delta_straight_line_last_def ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_def u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION @new_straight_line_last_def ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_def u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION straight_line_def_used ( (ATTRIBUTE EA_def u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index u:unsigned)) )
    (RELATION composite_data_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_load u:address) (ATTRIBUTE Data u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION data_block_candidate ( (ATTRIBUTE Block u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION padding_block_limit ( (ATTRIBUTE Limit u:address)) )
    (RELATION nop_in_padding_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE Start u:address)) )
    (RELATION @delta_nop_in_padding_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE Start u:address)) )
    (RELATION @new_nop_in_padding_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE Start u:address)) )
    (RELATION padding_block_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION block_candidate_boundaries ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE BegAddr u:address) (ATTRIBUTE EndAddr u:address)) )
    (RELATION block_overlap ( (ATTRIBUTE Block1 u:address) (ATTRIBUTE Type1 s:block_type) (ATTRIBUTE Size1 u:unsigned) (ATTRIBUTE Block2 u:address) (ATTRIBUTE Type2 s:block_type) (ATTRIBUTE Size2 u:unsigned)) )
    (RELATION @delta_block_overlap ( (ATTRIBUTE Block1 u:address) (ATTRIBUTE Type1 s:block_type) (ATTRIBUTE Size1 u:unsigned) (ATTRIBUTE Block2 u:address) (ATTRIBUTE Type2 s:block_type) (ATTRIBUTE Size2 u:unsigned)) )
    (RELATION @new_block_overlap ( (ATTRIBUTE Block1 u:address) (ATTRIBUTE Type1 s:block_type) (ATTRIBUTE Size1 u:unsigned) (ATTRIBUTE Block2 u:address) (ATTRIBUTE Type2 s:block_type) (ATTRIBUTE Size2 u:unsigned)) )
    (RELATION overlapping_instruction ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA2 u:address)) )
    (RELATION block_candidate_dependency_edge ( (ATTRIBUTE BlockA u:address) (ATTRIBUTE TypeA s:block_type) (ATTRIBUTE SizeA u:unsigned) (ATTRIBUTE BlockB u:address) (ATTRIBUTE TypeB s:block_type) (ATTRIBUTE SizeB u:unsigned)) )
    (RELATION @delta_block_candidate_dependency_edge ( (ATTRIBUTE BlockA u:address) (ATTRIBUTE TypeA s:block_type) (ATTRIBUTE SizeA u:unsigned) (ATTRIBUTE BlockB u:address) (ATTRIBUTE TypeB s:block_type) (ATTRIBUTE SizeB u:unsigned)) )
    (RELATION @new_block_candidate_dependency_edge ( (ATTRIBUTE BlockA u:address) (ATTRIBUTE TypeA s:block_type) (ATTRIBUTE SizeA u:unsigned) (ATTRIBUTE BlockB u:address) (ATTRIBUTE TypeB s:block_type) (ATTRIBUTE SizeB u:unsigned)) )
    (RELATION block_implies_block ( (ATTRIBUTE BlockA u:address) (ATTRIBUTE TypeA s:block_type) (ATTRIBUTE SizeA u:unsigned) (ATTRIBUTE BlockB u:address) (ATTRIBUTE TypeB s:block_type) (ATTRIBUTE SizeB u:unsigned)) )
    (RELATION @delta_block_implies_block ( (ATTRIBUTE BlockA u:address) (ATTRIBUTE TypeA s:block_type) (ATTRIBUTE SizeA u:unsigned) (ATTRIBUTE BlockB u:address) (ATTRIBUTE TypeB s:block_type) (ATTRIBUTE SizeB u:unsigned)) )
    (RELATION @new_block_implies_block ( (ATTRIBUTE BlockA u:address) (ATTRIBUTE TypeA s:block_type) (ATTRIBUTE SizeA u:unsigned) (ATTRIBUTE BlockB u:address) (ATTRIBUTE TypeB s:block_type) (ATTRIBUTE SizeB u:unsigned)) )
    (RELATION reg_def_use.def ( (ATTRIBUTE EA u:address) (ATTRIBUTE Var s:register)) )
    (RELATION reg_def_use.used_explicit ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Index u:operand_index)) )
    (RELATION stack_def_use.def ( (ATTRIBUTE EA u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION stack_def_use.used ( (ATTRIBUTE EA u:address) (ATTRIBUTE Var r:stack_var) (ATTRIBUTE Index u:operand_index)) )
    (RELATION elf_pointer_array_section_type ( (ATTRIBUTE SectionTypeName s:symbol)) )
    (RELATION elf_section_type ( (ATTRIBUTE Name s:symbol) (ATTRIBUTE Code u:unsigned)) )
    (RELATION section_type ( (ATTRIBUTE Name s:symbol) (ATTRIBUTE Type u:unsigned)) )
    (RELATION function_pointer_section ( (ATTRIBUTE Name s:symbol)) )
    (RELATION known_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reason s:symbol)) )
    (RELATION @delta_known_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reason s:symbol)) )
    (RELATION @new_known_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reason s:symbol)) )
    (RELATION impossible_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reason s:symbol)) )
    (RELATION @delta_impossible_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reason s:symbol)) )
    (RELATION @new_impossible_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reason s:symbol)) )
    (RELATION data_section ( (ATTRIBUTE name s:symbol)) )
    (RELATION non_zero_data_section ( (ATTRIBUTE name s:symbol)) )
    (RELATION tls_section ( (ATTRIBUTE name s:symbol)) )
    (RELATION __agg_subclause ( (ATTRIBUTE Addr u:address) (ATTRIBUTE EA0 u:address) (ATTRIBUTE Name0 s:symbol)) )
    (RELATION __agg_single ( (ATTRIBUTE z u:address)) )
    (RELATION __agg_subclause0 ( (ATTRIBUTE EA u:address) (ATTRIBUTE End0 u:address) (ATTRIBUTE Name1 s:symbol)) )
    (RELATION __agg_single0 ( (ATTRIBUTE z0 u:address)) )
    (RELATION __agg_subclause1 ( (ATTRIBUTE Name s:symbol) (ATTRIBUTE X u:unsigned)) )
    (RELATION __agg_single1 ( (ATTRIBUTE z1 u:unsigned)) )
    (RELATION tls_segment ( (ATTRIBUTE Start u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Align u:unsigned)) )
    (RELATION tls_descriptor ( (ATTRIBUTE EA u:address) (ATTRIBUTE Offset u:unsigned)) )
    (RELATION +disconnected2 () )
    (RELATION ascii_string ( (ATTRIBUTE EA u:address) (ATTRIBUTE End u:address)) )
    (RELATION negative_block_points ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Predecessor u:address) (ATTRIBUTE Importance i:number) (ATTRIBUTE HeuristicName s:symbol)) )
    (RELATION unresolved_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned)) )
    (RELATION @delta_unresolved_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned)) )
    (RELATION @new_unresolved_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned)) )
    (RELATION candidate_block_is_not_padding ( (ATTRIBUTE Block u:address)) )
    (RELATION candidate_block_is_padding ( (ATTRIBUTE Block u:address)) )
    (RELATION resolved_reaches ( (ATTRIBUTE Block u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Points i:number)) btree_delete)
    (RELATION @delta_resolved_reaches ( (ATTRIBUTE Block u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Points i:number)) )
    (RELATION @new_resolved_reaches ( (ATTRIBUTE Block u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Points i:number)) )
    (RELATION @reject_resolved_reaches ( (ATTRIBUTE Block u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Points i:number)) )
    (RELATION @delete_resolved_reaches ( (ATTRIBUTE Block u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Points i:number)) )
    (RELATION unresolved_block_overlap ( (ATTRIBUTE Block1 u:address) (ATTRIBUTE Type1 s:block_type) (ATTRIBUTE Size1 u:unsigned) (ATTRIBUTE Block2 u:address) (ATTRIBUTE Type2 s:block_type) (ATTRIBUTE Size2 u:unsigned)) )
    (RELATION elf_relocation_size ( (ATTRIBUTE ISA s:symbol) (ATTRIBUTE Type s:symbol) (ATTRIBUTE Size u:unsigned)) )
    (RELATION pe_relocation_size ( (ATTRIBUTE Type s:symbol) (ATTRIBUTE Size u:unsigned)) )
    (RELATION relocation_size ( (ATTRIBUTE Type s:symbol) (ATTRIBUTE Size u:unsigned)) )
    (RELATION block_points ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Predecessor u:address) (ATTRIBUTE Importance i:number) (ATTRIBUTE HeuristicName s:symbol)) )
    (RELATION block_total_points ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Points i:number)) )
    (RELATION __agg_subclause6 ( (ATTRIBUTE Block0 u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Points i:number) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Start u:address) (ATTRIBUTE Type0 s:block_type)) )
    (RELATION unresolved_interval ( (ATTRIBUTE Start u:address) (ATTRIBUTE End u:address)) )
    (RELATION __agg_single6 ( (ATTRIBUTE z u:address)) )
    (RELATION unresolved_interval_order ( (ATTRIBUTE ID u:unsigned) (ATTRIBUTE Start u:address) (ATTRIBUTE End u:address)) )
    (RELATION @delta_unresolved_interval_order ( (ATTRIBUTE ID u:unsigned) (ATTRIBUTE Start u:address) (ATTRIBUTE End u:address)) )
    (RELATION @new_unresolved_interval_order ( (ATTRIBUTE ID u:unsigned) (ATTRIBUTE Start u:address) (ATTRIBUTE End u:address)) )
    (RELATION wis_has_prior ( (ATTRIBUTE I u:unsigned) (ATTRIBUTE Count u:unsigned)) )
    (RELATION wis_prior ( (ATTRIBUTE I u:unsigned) (ATTRIBUTE Count u:unsigned)) )
    (RELATION block_type_priority ( (ATTRIBUTE Type s:block_type) (ATTRIBUTE Priority u:unsigned)) )
    (RELATION __agg_subclause7 ( (ATTRIBUTE Block u:address) (ATTRIBUTE End u:address) (ATTRIBUTE MaxPoints i:number) (ATTRIBUTE Priority u:unsigned) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Start u:address) (ATTRIBUTE Type s:block_type)) )
    (RELATION unresolved_interval_best_block ( (ATTRIBUTE ID u:unsigned) (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Weight u:unsigned)) )
    (RELATION wis_memo ( (ATTRIBUTE I u:unsigned) (ATTRIBUTE Value u:unsigned) (ATTRIBUTE Pred u:unsigned)) )
    (RELATION @delta_wis_memo ( (ATTRIBUTE I u:unsigned) (ATTRIBUTE Value u:unsigned) (ATTRIBUTE Pred u:unsigned)) )
    (RELATION @new_wis_memo ( (ATTRIBUTE I u:unsigned) (ATTRIBUTE Value u:unsigned) (ATTRIBUTE Pred u:unsigned)) )
    (RELATION wis_schedule_iter ( (ATTRIBUTE Iter u:unsigned)) )
    (RELATION @delta_wis_schedule_iter ( (ATTRIBUTE Iter u:unsigned)) )
    (RELATION @new_wis_schedule_iter ( (ATTRIBUTE Iter u:unsigned)) )
    (RELATION wis_schedule ( (ATTRIBUTE Interval u:unsigned)) )
    (RELATION discarded_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reason s:symbol) (ATTRIBUTE BlockPropagated u:address)) )
    (RELATION @delta_discarded_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reason s:symbol) (ATTRIBUTE BlockPropagated u:address)) )
    (RELATION @new_discarded_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Type s:block_type) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reason s:symbol) (ATTRIBUTE BlockPropagated u:address)) )
    (RELATION code_in_block ( (ATTRIBUTE EA u:address) (ATTRIBUTE Block u:address)) )
    (RELATION @delta_code_in_block ( (ATTRIBUTE EA u:address) (ATTRIBUTE Block u:address)) )
    (RELATION @new_code_in_block ( (ATTRIBUTE EA u:address) (ATTRIBUTE Block u:address)) )
    (RELATION reg_def_use.block_last_def ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_def u:address) (ATTRIBUTE Var s:register)) )
    (RELATION @delta_reg_def_use.block_last_def ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_def u:address) (ATTRIBUTE Var s:register)) )
    (RELATION @new_reg_def_use.block_last_def ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_def u:address) (ATTRIBUTE Var s:register)) )
    (RELATION block ( (ATTRIBUTE Block u:address)) )
    (RELATION function_inference.function_entry_initial ( (ATTRIBUTE EA u:address)) )
    (RELATION inter_procedural_edge ( (ATTRIBUTE Src u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION block_last_instruction ( (ATTRIBUTE Block u:address) (ATTRIBUTE EA u:address)) )
    (RELATION incomplete_block ( (ATTRIBUTE Block u:address)) )
    (RELATION reg_def_use.return_block_end ( (ATTRIBUTE Callee u:address) (ATTRIBUTE CalleeEnd u:address) (ATTRIBUTE Block u:address) (ATTRIBUTE BlockEnd u:address)) )
    (RELATION reg_def_use.last_def_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE EA_def u:address) (ATTRIBUTE Var s:register)) )
    (RELATION data_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE Op_index u:operand_index) (ATTRIBUTE RegSegment s:reg_nullable) (ATTRIBUTE RegBase s:reg_nullable) (ATTRIBUTE RegIndex s:reg_nullable) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number) (ATTRIBUTE Size u:unsigned)) )
    (RELATION block_boundaries ( (ATTRIBUTE block u:address) (ATTRIBUTE BegAddr u:address) (ATTRIBUTE EndAddr u:address)) )
    (RELATION data_in_code_propagate ( (ATTRIBUTE Current u:address) (ATTRIBUTE Initial u:address) (ATTRIBUTE EndByteInterval u:address)) )
    (RELATION @delta_data_in_code_propagate ( (ATTRIBUTE Current u:address) (ATTRIBUTE Initial u:address) (ATTRIBUTE EndByteInterval u:address)) )
    (RELATION @new_data_in_code_propagate ( (ATTRIBUTE Current u:address) (ATTRIBUTE Initial u:address) (ATTRIBUTE EndByteInterval u:address)) )
    (RELATION first_block_in_byte_interval ( (ATTRIBUTE Begin u:address) (ATTRIBUTE End u:address) (ATTRIBUTE BlockBeg u:address)) )
    (RELATION data_in_code ( (ATTRIBUTE Begin u:address) (ATTRIBUTE End u:address)) )
    (RELATION initialized_data_segment ( (ATTRIBUTE Begin u:address) (ATTRIBUTE End u:address)) )
    (RELATION data_segment ( (ATTRIBUTE Begin u:address) (ATTRIBUTE End u:address)) )
    (RELATION address_in_data_refined ( (ATTRIBUTE EA u:address) (ATTRIBUTE Val u:address)) )
    (RELATION address_in_data_refined_range.in_ea ( (ATTRIBUTE ea u:address)) )
    (RELATION synchronous_access_barrier ( (ATTRIBUTE EA u:address)) )
    (RELATION next_block_in_byte_interval ( (ATTRIBUTE Block u:address) (ATTRIBUTE NextBlock u:address)) )
    (RELATION __agg_subclause2 ( (ATTRIBUTE EA u:address) (ATTRIBUTE Entry u:address)) )
    (RELATION __agg_single2 ( (ATTRIBUTE z u:address)) )
    (RELATION inferred_main_dispatch ( (ATTRIBUTE EA u:address)) )
    (RELATION inferred_main_in_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION plt_block ( (ATTRIBUTE block u:address) (ATTRIBUTE function s:symbol)) )
    (RELATION @delta_plt_block ( (ATTRIBUTE block u:address) (ATTRIBUTE function s:symbol)) )
    (RELATION @new_plt_block ( (ATTRIBUTE block u:address) (ATTRIBUTE function s:symbol)) )
    (RELATION call_tls_get_addr ( (ATTRIBUTE Call u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION reg_def_use.used ( (ATTRIBUTE EA u:address) (ATTRIBUTE Var s:register) (ATTRIBUTE Index u:operand_index)) )
    (RELATION reg_used_for ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Type s:symbol)) )
    (RELATION reg_def_use.used_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Var s:register) (ATTRIBUTE Index u:operand_index)) )
    (RELATION no_return_call_refined ( (ATTRIBUTE EA u:address)) )
    (RELATION no_return_block ( (ATTRIBUTE EA u:address)) )
    (RELATION @delta_no_return_block ( (ATTRIBUTE EA u:address)) )
    (RELATION @new_no_return_block ( (ATTRIBUTE EA u:address)) )
    (RELATION no_return_call_propagated ( (ATTRIBUTE EA u:address)) )
    (RELATION @delta_no_return_call_propagated ( (ATTRIBUTE EA u:address)) )
    (RELATION @new_no_return_call_propagated ( (ATTRIBUTE EA u:address)) )
    (RELATION segment_target_range ( (ATTRIBUTE Beg u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Tmax u:address)) )
    (RELATION @delta_segment_target_range ( (ATTRIBUTE Beg u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Tmax u:address)) )
    (RELATION @new_segment_target_range ( (ATTRIBUTE Beg u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Tmax u:address)) )
    (RELATION self_contained_segment ( (ATTRIBUTE Beg u:address) (ATTRIBUTE End u:address)) )
    (RELATION @delta_self_contained_segment ( (ATTRIBUTE Beg u:address) (ATTRIBUTE End u:address)) )
    (RELATION @new_self_contained_segment ( (ATTRIBUTE Beg u:address) (ATTRIBUTE End u:address)) )
    (RELATION stack_def_use.block_last_def ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_def u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION @delta_stack_def_use.block_last_def ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_def u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION @new_stack_def_use.block_last_def ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_def u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION stack_def_use.last_def_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE EA_def u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION stack_def_use.live_var_def ( (ATTRIBUTE Block u:address) (ATTRIBUTE VarIdentity r:stack_var) (ATTRIBUTE LiveVar r:stack_var) (ATTRIBUTE EA_def u:address)) )
    (RELATION reg_def_use.defined_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Var s:register)) )
    (RELATION reg_def_use.ref_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Var s:register)) )
    (RELATION adjusts_stack_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE EA u:address) (ATTRIBUTE BaseReg s:register) (ATTRIBUTE Offset i:number)) )
    (RELATION block_instruction_next ( (ATTRIBUTE Block u:address) (ATTRIBUTE Before u:address) (ATTRIBUTE After u:address)) )
    (RELATION stack_base_reg_move ( (ATTRIBUTE Block u:address) (ATTRIBUTE EA u:address) (ATTRIBUTE Src s:register) (ATTRIBUTE Dst s:register)) )
    (RELATION stack_def_use.used_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Var r:stack_var) (ATTRIBUTE Index u:operand_index)) )
    (RELATION stack_def_use.defined_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION stack_def_use.ref_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION relocation_in_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Rel u:address) (ATTRIBUTE InsnOffset u:unsigned)) )
    (RELATION block_still_overlap ( (ATTRIBUTE Block1 u:address) (ATTRIBUTE Type1 s:block_type) (ATTRIBUTE Size1 u:unsigned) (ATTRIBUTE Block2 u:address) (ATTRIBUTE Type2 s:block_type) (ATTRIBUTE Size2 u:unsigned)) )
    (RELATION interval_schedule_tie ( (ATTRIBUTE BlockA u:address) (ATTRIBUTE TypeA s:block_type) (ATTRIBUTE SizeA u:unsigned) (ATTRIBUTE BlockB u:address) (ATTRIBUTE TypeB s:block_type) (ATTRIBUTE SizeB u:unsigned)) )
    (RELATION got_section ( (ATTRIBUTE name s:symbol)) )
    (RELATION reloc_type_relpc ( (ATTRIBUTE Type s:symbol)) )
    (RELATION relocation_adjustment ( (ATTRIBUTE EA u:address) (ATTRIBUTE Adjustment i:number) (ATTRIBUTE Reason s:symbol)) )
    (RELATION relocation_adjustment_total ( (ATTRIBUTE EA u:address) (ATTRIBUTE Adjustment i:number)) )
    (RELATION arch.cmp_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION cmp_immediate_to_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Imm_index u:operand_index) (ATTRIBUTE Immediate i:number)) )
    (RELATION reg_def_use.flow_def ( (ATTRIBUTE EA u:address) (ATTRIBUTE Var s:register) (ATTRIBUTE EA_next u:address) (ATTRIBUTE Value i:number)) )
    (RELATION reg_def_use.live_var_def ( (ATTRIBUTE Block u:address) (ATTRIBUTE VarIdentity s:register) (ATTRIBUTE LiveVar s:register) (ATTRIBUTE EA_def u:address)) )
    (RELATION cmp_reg_to_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg1 s:register) (ATTRIBUTE Reg2 s:register)) )
    (RELATION reloc_type_nameless ( (ATTRIBUTE Type s:symbol)) )
    (RELATION reloc_type_with_name ( (ATTRIBUTE Type s:symbol)) )
    (RELATION tls_operand_attribute ( (ATTRIBUTE Type s:symbol) (ATTRIBUTE Attribute s:symbol)) )
    (RELATION symbolic_expr_from_relocation ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Symbol s:symbol) (ATTRIBUTE Offset i:number) (ATTRIBUTE TargetEA u:address)) )
    (RELATION simple_data_access_pattern ( (ATTRIBUTE Address u:address) (ATTRIBUTE Op_index u:unsigned) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE FromWhere u:address)) )
    (RELATION step_limit ( (ATTRIBUTE Limit u:unsigned)) )
    (RELATION step_limit_small ( (ATTRIBUTE Limit u:unsigned)) )
    (RELATION limit_type_map ( (ATTRIBUTE CC s:condition_code) (ATTRIBUTE BranchLT s:limit_type) (ATTRIBUTE FallthroughLT s:limit_type) (ATTRIBUTE BranchOffset i:number) (ATTRIBUTE FallthroughOffset i:number)) )
    (RELATION arch.register_size_bits ( (ATTRIBUTE Reg s:input_reg) (ATTRIBUTE Size u:unsigned)) )
    (RELATION arch.extend_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Signed u:unsigned) (ATTRIBUTE SrcBits u:unsigned)) )
    (RELATION base_relative_jump ( (ATTRIBUTE EA_relop u:address) (ATTRIBUTE EA u:address)) )
    (RELATION @delta_base_relative_jump ( (ATTRIBUTE EA_relop u:address) (ATTRIBUTE EA u:address)) )
    (RELATION @new_base_relative_jump ( (ATTRIBUTE EA_relop u:address) (ATTRIBUTE EA u:address)) )
    (RELATION base_relative_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Dest u:address)) )
    (RELATION @delta_base_relative_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Dest u:address)) )
    (RELATION @new_base_relative_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Dest u:address)) )
    (RELATION base_relative_operation ( (ATTRIBUTE EA_relop u:address) (ATTRIBUTE EA u:address)) )
    (RELATION @delta_base_relative_operation ( (ATTRIBUTE EA_relop u:address) (ATTRIBUTE EA u:address)) )
    (RELATION @new_base_relative_operation ( (ATTRIBUTE EA_relop u:address) (ATTRIBUTE EA u:address)) )
    (RELATION block_next ( (ATTRIBUTE Block u:address) (ATTRIBUTE BlockEnd u:address) (ATTRIBUTE NextBlock u:address)) )
    (RELATION @delta_block_next ( (ATTRIBUTE Block u:address) (ATTRIBUTE BlockEnd u:address) (ATTRIBUTE NextBlock u:address)) )
    (RELATION @new_block_next ( (ATTRIBUTE Block u:address) (ATTRIBUTE BlockEnd u:address) (ATTRIBUTE NextBlock u:address)) )
    (RELATION cmp_defines ( (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE EA_dst u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION @delta_cmp_defines ( (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE EA_dst u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION @new_cmp_defines ( (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE EA_dst u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION compare_and_jump_immediate ( (ATTRIBUTE EA_cmp u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code) (ATTRIBUTE Reg s:register) (ATTRIBUTE Immediate i:number)) )
    (RELATION @delta_compare_and_jump_immediate ( (ATTRIBUTE EA_cmp u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code) (ATTRIBUTE Reg s:register) (ATTRIBUTE Immediate i:number)) )
    (RELATION @new_compare_and_jump_immediate ( (ATTRIBUTE EA_cmp u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code) (ATTRIBUTE Reg s:register) (ATTRIBUTE Immediate i:number)) )
    (RELATION compare_and_jump_indirect ( (ATTRIBUTE EA_cmp u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code) (ATTRIBUTE IndirectOp u:operand_code) (ATTRIBUTE Immediate i:number)) )
    (RELATION @delta_compare_and_jump_indirect ( (ATTRIBUTE EA_cmp u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code) (ATTRIBUTE IndirectOp u:operand_code) (ATTRIBUTE Immediate i:number)) )
    (RELATION @new_compare_and_jump_indirect ( (ATTRIBUTE EA_cmp u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code) (ATTRIBUTE IndirectOp u:operand_code) (ATTRIBUTE Immediate i:number)) )
    (RELATION compare_and_jump_register ( (ATTRIBUTE EA_cmp u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code) (ATTRIBUTE Reg1 s:register) (ATTRIBUTE Reg2 s:register)) )
    (RELATION @delta_compare_and_jump_register ( (ATTRIBUTE EA_cmp u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code) (ATTRIBUTE Reg1 s:register) (ATTRIBUTE Reg2 s:register)) )
    (RELATION @new_compare_and_jump_register ( (ATTRIBUTE EA_cmp u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code) (ATTRIBUTE Reg1 s:register) (ATTRIBUTE Reg2 s:register)) )
    (RELATION const_value_reg_used ( (ATTRIBUTE UsedEA u:address) (ATTRIBUTE EADef u:address) (ATTRIBUTE EARegDef u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Value i:number)) )
    (RELATION @delta_const_value_reg_used ( (ATTRIBUTE UsedEA u:address) (ATTRIBUTE EADef u:address) (ATTRIBUTE EARegDef u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Value i:number)) )
    (RELATION @new_const_value_reg_used ( (ATTRIBUTE UsedEA u:address) (ATTRIBUTE EADef u:address) (ATTRIBUTE EARegDef u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Value i:number)) )
    (RELATION def_used_for_address ( (ATTRIBUTE EA_def u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Type s:symbol)) )
    (RELATION @delta_def_used_for_address ( (ATTRIBUTE EA_def u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Type s:symbol)) )
    (RELATION @new_def_used_for_address ( (ATTRIBUTE EA_def u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Type s:symbol)) )
    (RELATION flags_and_jump_pair ( (ATTRIBUTE EA_flags u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code)) )
    (RELATION @delta_flags_and_jump_pair ( (ATTRIBUTE EA_flags u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code)) )
    (RELATION @new_flags_and_jump_pair ( (ATTRIBUTE EA_flags u:address) (ATTRIBUTE EA_jmp u:address) (ATTRIBUTE CC s:condition_code)) )
    (RELATION got_relative_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Dest u:address)) )
    (RELATION @delta_got_relative_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Dest u:address)) )
    (RELATION @new_got_relative_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Dest u:address)) )
    (RELATION jump_table_element_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE TableStart u:address) (ATTRIBUTE RegIndex s:register)) )
    (RELATION @delta_jump_table_element_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE TableStart u:address) (ATTRIBUTE RegIndex s:register)) )
    (RELATION @new_jump_table_element_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE TableStart u:address) (ATTRIBUTE RegIndex s:register)) )
    (RELATION jump_table_max ( (ATTRIBUTE TableStart u:address) (ATTRIBUTE TableEnd u:address)) )
    (RELATION @delta_jump_table_max ( (ATTRIBUTE TableStart u:address) (ATTRIBUTE TableEnd u:address)) )
    (RELATION @new_jump_table_max ( (ATTRIBUTE TableStart u:address) (ATTRIBUTE TableEnd u:address)) )
    (RELATION jump_table_signed ( (ATTRIBUTE TableStart u:address) (ATTRIBUTE Signed u:unsigned)) )
    (RELATION @delta_jump_table_signed ( (ATTRIBUTE TableStart u:address) (ATTRIBUTE Signed u:unsigned)) )
    (RELATION @new_jump_table_signed ( (ATTRIBUTE TableStart u:address) (ATTRIBUTE Signed u:unsigned)) )
    (RELATION jump_table_start ( (ATTRIBUTE EA_jump u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE TableStart u:address) (ATTRIBUTE TableRef u:address) (ATTRIBUTE Scale i:number)) )
    (RELATION @delta_jump_table_start ( (ATTRIBUTE EA_jump u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE TableStart u:address) (ATTRIBUTE TableRef u:address) (ATTRIBUTE Scale i:number)) )
    (RELATION @new_jump_table_start ( (ATTRIBUTE EA_jump u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE TableStart u:address) (ATTRIBUTE TableRef u:address) (ATTRIBUTE Scale i:number)) )
    (RELATION jump_table_target ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION @delta_jump_table_target ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION @new_jump_table_target ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION last_value_reg_limit ( (ATTRIBUTE From u:address) (ATTRIBUTE To u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Value i:number) (ATTRIBUTE LimitType s:limit_type) (ATTRIBUTE Steps u:unsigned)) )
    (RELATION @delta_last_value_reg_limit ( (ATTRIBUTE From u:address) (ATTRIBUTE To u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Value i:number) (ATTRIBUTE LimitType s:limit_type) (ATTRIBUTE Steps u:unsigned)) )
    (RELATION @new_last_value_reg_limit ( (ATTRIBUTE From u:address) (ATTRIBUTE To u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Value i:number) (ATTRIBUTE LimitType s:limit_type) (ATTRIBUTE Steps u:unsigned)) )
    (RELATION no_value_reg_limit ( (ATTRIBUTE EA_jmp u:address)) )
    (RELATION @delta_no_value_reg_limit ( (ATTRIBUTE EA_jmp u:address)) )
    (RELATION @new_no_value_reg_limit ( (ATTRIBUTE EA_jmp u:address)) )
    (RELATION reg_def_use.def_used ( (ATTRIBUTE EA_def u:address) (ATTRIBUTE Var s:register) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index_used u:operand_index)) )
    (RELATION @delta_reg_def_use.def_used ( (ATTRIBUTE EA_def u:address) (ATTRIBUTE Var s:register) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index_used u:operand_index)) )
    (RELATION @new_reg_def_use.def_used ( (ATTRIBUTE EA_def u:address) (ATTRIBUTE Var s:register) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index_used u:operand_index)) )
    (RELATION reg_def_use.live_var_at_block_end ( (ATTRIBUTE Block u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var s:register)) )
    (RELATION @delta_reg_def_use.live_var_at_block_end ( (ATTRIBUTE Block u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var s:register)) )
    (RELATION @new_reg_def_use.live_var_at_block_end ( (ATTRIBUTE Block u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var s:register)) )
    (RELATION reg_def_use.live_var_at_prior_used ( (ATTRIBUTE EA_used u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var s:register)) )
    (RELATION @delta_reg_def_use.live_var_at_prior_used ( (ATTRIBUTE EA_used u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var s:register)) )
    (RELATION @new_reg_def_use.live_var_at_prior_used ( (ATTRIBUTE EA_used u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var s:register)) )
    (RELATION reg_def_use.live_var_used ( (ATTRIBUTE Block u:address) (ATTRIBUTE LiveVar s:register) (ATTRIBUTE UsedVar s:register) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Moves u:unsigned)) )
    (RELATION @delta_reg_def_use.live_var_used ( (ATTRIBUTE Block u:address) (ATTRIBUTE LiveVar s:register) (ATTRIBUTE UsedVar s:register) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Moves u:unsigned)) )
    (RELATION @new_reg_def_use.live_var_used ( (ATTRIBUTE Block u:address) (ATTRIBUTE LiveVar s:register) (ATTRIBUTE UsedVar s:register) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Moves u:unsigned)) )
    (RELATION reg_def_use.return_val_used ( (ATTRIBUTE EA_call u:address) (ATTRIBUTE Callee u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index_used u:operand_index)) )
    (RELATION @delta_reg_def_use.return_val_used ( (ATTRIBUTE EA_call u:address) (ATTRIBUTE Callee u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index_used u:operand_index)) )
    (RELATION @new_reg_def_use.return_val_used ( (ATTRIBUTE EA_call u:address) (ATTRIBUTE Callee u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index_used u:operand_index)) )
    (RELATION reg_has_base_image ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION @delta_reg_has_base_image ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION @new_reg_has_base_image ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION reg_has_got ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION @delta_reg_has_got ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION @new_reg_has_got ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION reg_reg_arithmetic_operation_defs ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg_def s:register) (ATTRIBUTE EA_def1 u:address) (ATTRIBUTE Reg1 s:register) (ATTRIBUTE EA_def2 u:address) (ATTRIBUTE Reg2 s:register) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION @delta_reg_reg_arithmetic_operation_defs ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg_def s:register) (ATTRIBUTE EA_def1 u:address) (ATTRIBUTE Reg1 s:register) (ATTRIBUTE EA_def2 u:address) (ATTRIBUTE Reg2 s:register) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION @new_reg_reg_arithmetic_operation_defs ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg_def s:register) (ATTRIBUTE EA_def1 u:address) (ATTRIBUTE Reg1 s:register) (ATTRIBUTE EA_def2 u:address) (ATTRIBUTE Reg2 s:register) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION relative_jump_table_entry_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE TableStart u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE Scale i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION @delta_relative_jump_table_entry_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE TableStart u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE Scale i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION @new_relative_jump_table_entry_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE TableStart u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE Scale i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION stack_def_use.def_used ( (ATTRIBUTE EA_def u:address) (ATTRIBUTE VarDef r:stack_var) (ATTRIBUTE EA_used u:address) (ATTRIBUTE VarUsed r:stack_var) (ATTRIBUTE Index_used u:operand_index)) )
    (RELATION @delta_stack_def_use.def_used ( (ATTRIBUTE EA_def u:address) (ATTRIBUTE VarDef r:stack_var) (ATTRIBUTE EA_used u:address) (ATTRIBUTE VarUsed r:stack_var) (ATTRIBUTE Index_used u:operand_index)) )
    (RELATION @new_stack_def_use.def_used ( (ATTRIBUTE EA_def u:address) (ATTRIBUTE VarDef r:stack_var) (ATTRIBUTE EA_used u:address) (ATTRIBUTE VarUsed r:stack_var) (ATTRIBUTE Index_used u:operand_index)) )
    (RELATION stack_def_use.live_var_at_block_end ( (ATTRIBUTE Block u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION @delta_stack_def_use.live_var_at_block_end ( (ATTRIBUTE Block u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION @new_stack_def_use.live_var_at_block_end ( (ATTRIBUTE Block u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION stack_def_use.live_var_at_prior_used ( (ATTRIBUTE EA_used u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION @delta_stack_def_use.live_var_at_prior_used ( (ATTRIBUTE EA_used u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION @new_stack_def_use.live_var_at_prior_used ( (ATTRIBUTE EA_used u:address) (ATTRIBUTE BlockUsed u:address) (ATTRIBUTE Var r:stack_var)) )
    (RELATION stack_def_use.live_var_used ( (ATTRIBUTE Block u:address) (ATTRIBUTE LiveVar r:stack_var) (ATTRIBUTE UsedVar r:stack_var) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Moves u:unsigned)) )
    (RELATION @delta_stack_def_use.live_var_used ( (ATTRIBUTE Block u:address) (ATTRIBUTE LiveVar r:stack_var) (ATTRIBUTE UsedVar r:stack_var) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Moves u:unsigned)) )
    (RELATION @new_stack_def_use.live_var_used ( (ATTRIBUTE Block u:address) (ATTRIBUTE LiveVar r:stack_var) (ATTRIBUTE UsedVar r:stack_var) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Moves u:unsigned)) )
    (RELATION stack_def_use.live_var_used_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE EA u:address) (ATTRIBUTE LiveVar r:stack_var) (ATTRIBUTE UsedVar r:stack_var) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Moves u:unsigned)) )
    (RELATION @delta_stack_def_use.live_var_used_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE EA u:address) (ATTRIBUTE LiveVar r:stack_var) (ATTRIBUTE UsedVar r:stack_var) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Moves u:unsigned)) )
    (RELATION @new_stack_def_use.live_var_used_in_block ( (ATTRIBUTE Block u:address) (ATTRIBUTE EA u:address) (ATTRIBUTE LiveVar r:stack_var) (ATTRIBUTE UsedVar r:stack_var) (ATTRIBUTE EA_used u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Moves u:unsigned)) )
    (RELATION tls_desc_call ( (ATTRIBUTE Load u:address) (ATTRIBUTE Call u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION @delta_tls_desc_call ( (ATTRIBUTE Load u:address) (ATTRIBUTE Call u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION @new_tls_desc_call ( (ATTRIBUTE Load u:address) (ATTRIBUTE Call u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION tls_get_addr ( (ATTRIBUTE Load u:address) (ATTRIBUTE Call u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION @delta_tls_get_addr ( (ATTRIBUTE Load u:address) (ATTRIBUTE Call u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION @new_tls_get_addr ( (ATTRIBUTE Load u:address) (ATTRIBUTE Call u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION value_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_reg1 u:address) (ATTRIBUTE Reg1 s:reg_nullable) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE Offset i:number) (ATTRIBUTE Steps u:unsigned)) btree_delete)
    (RELATION @delta_value_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_reg1 u:address) (ATTRIBUTE Reg1 s:reg_nullable) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE Offset i:number) (ATTRIBUTE Steps u:unsigned)) )
    (RELATION @new_value_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_reg1 u:address) (ATTRIBUTE Reg1 s:reg_nullable) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE Offset i:number) (ATTRIBUTE Steps u:unsigned)) )
    (RELATION @reject_value_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_reg1 u:address) (ATTRIBUTE Reg1 s:reg_nullable) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE Offset i:number) (ATTRIBUTE Steps u:unsigned)) )
    (RELATION @delete_value_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_reg1 u:address) (ATTRIBUTE Reg1 s:reg_nullable) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE Offset i:number) (ATTRIBUTE Steps u:unsigned)) )
    (RELATION value_reg_edge ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_reg1 u:address) (ATTRIBUTE Reg1 s:register) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION @delta_value_reg_edge ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_reg1 u:address) (ATTRIBUTE Reg1 s:register) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION @new_value_reg_edge ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_reg1 u:address) (ATTRIBUTE Reg1 s:register) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION value_reg_limit ( (ATTRIBUTE From u:address) (ATTRIBUTE To u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Value i:number) (ATTRIBUTE LimitType s:limit_type)) )
    (RELATION @delta_value_reg_limit ( (ATTRIBUTE From u:address) (ATTRIBUTE To u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Value i:number) (ATTRIBUTE LimitType s:limit_type)) )
    (RELATION @new_value_reg_limit ( (ATTRIBUTE From u:address) (ATTRIBUTE To u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Value i:number) (ATTRIBUTE LimitType s:limit_type)) )
    (RELATION value_reg_unsupported ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION @delta_value_reg_unsupported ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION @new_value_reg_unsupported ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION tls_global_dynamic ( (ATTRIBUTE EA u:address)) )
    (RELATION @delta_tls_global_dynamic ( (ATTRIBUTE EA u:address)) )
    (RELATION @new_tls_global_dynamic ( (ATTRIBUTE EA u:address)) )
    (RELATION tls_local_dynamic ( (ATTRIBUTE EA u:address)) )
    (RELATION tls_relative_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Dest u:address) (ATTRIBUTE Type s:symbol)) )
    (RELATION symbolic_operand_candidate ( (ATTRIBUTE ea u:address) (ATTRIBUTE operand_index u:operand_index) (ATTRIBUTE Dest u:address) (ATTRIBUTE Type s:symbol)) )
    (RELATION value_reg_max_mult ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE MaxMult i:number)) )
    (RELATION best_value_reg ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE EA_from u:address) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE Offset i:number) (ATTRIBUTE type s:symbol)) )
    (RELATION value_reg_at_operand_loop ( (ATTRIBUTE EA u:address) (ATTRIBUTE Op_index u:operand_index) (ATTRIBUTE Reg s:reg_nullable) (ATTRIBUTE EA_from u:address) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number) (ATTRIBUTE Type s:symbol)) )
    (RELATION value_reg_at_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Op_index u:operand_index) (ATTRIBUTE Reg s:reg_nullable) (ATTRIBUTE EA_from u:address) (ATTRIBUTE Mult i:number) (ATTRIBUTE Offset i:number) (ATTRIBUTE Type s:symbol)) )
    (RELATION data_access_pattern_candidate ( (ATTRIBUTE Address u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE FromWhere u:address)) )
    (RELATION data_access_pattern_candidate_refined ( (ATTRIBUTE Address u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE FromWhere u:address)) )
    (RELATION dap_location ( (ATTRIBUTE Address u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION dap_max_mult ( (ATTRIBUTE Address u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Max i:number)) )
    (RELATION data_access_pattern ( (ATTRIBUTE Address u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Multiplier i:number) (ATTRIBUTE FromWhere u:address)) )
    (RELATION data_access_pattern_non_zero ( (ATTRIBUTE Address u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Multiplier u:unsigned) (ATTRIBUTE FromWhere u:address)) )
    (RELATION next_data_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE Next u:address)) )
    (RELATION synchronous_access_barrier_after_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE Barrier u:address)) )
    (RELATION synchronous_access ( (ATTRIBUTE RefAccess u:address) (ATTRIBUTE LastEA u:address)) )
    (RELATION @delta_synchronous_access ( (ATTRIBUTE RefAccess u:address) (ATTRIBUTE LastEA u:address)) )
    (RELATION @new_synchronous_access ( (ATTRIBUTE RefAccess u:address) (ATTRIBUTE LastEA u:address)) )
    (RELATION first_synchronous_access ( (ATTRIBUTE Ref u:address) (ATTRIBUTE Access u:address)) )
    (RELATION next_dyssynchronous_data_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE Next u:address)) )
    (RELATION base_relative_symbolic_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Dest u:address)) )
    (RELATION missed_jump_table ( (ATTRIBUTE EA_jump u:address)) )
    (RELATION arch.multiplication_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION arch.shift_rotate_operation ( (ATTRIBUTE Operation s:symbol)) )
    (RELATION def_register_is_not_base_address ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register)) )
    (RELATION exception_section ( (ATTRIBUTE name s:symbol)) )
    (RELATION special_data_section ( (ATTRIBUTE name s:symbol)) )
    (RELATION regular_data_section ( (ATTRIBUTE name s:symbol)) )
    (RELATION addr_outside_section_used_for_memory_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE Addr u:address) (ATTRIBUTE AddrAccessed u:address)) )
    (RELATION dest_enlarged_data_section ( (ATTRIBUTE EA u:address) (ATTRIBUTE Reg s:register) (ATTRIBUTE NewDest u:address) (ATTRIBUTE Beg u:address) (ATTRIBUTE End u:address) (ATTRIBUTE OldBeg u:address) (ATTRIBUTE OldEnd u:address)) )
    (RELATION moved_immediate_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE Op_index u:operand_index) (ATTRIBUTE Immediate u:address) (ATTRIBUTE New_immmediate u:address) (ATTRIBUTE Distance u:unsigned)) )
    (RELATION low_pass_mask ( (ATTRIBUTE Mask i:number)) )
    (RELATION low_pass_filter ( (ATTRIBUTE EA u:address)) )
    (RELATION symbolic_operand_point ( (ATTRIBUTE ea u:address) (ATTRIBUTE operand_index u:operand_index) (ATTRIBUTE points i:number) (ATTRIBUTE why s:symbol)) )
    (RELATION symbolic_operand ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Value u:address) (ATTRIBUTE Type s:symbol)) )
    (RELATION +disconnected1 () )
    (RELATION labeled_data_candidate ( (ATTRIBUTE EA u:address)) )
    (RELATION after_address_in_data ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_next u:address)) )
    (RELATION @delta_after_address_in_data ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_next u:address)) )
    (RELATION @new_after_address_in_data ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_next u:address)) )
    (RELATION next_address_in_data ( (ATTRIBUTE EA u:address) (ATTRIBUTE EA_next u:address)) )
    (RELATION address_array_aux ( (ATTRIBUTE EA u:address) (ATTRIBUTE Distance u:unsigned) (ATTRIBUTE type s:symbol) (ATTRIBUTE InitialEA u:address)) )
    (RELATION @delta_address_array_aux ( (ATTRIBUTE EA u:address) (ATTRIBUTE Distance u:unsigned) (ATTRIBUTE type s:symbol) (ATTRIBUTE InitialEA u:address)) )
    (RELATION @new_address_array_aux ( (ATTRIBUTE EA u:address) (ATTRIBUTE Distance u:unsigned) (ATTRIBUTE type s:symbol) (ATTRIBUTE InitialEA u:address)) )
    (RELATION address_array ( (ATTRIBUTE EA u:address) (ATTRIBUTE Distance u:unsigned) (ATTRIBUTE InitialEA u:address)) )
    (RELATION boundary_sym_expr ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dest u:address)) )
    (RELATION data_limit ( (ATTRIBUTE EA u:address)) )
    (RELATION data_limit_after_access ( (ATTRIBUTE Access u:address) (ATTRIBUTE DataLimit u:address)) )
    (RELATION preferred_data_access ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE AccessEA u:address)) )
    (RELATION string_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Encoding s:symbol)) )
    (RELATION @delta_string_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Encoding s:symbol)) )
    (RELATION @new_string_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Encoding s:symbol)) )
    (RELATION string_candidate_refined ( (ATTRIBUTE EA u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Encoding s:symbol)) )
    (RELATION @delta_string_candidate_refined ( (ATTRIBUTE EA u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Encoding s:symbol)) )
    (RELATION @new_string_candidate_refined ( (ATTRIBUTE EA u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Encoding s:symbol)) )
    (RELATION next_data_limit ( (ATTRIBUTE EA u:address) (ATTRIBUTE Next u:address)) )
    (RELATION moved_displacement_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE Op_index u:operand_index) (ATTRIBUTE Dest u:address) (ATTRIBUTE NewDest u:address) (ATTRIBUTE Distance u:unsigned)) )
    (RELATION discarded_jump_table_entry ( (ATTRIBUTE TableStart u:address) (ATTRIBUTE TableRef u:address) (ATTRIBUTE EA u:address)) )
    (RELATION @delta_discarded_jump_table_entry ( (ATTRIBUTE TableStart u:address) (ATTRIBUTE TableRef u:address) (ATTRIBUTE EA u:address)) )
    (RELATION @new_discarded_jump_table_entry ( (ATTRIBUTE TableStart u:address) (ATTRIBUTE TableRef u:address) (ATTRIBUTE EA u:address)) )
    (RELATION relative_jump_table_entry ( (ATTRIBUTE EA u:address) (ATTRIBUTE TableStart u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE Scale i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION @delta_relative_jump_table_entry ( (ATTRIBUTE EA u:address) (ATTRIBUTE TableStart u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE Scale i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION @new_relative_jump_table_entry ( (ATTRIBUTE EA u:address) (ATTRIBUTE TableStart u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Reference u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE Scale i:number) (ATTRIBUTE Offset i:number)) )
    (RELATION symbol_minus_symbol_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Symbol1 u:address) (ATTRIBUTE Symbol2 u:address) (ATTRIBUTE Scale u:unsigned) (ATTRIBUTE Offset i:number)) )
    (RELATION data_object_candidate ( (ATTRIBUTE ea u:address) (ATTRIBUTE size u:unsigned) (ATTRIBUTE type s:symbol)) )
    (RELATION data_object_conflict ( (ATTRIBUTE ea u:address) (ATTRIBUTE size u:unsigned) (ATTRIBUTE type s:symbol) (ATTRIBUTE ea2 u:address) (ATTRIBUTE size2 u:unsigned) (ATTRIBUTE type2 s:symbol)) )
    (RELATION label_conflict ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Kind s:symbol)) )
    (RELATION data_object_point ( (ATTRIBUTE ea u:address) (ATTRIBUTE size u:unsigned) (ATTRIBUTE type s:symbol) (ATTRIBUTE points i:number) (ATTRIBUTE why s:symbol)) )
    (RELATION data_object_total_points ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Type s:symbol) (ATTRIBUTE Points i:number)) )
    (RELATION discarded_data_object ( (ATTRIBUTE ea u:address) (ATTRIBUTE size u:unsigned) (ATTRIBUTE type s:symbol)) )
    (RELATION data_object ( (ATTRIBUTE ea u:address) (ATTRIBUTE size u:unsigned) (ATTRIBUTE type s:symbol)) )
    (RELATION string ( (ATTRIBUTE EA u:address) (ATTRIBUTE End u:address) (ATTRIBUTE Encoding s:symbol)) )
    (RELATION inferred_main_function ( (ATTRIBUTE Main_location u:address)) )
    (RELATION alignment ( (ATTRIBUTE EA u:address) (ATTRIBUTE AlignInBits u:unsigned)) )
    (RELATION elf_avoid_symbols ( (ATTRIBUTE SymbolName s:symbol)) )
    (RELATION avoid_symbols ( (ATTRIBUTE SymbolName s:symbol)) )
    (RELATION cie_entry ( (ATTRIBUTE CieAddr u:address) (ATTRIBUTE Length u:unsigned) (ATTRIBUTE CodeAlignmentFactor u:unsigned) (ATTRIBUTE DataAlignmentFactor i:number)) )
    (RELATION moved_pc_relative_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Val u:address) (ATTRIBUTE NewVal u:address) (ATTRIBUTE Distance u:unsigned)) )
    (RELATION last_fde ( (ATTRIBUTE Addr u:address)) )
    (RELATION cie_encoding ( (ATTRIBUTE CieAddr u:address) (ATTRIBUTE FdeEncoding u:unsigned) (ATTRIBUTE LsdaEncoding u:unsigned)) )
    (RELATION cie_personality ( (ATTRIBUTE CieAddr u:address) (ATTRIBUTE Personality u:address) (ATTRIBUTE PersonalityPos u:address) (ATTRIBUTE PersonalitySize u:unsigned) (ATTRIBUTE Encoding u:unsigned)) )
    (RELATION dwarf_encoding_size ( (ATTRIBUTE Encoding u:unsigned) (ATTRIBUTE Size u:unsigned)) )
    (RELATION fde_pointer_locations ( (ATTRIBUTE addr u:address) (ATTRIBUTE startLocation u:address) (ATTRIBUTE endLocation u:address) (ATTRIBUTE endSize u:unsigned) (ATTRIBUTE lsdaLocation u:address) (ATTRIBUTE lsdaSize u:unsigned)) )
    (RELATION lsda ( (ATTRIBUTE lsdaAddress u:address) (ATTRIBUTE callsiteTable u:address) (ATTRIBUTE callsiteTableEncoding u:unsigned) (ATTRIBUTE callSiteTableLength u:unsigned) (ATTRIBUTE typeTable u:address) (ATTRIBUTE typeTableEncoding u:unsigned) (ATTRIBUTE landingPadBaseAddress u:address)) )
    (RELATION lsda_type_entry ( (ATTRIBUTE lsdaTypeTableAddress u:address) (ATTRIBUTE index u:unsigned) (ATTRIBUTE address u:address)) )
    (RELATION option ( (ATTRIBUTE Option s:symbol)) )
    (RELATION symbolic_data ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Value u:address)) )
    (RELATION moved_label_candidate ( (ATTRIBUTE EA u:address) (ATTRIBUTE Op_index u:operand_index) (ATTRIBUTE Dest u:address) (ATTRIBUTE NewDest u:address) (ATTRIBUTE Priority u:unsigned)) )
    (RELATION moved_label ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Dest u:address) (ATTRIBUTE NewDest u:address)) )
    (RELATION bad_symbol_constant ( (ATTRIBUTE EA u:address) (ATTRIBUTE cnt i:number)) )
    (RELATION code_pointer_in_data ( (ATTRIBUTE EA u:address) (ATTRIBUTE Val u:address)) )
    (RELATION fde_instruction ( (ATTRIBUTE FdeAddr u:address) (ATTRIBUTE Index u:unsigned) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE InsnAddr u:address) (ATTRIBUTE Insn s:symbol) (ATTRIBUTE Op1 i:number) (ATTRIBUTE Op2 i:number)) )
    (RELATION fde_instruction_ref ( (ATTRIBUTE FdeAddr u:address) (ATTRIBUTE Index u:unsigned) (ATTRIBUTE LocalIndex u:unsigned) (ATTRIBUTE ReferenceAddr u:address)) )
    (RELATION @delta_fde_instruction_ref ( (ATTRIBUTE FdeAddr u:address) (ATTRIBUTE Index u:unsigned) (ATTRIBUTE LocalIndex u:unsigned) (ATTRIBUTE ReferenceAddr u:address)) )
    (RELATION @new_fde_instruction_ref ( (ATTRIBUTE FdeAddr u:address) (ATTRIBUTE Index u:unsigned) (ATTRIBUTE LocalIndex u:unsigned) (ATTRIBUTE ReferenceAddr u:address)) )
    (RELATION last_fde_instruction ( (ATTRIBUTE FdeAddr u:address) (ATTRIBUTE Index u:unsigned)) )
    (RELATION endproc_local_index ( (ATTRIBUTE FdeAddr u:address) (ATTRIBUTE LocalIndex u:unsigned)) )
    (RELATION lsda_pointer_locations ( (ATTRIBUTE lsdaAddress u:address) (ATTRIBUTE typeTablePointerLocation u:address) (ATTRIBUTE callsiteTablePointerLoc u:address)) )
    (RELATION symbol_minus_symbol ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Symbol1 u:address) (ATTRIBUTE Symbol2 u:address) (ATTRIBUTE Scale u:unsigned) (ATTRIBUTE Offset i:number)) )
    (RELATION block_needs_splitting_at ( (ATTRIBUTE EA u:address)) )
    (RELATION split_block ( (ATTRIBUTE block u:address)) )
    (RELATION code_in_split_block ( (ATTRIBUTE ea u:address) (ATTRIBUTE block u:address)) )
    (RELATION @delta_code_in_split_block ( (ATTRIBUTE ea u:address) (ATTRIBUTE block u:address)) )
    (RELATION @new_code_in_split_block ( (ATTRIBUTE ea u:address) (ATTRIBUTE block u:address)) )
    (RELATION moved_data_label ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Dest u:address) (ATTRIBUTE NewDest u:address)) )
    (RELATION block_needs_merging ( (ATTRIBUTE block u:address)) )
    (RELATION refined_block ( (ATTRIBUTE block u:address)) )
    (RELATION code_in_refined_block ( (ATTRIBUTE ea u:address) (ATTRIBUTE block u:address)) )
    (RELATION @delta_code_in_refined_block ( (ATTRIBUTE ea u:address) (ATTRIBUTE block u:address)) )
    (RELATION @new_code_in_refined_block ( (ATTRIBUTE ea u:address) (ATTRIBUTE block u:address)) )
    (RELATION main_function ( (ATTRIBUTE ea u:address)) )
    (RELATION block_has_non_nop ( (ATTRIBUTE Block u:address)) )
    (RELATION nop_block ( (ATTRIBUTE Block u:address)) )
    (RELATION refined_block_last_instruction ( (ATTRIBUTE block u:address) (ATTRIBUTE EA u:address)) )
    (RELATION block_information ( (ATTRIBUTE Block u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE StartAddress u:address) (ATTRIBUTE EndAddress u:address)) )
    (RELATION next_refined_block_in_byte_interval ( (ATTRIBUTE Block u:address) (ATTRIBUTE NextBlock u:address)) )
    (RELATION fde_block_addresses ( (ATTRIBUTE FdeAddr u:address) (ATTRIBUTE StartAddr u:address) (ATTRIBUTE EndAddr u:address)) )
    (RELATION fde_instruction_block_offset ( (ATTRIBUTE FdeAddr u:address) (ATTRIBUTE Index u:unsigned) (ATTRIBUTE LocalIndex u:unsigned) (ATTRIBUTE BlockAddr u:address) (ATTRIBUTE Offset u:unsigned)) )
    (RELATION padding ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned)) )
    (RELATION jump_table ( (ATTRIBUTE Src u:address) (ATTRIBUTE Memory u:address)) )
    (RELATION @delta_jump_table ( (ATTRIBUTE Src u:address) (ATTRIBUTE Memory u:address)) )
    (RELATION @new_jump_table ( (ATTRIBUTE Src u:address) (ATTRIBUTE Memory u:address)) )
    (RELATION resolved_transfer ( (ATTRIBUTE EA u:address) (ATTRIBUTE Dest u:address) (ATTRIBUTE Type s:symbol)) )
    (RELATION function_inference.function_entry ( (ATTRIBUTE Block u:address)) )
    (RELATION inferred_special_symbol ( (ATTRIBUTE EA u:address) (ATTRIBUTE SymbolName s:symbol) (ATTRIBUTE Scope s:symbol) (ATTRIBUTE Visibility s:symbol) (ATTRIBUTE Type s:symbol) (ATTRIBUTE Pos s:symbol_position)) )
    (RELATION symbol_score ( (ATTRIBUTE EA u:address) (ATTRIBUTE SymbolName s:symbol) (ATTRIBUTE Type s:symbol) (ATTRIBUTE Pos s:symbol_position) (ATTRIBUTE Score u:unsigned)) )
    (RELATION best_func_symbol ( (ATTRIBUTE EA u:address) (ATTRIBUTE SymbolName s:symbol)) )
    (RELATION function_inference.function_entry_name ( (ATTRIBUTE Block u:address) (ATTRIBUTE Name s:symbol)) )
    (RELATION function_inference.function_without_callframe ( (ATTRIBUTE Block u:address)) )
    (RELATION function_inference.in_function_initial ( (ATTRIBUTE Block u:address) (ATTRIBUTE Function u:address)) )
    (RELATION function_inference.not_in_function_initial ( (ATTRIBUTE Block u:address)) )
    (RELATION function_inference.in_function ( (ATTRIBUTE Block u:address) (ATTRIBUTE Function u:address)) )
    (RELATION @delta_function_inference.in_function ( (ATTRIBUTE Block u:address) (ATTRIBUTE Function u:address)) )
    (RELATION @new_function_inference.in_function ( (ATTRIBUTE Block u:address) (ATTRIBUTE Function u:address)) )
    (RELATION cfg_edge ( (ATTRIBUTE src u:address) (ATTRIBUTE dest u:address) (ATTRIBUTE conditional s:symbol) (ATTRIBUTE indirect s:symbol) (ATTRIBUTE type s:symbol)) )
    (RELATION @delta_cfg_edge ( (ATTRIBUTE src u:address) (ATTRIBUTE dest u:address) (ATTRIBUTE conditional s:symbol) (ATTRIBUTE indirect s:symbol) (ATTRIBUTE type s:symbol)) )
    (RELATION @new_cfg_edge ( (ATTRIBUTE src u:address) (ATTRIBUTE dest u:address) (ATTRIBUTE conditional s:symbol) (ATTRIBUTE indirect s:symbol) (ATTRIBUTE type s:symbol)) )
    (RELATION labeled_ea ( (ATTRIBUTE Ea u:address)) )
    (RELATION best_symexpr_symbol ( (ATTRIBUTE EA u:address) (ATTRIBUTE SymbolName s:symbol) (ATTRIBUTE Pos s:symbol_position)) )
    (RELATION symbolic_expr ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Symbol s:symbol) (ATTRIBUTE Offset i:number)) )
    (RELATION symbolic_expr_symbol_minus_symbol ( (ATTRIBUTE EA u:address) (ATTRIBUTE Size u:unsigned) (ATTRIBUTE Symbol s:symbol) (ATTRIBUTE Symbol2 s:symbol) (ATTRIBUTE Scale u:unsigned) (ATTRIBUTE Offset i:number)) )
    (RELATION got_reference ( (ATTRIBUTE Got_entry u:address) (ATTRIBUTE Symbol s:symbol)) )
    (RELATION missing_relocation_handling ( (ATTRIBUTE EA u:address)) )
    (RELATION symbolic_operand_attribute ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:unsigned) (ATTRIBUTE Attribute s:symbol)) )
    (RELATION symbolic_expr_attribute ( (ATTRIBUTE ea u:address) (ATTRIBUTE attribute s:symbol)) )
    (RELATION bss_data ( (ATTRIBUTE ea u:address)) )
    (RELATION inferred_symbol ( (ATTRIBUTE EA u:address) (ATTRIBUTE SymbolName s:symbol) (ATTRIBUTE Scope s:symbol) (ATTRIBUTE Visibility s:symbol) (ATTRIBUTE Type s:symbol) (ATTRIBUTE Pos s:symbol_position)) )
    (RELATION pointer_to_external_symbol ( (ATTRIBUTE DataPointer u:address) (ATTRIBUTE Symbol s:symbol)) )
    (RELATION resolved_transfer_to_symbol ( (ATTRIBUTE EA u:address) (ATTRIBUTE Symbol s:symbol) (ATTRIBUTE Type s:symbol)) )
    (RELATION cfg_edge_to_symbol ( (ATTRIBUTE src u:address) (ATTRIBUTE Symbol s:symbol) (ATTRIBUTE conditional s:symbol) (ATTRIBUTE indirect s:symbol) (ATTRIBUTE type s:symbol)) )
    (RELATION cfg_edge_to_top ( (ATTRIBUTE src u:address) (ATTRIBUTE conditional s:symbol) (ATTRIBUTE type s:symbol)) )
    (RELATION symbol_at_end ( (ATTRIBUTE EA u:address) (ATTRIBUTE SymbolName s:symbol)) )
    (RELATION data_object_boundary ( (ATTRIBUTE EA u:address)) )
    (RELATION false_negative ( (ATTRIBUTE EA u:address)) )
    (RELATION false_positive ( (ATTRIBUTE EA u:address)) )
    (RELATION moved_label_class ( (ATTRIBUTE EA u:address) (ATTRIBUTE Index u:operand_index) (ATTRIBUTE Reason s:symbol)) )
    (RELATION cfi_operand_is_register ( (ATTRIBUTE Insn s:symbol) (ATTRIBUTE OpNumber u:unsigned)) )
    (RELATION dwarf_to_cfi ( (ATTRIBUTE DwarfInsn s:symbol) (ATTRIBUTE OpNumber u:unsigned) (ATTRIBUTE CfiInsn s:symbol)) )
    (RELATION cfi_directive ( (ATTRIBUTE BlockAddress u:address) (ATTRIBUTE Offset u:unsigned) (ATTRIBUTE LocalIndex u:unsigned) (ATTRIBUTE directive s:symbol) (ATTRIBUTE ReferenceSym s:symbol) (ATTRIBUTE Nargs u:unsigned) (ATTRIBUTE arg1 i:number) (ATTRIBUTE arg2 i:number)) )
    (RELATION pe_exception_handler ( (ATTRIBUTE EA u:address)) )
    (RELATION pe_load_config ( (ATTRIBUTE Name s:symbol) (ATTRIBUTE Value u:unsigned)) )
    (RELATION special_encoding ( (ATTRIBUTE Code u:unsigned) (ATTRIBUTE Name s:symbol)) )
    (RELATION symbol_special_encoding ( (ATTRIBUTE EA u:address) (ATTRIBUTE encoding s:symbol)) )
  )
(  (SUBROUTINE +disconnected0
(STMTS     (TIMER_ON +disconnected0 "@t-nonrecursive-relation;+disconnected0; [1:1-1:1];"
(STMTS      (DEBUG 
 "+disconnected0() :- \n   base_address(_).\nin file symbolization.dl [140:1-147:29]" 
      (TIMER_ON +disconnected0 "@t-nonrecursive-rule;+disconnected0;binary/pe/symbolization.dl [140:1-147:29];+disconnected0() :- \\n   base_address(_).;"
(QUERY
        (IF (AND (ISEMPTY +disconnected0) (NOT (ISEMPTY base_address)))
         (INSERT () +disconnected0)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE +disconnected1
(STMTS     (TIMER_ON +disconnected1 "@t-nonrecursive-relation;+disconnected1; [1:1-1:1];"
(STMTS      (DEBUG 
 "+disconnected1() :- \n   symbolic_operand(_,_,Dest,\"data\"),\n   Dest > 0x7FFE0000,\n   Dest < 0x7FFE1000.\nin file symbolization.dl [27:1-32:40]" 
      (TIMER_ON +disconnected1 "@t-nonrecursive-rule;+disconnected1;binary/pe/symbolization.dl [27:1-32:40];+disconnected1() :- \\n   symbolic_operand(_,_,Dest,\\\"data\\\"),\\n   Dest > 0x7FFE0000,\\n   Dest < 0x7FFE1000.;"
(QUERY
        (IF (AND (ISEMPTY +disconnected1) (NOT (ISEMPTY symbolic_operand)))
         (INDEXED_IF_EXISTS t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data"))) (AND (AND (AND (CONSTRAINT <= (TUPLE t0 2)  (UNSIGNED 2147356672)) (CONSTRAINT != (TUPLE t0 2)  (UNSIGNED 2147356672))) (CONSTRAINT != (TUPLE t0 2)  (UNSIGNED 2147352576))) (CONSTRAINT >= (TUPLE t0 2)  (UNSIGNED 2147352576)))
          (IF_BREAK (NOT (ISEMPTY +disconnected1)) 
           (INSERT () +disconnected1)
)
)        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE +disconnected2
(STMTS     (TIMER_ON +disconnected2 "@t-nonrecursive-relation;+disconnected2; [1:1-1:1];"
(STMTS      (DEBUG 
 "+disconnected2() :- \n   tls_segment(_,_,_).\nin file tls.dl [711:1-722:25]" 
      (TIMER_ON +disconnected2 "@t-nonrecursive-rule;+disconnected2;tls.dl [711:1-722:25];+disconnected2() :- \\n   tls_segment(_,_,_).;"
(QUERY
        (IF (AND (ISEMPTY +disconnected2) (NOT (ISEMPTY tls_segment)))
         (INSERT () +disconnected2)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE __agg_single
(STMTS (STMTS     (TIMER_ON __agg_single "@t-nonrecursive-relation;__agg_single; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_single(@generator_0) :- \n   @generator_0 = min EA0 : { __agg_subclause(+underscore_0,EA0,+underscore_1) }.\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_single "@t-nonrecursive-rule;__agg_single; [1:1-1:1];__agg_single(@generator_0) :- \\n   @generator_0 = min EA0 : { __agg_subclause(+underscore_0,EA0,+underscore_1) }.;"
(QUERY
        (AGGREGATE t0 min (TUPLE t0 1)  t0 __agg_subclause TRUE 
         (IF (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 0))
          (INSERT ((TUPLE t0 0)) __agg_single)
         ))       )
      )
     )
 )    )
 ) (STMTS     (CLEAR __agg_subclause)
 ) )  )
  (SUBROUTINE __agg_single0
(STMTS (STMTS     (TIMER_ON __agg_single0 "@t-nonrecursive-relation;__agg_single0; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_single0(@generator_0) :- \n   @generator_0 = max EA : { __agg_subclause0(EA,+underscore_2,+underscore_3) }.\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_single0 "@t-nonrecursive-rule;__agg_single0; [1:1-1:1];__agg_single0(@generator_0) :- \\n   @generator_0 = max EA : { __agg_subclause0(EA,+underscore_2,+underscore_3) }.;"
(QUERY
        (AGGREGATE t0 max (TUPLE t0 0)  t0 __agg_subclause0 TRUE 
         (IF (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 0))
          (INSERT ((TUPLE t0 0)) __agg_single0)
         ))       )
      )
     )
 )    )
 ) (STMTS     (CLEAR __agg_subclause0)
 ) )  )
  (SUBROUTINE __agg_single1
(STMTS (STMTS     (TIMER_ON __agg_single1 "@t-nonrecursive-relation;__agg_single1; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_single1(@generator_0) :- \n   @generator_0 = max X : { __agg_subclause1(+underscore_4,X) }.\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_single1 "@t-nonrecursive-rule;__agg_single1; [1:1-1:1];__agg_single1(@generator_0) :- \\n   @generator_0 = max X : { __agg_subclause1(+underscore_4,X) }.;"
(QUERY
        (AGGREGATE t0 max (TUPLE t0 1)  t0 __agg_subclause1 TRUE 
         (IF (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 0))
          (INSERT ((TUPLE t0 0)) __agg_single1)
         ))       )
      )
     )
 )    )
 ) (STMTS     (CLEAR __agg_subclause1)
 ) )  )
  (SUBROUTINE __agg_single2
(STMTS (STMTS     (TIMER_ON __agg_single2 "@t-nonrecursive-relation;__agg_single2; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_single2(@generator_0) :- \n   @generator_0 = min EA : { __agg_subclause2(EA,+underscore_5) }.\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_single2 "@t-nonrecursive-rule;__agg_single2; [1:1-1:1];__agg_single2(@generator_0) :- \\n   @generator_0 = min EA : { __agg_subclause2(EA,+underscore_5) }.;"
(QUERY
        (AGGREGATE t0 min (TUPLE t0 0)  t0 __agg_subclause2 TRUE 
         (IF (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 0))
          (INSERT ((TUPLE t0 0)) __agg_single2)
         ))       )
      )
     )
 )    )
 ) (STMTS     (CLEAR __agg_subclause2)
 ) )  )
  (SUBROUTINE __agg_single4
(STMTS (STMTS     (TIMER_ON __agg_single4 "@t-nonrecursive-relation;__agg_single4; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_single4(@generator_0) :- \n   @generator_0 = max End : { merged_data_region(+underscore_6,End) }.\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_single4 "@t-nonrecursive-rule;__agg_single4; [1:1-1:1];__agg_single4(@generator_0) :- \\n   @generator_0 = max End : { merged_data_region(+underscore_6,End) }.;"
(QUERY
        (AGGREGATE t0 max (TUPLE t0 1)  t0 merged_data_region TRUE 
         (IF (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 0))
          (INSERT ((TUPLE t0 0)) __agg_single4)
         ))       )
      )
     )
 )    )
 ) (STMTS     (CLEAR merged_data_region)
 ) )  )
  (SUBROUTINE __agg_single6
(STMTS     (TIMER_ON __agg_single6 "@t-nonrecursive-relation;__agg_single6; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_single6(@generator_0) :- \n   @generator_0 = min End : { unresolved_interval(+underscore_7,End) }.\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_single6 "@t-nonrecursive-rule;__agg_single6; [1:1-1:1];__agg_single6(@generator_0) :- \\n   @generator_0 = min End : { unresolved_interval(+underscore_7,End) }.;"
(QUERY
        (AGGREGATE t0 min (TUPLE t0 1)  t0 unresolved_interval TRUE 
         (IF (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 0))
          (INSERT ((TUPLE t0 0)) __agg_single6)
         ))       )
      )
     )
 )    )
 )  )
  (SUBROUTINE __agg_single7
(STMTS (STMTS     (TIMER_ON __agg_single7 "@t-nonrecursive-relation;__agg_single7; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_single7(@generator_0) :- \n   @generator_0 = min X0 : { __agg_subclause4(+underscore_8,X0) }.\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_single7 "@t-nonrecursive-rule;__agg_single7; [1:1-1:1];__agg_single7(@generator_0) :- \\n   @generator_0 = min X0 : { __agg_subclause4(+underscore_8,X0) }.;"
(QUERY
        (AGGREGATE t0 min (TUPLE t0 1)  t0 __agg_subclause4 TRUE 
         (IF (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 0))
          (INSERT ((TUPLE t0 0)) __agg_single7)
         ))       )
      )
     )
 )    )
 ) (STMTS     (CLEAR __agg_subclause4)
 ) )  )
  (SUBROUTINE __agg_single8
(STMTS (STMTS     (TIMER_ON __agg_single8 "@t-nonrecursive-relation;__agg_single8; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_single8(@generator_0) :- \n   @generator_0 = max X : { __agg_subclause5(+underscore_9,X) }.\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_single8 "@t-nonrecursive-rule;__agg_single8; [1:1-1:1];__agg_single8(@generator_0) :- \\n   @generator_0 = max X : { __agg_subclause5(+underscore_9,X) }.;"
(QUERY
        (AGGREGATE t0 max (TUPLE t0 1)  t0 __agg_subclause5 TRUE 
         (IF (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 0))
          (INSERT ((TUPLE t0 0)) __agg_single8)
         ))       )
      )
     )
 )    )
 ) (STMTS     (CLEAR __agg_subclause5)
 ) )  )
  (SUBROUTINE __agg_subclause
(STMTS     (TIMER_ON __agg_subclause "@t-nonrecursive-relation;__agg_subclause; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_subclause(Addr,Addr,Name0) :- \n   tls_section(Name0),\n   loaded_section(Addr,_,Name0).\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_subclause "@t-nonrecursive-rule;__agg_subclause; [1:1-1:1];__agg_subclause(Addr,Addr,Name0) :- \\n   tls_section(Name0),\\n   loaded_section(Addr,_,Name0).;"
(QUERY
        (IF (AND (NOT (ISEMPTY tls_section)) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 tls_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 0) (TUPLE t1 0) (TUPLE t0 0)) __agg_subclause)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE __agg_subclause0
(STMTS     (TIMER_ON __agg_subclause0 "@t-nonrecursive-relation;__agg_subclause0; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_subclause0(End0,End0,Name1) :- \n   tls_section(Name1),\n   loaded_section(_,End0,Name1).\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_subclause0 "@t-nonrecursive-rule;__agg_subclause0; [1:1-1:1];__agg_subclause0(End0,End0,Name1) :- \\n   tls_section(Name1),\\n   loaded_section(_,End0,Name1).;"
(QUERY
        (IF (AND (NOT (ISEMPTY tls_section)) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 tls_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 1) (TUPLE t1 1) (TUPLE t0 0)) __agg_subclause0)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE __agg_subclause1
(STMTS (STMTS     (TIMER_ON __agg_subclause1 "@t-nonrecursive-relation;__agg_subclause1; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_subclause1(Name,X) :- \n   tls_section(Name),\n   section(Name,_,_,X,_).\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_subclause1 "@t-nonrecursive-rule;__agg_subclause1; [1:1-1:1];__agg_subclause1(Name,X) :- \\n   tls_section(Name),\\n   section(Name,_,_,X,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY tls_section)) (NOT (ISEMPTY section)))
         (FOR_IN t0 tls_section           (FOR t1 section (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 3)) __agg_subclause1)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR tls_section)
 ) )  )
  (SUBROUTINE __agg_subclause2
(STMTS     (TIMER_ON __agg_subclause2 "@t-nonrecursive-relation;__agg_subclause2; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_subclause2(EA,Entry) :- \n   start_function(Entry),\n   arch.call(EA,_),\n   code_in_block(EA,_),\n   EA >= Entry.\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_subclause2 "@t-nonrecursive-rule;__agg_subclause2; [1:1-1:1];__agg_subclause2(EA,Entry) :- \\n   start_function(Entry),\\n   arch.call(EA,_),\\n   code_in_block(EA,_),\\n   EA >= Entry.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY start_function))) (NOT (ISEMPTY arch.call)))
         (FOR_IN t0 start_function           (FOR_IN t1 arch.call            (IF (AND (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t0 0)) (EXISTS code_in_block ((TUPLE t1 0) UNDEF)))
            (INSERT ((TUPLE t1 0) (TUPLE t0 0)) __agg_subclause2)
           ))
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE __agg_subclause4
(STMTS     (TIMER_ON __agg_subclause4 "@t-nonrecursive-relation;__agg_subclause4; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_subclause4(Name0,X0) :- \n   bss_section(Name0),\n   loaded_section(X0,_,Name0).\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_subclause4 "@t-nonrecursive-rule;__agg_subclause4; [1:1-1:1];__agg_subclause4(Name0,X0) :- \\n   bss_section(Name0),\\n   loaded_section(X0,_,Name0).;"
(QUERY
        (IF (AND (NOT (ISEMPTY bss_section)) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 bss_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 0)) __agg_subclause4)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE __agg_subclause5
(STMTS     (TIMER_ON __agg_subclause5 "@t-nonrecursive-relation;__agg_subclause5; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_subclause5(Name,X) :- \n   bss_section(Name),\n   loaded_section(_,X,Name).\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_subclause5 "@t-nonrecursive-rule;__agg_subclause5; [1:1-1:1];__agg_subclause5(Name,X) :- \\n   bss_section(Name),\\n   loaded_section(_,X,Name).;"
(QUERY
        (IF (AND (NOT (ISEMPTY bss_section)) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 bss_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 1)) __agg_subclause5)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE __agg_subclause6
(STMTS     (TIMER_ON __agg_subclause6 "@t-nonrecursive-relation;__agg_subclause6; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_subclause6(Block0,End,Points,Size,Start,Type0) :- \n   block_candidate_boundaries(Block0,Type0,Start,End),\n   block_total_points(Block0,Type0,Size,Points),\n   Points >= 0.\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_subclause6 "@t-nonrecursive-rule;__agg_subclause6; [1:1-1:1];__agg_subclause6(Block0,End,Points,Size,Start,Type0) :- \\n   block_candidate_boundaries(Block0,Type0,Start,End),\\n   block_total_points(Block0,Type0,Size,Points),\\n   Points >= 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_candidate_boundaries)) (NOT (ISEMPTY block_total_points)))
         (FOR_IN t0 block_candidate_boundaries           (FOR t1 block_total_points (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (<= (NUMBER 0) (TUPLE t1 3) ))
           (INSERT ((TUPLE t0 0) (TUPLE t0 3) (TUPLE t1 3) (TUPLE t1 2) (TUPLE t0 2) (TUPLE t0 1)) __agg_subclause6)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE __agg_subclause7
(STMTS     (TIMER_ON __agg_subclause7 "@t-nonrecursive-relation;__agg_subclause7; [1:1-1:1];"
(STMTS      (DEBUG 
 "__agg_subclause7(Block,End,MaxPoints,Priority,Size,Start,Type) :- \n   block_candidate_boundaries(Block,Type,Start,End),\n   block_total_points(Block,Type,Size,MaxPoints),\n   block_type_priority(Type,Priority).\nin file  [1:1-1:1]" 
      (TIMER_ON __agg_subclause7 "@t-nonrecursive-rule;__agg_subclause7; [1:1-1:1];__agg_subclause7(Block,End,MaxPoints,Priority,Size,Start,Type) :- \\n   block_candidate_boundaries(Block,Type,Start,End),\\n   block_total_points(Block,Type,Size,MaxPoints),\\n   block_type_priority(Type,Priority).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY block_type_priority)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY block_total_points)))
         (FOR_IN t0 block_candidate_boundaries           (FOR t1 block_total_points (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (FOR t2 block_type_priority (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 3) (TUPLE t1 3) (TUPLE t2 1) (TUPLE t1 2) (TUPLE t0 2) (TUPLE t0 1)) __agg_subclause7)
)))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE abi_intrinsic
(STMTS (STMTS (STMTS     (TIMER_ON abi_intrinsic "@t-nonrecursive-relation;abi_intrinsic;/usr/local/src/ddisasm/src/datalog/main.dl [966:7-966:20];"
(STMTS      (DEBUG 
 "abi_intrinsic(Beg,\"__rela_iplt_start\") :- \n   loaded_section(Beg,_,\".rela.plt\").\nin file symbolization.dl [470:1-472:41]" 
      (TIMER_ON abi_intrinsic "@t-nonrecursive-rule;abi_intrinsic;binary/elf/symbolization.dl [470:1-472:41];abi_intrinsic(Beg,\\\"__rela_iplt_start\\\") :- \\n   loaded_section(Beg,_,\\\".rela.plt\\\").;"
(QUERY
        (IF (NOT (ISEMPTY loaded_section))
         (FOR t0 loaded_section (INDEX  (= (TUPLE t0 2) (STRING ".rela.plt")))
          (INSERT ((TUPLE t0 0) (STRING "__rela_iplt_start")) abi_intrinsic)
)        )       )
      )
     )
      (DEBUG 
 "abi_intrinsic(End,\"__rela_iplt_end\") :- \n   loaded_section(_,End,\".rela.plt\").\nin file symbolization.dl [470:1-472:41]" 
      (TIMER_ON abi_intrinsic "@t-nonrecursive-rule;abi_intrinsic;binary/elf/symbolization.dl [470:1-472:41];abi_intrinsic(End,\\\"__rela_iplt_end\\\") :- \\n   loaded_section(_,End,\\\".rela.plt\\\").;"
(QUERY
        (IF (NOT (ISEMPTY loaded_section))
         (FOR t0 loaded_section (INDEX  (= (TUPLE t0 2) (STRING ".rela.plt")))
          (INSERT ((TUPLE t0 1) (STRING "__rela_iplt_end")) abi_intrinsic)
)        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON abi_intrinsic "@t-relation-savetime;abi_intrinsic;/usr/local/src/ddisasm/src/datalog/main.dl [966:7-966:20];savetime;"
     (IO abi_intrinsic ((= IO "file") (= attributeNames "EA\tName") (= auxArity "0") (= name "abi_intrinsic") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"EA\", \"Name\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"s:symbol\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE addr_outside_section_used_for_memory_access
(STMTS     (TIMER_ON addr_outside_section_used_for_memory_access "@t-nonrecursive-relation;addr_outside_section_used_for_memory_access;pointer_reattribution.dl [184:7-184:50];"
(STMTS      (DEBUG 
 "addr_outside_section_used_for_memory_access(EA_from,Reg,as(AddrSigned, address),AddrAccessed) :- \n   data_access(EA_access,Op_index,_,_,_,_,_,_),\n   data_access_pattern_candidate(AddrAccessed,_,Mult,EA_access),\n   value_reg_at_operand(EA_access,Op_index,Reg,EA_from,_,_,Type),\n   Type != \"incomplete\",\n   best_value_reg(EA_from,Reg,EA_from,_,AddrSigned,\"complete\"),\n   AddrSigned >= 0,\n   regular_data_section(Name),\n   loaded_section(Beg,End,Name),\n   Beg <= AddrAccessed,\n   AddrAccessed < End,\n   as(AddrSigned, address) < Beg,\n   as(AddrSigned, address) >= (Beg-as(max(Mult,-(Mult)), unsigned)).\nin file pointer_reattribution.dl [186:1-208:7]" 
      (TIMER_ON addr_outside_section_used_for_memory_access "@t-nonrecursive-rule;addr_outside_section_used_for_memory_access;pointer_reattribution.dl [186:1-208:7];addr_outside_section_used_for_memory_access(EA_from,Reg,as(AddrSigned, address),AddrAccessed) :- \\n   data_access(EA_access,Op_index,_,_,_,_,_,_),\\n   data_access_pattern_candidate(AddrAccessed,_,Mult,EA_access),\\n   value_reg_at_operand(EA_access,Op_index,Reg,EA_from,_,_,Type),\\n   Type != \\\"incomplete\\\",\\n   best_value_reg(EA_from,Reg,EA_from,_,AddrSigned,\\\"complete\\\"),\\n   AddrSigned >= 0,\\n   regular_data_section(Name),\\n   loaded_section(Beg,End,Name),\\n   Beg <= AddrAccessed,\\n   AddrAccessed < End,\\n   as(AddrSigned, address) < Beg,\\n   as(AddrSigned, address) >= (Beg-as(max(Mult,-(Mult)), unsigned)).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY best_value_reg))) (NOT (ISEMPTY value_reg_at_operand))) (NOT (ISEMPTY regular_data_section))) (NOT (ISEMPTY data_access_pattern_candidate)))
         (FOR_IN t0 data_access           (FOR t1 data_access_pattern_candidate (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)))
           (FOR t2 value_reg_at_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (IF (CONSTRAINT != (TUPLE t2 6)  (STRING "incomplete"))
             (FOR t3 best_value_reg (INDEX  (= (TUPLE t3 0) (TUPLE t2 3)) (= (TUPLE t3 1) (TUPLE t2 2)) (= (TUPLE t3 2) (TUPLE t2 3)) (<= (NUMBER 0) (TUPLE t3 4) ) (= (TUPLE t3 5) (STRING "complete")))
              (FOR_IN t4 regular_data_section                (INDEXED_IF_EXISTS t5 loaded_section (INDEX  (= (TUPLE t5 2) (TUPLE t4 0))) (AND (AND (AND (AND (AND (CONSTRAINT <= (TUPLE t3 4)  (TUPLE t5 0)) (CONSTRAINT != (TUPLE t3 4)  (TUPLE t5 0))) (CONSTRAINT >= (TUPLE t3 4)  (INTRINSIC - (TUPLE t5 0) (INTRINSIC max (TUPLE t1 2) (INTRINSIC - (TUPLE t1 2)))))) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t5 1))) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t5 1))) (CONSTRAINT <= (TUPLE t5 0)  (TUPLE t1 0)))
                (INSERT ((TUPLE t2 3) (TUPLE t2 2) (TUPLE t3 4) (TUPLE t1 0)) addr_outside_section_used_for_memory_access)
))
)            ))))
        )       )
      )
     )
      (DEBUG 
 "addr_outside_section_used_for_memory_access(EA_from,Reg,as(AddrSigned, address),AddrAccessed) :- \n   data_access(EA_access,Op_index,_,_,_,_,_,_),\n   data_access_pattern_candidate(AddrAccessed,_,Mult,EA_access),\n   value_reg_at_operand(EA_access,Op_index,Reg,EA_from,_,_,Type),\n   Type != \"incomplete\",\n   best_value_reg(EA_from,Reg,EA_from,_,AddrSigned,\"complete\"),\n   AddrSigned >= 0,\n   regular_data_section(Name),\n   loaded_section(Beg,End,Name),\n   Beg <= AddrAccessed,\n   AddrAccessed < End,\n   as(AddrSigned, address) > End,\n   as(AddrSigned, address) <= (End+as(max(Mult,-(Mult)), unsigned)).\nin file pointer_reattribution.dl [186:1-208:7]" 
      (TIMER_ON addr_outside_section_used_for_memory_access "@t-nonrecursive-rule;addr_outside_section_used_for_memory_access;pointer_reattribution.dl [186:1-208:7];addr_outside_section_used_for_memory_access(EA_from,Reg,as(AddrSigned, address),AddrAccessed) :- \\n   data_access(EA_access,Op_index,_,_,_,_,_,_),\\n   data_access_pattern_candidate(AddrAccessed,_,Mult,EA_access),\\n   value_reg_at_operand(EA_access,Op_index,Reg,EA_from,_,_,Type),\\n   Type != \\\"incomplete\\\",\\n   best_value_reg(EA_from,Reg,EA_from,_,AddrSigned,\\\"complete\\\"),\\n   AddrSigned >= 0,\\n   regular_data_section(Name),\\n   loaded_section(Beg,End,Name),\\n   Beg <= AddrAccessed,\\n   AddrAccessed < End,\\n   as(AddrSigned, address) > End,\\n   as(AddrSigned, address) <= (End+as(max(Mult,-(Mult)), unsigned)).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY best_value_reg))) (NOT (ISEMPTY value_reg_at_operand))) (NOT (ISEMPTY regular_data_section))) (NOT (ISEMPTY data_access_pattern_candidate)))
         (FOR_IN t0 data_access           (FOR t1 data_access_pattern_candidate (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)))
           (FOR t2 value_reg_at_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (IF (CONSTRAINT != (TUPLE t2 6)  (STRING "incomplete"))
             (FOR t3 best_value_reg (INDEX  (= (TUPLE t3 0) (TUPLE t2 3)) (= (TUPLE t3 1) (TUPLE t2 2)) (= (TUPLE t3 2) (TUPLE t2 3)) (<= (NUMBER 0) (TUPLE t3 4) ) (= (TUPLE t3 5) (STRING "complete")))
              (FOR_IN t4 regular_data_section                (INDEXED_IF_EXISTS t5 loaded_section (INDEX  (= (TUPLE t5 2) (TUPLE t4 0))) (AND (AND (AND (AND (AND (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t5 1)) (CONSTRAINT != (TUPLE t3 4)  (TUPLE t5 1))) (CONSTRAINT <= (TUPLE t3 4)  (INTRINSIC + (TUPLE t5 1) (INTRINSIC max (TUPLE t1 2) (INTRINSIC - (TUPLE t1 2)))))) (CONSTRAINT >= (TUPLE t3 4)  (TUPLE t5 1))) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t5 1))) (CONSTRAINT <= (TUPLE t5 0)  (TUPLE t1 0)))
                (INSERT ((TUPLE t2 3) (TUPLE t2 2) (TUPLE t3 4) (TUPLE t1 0)) addr_outside_section_used_for_memory_access)
))
)            ))))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE address_array
(STMTS (STMTS     (TIMER_ON address_array "@t-nonrecursive-relation;address_array;symbolization.dl [640:7-640:20];"
(STMTS      (DEBUG 
 "address_array(EA,Distance,InitialEA) :- \n   address_array_aux(EA,Distance,_,InitialEA).\nin file symbolization.dl [642:1-643:48]" 
      (TIMER_ON address_array "@t-nonrecursive-rule;address_array;symbolization.dl [642:1-643:48];address_array(EA,Distance,InitialEA) :- \\n   address_array_aux(EA,Distance,_,InitialEA).;"
(QUERY
        (IF (NOT (ISEMPTY address_array_aux))
         (FOR_IN t0 address_array_aux           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3)) address_array)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR address_array_aux)
 ) )  )
  (SUBROUTINE address_array_aux
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON address_array_aux "@t-nonrecursive-relation;address_array_aux;symbolization.dl [562:7-562:24];"
(STMTS      (DEBUG 
 "address_array_aux(EA,(EA_next-EA),\"code\",EA) :- \n   address_in_data_refined(EA,Dest1),\n   code_in_block(Dest1,_),\n   binary_format(\"PE\"),\n   next_address_in_data(EA,EA_next),\n   !next_address_in_data((EA-(EA_next-EA)),EA),\n   address_in_data_refined( _tmp_0,Dest2),\n   code_in_block(Dest2,_),\n   next_address_in_data( _tmp_0, _tmp_1),\n   address_in_data_refined( _tmp_1,Dest3),\n   code_in_block(Dest3,_),\n    _tmp_0 = (EA+(EA_next-EA)),\n    _tmp_1 = (EA+(2*(EA_next-EA))).\nin file symbolization.dl [565:1-588:60]" 
      (TIMER_ON address_array_aux "@t-nonrecursive-rule;address_array_aux;symbolization.dl [565:1-588:60];address_array_aux(EA,(EA_next-EA),\\\"code\\\",EA) :- \\n   address_in_data_refined(EA,Dest1),\\n   code_in_block(Dest1,_),\\n   binary_format(\\\"PE\\\"),\\n   next_address_in_data(EA,EA_next),\\n   !next_address_in_data((EA-(EA_next-EA)),EA),\\n   address_in_data_refined( _tmp_0,Dest2),\\n   code_in_block(Dest2,_),\\n   next_address_in_data( _tmp_0, _tmp_1),\\n   address_in_data_refined( _tmp_1,Dest3),\\n   code_in_block(Dest3,_),\\n    _tmp_0 = (EA+(EA_next-EA)),\\n    _tmp_1 = (EA+(2*(EA_next-EA))).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY address_in_data_refined))) (NOT (ISEMPTY next_address_in_data))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 address_in_data_refined           (IF (EXISTS code_in_block ((TUPLE t0 1) UNDEF))
           (FOR t1 next_address_in_data (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (NOT (EXISTS next_address_in_data ((INTRINSIC - (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))) (TUPLE t0 0))))
             (FOR t2 next_address_in_data (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))) (= (TUPLE t2 1) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 2) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))))))
              (INDEXED_IF_EXISTS t3 address_in_data_refined (INDEX  (= (TUPLE t3 0) (TUPLE t2 0))) (EXISTS code_in_block ((TUPLE t3 1) UNDEF))
               (INDEXED_IF_EXISTS t4 address_in_data_refined (INDEX  (= (TUPLE t4 0) (TUPLE t2 1))) (EXISTS code_in_block ((TUPLE t4 1) UNDEF))
                (INSERT ((TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)) (STRING "code") (TUPLE t0 0)) address_array_aux)
)))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "address_array_aux(EA,(EA_next-EA),\"code\",EA) :- \n   address_in_data_refined(EA,Dest1),\n   code_in_block(Dest1,_),\n   binary_format(\"PE\"),\n   next_address_in_data(EA,EA_next),\n   next_address_in_data( _tmp_2,EA),\n   address_in_data_refined( _tmp_2,Dest_prev),\n   !code_in_block(Dest_prev,_),\n   address_in_data_refined( _tmp_3,Dest2),\n   code_in_block(Dest2,_),\n   next_address_in_data( _tmp_3, _tmp_4),\n   address_in_data_refined( _tmp_4,Dest3),\n   code_in_block(Dest3,_),\n    _tmp_2 = (EA-(EA_next-EA)),\n    _tmp_3 = (EA+(EA_next-EA)),\n    _tmp_4 = (EA+(2*(EA_next-EA))).\nin file symbolization.dl [565:1-588:60]" 
      (TIMER_ON address_array_aux "@t-nonrecursive-rule;address_array_aux;symbolization.dl [565:1-588:60];address_array_aux(EA,(EA_next-EA),\\\"code\\\",EA) :- \\n   address_in_data_refined(EA,Dest1),\\n   code_in_block(Dest1,_),\\n   binary_format(\\\"PE\\\"),\\n   next_address_in_data(EA,EA_next),\\n   next_address_in_data( _tmp_2,EA),\\n   address_in_data_refined( _tmp_2,Dest_prev),\\n   !code_in_block(Dest_prev,_),\\n   address_in_data_refined( _tmp_3,Dest2),\\n   code_in_block(Dest2,_),\\n   next_address_in_data( _tmp_3, _tmp_4),\\n   address_in_data_refined( _tmp_4,Dest3),\\n   code_in_block(Dest3,_),\\n    _tmp_2 = (EA-(EA_next-EA)),\\n    _tmp_3 = (EA+(EA_next-EA)),\\n    _tmp_4 = (EA+(2*(EA_next-EA))).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY address_in_data_refined))) (NOT (ISEMPTY next_address_in_data))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 address_in_data_refined           (IF (EXISTS code_in_block ((TUPLE t0 1) UNDEF))
           (FOR t1 next_address_in_data (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 next_address_in_data (INDEX  (= (TUPLE t2 0) (INTRINSIC - (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))) (= (TUPLE t2 1) (TUPLE t0 0)))
             (FOR t3 next_address_in_data (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))) (= (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 2) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))))))
              (INDEXED_IF_EXISTS t4 address_in_data_refined (INDEX  (= (TUPLE t4 0) (TUPLE t2 0))) (NOT (EXISTS code_in_block ((TUPLE t4 1) UNDEF)))
               (INDEXED_IF_EXISTS t5 address_in_data_refined (INDEX  (= (TUPLE t5 0) (TUPLE t3 0))) (EXISTS code_in_block ((TUPLE t5 1) UNDEF))
                (INDEXED_IF_EXISTS t6 address_in_data_refined (INDEX  (= (TUPLE t6 0) (TUPLE t3 1))) (EXISTS code_in_block ((TUPLE t6 1) UNDEF))
                 (INSERT ((TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)) (STRING "code") (TUPLE t0 0)) address_array_aux)
))))))          ))
        )       )
      )
     )
      (DEBUG 
 "address_array_aux(EA,(EA_next-EA),\"code\",EA) :- \n   address_in_data_refined(EA,Dest1),\n   code_in_block(Dest1,_),\n   (EA%8) = 0,\n   next_address_in_data(EA,EA_next),\n   !next_address_in_data((EA-(EA_next-EA)),EA),\n   address_in_data_refined( _tmp_5,Dest2),\n   code_in_block(Dest2,_),\n   next_address_in_data( _tmp_5, _tmp_6),\n   address_in_data_refined( _tmp_6,Dest3),\n   code_in_block(Dest3,_),\n    _tmp_5 = (EA+(EA_next-EA)),\n    _tmp_6 = (EA+(2*(EA_next-EA))).\nin file symbolization.dl [565:1-588:60]" 
      (TIMER_ON address_array_aux "@t-nonrecursive-rule;address_array_aux;symbolization.dl [565:1-588:60];address_array_aux(EA,(EA_next-EA),\\\"code\\\",EA) :- \\n   address_in_data_refined(EA,Dest1),\\n   code_in_block(Dest1,_),\\n   (EA%8) = 0,\\n   next_address_in_data(EA,EA_next),\\n   !next_address_in_data((EA-(EA_next-EA)),EA),\\n   address_in_data_refined( _tmp_5,Dest2),\\n   code_in_block(Dest2,_),\\n   next_address_in_data( _tmp_5, _tmp_6),\\n   address_in_data_refined( _tmp_6,Dest3),\\n   code_in_block(Dest3,_),\\n    _tmp_5 = (EA+(EA_next-EA)),\\n    _tmp_6 = (EA+(2*(EA_next-EA))).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY next_address_in_data)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY address_in_data_refined)))
         (FOR_IN t0 address_in_data_refined           (IF (AND (CONSTRAINT = (INTRINSIC % (TUPLE t0 0) (UNSIGNED 8))  (UNSIGNED 0)) (EXISTS code_in_block ((TUPLE t0 1) UNDEF)))
           (FOR t1 next_address_in_data (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (NOT (EXISTS next_address_in_data ((INTRINSIC - (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))) (TUPLE t0 0))))
             (FOR t2 next_address_in_data (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))) (= (TUPLE t2 1) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 2) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))))))
              (INDEXED_IF_EXISTS t3 address_in_data_refined (INDEX  (= (TUPLE t3 0) (TUPLE t2 0))) (EXISTS code_in_block ((TUPLE t3 1) UNDEF))
               (INDEXED_IF_EXISTS t4 address_in_data_refined (INDEX  (= (TUPLE t4 0) (TUPLE t2 1))) (EXISTS code_in_block ((TUPLE t4 1) UNDEF))
                (INSERT ((TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)) (STRING "code") (TUPLE t0 0)) address_array_aux)
)))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "address_array_aux(EA,(EA_next-EA),\"code\",EA) :- \n   address_in_data_refined(EA,Dest1),\n   code_in_block(Dest1,_),\n   (EA%8) = 0,\n   next_address_in_data(EA,EA_next),\n   next_address_in_data( _tmp_7,EA),\n   address_in_data_refined( _tmp_7,Dest_prev),\n   !code_in_block(Dest_prev,_),\n   address_in_data_refined( _tmp_8,Dest2),\n   code_in_block(Dest2,_),\n   next_address_in_data( _tmp_8, _tmp_9),\n   address_in_data_refined( _tmp_9,Dest3),\n   code_in_block(Dest3,_),\n    _tmp_7 = (EA-(EA_next-EA)),\n    _tmp_8 = (EA+(EA_next-EA)),\n    _tmp_9 = (EA+(2*(EA_next-EA))).\nin file symbolization.dl [565:1-588:60]" 
      (TIMER_ON address_array_aux "@t-nonrecursive-rule;address_array_aux;symbolization.dl [565:1-588:60];address_array_aux(EA,(EA_next-EA),\\\"code\\\",EA) :- \\n   address_in_data_refined(EA,Dest1),\\n   code_in_block(Dest1,_),\\n   (EA%8) = 0,\\n   next_address_in_data(EA,EA_next),\\n   next_address_in_data( _tmp_7,EA),\\n   address_in_data_refined( _tmp_7,Dest_prev),\\n   !code_in_block(Dest_prev,_),\\n   address_in_data_refined( _tmp_8,Dest2),\\n   code_in_block(Dest2,_),\\n   next_address_in_data( _tmp_8, _tmp_9),\\n   address_in_data_refined( _tmp_9,Dest3),\\n   code_in_block(Dest3,_),\\n    _tmp_7 = (EA-(EA_next-EA)),\\n    _tmp_8 = (EA+(EA_next-EA)),\\n    _tmp_9 = (EA+(2*(EA_next-EA))).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY next_address_in_data)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY address_in_data_refined)))
         (FOR_IN t0 address_in_data_refined           (IF (AND (CONSTRAINT = (INTRINSIC % (TUPLE t0 0) (UNSIGNED 8))  (UNSIGNED 0)) (EXISTS code_in_block ((TUPLE t0 1) UNDEF)))
           (FOR t1 next_address_in_data (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 next_address_in_data (INDEX  (= (TUPLE t2 0) (INTRINSIC - (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))) (= (TUPLE t2 1) (TUPLE t0 0)))
             (FOR t3 next_address_in_data (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))) (= (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 2) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))))))
              (INDEXED_IF_EXISTS t4 address_in_data_refined (INDEX  (= (TUPLE t4 0) (TUPLE t2 0))) (NOT (EXISTS code_in_block ((TUPLE t4 1) UNDEF)))
               (INDEXED_IF_EXISTS t5 address_in_data_refined (INDEX  (= (TUPLE t5 0) (TUPLE t3 0))) (EXISTS code_in_block ((TUPLE t5 1) UNDEF))
                (INDEXED_IF_EXISTS t6 address_in_data_refined (INDEX  (= (TUPLE t6 0) (TUPLE t3 1))) (EXISTS code_in_block ((TUPLE t6 1) UNDEF))
                 (INSERT ((TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)) (STRING "code") (TUPLE t0 0)) address_array_aux)
))))))          ))
        )       )
      )
     )
      (DEBUG 
 "address_array_aux(EA,(EA_next-EA),\"data\",EA) :- \n   address_in_data_refined(EA,Dest1),\n   @functor_data_valid(Dest1,1) = 1,\n   (EA%8) = 0,\n   next_address_in_data(EA,EA_next),\n   data_segment(Begin,End),\n   Begin <= Dest1,\n   Dest1 <= End,\n   !next_address_in_data((EA-(EA_next-EA)),EA),\n   address_in_data_refined( _tmp_10,Dest2),\n   @functor_data_valid(Dest2,1) = 1,\n   next_address_in_data( _tmp_10, _tmp_11),\n   address_in_data_refined( _tmp_11,Dest3),\n   @functor_data_valid(Dest3,1) = 1,\n   Begin <= Dest2,\n   Dest2 <= End,\n   Begin <= Dest3,\n   Dest3 <= End,\n    _tmp_10 = (EA+(EA_next-EA)),\n    _tmp_11 = (EA+(2*(EA_next-EA))).\nin file symbolization.dl [591:1-614:34]" 
      (TIMER_ON address_array_aux "@t-nonrecursive-rule;address_array_aux;symbolization.dl [591:1-614:34];address_array_aux(EA,(EA_next-EA),\\\"data\\\",EA) :- \\n   address_in_data_refined(EA,Dest1),\\n   @functor_data_valid(Dest1,1) = 1,\\n   (EA%8) = 0,\\n   next_address_in_data(EA,EA_next),\\n   data_segment(Begin,End),\\n   Begin <= Dest1,\\n   Dest1 <= End,\\n   !next_address_in_data((EA-(EA_next-EA)),EA),\\n   address_in_data_refined( _tmp_10,Dest2),\\n   @functor_data_valid(Dest2,1) = 1,\\n   next_address_in_data( _tmp_10, _tmp_11),\\n   address_in_data_refined( _tmp_11,Dest3),\\n   @functor_data_valid(Dest3,1) = 1,\\n   Begin <= Dest2,\\n   Dest2 <= End,\\n   Begin <= Dest3,\\n   Dest3 <= End,\\n    _tmp_10 = (EA+(EA_next-EA)),\\n    _tmp_11 = (EA+(2*(EA_next-EA))).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY next_address_in_data)) (NOT (ISEMPTY address_in_data_refined))) (NOT (ISEMPTY data_segment)))
         (FOR_IN t0 address_in_data_refined           (IF (AND (CONSTRAINT = (INTRINSIC % (TUPLE t0 0) (UNSIGNED 8))  (UNSIGNED 0)) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 next_address_in_data (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (NOT (EXISTS next_address_in_data ((INTRINSIC - (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))) (TUPLE t0 0))))
             (FOR t2 next_address_in_data (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))) (= (TUPLE t2 1) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 2) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))))))
              (FOR_IN t3 data_segment                (IF (AND (CONSTRAINT <= (TUPLE t0 1)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t3 0)  (TUPLE t0 1)))
                (INDEXED_IF_EXISTS t4 address_in_data_refined (INDEX  (= (TUPLE t4 0) (TUPLE t2 0))) (AND (AND (CONSTRAINT <= (TUPLE t4 1)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t3 0)  (TUPLE t4 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t4 1) (UNSIGNED 1)))  (UNSIGNED 1)))
                 (INDEXED_IF_EXISTS t5 address_in_data_refined (INDEX  (= (TUPLE t5 0) (TUPLE t2 1))) (AND (AND (CONSTRAINT <= (TUPLE t5 1)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t3 0)  (TUPLE t5 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t5 1) (UNSIGNED 1)))  (UNSIGNED 1)))
                  (INSERT ((TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)) (STRING "data") (TUPLE t0 0)) address_array_aux)
))               ))
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "address_array_aux(EA,(EA_next-EA),\"data\",EA) :- \n   address_in_data_refined(EA,Dest1),\n   @functor_data_valid(Dest1,1) = 1,\n   (EA%8) = 0,\n   next_address_in_data(EA,EA_next),\n   data_segment(Begin,End),\n   Begin <= Dest1,\n   Dest1 <= End,\n   next_address_in_data( _tmp_12,EA),\n   address_in_data_refined( _tmp_12,Dest_prev),\n   Dest_prev < Begin,\n   address_in_data_refined( _tmp_13,Dest2),\n   @functor_data_valid(Dest2,1) = 1,\n   next_address_in_data( _tmp_13, _tmp_14),\n   address_in_data_refined( _tmp_14,Dest3),\n   @functor_data_valid(Dest3,1) = 1,\n   Begin <= Dest2,\n   Dest2 <= End,\n   Begin <= Dest3,\n   Dest3 <= End,\n    _tmp_12 = (EA-(EA_next-EA)),\n    _tmp_13 = (EA+(EA_next-EA)),\n    _tmp_14 = (EA+(2*(EA_next-EA))).\nin file symbolization.dl [591:1-614:34]" 
      (TIMER_ON address_array_aux "@t-nonrecursive-rule;address_array_aux;symbolization.dl [591:1-614:34];address_array_aux(EA,(EA_next-EA),\\\"data\\\",EA) :- \\n   address_in_data_refined(EA,Dest1),\\n   @functor_data_valid(Dest1,1) = 1,\\n   (EA%8) = 0,\\n   next_address_in_data(EA,EA_next),\\n   data_segment(Begin,End),\\n   Begin <= Dest1,\\n   Dest1 <= End,\\n   next_address_in_data( _tmp_12,EA),\\n   address_in_data_refined( _tmp_12,Dest_prev),\\n   Dest_prev < Begin,\\n   address_in_data_refined( _tmp_13,Dest2),\\n   @functor_data_valid(Dest2,1) = 1,\\n   next_address_in_data( _tmp_13, _tmp_14),\\n   address_in_data_refined( _tmp_14,Dest3),\\n   @functor_data_valid(Dest3,1) = 1,\\n   Begin <= Dest2,\\n   Dest2 <= End,\\n   Begin <= Dest3,\\n   Dest3 <= End,\\n    _tmp_12 = (EA-(EA_next-EA)),\\n    _tmp_13 = (EA+(EA_next-EA)),\\n    _tmp_14 = (EA+(2*(EA_next-EA))).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY next_address_in_data)) (NOT (ISEMPTY address_in_data_refined))) (NOT (ISEMPTY data_segment)))
         (FOR_IN t0 address_in_data_refined           (IF (AND (CONSTRAINT = (INTRINSIC % (TUPLE t0 0) (UNSIGNED 8))  (UNSIGNED 0)) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 next_address_in_data (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 next_address_in_data (INDEX  (= (TUPLE t2 0) (INTRINSIC - (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))) (= (TUPLE t2 1) (TUPLE t0 0)))
             (FOR t3 next_address_in_data (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))) (= (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 2) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))))))
              (FOR_IN t4 data_segment                (IF (AND (CONSTRAINT <= (TUPLE t0 1)  (TUPLE t4 1)) (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t0 1)))
                (INDEXED_IF_EXISTS t5 address_in_data_refined (INDEX  (= (TUPLE t5 0) (TUPLE t2 0))) (AND (CONSTRAINT != (TUPLE t5 1)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t5 1)  (TUPLE t4 0)))
                 (INDEXED_IF_EXISTS t6 address_in_data_refined (INDEX  (= (TUPLE t6 0) (TUPLE t3 0))) (AND (AND (CONSTRAINT <= (TUPLE t6 1)  (TUPLE t4 1)) (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t6 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t6 1) (UNSIGNED 1)))  (UNSIGNED 1)))
                  (INDEXED_IF_EXISTS t7 address_in_data_refined (INDEX  (= (TUPLE t7 0) (TUPLE t3 1))) (AND (AND (CONSTRAINT <= (TUPLE t7 1)  (TUPLE t4 1)) (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t7 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t7 1) (UNSIGNED 1)))  (UNSIGNED 1)))
                   (INSERT ((TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)) (STRING "data") (TUPLE t0 0)) address_array_aux)
)))               ))
)))          ))
        )       )
      )
     )
      (DEBUG 
 "address_array_aux(EA,(EA_next-EA),\"data\",EA) :- \n   address_in_data_refined(EA,Dest1),\n   @functor_data_valid(Dest1,1) = 1,\n   (EA%8) = 0,\n   next_address_in_data(EA,EA_next),\n   data_segment(Begin,End),\n   Begin <= Dest1,\n   Dest1 <= End,\n   next_address_in_data( _tmp_15,EA),\n   address_in_data_refined( _tmp_15,Dest_prev),\n   Dest_prev > End,\n   address_in_data_refined( _tmp_16,Dest2),\n   @functor_data_valid(Dest2,1) = 1,\n   next_address_in_data( _tmp_16, _tmp_17),\n   address_in_data_refined( _tmp_17,Dest3),\n   @functor_data_valid(Dest3,1) = 1,\n   Begin <= Dest2,\n   Dest2 <= End,\n   Begin <= Dest3,\n   Dest3 <= End,\n    _tmp_15 = (EA-(EA_next-EA)),\n    _tmp_16 = (EA+(EA_next-EA)),\n    _tmp_17 = (EA+(2*(EA_next-EA))).\nin file symbolization.dl [591:1-614:34]" 
      (TIMER_ON address_array_aux "@t-nonrecursive-rule;address_array_aux;symbolization.dl [591:1-614:34];address_array_aux(EA,(EA_next-EA),\\\"data\\\",EA) :- \\n   address_in_data_refined(EA,Dest1),\\n   @functor_data_valid(Dest1,1) = 1,\\n   (EA%8) = 0,\\n   next_address_in_data(EA,EA_next),\\n   data_segment(Begin,End),\\n   Begin <= Dest1,\\n   Dest1 <= End,\\n   next_address_in_data( _tmp_15,EA),\\n   address_in_data_refined( _tmp_15,Dest_prev),\\n   Dest_prev > End,\\n   address_in_data_refined( _tmp_16,Dest2),\\n   @functor_data_valid(Dest2,1) = 1,\\n   next_address_in_data( _tmp_16, _tmp_17),\\n   address_in_data_refined( _tmp_17,Dest3),\\n   @functor_data_valid(Dest3,1) = 1,\\n   Begin <= Dest2,\\n   Dest2 <= End,\\n   Begin <= Dest3,\\n   Dest3 <= End,\\n    _tmp_15 = (EA-(EA_next-EA)),\\n    _tmp_16 = (EA+(EA_next-EA)),\\n    _tmp_17 = (EA+(2*(EA_next-EA))).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY next_address_in_data)) (NOT (ISEMPTY address_in_data_refined))) (NOT (ISEMPTY data_segment)))
         (FOR_IN t0 address_in_data_refined           (IF (AND (CONSTRAINT = (INTRINSIC % (TUPLE t0 0) (UNSIGNED 8))  (UNSIGNED 0)) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 next_address_in_data (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 next_address_in_data (INDEX  (= (TUPLE t2 0) (INTRINSIC - (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))) (= (TUPLE t2 1) (TUPLE t0 0)))
             (FOR t3 next_address_in_data (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))) (= (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 2) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))))))
              (FOR_IN t4 data_segment                (IF (AND (CONSTRAINT <= (TUPLE t0 1)  (TUPLE t4 1)) (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t0 1)))
                (INDEXED_IF_EXISTS t5 address_in_data_refined (INDEX  (= (TUPLE t5 0) (TUPLE t2 0))) (AND (CONSTRAINT != (TUPLE t5 1)  (TUPLE t4 1)) (CONSTRAINT >= (TUPLE t5 1)  (TUPLE t4 1)))
                 (INDEXED_IF_EXISTS t6 address_in_data_refined (INDEX  (= (TUPLE t6 0) (TUPLE t3 0))) (AND (AND (CONSTRAINT <= (TUPLE t6 1)  (TUPLE t4 1)) (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t6 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t6 1) (UNSIGNED 1)))  (UNSIGNED 1)))
                  (INDEXED_IF_EXISTS t7 address_in_data_refined (INDEX  (= (TUPLE t7 0) (TUPLE t3 1))) (AND (AND (CONSTRAINT <= (TUPLE t7 1)  (TUPLE t4 1)) (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t7 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t7 1) (UNSIGNED 1)))  (UNSIGNED 1)))
                   (INSERT ((TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)) (STRING "data") (TUPLE t0 0)) address_array_aux)
)))               ))
)))          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 address_array_aux       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) @delta_address_array_aux)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_address_array_aux "@t-recursive-relation;address_array_aux;symbolization.dl [562:7-562:24];"
(STMTS (STMTS (STMTS       (DEBUG 
 "address_array_aux((EA+Diff),Diff,\"code\",InitialEA) :- \n   address_array_aux(EA,Diff,\"code\",InitialEA),\n   next_address_in_data(EA, _tmp_18),\n   address_in_data_refined( _tmp_18,Dest),\n   code_in_block(Dest,_),\n    _tmp_18 = (EA+Diff).\nin file symbolization.dl [617:1-620:54]" 
       (TIMER_ON @new_address_array_aux "@t-recursive-rule;address_array_aux;0;symbolization.dl [617:1-620:54];address_array_aux((EA+Diff),Diff,\\\"code\\\",InitialEA) :- \\n   address_array_aux(EA,Diff,\\\"code\\\",InitialEA),\\n   next_address_in_data(EA, _tmp_18),\\n   address_in_data_refined( _tmp_18,Dest),\\n   code_in_block(Dest,_),\\n    _tmp_18 = (EA+Diff).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_address_array_aux)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY address_in_data_refined))) (NOT (ISEMPTY next_address_in_data)))
          (FOR t0 @delta_address_array_aux (INDEX  (= (TUPLE t0 2) (STRING "code")))
           (IF (NOT (EXISTS address_array_aux ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1) (STRING "code") (TUPLE t0 3))))
            (FOR t1 next_address_in_data (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))))
             (INDEXED_IF_EXISTS t2 address_in_data_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 1))) (EXISTS code_in_block ((TUPLE t2 1) UNDEF))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1) (STRING "code") (TUPLE t0 3)) @new_address_array_aux)
))           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "address_array_aux((EA+Diff),Diff,\"data\",InitialEA) :- \n   address_array_aux(EA,Diff,\"data\",InitialEA),\n   address_in_data_refined(EA,Dest1),\n   next_address_in_data(EA, _tmp_19),\n   address_in_data_refined( _tmp_19,Dest2),\n   @functor_data_valid(Dest2,1) = 1,\n   data_segment(Begin,End),\n   Begin <= Dest1,\n   Dest1 <= End,\n   Begin <= Dest2,\n   Dest2 <= End,\n    _tmp_19 = (EA+Diff).\nin file symbolization.dl [622:1-630:34]" 
       (TIMER_ON @new_address_array_aux "@t-recursive-rule;address_array_aux;0;symbolization.dl [622:1-630:34];address_array_aux((EA+Diff),Diff,\\\"data\\\",InitialEA) :- \\n   address_array_aux(EA,Diff,\\\"data\\\",InitialEA),\\n   address_in_data_refined(EA,Dest1),\\n   next_address_in_data(EA, _tmp_19),\\n   address_in_data_refined( _tmp_19,Dest2),\\n   @functor_data_valid(Dest2,1) = 1,\\n   data_segment(Begin,End),\\n   Begin <= Dest1,\\n   Dest1 <= End,\\n   Begin <= Dest2,\\n   Dest2 <= End,\\n    _tmp_19 = (EA+Diff).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY data_segment)) (NOT (ISEMPTY next_address_in_data))) (NOT (ISEMPTY @delta_address_array_aux))) (NOT (ISEMPTY address_in_data_refined)))
          (FOR t0 @delta_address_array_aux (INDEX  (= (TUPLE t0 2) (STRING "data")))
           (IF (NOT (EXISTS address_array_aux ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1) (STRING "data") (TUPLE t0 3))))
            (FOR t1 next_address_in_data (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))))
             (FOR t2 address_in_data_refined (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
              (FOR t3 address_in_data_refined (INDEX  (= (TUPLE t3 0) (TUPLE t1 1)))
               (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t3 1) (UNSIGNED 1)))  (UNSIGNED 1))
                (IF_EXISTS t4 data_segment (AND (AND (AND (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t2 1))) (CONSTRAINT <= (TUPLE t2 1)  (TUPLE t4 1))) (CONSTRAINT <= (TUPLE t3 1)  (TUPLE t4 1))) 
                 (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1) (STRING "data") (TUPLE t0 3)) @new_address_array_aux)
)               ))))           ))         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_address_array_aux "@t-recursive-relation;address_array_aux;symbolization.dl [562:7-562:24];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_address_array_aux))
 ) (STMTS      (TIMER_ON @new_address_array_aux "@c-recursive-relation;address_array_aux;symbolization.dl [562:7-562:24];"
(STMTS (QUERY
       (FOR_IN t0 @new_address_array_aux         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) address_array_aux)
)
      )
       (SWAP @delta_address_array_aux @new_address_array_aux)
       (CLEAR @new_address_array_aux)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_address_array_aux)
     (CLEAR @new_address_array_aux)
 ) )  ) (STMTS     (CLEAR next_address_in_data)
 ) )  )
  (SUBROUTINE address_in_data
(STMTS (STMTS (STMTS     (TIMER_ON address_in_data "@t-relation-loadtime;address_in_data;/usr/local/src/ddisasm/src/datalog/main.dl [297:7-297:22];loadtime;"
     (IO address_in_data ((= IO "file") (= attributeNames "EA\tValue") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "address_in_data") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"EA\", \"Value\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE address_in_data "@n-nonrecursive-relation;address_in_data;/usr/local/src/ddisasm/src/datalog/main.dl [297:7-297:22];")
 )   )  )  )
  (SUBROUTINE address_in_data_refined
(STMTS     (TIMER_ON address_in_data_refined "@t-nonrecursive-relation;address_in_data_refined;symbolization.dl [407:7-407:30];"
(STMTS      (DEBUG 
 "address_in_data_refined(EA,Val) :- \n   binary_type(\"DYN\"),\n   address_in_data(EA,Val),\n   relocation(EA,_,_,_,_,_,_),\n   data_segment(Beg,End),\n   Val >= Beg,\n   Val <= End.\nin file symbolization.dl [409:1-414:28]" 
      (TIMER_ON address_in_data_refined "@t-nonrecursive-rule;address_in_data_refined;symbolization.dl [409:1-414:28];address_in_data_refined(EA,Val) :- \\n   binary_type(\\\"DYN\\\"),\\n   address_in_data(EA,Val),\\n   relocation(EA,_,_,_,_,_,_),\\n   data_segment(Beg,End),\\n   Val >= Beg,\\n   Val <= End.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY data_segment)) (NOT (ISEMPTY address_in_data))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY relocation))) (EXISTS binary_type ((STRING "DYN"))))
         (FOR_IN t0 address_in_data           (IF (EXISTS relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (IF_EXISTS t1 data_segment (AND (CONSTRAINT >= (TUPLE t0 1)  (TUPLE t1 0)) (CONSTRAINT <= (TUPLE t0 1)  (TUPLE t1 1))) 
            (INSERT ((TUPLE t0 0) (TUPLE t0 1)) address_in_data_refined)
)          ))
        )       )
      )
     )
      (DEBUG 
 "address_in_data_refined(EA,Val) :- \n   binary_type(\"DYN\"),\n   address_in_data(EA,Val),\n   relocation(EA,_,_,_,_,_,_),\n   block(Val).\nin file symbolization.dl [416:1-420:16]" 
      (TIMER_ON address_in_data_refined "@t-nonrecursive-rule;address_in_data_refined;symbolization.dl [416:1-420:16];address_in_data_refined(EA,Val) :- \\n   binary_type(\\\"DYN\\\"),\\n   address_in_data(EA,Val),\\n   relocation(EA,_,_,_,_,_,_),\\n   block(Val).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY address_in_data))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY block))) (EXISTS binary_type ((STRING "DYN"))))
         (FOR_IN t0 address_in_data           (IF (AND (EXISTS relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (EXISTS block ((TUPLE t0 1))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) address_in_data_refined)
          ))
        )       )
      )
     )
      (DEBUG 
 "address_in_data_refined(EA,Val) :- \n   binary_type(\"EXEC\"),\n   address_in_data(EA,Val),\n   data_segment(Beg,End),\n   Val >= Beg,\n   Val <= End,\n   data_segment(Beg0,End0),\n   EA >= Beg0,\n   (EA+8) <= End0.\nin file symbolization.dl [422:1-431:25]" 
      (TIMER_ON address_in_data_refined "@t-nonrecursive-rule;address_in_data_refined;symbolization.dl [422:1-431:25];address_in_data_refined(EA,Val) :- \\n   binary_type(\\\"EXEC\\\"),\\n   address_in_data(EA,Val),\\n   data_segment(Beg,End),\\n   Val >= Beg,\\n   Val <= End,\\n   data_segment(Beg0,End0),\\n   EA >= Beg0,\\n   (EA+8) <= End0.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY data_segment)) (NOT (ISEMPTY address_in_data))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 address_in_data           (IF_EXISTS t1 data_segment (AND (CONSTRAINT >= (TUPLE t0 1)  (TUPLE t1 0)) (CONSTRAINT <= (TUPLE t0 1)  (TUPLE t1 1))) 
           (IF_EXISTS t2 data_segment (AND (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t2 0)) (CONSTRAINT <= (INTRINSIC + (TUPLE t0 0) (UNSIGNED 8))  (TUPLE t2 1))) 
            (INSERT ((TUPLE t0 0) (TUPLE t0 1)) address_in_data_refined)
)))
        )       )
      )
     )
      (DEBUG 
 "address_in_data_refined(EA,Val) :- \n   binary_type(\"EXEC\"),\n   address_in_data(EA,Val),\n   block(Val),\n   data_segment(Beg0,End0),\n   EA >= Beg0,\n   (EA+8) <= End0.\nin file symbolization.dl [433:1-440:25]" 
      (TIMER_ON address_in_data_refined "@t-nonrecursive-rule;address_in_data_refined;symbolization.dl [433:1-440:25];address_in_data_refined(EA,Val) :- \\n   binary_type(\\\"EXEC\\\"),\\n   address_in_data(EA,Val),\\n   block(Val),\\n   data_segment(Beg0,End0),\\n   EA >= Beg0,\\n   (EA+8) <= End0.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY data_segment)) (NOT (ISEMPTY address_in_data))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY block))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 address_in_data           (IF (EXISTS block ((TUPLE t0 1)))
           (IF_EXISTS t1 data_segment (AND (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t1 0)) (CONSTRAINT <= (INTRINSIC + (TUPLE t0 0) (UNSIGNED 8))  (TUPLE t1 1))) 
            (INSERT ((TUPLE t0 0) (TUPLE t0 1)) address_in_data_refined)
)          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE address_in_data_refined_range.in_ea
(STMTS     (TIMER_ON address_in_data_refined_range.in_ea "@t-nonrecursive-relation;address_in_data_refined_range.in_ea;empty_range.dl [32:7-32:12];"
(STMTS      (DEBUG 
 "address_in_data_refined_range.in_ea(EA) :- \n   address_in_data_refined(EA,_).\nin file symbolization.dl [445:1-446:35]" 
      (TIMER_ON address_in_data_refined_range.in_ea "@t-nonrecursive-rule;address_in_data_refined_range.in_ea;symbolization.dl [445:1-446:35];address_in_data_refined_range.in_ea(EA) :- \\n   address_in_data_refined(EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY address_in_data_refined))
         (FOR_IN t0 address_in_data_refined           (INSERT ((TUPLE t0 0)) address_in_data_refined_range.in_ea)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE adjusts_stack_in_block
(STMTS     (TIMER_ON adjusts_stack_in_block "@t-nonrecursive-relation;adjusts_stack_in_block;use_def_analysis.dl [396:7-396:29];"
(STMTS      (DEBUG 
 "adjusts_stack_in_block(Block,EA,BaseReg,Offset) :- \n   arch.frame_pointer(BaseReg),\n   arch.reg_arithmetic_operation(EA,BaseReg,BaseReg,1,Offset),\n   code_in_block(EA,Block).\nin file use_def_analysis.dl [398:1-404:29]" 
      (TIMER_ON adjusts_stack_in_block "@t-nonrecursive-rule;adjusts_stack_in_block;use_def_analysis.dl [398:1-404:29];adjusts_stack_in_block(Block,EA,BaseReg,Offset) :- \\n   arch.frame_pointer(BaseReg),\\n   arch.reg_arithmetic_operation(EA,BaseReg,BaseReg,1,Offset),\\n   code_in_block(EA,Block).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY arch.frame_pointer))) (NOT (ISEMPTY arch.reg_arithmetic_operation)))
         (FOR_IN t0 arch.frame_pointer           (FOR t1 arch.reg_arithmetic_operation (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (NUMBER 1)))
           (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
            (INSERT ((TUPLE t2 1) (TUPLE t1 0) (TUPLE t0 0) (TUPLE t1 4)) adjusts_stack_in_block)
)))
        )       )
      )
     )
      (DEBUG 
 "adjusts_stack_in_block(Block,EA,BaseReg,Offset) :- \n   arch.stack_pointer(BaseReg),\n   arch.reg_arithmetic_operation(EA,BaseReg,BaseReg,1,Offset),\n   code_in_block(EA,Block).\nin file use_def_analysis.dl [398:1-404:29]" 
      (TIMER_ON adjusts_stack_in_block "@t-nonrecursive-rule;adjusts_stack_in_block;use_def_analysis.dl [398:1-404:29];adjusts_stack_in_block(Block,EA,BaseReg,Offset) :- \\n   arch.stack_pointer(BaseReg),\\n   arch.reg_arithmetic_operation(EA,BaseReg,BaseReg,1,Offset),\\n   code_in_block(EA,Block).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY arch.stack_pointer))) (NOT (ISEMPTY arch.reg_arithmetic_operation)))
         (FOR_IN t0 arch.stack_pointer           (FOR t1 arch.reg_arithmetic_operation (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (NUMBER 1)))
           (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
            (INSERT ((TUPLE t2 1) (TUPLE t1 0) (TUPLE t0 0) (TUPLE t1 4)) adjusts_stack_in_block)
)))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE after_address_in_data
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON after_address_in_data "@t-nonrecursive-relation;after_address_in_data;symbolization.dl [537:7-537:28];"
(STMTS      (DEBUG 
 "after_address_in_data(EA,(EA+8)) :- \n   address_in_data_refined(EA,_),\n   @functor_data_valid((EA+8),1) = 1,\n   !labeled_data_candidate((EA+8)).\nin file symbolization.dl [539:1-543:41]" 
      (TIMER_ON after_address_in_data "@t-nonrecursive-rule;after_address_in_data;symbolization.dl [539:1-543:41];after_address_in_data(EA,(EA+8)) :- \\n   address_in_data_refined(EA,_),\\n   @functor_data_valid((EA+8),1) = 1,\\n   !labeled_data_candidate((EA+8)).;"
(QUERY
        (IF (NOT (ISEMPTY address_in_data_refined))
         (FOR_IN t0 address_in_data_refined           (IF (AND (NOT (EXISTS labeled_data_candidate ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 8))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 8)) (UNSIGNED 1)))  (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (UNSIGNED 8))) after_address_in_data)
          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 after_address_in_data       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_after_address_in_data)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_after_address_in_data "@t-recursive-relation;after_address_in_data;symbolization.dl [537:7-537:28];"
(STMTS       (DEBUG 
 "after_address_in_data(EA,(EA_aux+1)) :- \n   after_address_in_data(EA,EA_aux),\n   !address_in_data_refined(EA_aux,_),\n   @functor_data_valid((EA_aux+1),1) = 1,\n   !labeled_data_candidate((EA_aux+1)).\nin file symbolization.dl [545:1-549:39]" 
       (TIMER_ON @new_after_address_in_data "@t-recursive-rule;after_address_in_data;0;symbolization.dl [545:1-549:39];after_address_in_data(EA,(EA_aux+1)) :- \\n   after_address_in_data(EA,EA_aux),\\n   !address_in_data_refined(EA_aux,_),\\n   @functor_data_valid((EA_aux+1),1) = 1,\\n   !labeled_data_candidate((EA_aux+1)).;"
(QUERY
         (IF (NOT (ISEMPTY @delta_after_address_in_data))
          (FOR_IN t0 @delta_after_address_in_data            (IF (AND (AND (AND (NOT (EXISTS labeled_data_candidate ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 1))))) (NOT (EXISTS address_in_data_refined ((TUPLE t0 1) UNDEF)))) (NOT (EXISTS after_address_in_data ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1))) @new_after_address_in_data)
           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_after_address_in_data "@t-recursive-relation;after_address_in_data;symbolization.dl [537:7-537:28];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_after_address_in_data))
 ) (STMTS      (TIMER_ON @new_after_address_in_data "@c-recursive-relation;after_address_in_data;symbolization.dl [537:7-537:28];"
(STMTS (QUERY
       (FOR_IN t0 @new_after_address_in_data         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) after_address_in_data)
)
      )
       (SWAP @delta_after_address_in_data @new_after_address_in_data)
       (CLEAR @new_after_address_in_data)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_after_address_in_data)
     (CLEAR @new_after_address_in_data)
 ) )  )  )  )
  (SUBROUTINE after_end
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON after_end "@t-nonrecursive-relation;after_end;code_inference.dl [460:7-460:16];"
(STMTS      (DEBUG 
 "after_end(Next,End) :- \n   relative_address(End,Size,_,_,_,_),\n   Next = (End+Size),\n   !relative_address(Next,_,_,_,_,_),\n   is_padding(Next).\nin file code_inference.dl [473:1-476:22]" 
      (TIMER_ON after_end "@t-nonrecursive-rule;after_end;code_inference.dl [473:1-476:22];after_end(Next,End) :- \\n   relative_address(End,Size,_,_,_,_),\\n   Next = (End+Size),\\n   !relative_address(Next,_,_,_,_,_),\\n   is_padding(Next).;"
(QUERY
        (IF (AND (NOT (ISEMPTY relative_address)) (NOT (ISEMPTY is_padding)))
         (FOR_IN t0 relative_address           (FOR t1 is_padding (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))))
           (IF (NOT (EXISTS relative_address ((TUPLE t1 0) UNDEF UNDEF UNDEF UNDEF UNDEF)))
            (INSERT ((TUPLE t1 0) (TUPLE t0 0)) after_end)
           )))
        )       )
      )
     )
      (DEBUG 
 "after_end(Next,End) :- \n   binary_format(\"PE\"),\n   instruction(End,_,_,<inlined_Operation_14>,_,_,_,_,_,_),\n   <inlined_Operation_14> = \"INT3\",\n   next(End,Next),\n   !instruction(Next,_,_,\"INT3\",_,_,_,_,_,_).\nin file code_inference.dl [486:1-490:45]" 
      (TIMER_ON after_end "@t-nonrecursive-rule;after_end;code_inference.dl [486:1-490:45];after_end(Next,End) :- \\n   binary_format(\\\"PE\\\"),\\n   instruction(End,_,_,<inlined_Operation_14>,_,_,_,_,_,_),\\n   <inlined_Operation_14> = \\\"INT3\\\",\\n   next(End,Next),\\n   !instruction(Next,_,_,\\\"INT3\\\",_,_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY next))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "INT3")))
          (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (NOT (EXISTS instruction ((TUPLE t1 1) UNDEF UNDEF (STRING "INT3") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
            (INSERT ((TUPLE t1 1) (TUPLE t0 0)) after_end)
           )))        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE code_in_block_candidate "@n-nonrecursive-relation;code_in_block_candidate;code_inference.dl [365:7-365:30];")
 ) (STMTS     (TIMER_ON possible_target "@t-nonrecursive-relation;possible_target;code_inference.dl [364:7-364:22];"
(STMTS      (DEBUG 
 "possible_target(EA) :- \n   basic_target(EA).\nin file code_inference.dl [367:1-368:22]" 
      (TIMER_ON possible_target "@t-nonrecursive-rule;possible_target;code_inference.dl [367:1-368:22];possible_target(EA) :- \\n   basic_target(EA).;"
(QUERY
        (IF (NOT (ISEMPTY basic_target))
         (FOR_IN t0 basic_target           (INSERT ((TUPLE t0 0)) possible_target)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE possible_target_from "@n-nonrecursive-relation;possible_target_from;code_inference.dl [347:7-347:27];")
 )  (QUERY
     (FOR_IN t0 after_end       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_after_end)
)
    )
 (QUERY
     (FOR_IN t0 code_in_block_candidate       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_code_in_block_candidate)
)
    )
 (QUERY
     (FOR_IN t0 possible_target       (INSERT ((TUPLE t0 0)) @delta_possible_target)
)
    )
 (QUERY
     (FOR_IN t0 possible_target_from       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_possible_target_from)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_after_end "@t-recursive-relation;after_end;code_inference.dl [460:7-460:16];"
(STMTS (STMTS (STMTS       (DEBUG 
 "after_end(Next,End) :- \n   code_in_block_candidate(End,_),\n   next(End,Next),\n   !may_fallthrough(End,Next).\nin file code_inference.dl [462:1-465:32]" 
       (TIMER_ON @new_after_end "@t-recursive-rule;after_end;0;code_inference.dl [462:1-465:32];after_end(Next,End) :- \\n   code_in_block_candidate(End,_),\\n   next(End,Next),\\n   !may_fallthrough(End,Next).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_code_in_block_candidate)) (NOT (ISEMPTY next)))
          (FOR_IN t0 @delta_code_in_block_candidate            (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS may_fallthrough ((TUPLE t0 0) (TUPLE t1 1)))) (NOT (EXISTS after_end ((TUPLE t1 1) (TUPLE t0 0)))))
             (INSERT ((TUPLE t1 1) (TUPLE t0 0)) @new_after_end)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "after_end(Next,End) :- \n   after_end(EA,End),\n   is_padding(EA),\n   !block_limit(EA),\n   next(EA,Next).\nin file code_inference.dl [467:1-471:19]" 
       (TIMER_ON @new_after_end "@t-recursive-rule;after_end;0;code_inference.dl [467:1-471:19];after_end(Next,End) :- \\n   after_end(EA,End),\\n   is_padding(EA),\\n   !block_limit(EA),\\n   next(EA,Next).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY next)) (NOT (ISEMPTY @delta_after_end))) (NOT (ISEMPTY is_padding)))
          (FOR_IN t0 @delta_after_end            (IF (AND (EXISTS is_padding ((TUPLE t0 0))) (NOT (EXISTS block_limit ((TUPLE t0 0)))))
            (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (NOT (EXISTS after_end ((TUPLE t1 1) (TUPLE t0 1))))
              (INSERT ((TUPLE t1 1) (TUPLE t0 1)) @new_after_end)
             ))           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_code_in_block_candidate "@t-recursive-relation;code_in_block_candidate;code_inference.dl [365:7-365:30];"
(STMTS (STMTS (STMTS       (DEBUG 
 "code_in_block_candidate(EA,Start) :- \n   code_in_block_candidate(EA2,Start),\n   must_fallthrough(EA2,EA),\n   !block_limit(EA).\nin file code_inference.dl [389:1-392:22]" 
       (TIMER_ON @new_code_in_block_candidate "@t-recursive-rule;code_in_block_candidate;0;code_inference.dl [389:1-392:22];code_in_block_candidate(EA,Start) :- \\n   code_in_block_candidate(EA2,Start),\\n   must_fallthrough(EA2,EA),\\n   !block_limit(EA).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_code_in_block_candidate)) (NOT (ISEMPTY must_fallthrough)))
          (FOR_IN t0 @delta_code_in_block_candidate            (FOR t1 must_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS block_limit ((TUPLE t1 1)))) (NOT (EXISTS code_in_block_candidate ((TUPLE t1 1) (TUPLE t0 1)))))
             (INSERT ((TUPLE t1 1) (TUPLE t0 1)) @new_code_in_block_candidate)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "code_in_block_candidate(EA,EA) :- \n   possible_target(EA),\n   instruction(EA,_,_,_,_,_,_,_,_,_),\n   !invalid(EA,_).\nin file code_inference.dl [383:1-385:21]" 
       (TIMER_ON @new_code_in_block_candidate "@t-recursive-rule;code_in_block_candidate;0;code_inference.dl [383:1-385:21];code_in_block_candidate(EA,EA) :- \\n   possible_target(EA),\\n   instruction(EA,_,_,_,_,_,_,_,_,_),\\n   !invalid(EA,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_possible_target)) (NOT (ISEMPTY instruction)))
          (FOR_IN t0 @delta_possible_target            (IF (AND (AND (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (NOT (EXISTS code_in_block_candidate ((TUPLE t0 0) (TUPLE t0 0))))) (NOT (EXISTS invalid ((TUPLE t0 0) UNDEF))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 0)) @new_code_in_block_candidate)
           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "code_in_block_candidate(EA,EA) :- \n   code_in_block_candidate(EA2,_),\n   may_fallthrough(EA2,EA),\n   !must_fallthrough(EA2,EA),\n   instruction(EA,_,_,_,_,_,_,_,_,_),\n   !invalid(EA,_).\nin file code_inference.dl [397:1-404:21]" 
       (TIMER_ON @new_code_in_block_candidate "@t-recursive-rule;code_in_block_candidate;0;code_inference.dl [397:1-404:21];code_in_block_candidate(EA,EA) :- \\n   code_in_block_candidate(EA2,_),\\n   may_fallthrough(EA2,EA),\\n   !must_fallthrough(EA2,EA),\\n   instruction(EA,_,_,_,_,_,_,_,_,_),\\n   !invalid(EA,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY @delta_code_in_block_candidate))) (NOT (ISEMPTY may_fallthrough)))
          (FOR_IN t0 @delta_code_in_block_candidate            (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (AND (AND (NOT (EXISTS must_fallthrough ((TUPLE t0 0) (TUPLE t1 1)))) (EXISTS instruction ((TUPLE t1 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS code_in_block_candidate ((TUPLE t1 1) (TUPLE t1 1))))) (NOT (EXISTS invalid ((TUPLE t1 1) UNDEF))))
             (INSERT ((TUPLE t1 1) (TUPLE t1 1)) @new_code_in_block_candidate)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "code_in_block_candidate(EA,EA) :- \n   code_in_block_candidate(EA2,_),\n   may_fallthrough(EA2,EA),\n   block_limit(EA),\n   instruction(EA,_,_,_,_,_,_,_,_,_),\n   !invalid(EA,_).\nin file code_inference.dl [397:1-404:21]" 
       (TIMER_ON @new_code_in_block_candidate "@t-recursive-rule;code_in_block_candidate;0;code_inference.dl [397:1-404:21];code_in_block_candidate(EA,EA) :- \\n   code_in_block_candidate(EA2,_),\\n   may_fallthrough(EA2,EA),\\n   block_limit(EA),\\n   instruction(EA,_,_,_,_,_,_,_,_,_),\\n   !invalid(EA,_).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_code_in_block_candidate)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY block_limit))) (NOT (ISEMPTY may_fallthrough)))
          (FOR_IN t0 @delta_code_in_block_candidate            (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (AND (AND (NOT (EXISTS invalid ((TUPLE t1 1) UNDEF))) (EXISTS instruction ((TUPLE t1 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (EXISTS block_limit ((TUPLE t1 1)))) (NOT (EXISTS code_in_block_candidate ((TUPLE t1 1) (TUPLE t1 1)))))
             (INSERT ((TUPLE t1 1) (TUPLE t1 1)) @new_code_in_block_candidate)
            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_possible_target "@t-recursive-relation;possible_target;code_inference.dl [364:7-364:22];"
(STMTS (STMTS (STMTS       (DEBUG 
 "possible_target(EA) :- \n   possible_target_from(EA,_).\nin file code_inference.dl [370:1-371:32]" 
       (TIMER_ON @new_possible_target "@t-recursive-rule;possible_target;0;code_inference.dl [370:1-371:32];possible_target(EA) :- \\n   possible_target_from(EA,_).;"
(QUERY
         (IF (NOT (ISEMPTY @delta_possible_target_from))
          (FOR_IN t0 @delta_possible_target_from            (IF (NOT (EXISTS possible_target ((TUPLE t0 0))))
            (INSERT ((TUPLE t0 0)) @new_possible_target)
           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "possible_target(EA) :- \n   after_end(EA,_),\n   !is_padding(EA).\nin file code_inference.dl [492:1-497:7]" 
       (TIMER_ON @new_possible_target "@t-recursive-rule;possible_target;0;code_inference.dl [492:1-497:7];possible_target(EA) :- \\n   after_end(EA,_),\\n   !is_padding(EA).;"
(QUERY
         (IF (NOT (ISEMPTY @delta_after_end))
          (FOR_IN t0 @delta_after_end            (IF (AND (NOT (EXISTS possible_target ((TUPLE t0 0)))) (NOT (EXISTS is_padding ((TUPLE t0 0)))))
            (INSERT ((TUPLE t0 0)) @new_possible_target)
           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "possible_target(EA) :- \n   after_end(EA,_),\n   block_limit(EA).\nin file code_inference.dl [492:1-497:7]" 
       (TIMER_ON @new_possible_target "@t-recursive-rule;possible_target;0;code_inference.dl [492:1-497:7];possible_target(EA) :- \\n   after_end(EA,_),\\n   block_limit(EA).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_after_end)) (NOT (ISEMPTY block_limit)))
          (FOR_IN t0 @delta_after_end            (IF (AND (EXISTS block_limit ((TUPLE t0 0))) (NOT (EXISTS possible_target ((TUPLE t0 0)))))
            (INSERT ((TUPLE t0 0)) @new_possible_target)
           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_possible_target_from "@t-recursive-relation;possible_target_from;code_inference.dl [347:7-347:27];"
(STMTS (STMTS (STMTS       (DEBUG 
 "possible_target_from(Dest,Src) :- \n   code_in_block_candidate(Src,_),\n   may_have_symbolic_immediate(Src,Dest),\n   !arch.simple_data_load(Src,Dest,_).\nin file code_inference.dl [349:1-362:7]" 
       (TIMER_ON @new_possible_target_from "@t-recursive-rule;possible_target_from;0;code_inference.dl [349:1-362:7];possible_target_from(Dest,Src) :- \\n   code_in_block_candidate(Src,_),\\n   may_have_symbolic_immediate(Src,Dest),\\n   !arch.simple_data_load(Src,Dest,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_code_in_block_candidate)) (NOT (ISEMPTY may_have_symbolic_immediate)))
          (FOR_IN t0 @delta_code_in_block_candidate            (FOR t1 may_have_symbolic_immediate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS arch.simple_data_load ((TUPLE t0 0) (TUPLE t1 1) UNDEF))) (NOT (EXISTS possible_target_from ((TUPLE t1 1) (TUPLE t0 0)))))
             (INSERT ((TUPLE t1 1) (TUPLE t0 0)) @new_possible_target_from)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "possible_target_from(Dest,Src) :- \n   code_in_block_candidate(Src,_),\n   direct_jump(Src,Dest).\nin file code_inference.dl [349:1-362:7]" 
       (TIMER_ON @new_possible_target_from "@t-recursive-rule;possible_target_from;0;code_inference.dl [349:1-362:7];possible_target_from(Dest,Src) :- \\n   code_in_block_candidate(Src,_),\\n   direct_jump(Src,Dest).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_code_in_block_candidate)) (NOT (ISEMPTY direct_jump)))
          (FOR_IN t0 @delta_code_in_block_candidate            (FOR t1 direct_jump (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (NOT (EXISTS possible_target_from ((TUPLE t1 1) (TUPLE t0 0))))
             (INSERT ((TUPLE t1 1) (TUPLE t0 0)) @new_possible_target_from)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "possible_target_from(Dest,Src) :- \n   code_in_block_candidate(Src,_),\n   direct_call(Src,Dest).\nin file code_inference.dl [349:1-362:7]" 
       (TIMER_ON @new_possible_target_from "@t-recursive-rule;possible_target_from;0;code_inference.dl [349:1-362:7];possible_target_from(Dest,Src) :- \\n   code_in_block_candidate(Src,_),\\n   direct_call(Src,Dest).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_code_in_block_candidate)) (NOT (ISEMPTY direct_call)))
          (FOR_IN t0 @delta_code_in_block_candidate            (FOR t1 direct_call (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (NOT (EXISTS possible_target_from ((TUPLE t1 1) (TUPLE t0 0))))
             (INSERT ((TUPLE t1 1) (TUPLE t0 0)) @new_possible_target_from)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "possible_target_from(Dest,Src) :- \n   code_in_block_candidate(Src,_),\n   pc_relative_jump(Src,Dest).\nin file code_inference.dl [349:1-362:7]" 
       (TIMER_ON @new_possible_target_from "@t-recursive-rule;possible_target_from;0;code_inference.dl [349:1-362:7];possible_target_from(Dest,Src) :- \\n   code_in_block_candidate(Src,_),\\n   pc_relative_jump(Src,Dest).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_code_in_block_candidate)) (NOT (ISEMPTY pc_relative_jump)))
          (FOR_IN t0 @delta_code_in_block_candidate            (FOR t1 pc_relative_jump (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (NOT (EXISTS possible_target_from ((TUPLE t1 1) (TUPLE t0 0))))
             (INSERT ((TUPLE t1 1) (TUPLE t0 0)) @new_possible_target_from)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "possible_target_from(Dest,Src) :- \n   code_in_block_candidate(Src,_),\n   pc_relative_call(Src,Dest).\nin file code_inference.dl [349:1-362:7]" 
       (TIMER_ON @new_possible_target_from "@t-recursive-rule;possible_target_from;0;code_inference.dl [349:1-362:7];possible_target_from(Dest,Src) :- \\n   code_in_block_candidate(Src,_),\\n   pc_relative_call(Src,Dest).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_code_in_block_candidate)) (NOT (ISEMPTY pc_relative_call)))
          (FOR_IN t0 @delta_code_in_block_candidate            (FOR t1 pc_relative_call (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (NOT (EXISTS possible_target_from ((TUPLE t1 1) (TUPLE t0 0))))
             (INSERT ((TUPLE t1 1) (TUPLE t0 0)) @new_possible_target_from)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "possible_target_from(Dest,Src) :- \n   code_in_block_candidate(Src,_),\n   pc_relative_operand(Src,_,Dest),\n   !arch.simple_data_load(Src,Dest,_).\nin file code_inference.dl [349:1-362:7]" 
       (TIMER_ON @new_possible_target_from "@t-recursive-rule;possible_target_from;0;code_inference.dl [349:1-362:7];possible_target_from(Dest,Src) :- \\n   code_in_block_candidate(Src,_),\\n   pc_relative_operand(Src,_,Dest),\\n   !arch.simple_data_load(Src,Dest,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_code_in_block_candidate)) (NOT (ISEMPTY pc_relative_operand)))
          (FOR_IN t0 @delta_code_in_block_candidate            (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS arch.simple_data_load ((TUPLE t0 0) (TUPLE t1 2) UNDEF))) (NOT (EXISTS possible_target_from ((TUPLE t1 2) (TUPLE t0 0)))))
             (INSERT ((TUPLE t1 2) (TUPLE t0 0)) @new_possible_target_from)
            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_after_end "@t-recursive-relation;after_end;code_inference.dl [460:7-460:16];"
     )
 ) (STMTS      (TIMER_ON @new_code_in_block_candidate "@t-recursive-relation;code_in_block_candidate;code_inference.dl [365:7-365:30];"
     )
 ) (STMTS      (TIMER_ON @new_possible_target "@t-recursive-relation;possible_target;code_inference.dl [364:7-364:22];"
     )
 ) (STMTS      (TIMER_ON @new_possible_target_from "@t-recursive-relation;possible_target_from;code_inference.dl [347:7-347:27];"
     )
 ) )  (STMTS      (EXIT (AND (AND (AND (ISEMPTY @new_after_end) (ISEMPTY @new_code_in_block_candidate)) (ISEMPTY @new_possible_target)) (ISEMPTY @new_possible_target_from)))
 ) (STMTS      (TIMER_ON @new_after_end "@c-recursive-relation;after_end;code_inference.dl [460:7-460:16];"
(STMTS (QUERY
       (FOR_IN t0 @new_after_end         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) after_end)
)
      )
       (SWAP @delta_after_end @new_after_end)
       (CLEAR @new_after_end)
 )     )
      (TIMER_ON @new_code_in_block_candidate "@c-recursive-relation;code_in_block_candidate;code_inference.dl [365:7-365:30];"
(STMTS (QUERY
       (FOR_IN t0 @new_code_in_block_candidate         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) code_in_block_candidate)
)
      )
       (SWAP @delta_code_in_block_candidate @new_code_in_block_candidate)
       (CLEAR @new_code_in_block_candidate)
 )     )
      (TIMER_ON @new_possible_target "@c-recursive-relation;possible_target;code_inference.dl [364:7-364:22];"
(STMTS (QUERY
       (FOR_IN t0 @new_possible_target         (INSERT ((TUPLE t0 0)) possible_target)
)
      )
       (SWAP @delta_possible_target @new_possible_target)
       (CLEAR @new_possible_target)
 )     )
      (TIMER_ON @new_possible_target_from "@c-recursive-relation;possible_target_from;code_inference.dl [347:7-347:27];"
(STMTS (QUERY
       (FOR_IN t0 @new_possible_target_from         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) possible_target_from)
)
      )
       (SWAP @delta_possible_target_from @new_possible_target_from)
       (CLEAR @new_possible_target_from)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_after_end)
     (CLEAR @new_after_end)
     (CLEAR @delta_code_in_block_candidate)
     (CLEAR @new_code_in_block_candidate)
     (CLEAR @delta_possible_target)
     (CLEAR @new_possible_target)
     (CLEAR @delta_possible_target_from)
     (CLEAR @new_possible_target_from)
 ) )  ) (STMTS     (CLEAR basic_target)
     (CLEAR may_have_symbolic_immediate)
     (CLEAR pc_relative_call)
     (CLEAR possible_target)
 ) )  )
  (SUBROUTINE aligned_address_in_data
(STMTS     (TIMER_ON aligned_address_in_data "@t-nonrecursive-relation;aligned_address_in_data;code_inference.dl [376:7-376:30];"
(STMTS      (DEBUG 
 "aligned_address_in_data(EA,Value) :- \n   address_in_data(EA,Value),\n   (EA%8) = 0.\nin file code_inference.dl [377:1-380:22]" 
      (TIMER_ON aligned_address_in_data "@t-nonrecursive-rule;aligned_address_in_data;code_inference.dl [377:1-380:22];aligned_address_in_data(EA,Value) :- \\n   address_in_data(EA,Value),\\n   (EA%8) = 0.;"
(QUERY
        (IF (NOT (ISEMPTY address_in_data))
         (FOR_IN t0 address_in_data           (IF (CONSTRAINT = (INTRINSIC % (TUPLE t0 0) (UNSIGNED 8))  (UNSIGNED 0))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) aligned_address_in_data)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE alignment
(STMTS (STMTS (STMTS     (LOGSIZE alignment "@n-nonrecursive-relation;alignment;/usr/local/src/ddisasm/src/datalog/main.dl [691:7-691:16];")
 )   (STMTS     (TIMER_ON alignment "@t-relation-savetime;alignment;/usr/local/src/ddisasm/src/datalog/main.dl [691:7-691:16];savetime;"
     (IO alignment ((= IO "file") (= attributeNames "EA\tAlignInBits") (= auxArity "0") (= name "alignment") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"EA\", \"AlignInBits\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"u:unsigned\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE ambiguous_symbol
(STMTS (STMTS     (TIMER_ON ambiguous_symbol "@t-nonrecursive-relation;ambiguous_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [756:7-756:23];"
(STMTS      (DEBUG 
 "ambiguous_symbol(Name) :- \n   symbol_set(_,_,_,_,_,_,Name),\n   1 < @generator_0,\n   @generator_0 = count : { symbol_set(+underscore_88,+underscore_89,+underscore_90,+underscore_91,+underscore_92,+underscore_93,Name) }.\nin file main.dl [758:1-760:47]" 
      (TIMER_ON ambiguous_symbol "@t-nonrecursive-rule;ambiguous_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [758:1-760:47];ambiguous_symbol(Name) :- \\n   symbol_set(_,_,_,_,_,_,Name),\\n   1 < @generator_0,\\n   @generator_0 = count : { symbol_set(+underscore_88,+underscore_89,+underscore_90,+underscore_91,+underscore_92,+underscore_93,Name) }.;"
(QUERY
        (IF (NOT (ISEMPTY symbol_set))
         (FOR_IN t0 symbol_set           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION COUNT  UNDEF ))  t1 symbol_set (INDEX  (= (TUPLE t1 6) (TUPLE t0 6))) TRUE 
           (IF (AND (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0)) (CONSTRAINT < (NUMBER 1)  (TUPLE t1 0)))
            (INSERT ((TUPLE t0 6)) ambiguous_symbol)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR symbol_set)
 ) )  )
  (SUBROUTINE arch.call
(STMTS (STMTS     (TIMER_ON arch.call "@t-nonrecursive-relation;arch.call;arch/arch.dl [250:7-250:11];"
(STMTS      (DEBUG 
 "arch.call(EA,DestOperandIndex) :- \n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.call_operation(Operation),\n   arch.call_operation_op_index(Operation,DestOperandIndex).\nin file arch.dl [252:1-255:57]" 
      (TIMER_ON arch.call "@t-nonrecursive-rule;arch.call;arch/arch.dl [252:1-255:57];arch.call(EA,DestOperandIndex) :- \\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.call_operation(Operation),\\n   arch.call_operation_op_index(Operation,DestOperandIndex).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY arch.call_operation_op_index)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY arch.call_operation)))
         (FOR_IN t0 instruction           (IF (EXISTS arch.call_operation ((TUPLE t0 3)))
           (FOR t1 arch.call_operation_op_index (INDEX  (= (TUPLE t1 0) (TUPLE t0 3)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1)) arch.call)
)          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.call_operation_op_index)
 ) )  )
  (SUBROUTINE arch.call_operation
(STMTS     (TIMER_ON arch.call_operation "@t-nonrecursive-relation;arch.call_operation;arch/arch.dl [150:7-150:21];"
(STMTS      (DEBUG 
 "arch.call_operation(\"CALL\").\nin file arch_x86.dl [116:1-116:24]" 
      (TIMER_ON arch.call_operation "@t-nonrecursive-rule;arch.call_operation;arch_x86.dl [116:1-116:24];arch.call_operation(\\\"CALL\\\").;"
(QUERY
        (INSERT ((STRING "CALL")) arch.call_operation)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.call_operation_op_index
(STMTS     (TIMER_ON arch.call_operation_op_index "@t-nonrecursive-relation;arch.call_operation_op_index;arch/arch.dl [188:7-188:30];"
(STMTS      (DEBUG 
 "arch.call_operation_op_index(Operation,1) :- \n   arch.call_operation(Operation).\nin file jump_operations.dl [65:1-66:31]" 
      (TIMER_ON arch.call_operation_op_index "@t-nonrecursive-rule;arch.call_operation_op_index;jump_operations.dl [65:1-66:31];arch.call_operation_op_index(Operation,1) :- \\n   arch.call_operation(Operation).;"
(QUERY
        (IF (NOT (ISEMPTY arch.call_operation))
         (FOR_IN t0 arch.call_operation           (INSERT ((TUPLE t0 0) (UNSIGNED 1)) arch.call_operation_op_index)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.cmp_operation
(STMTS     (TIMER_ON arch.cmp_operation "@t-nonrecursive-relation;arch.cmp_operation;arch/arch.dl [169:7-169:20];"
(STMTS      (DEBUG 
 "arch.cmp_operation(\"CMP\").\nin file arch_x86.dl [127:1-127:22]" 
      (TIMER_ON arch.cmp_operation "@t-nonrecursive-rule;arch.cmp_operation;arch_x86.dl [127:1-127:22];arch.cmp_operation(\\\"CMP\\\").;"
(QUERY
        (INSERT ((STRING "CMP")) arch.cmp_operation)
       )
      )
     )
      (DEBUG 
 "arch.cmp_operation(\"TEST\").\nin file arch_x86.dl [128:1-128:23]" 
      (TIMER_ON arch.cmp_operation "@t-nonrecursive-rule;arch.cmp_operation;arch_x86.dl [128:1-128:23];arch.cmp_operation(\\\"TEST\\\").;"
(QUERY
        (INSERT ((STRING "TEST")) arch.cmp_operation)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.cmp_zero_operation
(STMTS (STMTS     (TIMER_ON arch.cmp_zero_operation "@t-nonrecursive-relation;arch.cmp_zero_operation;arch/arch.dl [177:7-177:25];"
(STMTS      (DEBUG 
 "arch.cmp_zero_operation(\"JCXZ\").\nin file arch_x86.dl [130:1-130:28]" 
      (TIMER_ON arch.cmp_zero_operation "@t-nonrecursive-rule;arch.cmp_zero_operation;arch_x86.dl [130:1-130:28];arch.cmp_zero_operation(\\\"JCXZ\\\").;"
(QUERY
        (INSERT ((STRING "JCXZ")) arch.cmp_zero_operation)
       )
      )
     )
      (DEBUG 
 "arch.cmp_zero_operation(\"JECXZ\").\nin file arch_x86.dl [131:1-131:29]" 
      (TIMER_ON arch.cmp_zero_operation "@t-nonrecursive-rule;arch.cmp_zero_operation;arch_x86.dl [131:1-131:29];arch.cmp_zero_operation(\\\"JECXZ\\\").;"
(QUERY
        (INSERT ((STRING "JECXZ")) arch.cmp_zero_operation)
       )
      )
     )
      (DEBUG 
 "arch.cmp_zero_operation(\"JRCXZ\").\nin file arch_x86.dl [132:1-132:29]" 
      (TIMER_ON arch.cmp_zero_operation "@t-nonrecursive-rule;arch.cmp_zero_operation;arch_x86.dl [132:1-132:29];arch.cmp_zero_operation(\\\"JRCXZ\\\").;"
(QUERY
        (INSERT ((STRING "JRCXZ")) arch.cmp_zero_operation)
       )
      )
     )
      (DEBUG 
 "arch.cmp_zero_operation(Operation) :- \n   instruction(_,_,_,Operation,_,_,_,_,_,_),\n   arch.loop_operation(Operation,_).\nin file arch_x86.dl [107:1-110:34]" 
      (TIMER_ON arch.cmp_zero_operation "@t-nonrecursive-rule;arch.cmp_zero_operation;arch_x86.dl [107:1-110:34];arch.cmp_zero_operation(Operation) :- \\n   instruction(_,_,_,Operation,_,_,_,_,_,_),\\n   arch.loop_operation(Operation,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY arch.loop_operation)))
         (FOR_IN t0 instruction           (IF (EXISTS arch.loop_operation ((TUPLE t0 3) UNDEF))
           (INSERT ((TUPLE t0 3)) arch.cmp_zero_operation)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.loop_operation)
 ) )  )
  (SUBROUTINE arch.condition_flags_reg
(STMTS     (TIMER_ON arch.condition_flags_reg "@t-nonrecursive-relation;arch.condition_flags_reg;arch/arch.dl [509:7-509:26];"
(STMTS      (DEBUG 
 "arch.condition_flags_reg(\"RFLAGS\").\nin file registers_x86_64.dl [95:1-95:31]" 
      (TIMER_ON arch.condition_flags_reg "@t-nonrecursive-rule;arch.condition_flags_reg;registers_x86_64.dl [95:1-95:31];arch.condition_flags_reg(\\\"RFLAGS\\\").;"
(QUERY
        (INSERT ((STRING "RFLAGS")) arch.condition_flags_reg)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.conditional
(STMTS (STMTS     (TIMER_ON arch.conditional "@t-nonrecursive-relation;arch.conditional;arch/arch.dl [122:7-122:18];"
(STMTS      (DEBUG 
 "arch.conditional(EA,CC) :- \n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.conditional_operation(Operation,CC).\nin file arch.dl [124:1-126:46]" 
      (TIMER_ON arch.conditional "@t-nonrecursive-rule;arch.conditional;arch/arch.dl [124:1-126:46];arch.conditional(EA,CC) :- \\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.conditional_operation(Operation,CC).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY arch.conditional_operation)))
         (FOR_IN t0 instruction           (FOR t1 arch.conditional_operation (INDEX  (= (TUPLE t1 0) (TUPLE t0 3)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 1)) arch.conditional)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.conditional_operation)
 ) )  )
  (SUBROUTINE arch.conditional_operation
(STMTS (STMTS     (TIMER_ON arch.conditional_operation "@t-nonrecursive-relation;arch.conditional_operation;arch/arch.dl [120:7-120:28];"
(STMTS      (DEBUG 
 "arch.conditional_operation(Operation,CC) :- \n   arch.jump_condition_code(Operation,CC).\nin file jump_operations.dl [55:1-57:39]" 
      (TIMER_ON arch.conditional_operation "@t-nonrecursive-rule;arch.conditional_operation;jump_operations.dl [55:1-57:39];arch.conditional_operation(Operation,CC) :- \\n   arch.jump_condition_code(Operation,CC).;"
(QUERY
        (IF (NOT (ISEMPTY arch.jump_condition_code))
         (FOR_IN t0 arch.jump_condition_code           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) arch.conditional_operation)
)
        )       )
      )
     )
      (DEBUG 
 "arch.conditional_operation(Operation,\"?\") :- \n   instruction(_,_,_,Operation,_,_,_,_,_,_),\n   substr(Operation,0,4) = \"CMOV\".\nin file arch_x86.dl [52:1-54:36]" 
      (TIMER_ON arch.conditional_operation "@t-nonrecursive-rule;arch.conditional_operation;arch_x86.dl [52:1-54:36];arch.conditional_operation(Operation,\\\"?\\\") :- \\n   instruction(_,_,_,Operation,_,_,_,_,_,_),\\n   substr(Operation,0,4) = \\\"CMOV\\\".;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR_IN t0 instruction           (IF (CONSTRAINT = (INTRINSIC substr (TUPLE t0 3) (NUMBER 0) (NUMBER 4))  (STRING "CMOV"))
           (INSERT ((TUPLE t0 3) (STRING "?")) arch.conditional_operation)
          ))
        )       )
      )
     )
      (DEBUG 
 "arch.conditional_operation(Operation,CC) :- \n   instruction(_,_,_,Operation,_,_,_,_,_,_),\n   arch.loop_operation(Operation,CC).\nin file arch_x86.dl [107:1-110:34]" 
      (TIMER_ON arch.conditional_operation "@t-nonrecursive-rule;arch.conditional_operation;arch_x86.dl [107:1-110:34];arch.conditional_operation(Operation,CC) :- \\n   instruction(_,_,_,Operation,_,_,_,_,_,_),\\n   arch.loop_operation(Operation,CC).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY arch.loop_operation)))
         (FOR_IN t0 instruction           (FOR t1 arch.loop_operation (INDEX  (= (TUPLE t1 0) (TUPLE t0 3)))
           (INSERT ((TUPLE t0 3) (TUPLE t1 1)) arch.conditional_operation)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.jump_condition_code)
 ) )  )
  (SUBROUTINE arch.data_access_size
(STMTS     (TIMER_ON arch.data_access_size "@t-nonrecursive-relation;arch.data_access_size;arch/arch.dl [332:7-332:23];"
(STMTS      (DEBUG 
 "arch.data_access_size(\"MOVSD\",as(DestReg, register),8) :- \n   op_regdirect(_,DestReg).\nin file arch_x86.dl [135:1-136:29]" 
      (TIMER_ON arch.data_access_size "@t-nonrecursive-rule;arch.data_access_size;arch_x86.dl [135:1-136:29];arch.data_access_size(\\\"MOVSD\\\",as(DestReg, register),8) :- \\n   op_regdirect(_,DestReg).;"
(QUERY
        (IF (NOT (ISEMPTY op_regdirect))
         (FOR_IN t0 op_regdirect           (INSERT ((STRING "MOVSD") (TUPLE t0 1) (UNSIGNED 8)) arch.data_access_size)
)
        )       )
      )
     )
      (DEBUG 
 "arch.data_access_size(\"LEA\",as(DestReg, register),0) :- \n   op_regdirect(_,DestReg).\nin file arch_x86.dl [138:1-139:29]" 
      (TIMER_ON arch.data_access_size "@t-nonrecursive-rule;arch.data_access_size;arch_x86.dl [138:1-139:29];arch.data_access_size(\\\"LEA\\\",as(DestReg, register),0) :- \\n   op_regdirect(_,DestReg).;"
(QUERY
        (IF (NOT (ISEMPTY op_regdirect))
         (FOR_IN t0 op_regdirect           (INSERT ((STRING "LEA") (TUPLE t0 1) (UNSIGNED 0)) arch.data_access_size)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.extend_load
(STMTS     (TIMER_ON arch.extend_load "@t-nonrecursive-relation;arch.extend_load;arch/arch.dl [395:7-395:18];"
(STMTS      (DEBUG 
 "arch.extend_load(EA,0,(8*SizeAccess)) :- \n   arch.memory_access(\"LOAD\",EA,SrcOpIndex,_,_,_,_,_,_),\n   instruction(EA,_,_,<inlined_Operation_478>,_,_,_,_,_,_),\n   <inlined_Operation_478> = \"MOVZX\",\n   instruction_memory_access_size(EA,SrcOpIndex,SizeAccess).\nin file arch_x86.dl [226:1-234:62]" 
      (TIMER_ON arch.extend_load "@t-nonrecursive-rule;arch.extend_load;arch_x86.dl [226:1-234:62];arch.extend_load(EA,0,(8*SizeAccess)) :- \\n   arch.memory_access(\\\"LOAD\\\",EA,SrcOpIndex,_,_,_,_,_,_),\\n   instruction(EA,_,_,<inlined_Operation_478>,_,_,_,_,_,_),\\n   <inlined_Operation_478> = \\\"MOVZX\\\",\\n   instruction_memory_access_size(EA,SrcOpIndex,SizeAccess).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_memory_access_size)) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY instruction)))
         (FOR t0 arch.memory_access (INDEX  (= (TUPLE t0 0) (STRING "LOAD")))
          (IF (EXISTS instruction ((TUPLE t0 1) UNDEF UNDEF (STRING "MOVZX") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 instruction_memory_access_size (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (TUPLE t0 2)))
            (INSERT ((TUPLE t0 1) (UNSIGNED 0) (INTRINSIC * (UNSIGNED 8) (TUPLE t1 2))) arch.extend_load)
)          ))        )       )
      )
     )
      (DEBUG 
 "arch.extend_load(EA,1,(8*SizeAccess)) :- \n   arch.memory_access(\"LOAD\",EA,SrcOpIndex,_,_,_,_,_,_),\n   instruction(EA,_,_,<inlined_Operation_479>,_,_,_,_,_,_),\n   <inlined_Operation_479> = \"MOVSX\",\n   instruction_memory_access_size(EA,SrcOpIndex,SizeAccess).\nin file arch_x86.dl [226:1-234:62]" 
      (TIMER_ON arch.extend_load "@t-nonrecursive-rule;arch.extend_load;arch_x86.dl [226:1-234:62];arch.extend_load(EA,1,(8*SizeAccess)) :- \\n   arch.memory_access(\\\"LOAD\\\",EA,SrcOpIndex,_,_,_,_,_,_),\\n   instruction(EA,_,_,<inlined_Operation_479>,_,_,_,_,_,_),\\n   <inlined_Operation_479> = \\\"MOVSX\\\",\\n   instruction_memory_access_size(EA,SrcOpIndex,SizeAccess).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_memory_access_size)) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY instruction)))
         (FOR t0 arch.memory_access (INDEX  (= (TUPLE t0 0) (STRING "LOAD")))
          (IF (EXISTS instruction ((TUPLE t0 1) UNDEF UNDEF (STRING "MOVSX") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 instruction_memory_access_size (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (TUPLE t0 2)))
            (INSERT ((TUPLE t0 1) (UNSIGNED 1) (INTRINSIC * (UNSIGNED 8) (TUPLE t1 2))) arch.extend_load)
)          ))        )       )
      )
     )
      (DEBUG 
 "arch.extend_load(EA,1,(8*SizeAccess)) :- \n   arch.memory_access(\"LOAD\",EA,SrcOpIndex,_,_,_,_,_,_),\n   instruction(EA,_,_,<inlined_Operation_480>,_,_,_,_,_,_),\n   <inlined_Operation_480> = \"MOVSXD\",\n   instruction_memory_access_size(EA,SrcOpIndex,SizeAccess).\nin file arch_x86.dl [226:1-234:62]" 
      (TIMER_ON arch.extend_load "@t-nonrecursive-rule;arch.extend_load;arch_x86.dl [226:1-234:62];arch.extend_load(EA,1,(8*SizeAccess)) :- \\n   arch.memory_access(\\\"LOAD\\\",EA,SrcOpIndex,_,_,_,_,_,_),\\n   instruction(EA,_,_,<inlined_Operation_480>,_,_,_,_,_,_),\\n   <inlined_Operation_480> = \\\"MOVSXD\\\",\\n   instruction_memory_access_size(EA,SrcOpIndex,SizeAccess).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_memory_access_size)) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY instruction)))
         (FOR t0 arch.memory_access (INDEX  (= (TUPLE t0 0) (STRING "LOAD")))
          (IF (EXISTS instruction ((TUPLE t0 1) UNDEF UNDEF (STRING "MOVSXD") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 instruction_memory_access_size (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (TUPLE t0 2)))
            (INSERT ((TUPLE t0 1) (UNSIGNED 1) (INTRINSIC * (UNSIGNED 8) (TUPLE t1 2))) arch.extend_load)
)          ))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.extend_reg
(STMTS (STMTS     (TIMER_ON arch.extend_reg "@t-nonrecursive-relation;arch.extend_reg;arch/arch.dl [387:7-387:17];"
(STMTS      (DEBUG 
 "arch.extend_reg(EA,SrcMapped,0,SrcBits) :- \n   instruction(EA,_,_,Operation,Op1,_,0,0,_,_),\n   Operation = \"MOVZX\",\n   arch.move_operation(Operation),\n   op_regdirect(Op1,Src),\n   arch.register_size_bits(Src,SrcBits),\n   reg_map(Src,SrcMapped).\nin file arch_x86.dl [214:1-224:28]" 
      (TIMER_ON arch.extend_reg "@t-nonrecursive-rule;arch.extend_reg;arch_x86.dl [214:1-224:28];arch.extend_reg(EA,SrcMapped,0,SrcBits) :- \\n   instruction(EA,_,_,Operation,Op1,_,0,0,_,_),\\n   Operation = \\\"MOVZX\\\",\\n   arch.move_operation(Operation),\\n   op_regdirect(Op1,Src),\\n   arch.register_size_bits(Src,SrcBits),\\n   reg_map(Src,SrcMapped).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY reg_map)) (NOT (ISEMPTY arch.move_operation))) (NOT (ISEMPTY op_regdirect))) (NOT (ISEMPTY arch.register_size_bits))) (NOT (ISEMPTY instruction)))
         (FOR t0 arch.move_operation (INDEX  (= (TUPLE t0 0) (STRING "MOVZX")))
          (FOR t1 instruction (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)) (= (TUPLE t1 6) (UNSIGNED 0)) (= (TUPLE t1 7) (UNSIGNED 0)))
           (FOR t2 op_regdirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 4)))
            (FOR t3 arch.register_size_bits (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
             (FOR t4 reg_map (INDEX  (= (TUPLE t4 0) (TUPLE t2 1)))
              (INSERT ((TUPLE t1 0) (TUPLE t4 1) (UNSIGNED 0) (TUPLE t3 1)) arch.extend_reg)
)))))        )       )
      )
     )
      (DEBUG 
 "arch.extend_reg(EA,SrcMapped,1,SrcBits) :- \n   instruction(EA,_,_,Operation,Op1,_,0,0,_,_),\n   Operation = \"MOVSX\",\n   arch.move_operation(Operation),\n   op_regdirect(Op1,Src),\n   arch.register_size_bits(Src,SrcBits),\n   reg_map(Src,SrcMapped).\nin file arch_x86.dl [214:1-224:28]" 
      (TIMER_ON arch.extend_reg "@t-nonrecursive-rule;arch.extend_reg;arch_x86.dl [214:1-224:28];arch.extend_reg(EA,SrcMapped,1,SrcBits) :- \\n   instruction(EA,_,_,Operation,Op1,_,0,0,_,_),\\n   Operation = \\\"MOVSX\\\",\\n   arch.move_operation(Operation),\\n   op_regdirect(Op1,Src),\\n   arch.register_size_bits(Src,SrcBits),\\n   reg_map(Src,SrcMapped).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY reg_map)) (NOT (ISEMPTY arch.move_operation))) (NOT (ISEMPTY op_regdirect))) (NOT (ISEMPTY arch.register_size_bits))) (NOT (ISEMPTY instruction)))
         (FOR t0 arch.move_operation (INDEX  (= (TUPLE t0 0) (STRING "MOVSX")))
          (FOR t1 instruction (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)) (= (TUPLE t1 6) (UNSIGNED 0)) (= (TUPLE t1 7) (UNSIGNED 0)))
           (FOR t2 op_regdirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 4)))
            (FOR t3 arch.register_size_bits (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
             (FOR t4 reg_map (INDEX  (= (TUPLE t4 0) (TUPLE t2 1)))
              (INSERT ((TUPLE t1 0) (TUPLE t4 1) (UNSIGNED 1) (TUPLE t3 1)) arch.extend_reg)
)))))        )       )
      )
     )
      (DEBUG 
 "arch.extend_reg(EA,SrcMapped,1,SrcBits) :- \n   instruction(EA,_,_,Operation,Op1,_,0,0,_,_),\n   Operation = \"MOVSXD\",\n   arch.move_operation(Operation),\n   op_regdirect(Op1,Src),\n   arch.register_size_bits(Src,SrcBits),\n   reg_map(Src,SrcMapped).\nin file arch_x86.dl [214:1-224:28]" 
      (TIMER_ON arch.extend_reg "@t-nonrecursive-rule;arch.extend_reg;arch_x86.dl [214:1-224:28];arch.extend_reg(EA,SrcMapped,1,SrcBits) :- \\n   instruction(EA,_,_,Operation,Op1,_,0,0,_,_),\\n   Operation = \\\"MOVSXD\\\",\\n   arch.move_operation(Operation),\\n   op_regdirect(Op1,Src),\\n   arch.register_size_bits(Src,SrcBits),\\n   reg_map(Src,SrcMapped).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY reg_map)) (NOT (ISEMPTY arch.move_operation))) (NOT (ISEMPTY op_regdirect))) (NOT (ISEMPTY arch.register_size_bits))) (NOT (ISEMPTY instruction)))
         (FOR t0 arch.move_operation (INDEX  (= (TUPLE t0 0) (STRING "MOVSXD")))
          (FOR t1 instruction (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)) (= (TUPLE t1 6) (UNSIGNED 0)) (= (TUPLE t1 7) (UNSIGNED 0)))
           (FOR t2 op_regdirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 4)))
            (FOR t3 arch.register_size_bits (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
             (FOR t4 reg_map (INDEX  (= (TUPLE t4 0) (TUPLE t2 1)))
              (INSERT ((TUPLE t1 0) (TUPLE t4 1) (UNSIGNED 1) (TUPLE t3 1)) arch.extend_reg)
)))))        )       )
      )
     )
      (DEBUG 
 "arch.extend_reg(EA,\"RAX\",1,8) :- \n   instruction(EA,_,_,<inlined_Operation_25>,_,_,_,_,_,_),\n   <inlined_Operation_25> = \"CBW\".\nin file arch_x86.dl [42:1-49:7]" 
      (TIMER_ON arch.extend_reg "@t-nonrecursive-rule;arch.extend_reg;arch_x86.dl [42:1-49:7];arch.extend_reg(EA,\\\"RAX\\\",1,8) :- \\n   instruction(EA,_,_,<inlined_Operation_25>,_,_,_,_,_,_),\\n   <inlined_Operation_25> = \\\"CBW\\\".;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "CBW")))
          (INSERT ((TUPLE t0 0) (STRING "RAX") (UNSIGNED 1) (UNSIGNED 8)) arch.extend_reg)
)        )       )
      )
     )
      (DEBUG 
 "arch.extend_reg(EA,\"RAX\",1,16) :- \n   instruction(EA,_,_,<inlined_Operation_26>,_,_,_,_,_,_),\n   <inlined_Operation_26> = \"CWDE\".\nin file arch_x86.dl [42:1-49:7]" 
      (TIMER_ON arch.extend_reg "@t-nonrecursive-rule;arch.extend_reg;arch_x86.dl [42:1-49:7];arch.extend_reg(EA,\\\"RAX\\\",1,16) :- \\n   instruction(EA,_,_,<inlined_Operation_26>,_,_,_,_,_,_),\\n   <inlined_Operation_26> = \\\"CWDE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "CWDE")))
          (INSERT ((TUPLE t0 0) (STRING "RAX") (UNSIGNED 1) (UNSIGNED 16)) arch.extend_reg)
)        )       )
      )
     )
      (DEBUG 
 "arch.extend_reg(EA,\"RAX\",1,32) :- \n   instruction(EA,_,_,<inlined_Operation_27>,_,_,_,_,_,_),\n   <inlined_Operation_27> = \"CDQE\".\nin file arch_x86.dl [42:1-49:7]" 
      (TIMER_ON arch.extend_reg "@t-nonrecursive-rule;arch.extend_reg;arch_x86.dl [42:1-49:7];arch.extend_reg(EA,\\\"RAX\\\",1,32) :- \\n   instruction(EA,_,_,<inlined_Operation_27>,_,_,_,_,_,_),\\n   <inlined_Operation_27> = \\\"CDQE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "CDQE")))
          (INSERT ((TUPLE t0 0) (STRING "RAX") (UNSIGNED 1) (UNSIGNED 32)) arch.extend_reg)
)        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.move_operation)
 ) )  )
  (SUBROUTINE arch.frame_pointer
(STMTS     (TIMER_ON arch.frame_pointer "@t-nonrecursive-relation;arch.frame_pointer;arch/arch.dl [468:7-468:20];"
(STMTS      (DEBUG 
 "arch.frame_pointer(\"RBP\").\nin file registers_x86_64.dl [89:1-89:22]" 
      (TIMER_ON arch.frame_pointer "@t-nonrecursive-rule;arch.frame_pointer;registers_x86_64.dl [89:1-89:22];arch.frame_pointer(\\\"RBP\\\").;"
(QUERY
        (INSERT ((STRING "RBP")) arch.frame_pointer)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.general_purpose_reg
(STMTS     (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-relation;arch.general_purpose_reg;arch/arch.dl [483:7-483:26];"
(STMTS      (DEBUG 
 "arch.general_purpose_reg(\"RAX\").\nin file registers_x86_64.dl [57:1-57:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [57:1-57:28];arch.general_purpose_reg(\\\"RAX\\\").;"
(QUERY
        (INSERT ((STRING "RAX")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"RBX\").\nin file registers_x86_64.dl [58:1-58:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [58:1-58:28];arch.general_purpose_reg(\\\"RBX\\\").;"
(QUERY
        (INSERT ((STRING "RBX")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"RCX\").\nin file registers_x86_64.dl [59:1-59:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [59:1-59:28];arch.general_purpose_reg(\\\"RCX\\\").;"
(QUERY
        (INSERT ((STRING "RCX")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"RDX\").\nin file registers_x86_64.dl [60:1-60:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [60:1-60:28];arch.general_purpose_reg(\\\"RDX\\\").;"
(QUERY
        (INSERT ((STRING "RDX")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"RDI\").\nin file registers_x86_64.dl [61:1-61:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [61:1-61:28];arch.general_purpose_reg(\\\"RDI\\\").;"
(QUERY
        (INSERT ((STRING "RDI")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"RSI\").\nin file registers_x86_64.dl [62:1-62:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [62:1-62:28];arch.general_purpose_reg(\\\"RSI\\\").;"
(QUERY
        (INSERT ((STRING "RSI")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"RBP\").\nin file registers_x86_64.dl [63:1-63:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [63:1-63:28];arch.general_purpose_reg(\\\"RBP\\\").;"
(QUERY
        (INSERT ((STRING "RBP")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"R8\").\nin file registers_x86_64.dl [64:1-64:27]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [64:1-64:27];arch.general_purpose_reg(\\\"R8\\\").;"
(QUERY
        (INSERT ((STRING "R8")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"R9\").\nin file registers_x86_64.dl [65:1-65:27]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [65:1-65:27];arch.general_purpose_reg(\\\"R9\\\").;"
(QUERY
        (INSERT ((STRING "R9")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"R10\").\nin file registers_x86_64.dl [66:1-66:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [66:1-66:28];arch.general_purpose_reg(\\\"R10\\\").;"
(QUERY
        (INSERT ((STRING "R10")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"R11\").\nin file registers_x86_64.dl [67:1-67:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [67:1-67:28];arch.general_purpose_reg(\\\"R11\\\").;"
(QUERY
        (INSERT ((STRING "R11")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"R12\").\nin file registers_x86_64.dl [68:1-68:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [68:1-68:28];arch.general_purpose_reg(\\\"R12\\\").;"
(QUERY
        (INSERT ((STRING "R12")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"R13\").\nin file registers_x86_64.dl [69:1-69:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [69:1-69:28];arch.general_purpose_reg(\\\"R13\\\").;"
(QUERY
        (INSERT ((STRING "R13")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"R14\").\nin file registers_x86_64.dl [70:1-70:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [70:1-70:28];arch.general_purpose_reg(\\\"R14\\\").;"
(QUERY
        (INSERT ((STRING "R14")) arch.general_purpose_reg)
       )
      )
     )
      (DEBUG 
 "arch.general_purpose_reg(\"R15\").\nin file registers_x86_64.dl [71:1-71:28]" 
      (TIMER_ON arch.general_purpose_reg "@t-nonrecursive-rule;arch.general_purpose_reg;registers_x86_64.dl [71:1-71:28];arch.general_purpose_reg(\\\"R15\\\").;"
(QUERY
        (INSERT ((STRING "R15")) arch.general_purpose_reg)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.halt_operation
(STMTS     (TIMER_ON arch.halt_operation "@t-nonrecursive-relation;arch.halt_operation;arch/arch.dl [156:7-156:21];"
(STMTS      (DEBUG 
 "arch.halt_operation(\"HLT\").\nin file arch_x86.dl [122:1-122:23]" 
      (TIMER_ON arch.halt_operation "@t-nonrecursive-rule;arch.halt_operation;arch_x86.dl [122:1-122:23];arch.halt_operation(\\\"HLT\\\").;"
(QUERY
        (INSERT ((STRING "HLT")) arch.halt_operation)
       )
      )
     )
      (DEBUG 
 "arch.halt_operation(\"UD0\").\nin file arch_x86.dl [123:1-123:23]" 
      (TIMER_ON arch.halt_operation "@t-nonrecursive-rule;arch.halt_operation;arch_x86.dl [123:1-123:23];arch.halt_operation(\\\"UD0\\\").;"
(QUERY
        (INSERT ((STRING "UD0")) arch.halt_operation)
       )
      )
     )
      (DEBUG 
 "arch.halt_operation(\"UD1\").\nin file arch_x86.dl [124:1-124:23]" 
      (TIMER_ON arch.halt_operation "@t-nonrecursive-rule;arch.halt_operation;arch_x86.dl [124:1-124:23];arch.halt_operation(\\\"UD1\\\").;"
(QUERY
        (INSERT ((STRING "UD1")) arch.halt_operation)
       )
      )
     )
      (DEBUG 
 "arch.halt_operation(\"UD2\").\nin file arch_x86.dl [125:1-125:23]" 
      (TIMER_ON arch.halt_operation "@t-nonrecursive-rule;arch.halt_operation;arch_x86.dl [125:1-125:23];arch.halt_operation(\\\"UD2\\\").;"
(QUERY
        (INSERT ((STRING "UD2")) arch.halt_operation)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.instruction_at
(STMTS     (TIMER_ON arch.instruction_at "@t-nonrecursive-relation;arch.instruction_at;arch/arch.dl [528:7-528:21];"
(STMTS      (DEBUG 
 "arch.instruction_at(Instruction,Instruction) :- \n   instruction(Instruction,_,_,_,_,_,_,_,_,_).\nin file arch.dl [530:1-531:48]" 
      (TIMER_ON arch.instruction_at "@t-nonrecursive-rule;arch.instruction_at;arch/arch.dl [530:1-531:48];arch.instruction_at(Instruction,Instruction) :- \\n   instruction(Instruction,_,_,_,_,_,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR_IN t0 instruction           (INSERT ((TUPLE t0 0) (TUPLE t0 0)) arch.instruction_at)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.integer_reg_param
(STMTS     (TIMER_ON arch.integer_reg_param "@t-nonrecursive-relation;arch.integer_reg_param;arch/arch.dl [497:7-497:24];"
(STMTS      (DEBUG 
 "arch.integer_reg_param(\"RCX\",1) :- \n   binary_format(\"PE\").\nin file registers_x86_64.dl [98:1-102:25]" 
      (TIMER_ON arch.integer_reg_param "@t-nonrecursive-rule;arch.integer_reg_param;registers_x86_64.dl [98:1-102:25];arch.integer_reg_param(\\\"RCX\\\",1) :- \\n   binary_format(\\\"PE\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "PE"))))
         (INSERT ((STRING "RCX") (UNSIGNED 1)) arch.integer_reg_param)
        )       )
      )
     )
      (DEBUG 
 "arch.integer_reg_param(\"RDX\",2) :- \n   binary_format(\"PE\").\nin file registers_x86_64.dl [98:1-102:25]" 
      (TIMER_ON arch.integer_reg_param "@t-nonrecursive-rule;arch.integer_reg_param;registers_x86_64.dl [98:1-102:25];arch.integer_reg_param(\\\"RDX\\\",2) :- \\n   binary_format(\\\"PE\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "PE"))))
         (INSERT ((STRING "RDX") (UNSIGNED 2)) arch.integer_reg_param)
        )       )
      )
     )
      (DEBUG 
 "arch.integer_reg_param(\"R8\",3) :- \n   binary_format(\"PE\").\nin file registers_x86_64.dl [98:1-102:25]" 
      (TIMER_ON arch.integer_reg_param "@t-nonrecursive-rule;arch.integer_reg_param;registers_x86_64.dl [98:1-102:25];arch.integer_reg_param(\\\"R8\\\",3) :- \\n   binary_format(\\\"PE\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "PE"))))
         (INSERT ((STRING "R8") (UNSIGNED 3)) arch.integer_reg_param)
        )       )
      )
     )
      (DEBUG 
 "arch.integer_reg_param(\"R9\",4) :- \n   binary_format(\"PE\").\nin file registers_x86_64.dl [98:1-102:25]" 
      (TIMER_ON arch.integer_reg_param "@t-nonrecursive-rule;arch.integer_reg_param;registers_x86_64.dl [98:1-102:25];arch.integer_reg_param(\\\"R9\\\",4) :- \\n   binary_format(\\\"PE\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "PE"))))
         (INSERT ((STRING "R9") (UNSIGNED 4)) arch.integer_reg_param)
        )       )
      )
     )
      (DEBUG 
 "arch.integer_reg_param(\"RDI\",1) :- \n   binary_format(\"ELF\").\nin file registers_x86_64.dl [105:1-111:26]" 
      (TIMER_ON arch.integer_reg_param "@t-nonrecursive-rule;arch.integer_reg_param;registers_x86_64.dl [105:1-111:26];arch.integer_reg_param(\\\"RDI\\\",1) :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "RDI") (UNSIGNED 1)) arch.integer_reg_param)
        )       )
      )
     )
      (DEBUG 
 "arch.integer_reg_param(\"RSI\",2) :- \n   binary_format(\"ELF\").\nin file registers_x86_64.dl [105:1-111:26]" 
      (TIMER_ON arch.integer_reg_param "@t-nonrecursive-rule;arch.integer_reg_param;registers_x86_64.dl [105:1-111:26];arch.integer_reg_param(\\\"RSI\\\",2) :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "RSI") (UNSIGNED 2)) arch.integer_reg_param)
        )       )
      )
     )
      (DEBUG 
 "arch.integer_reg_param(\"RDX\",3) :- \n   binary_format(\"ELF\").\nin file registers_x86_64.dl [105:1-111:26]" 
      (TIMER_ON arch.integer_reg_param "@t-nonrecursive-rule;arch.integer_reg_param;registers_x86_64.dl [105:1-111:26];arch.integer_reg_param(\\\"RDX\\\",3) :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "RDX") (UNSIGNED 3)) arch.integer_reg_param)
        )       )
      )
     )
      (DEBUG 
 "arch.integer_reg_param(\"RCX\",4) :- \n   binary_format(\"ELF\").\nin file registers_x86_64.dl [105:1-111:26]" 
      (TIMER_ON arch.integer_reg_param "@t-nonrecursive-rule;arch.integer_reg_param;registers_x86_64.dl [105:1-111:26];arch.integer_reg_param(\\\"RCX\\\",4) :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "RCX") (UNSIGNED 4)) arch.integer_reg_param)
        )       )
      )
     )
      (DEBUG 
 "arch.integer_reg_param(\"R8\",5) :- \n   binary_format(\"ELF\").\nin file registers_x86_64.dl [105:1-111:26]" 
      (TIMER_ON arch.integer_reg_param "@t-nonrecursive-rule;arch.integer_reg_param;registers_x86_64.dl [105:1-111:26];arch.integer_reg_param(\\\"R8\\\",5) :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "R8") (UNSIGNED 5)) arch.integer_reg_param)
        )       )
      )
     )
      (DEBUG 
 "arch.integer_reg_param(\"R9\",6) :- \n   binary_format(\"ELF\").\nin file registers_x86_64.dl [105:1-111:26]" 
      (TIMER_ON arch.integer_reg_param "@t-nonrecursive-rule;arch.integer_reg_param;registers_x86_64.dl [105:1-111:26];arch.integer_reg_param(\\\"R9\\\",6) :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "R9") (UNSIGNED 6)) arch.integer_reg_param)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.interrupt_operation
(STMTS     (TIMER_ON arch.interrupt_operation "@t-nonrecursive-relation;arch.interrupt_operation;arch/arch.dl [99:7-99:26];"
(STMTS      (DEBUG 
 "arch.interrupt_operation(\"INT\").\nin file interrupt_operations.dl [27:1-27:28]" 
      (TIMER_ON arch.interrupt_operation "@t-nonrecursive-rule;arch.interrupt_operation;interrupt_operations.dl [27:1-27:28];arch.interrupt_operation(\\\"INT\\\").;"
(QUERY
        (INSERT ((STRING "INT")) arch.interrupt_operation)
       )
      )
     )
      (DEBUG 
 "arch.interrupt_operation(\"INTO\").\nin file interrupt_operations.dl [28:1-28:29]" 
      (TIMER_ON arch.interrupt_operation "@t-nonrecursive-rule;arch.interrupt_operation;interrupt_operations.dl [28:1-28:29];arch.interrupt_operation(\\\"INTO\\\").;"
(QUERY
        (INSERT ((STRING "INTO")) arch.interrupt_operation)
       )
      )
     )
      (DEBUG 
 "arch.interrupt_operation(\"INT1\").\nin file interrupt_operations.dl [29:1-29:29]" 
      (TIMER_ON arch.interrupt_operation "@t-nonrecursive-rule;arch.interrupt_operation;interrupt_operations.dl [29:1-29:29];arch.interrupt_operation(\\\"INT1\\\").;"
(QUERY
        (INSERT ((STRING "INT1")) arch.interrupt_operation)
       )
      )
     )
      (DEBUG 
 "arch.interrupt_operation(\"INT3\").\nin file interrupt_operations.dl [30:1-30:29]" 
      (TIMER_ON arch.interrupt_operation "@t-nonrecursive-rule;arch.interrupt_operation;interrupt_operations.dl [30:1-30:29];arch.interrupt_operation(\\\"INT3\\\").;"
(QUERY
        (INSERT ((STRING "INT3")) arch.interrupt_operation)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.is_nop
(STMTS     (TIMER_ON arch.is_nop "@t-nonrecursive-relation;arch.is_nop;arch/arch.dl [229:7-229:13];"
(STMTS      (DEBUG 
 "arch.is_nop(EA) :- \n   arch.reg_arithmetic_operation(EA,Reg,Reg,1,0).\nin file arch.dl [232:1-233:46]" 
      (TIMER_ON arch.is_nop "@t-nonrecursive-rule;arch.is_nop;arch/arch.dl [232:1-233:46];arch.is_nop(EA) :- \\n   arch.reg_arithmetic_operation(EA,Reg,Reg,1,0).;"
(QUERY
        (IF (NOT (ISEMPTY arch.reg_arithmetic_operation))
         (FOR t0 arch.reg_arithmetic_operation (INDEX  (= (TUPLE t0 3) (NUMBER 1)) (= (TUPLE t0 4) (NUMBER 0)))
          (IF (CONSTRAINT = (TUPLE t0 1)  (TUPLE t0 2))
           (INSERT ((TUPLE t0 0)) arch.is_nop)
          ))        )       )
      )
     )
      (DEBUG 
 "arch.is_nop(EA) :- \n   instruction(EA,_,_,\"XCHG\",Op,Op,0,0,_,_),\n   op_regdirect(Op,\"AX\").\nin file arch_x86.dl [65:1-67:27]" 
      (TIMER_ON arch.is_nop "@t-nonrecursive-rule;arch.is_nop;arch_x86.dl [65:1-67:27];arch.is_nop(EA) :- \\n   instruction(EA,_,_,\\\"XCHG\\\",Op,Op,0,0,_,_),\\n   op_regdirect(Op,\\\"AX\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY op_regdirect)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "XCHG")) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (IF (AND (CONSTRAINT = (TUPLE t0 4)  (TUPLE t0 5)) (EXISTS op_regdirect ((TUPLE t0 4) (STRING "AX"))))
           (INSERT ((TUPLE t0 0)) arch.is_nop)
          ))        )       )
      )
     )
      (DEBUG 
 "arch.is_nop(EA) :- \n   instruction(EA,_,_,<inlined_Operation_28>,_,_,_,_,_,_),\n   <inlined_Operation_28> = \"NOP\".\nin file arch_x86.dl [62:1-63:41]" 
      (TIMER_ON arch.is_nop "@t-nonrecursive-rule;arch.is_nop;arch_x86.dl [62:1-63:41];arch.is_nop(EA) :- \\n   instruction(EA,_,_,<inlined_Operation_28>,_,_,_,_,_,_),\\n   <inlined_Operation_28> = \\\"NOP\\\".;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "NOP")))
          (INSERT ((TUPLE t0 0)) arch.is_nop)
)        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.jump
(STMTS (STMTS     (TIMER_ON arch.jump "@t-nonrecursive-relation;arch.jump;arch/arch.dl [243:7-243:11];"
(STMTS      (DEBUG 
 "arch.jump(EA) :- \n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.jump_operation(Operation),\n   !arch.return(EA).\nin file arch.dl [245:1-248:22]" 
      (TIMER_ON arch.jump "@t-nonrecursive-rule;arch.jump;arch/arch.dl [245:1-248:22];arch.jump(EA) :- \\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.jump_operation(Operation),\\n   !arch.return(EA).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY arch.jump_operation)))
         (FOR_IN t0 instruction           (IF (AND (EXISTS arch.jump_operation ((TUPLE t0 3))) (NOT (EXISTS arch.return ((TUPLE t0 0)))))
           (INSERT ((TUPLE t0 0)) arch.jump)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.jump_operation)
 ) )  )
  (SUBROUTINE arch.jump_condition_code
(STMTS     (TIMER_ON arch.jump_condition_code "@t-nonrecursive-relation;arch.jump_condition_code;jump_operations.dl [30:7-30:26];"
(STMTS      (DEBUG 
 "arch.jump_condition_code(\"JO\",\"O\").\nin file jump_operations.dl [32:1-32:31]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [32:1-32:31];arch.jump_condition_code(\\\"JO\\\",\\\"O\\\").;"
(QUERY
        (INSERT ((STRING "JO") (STRING "O")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JNO\",\"NO\").\nin file jump_operations.dl [33:1-33:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [33:1-33:33];arch.jump_condition_code(\\\"JNO\\\",\\\"NO\\\").;"
(QUERY
        (INSERT ((STRING "JNO") (STRING "NO")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JB\",\"B\").\nin file jump_operations.dl [34:1-34:31]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [34:1-34:31];arch.jump_condition_code(\\\"JB\\\",\\\"B\\\").;"
(QUERY
        (INSERT ((STRING "JB") (STRING "B")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JNB\",\"AE\").\nin file jump_operations.dl [35:1-35:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [35:1-35:33];arch.jump_condition_code(\\\"JNB\\\",\\\"AE\\\").;"
(QUERY
        (INSERT ((STRING "JNB") (STRING "AE")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JNA\",\"BE\").\nin file jump_operations.dl [36:1-36:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [36:1-36:33];arch.jump_condition_code(\\\"JNA\\\",\\\"BE\\\").;"
(QUERY
        (INSERT ((STRING "JNA") (STRING "BE")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JA\",\"A\").\nin file jump_operations.dl [37:1-37:31]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [37:1-37:31];arch.jump_condition_code(\\\"JA\\\",\\\"A\\\").;"
(QUERY
        (INSERT ((STRING "JA") (STRING "A")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JL\",\"L\").\nin file jump_operations.dl [38:1-38:31]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [38:1-38:31];arch.jump_condition_code(\\\"JL\\\",\\\"L\\\").;"
(QUERY
        (INSERT ((STRING "JL") (STRING "L")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JGE\",\"GE\").\nin file jump_operations.dl [39:1-39:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [39:1-39:33];arch.jump_condition_code(\\\"JGE\\\",\\\"GE\\\").;"
(QUERY
        (INSERT ((STRING "JGE") (STRING "GE")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JLE\",\"LE\").\nin file jump_operations.dl [40:1-40:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [40:1-40:33];arch.jump_condition_code(\\\"JLE\\\",\\\"LE\\\").;"
(QUERY
        (INSERT ((STRING "JLE") (STRING "LE")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JG\",\"G\").\nin file jump_operations.dl [41:1-41:31]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [41:1-41:31];arch.jump_condition_code(\\\"JG\\\",\\\"G\\\").;"
(QUERY
        (INSERT ((STRING "JG") (STRING "G")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JAE\",\"AE\").\nin file jump_operations.dl [42:1-42:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [42:1-42:33];arch.jump_condition_code(\\\"JAE\\\",\\\"AE\\\").;"
(QUERY
        (INSERT ((STRING "JAE") (STRING "AE")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JE\",\"E\").\nin file jump_operations.dl [43:1-43:31]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [43:1-43:31];arch.jump_condition_code(\\\"JE\\\",\\\"E\\\").;"
(QUERY
        (INSERT ((STRING "JE") (STRING "E")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JNE\",\"NE\").\nin file jump_operations.dl [44:1-44:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [44:1-44:33];arch.jump_condition_code(\\\"JNE\\\",\\\"NE\\\").;"
(QUERY
        (INSERT ((STRING "JNE") (STRING "NE")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JBE\",\"BE\").\nin file jump_operations.dl [45:1-45:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [45:1-45:33];arch.jump_condition_code(\\\"JBE\\\",\\\"BE\\\").;"
(QUERY
        (INSERT ((STRING "JBE") (STRING "BE")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JNBE\",\"A\").\nin file jump_operations.dl [46:1-46:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [46:1-46:33];arch.jump_condition_code(\\\"JNBE\\\",\\\"A\\\").;"
(QUERY
        (INSERT ((STRING "JNBE") (STRING "A")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JP\",\"P\").\nin file jump_operations.dl [47:1-47:31]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [47:1-47:31];arch.jump_condition_code(\\\"JP\\\",\\\"P\\\").;"
(QUERY
        (INSERT ((STRING "JP") (STRING "P")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JNP\",\"PE\").\nin file jump_operations.dl [48:1-48:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [48:1-48:33];arch.jump_condition_code(\\\"JNP\\\",\\\"PE\\\").;"
(QUERY
        (INSERT ((STRING "JNP") (STRING "PE")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JS\",\"L\").\nin file jump_operations.dl [49:1-49:31]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [49:1-49:31];arch.jump_condition_code(\\\"JS\\\",\\\"L\\\").;"
(QUERY
        (INSERT ((STRING "JS") (STRING "L")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JNS\",\"GE\").\nin file jump_operations.dl [50:1-50:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [50:1-50:33];arch.jump_condition_code(\\\"JNS\\\",\\\"GE\\\").;"
(QUERY
        (INSERT ((STRING "JNS") (STRING "GE")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JCXZ\",\"E\").\nin file jump_operations.dl [51:1-51:33]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [51:1-51:33];arch.jump_condition_code(\\\"JCXZ\\\",\\\"E\\\").;"
(QUERY
        (INSERT ((STRING "JCXZ") (STRING "E")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JECXZ\",\"E\").\nin file jump_operations.dl [52:1-52:34]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [52:1-52:34];arch.jump_condition_code(\\\"JECXZ\\\",\\\"E\\\").;"
(QUERY
        (INSERT ((STRING "JECXZ") (STRING "E")) arch.jump_condition_code)
       )
      )
     )
      (DEBUG 
 "arch.jump_condition_code(\"JRCXZ\",\"E\").\nin file jump_operations.dl [53:1-53:34]" 
      (TIMER_ON arch.jump_condition_code "@t-nonrecursive-rule;arch.jump_condition_code;jump_operations.dl [53:1-53:34];arch.jump_condition_code(\\\"JRCXZ\\\",\\\"E\\\").;"
(QUERY
        (INSERT ((STRING "JRCXZ") (STRING "E")) arch.jump_condition_code)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.jump_operation
(STMTS     (TIMER_ON arch.jump_operation "@t-nonrecursive-relation;arch.jump_operation;arch/arch.dl [105:7-105:21];"
(STMTS      (DEBUG 
 "arch.jump_operation(Operation) :- \n   arch.jump_condition_code(Operation,_).\nin file jump_operations.dl [55:1-57:39]" 
      (TIMER_ON arch.jump_operation "@t-nonrecursive-rule;arch.jump_operation;jump_operations.dl [55:1-57:39];arch.jump_operation(Operation) :- \\n   arch.jump_condition_code(Operation,_).;"
(QUERY
        (IF (NOT (ISEMPTY arch.jump_condition_code))
         (FOR_IN t0 arch.jump_condition_code           (INSERT ((TUPLE t0 0)) arch.jump_operation)
)
        )       )
      )
     )
      (DEBUG 
 "arch.jump_operation(\"JMP\").\nin file jump_operations.dl [59:1-59:23]" 
      (TIMER_ON arch.jump_operation "@t-nonrecursive-rule;arch.jump_operation;jump_operations.dl [59:1-59:23];arch.jump_operation(\\\"JMP\\\").;"
(QUERY
        (INSERT ((STRING "JMP")) arch.jump_operation)
       )
      )
     )
      (DEBUG 
 "arch.jump_operation(Operation) :- \n   arch.loop_operation(Operation,_).\nin file arch_x86.dl [70:1-71:33]" 
      (TIMER_ON arch.jump_operation "@t-nonrecursive-rule;arch.jump_operation;arch_x86.dl [70:1-71:33];arch.jump_operation(Operation) :- \\n   arch.loop_operation(Operation,_).;"
(QUERY
        (IF (NOT (ISEMPTY arch.loop_operation))
         (FOR_IN t0 arch.loop_operation           (INSERT ((TUPLE t0 0)) arch.jump_operation)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.jump_operation_op_index
(STMTS     (TIMER_ON arch.jump_operation_op_index "@t-nonrecursive-relation;arch.jump_operation_op_index;arch/arch.dl [186:7-186:30];"
(STMTS      (DEBUG 
 "arch.jump_operation_op_index(Operation,1) :- \n   arch.jump_operation(Operation).\nin file jump_operations.dl [61:1-63:33]" 
      (TIMER_ON arch.jump_operation_op_index "@t-nonrecursive-rule;arch.jump_operation_op_index;jump_operations.dl [61:1-63:33];arch.jump_operation_op_index(Operation,1) :- \\n   arch.jump_operation(Operation).;"
(QUERY
        (IF (NOT (ISEMPTY arch.jump_operation))
         (FOR_IN t0 arch.jump_operation           (INSERT ((TUPLE t0 0) (UNSIGNED 1)) arch.jump_operation_op_index)
)
        )       )
      )
     )
      (DEBUG 
 "arch.jump_operation_op_index(Operation,1) :- \n   arch.loop_operation(Operation,_).\nin file jump_operations.dl [61:1-63:33]" 
      (TIMER_ON arch.jump_operation_op_index "@t-nonrecursive-rule;arch.jump_operation_op_index;jump_operations.dl [61:1-63:33];arch.jump_operation_op_index(Operation,1) :- \\n   arch.loop_operation(Operation,_).;"
(QUERY
        (IF (NOT (ISEMPTY arch.loop_operation))
         (FOR_IN t0 arch.loop_operation           (INSERT ((TUPLE t0 0) (UNSIGNED 1)) arch.jump_operation_op_index)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.logic_operation
(STMTS     (TIMER_ON arch.logic_operation "@t-nonrecursive-relation;arch.logic_operation;arch/arch.dl [148:7-148:22];"
(STMTS      (DEBUG 
 "arch.logic_operation(\"AND\").\nin file arch_x86.dl [92:1-92:24]" 
      (TIMER_ON arch.logic_operation "@t-nonrecursive-rule;arch.logic_operation;arch_x86.dl [92:1-92:24];arch.logic_operation(\\\"AND\\\").;"
(QUERY
        (INSERT ((STRING "AND")) arch.logic_operation)
       )
      )
     )
      (DEBUG 
 "arch.logic_operation(\"XOR\").\nin file arch_x86.dl [93:1-93:24]" 
      (TIMER_ON arch.logic_operation "@t-nonrecursive-rule;arch.logic_operation;arch_x86.dl [93:1-93:24];arch.logic_operation(\\\"XOR\\\").;"
(QUERY
        (INSERT ((STRING "XOR")) arch.logic_operation)
       )
      )
     )
      (DEBUG 
 "arch.logic_operation(\"OR\").\nin file arch_x86.dl [94:1-94:23]" 
      (TIMER_ON arch.logic_operation "@t-nonrecursive-rule;arch.logic_operation;arch_x86.dl [94:1-94:23];arch.logic_operation(\\\"OR\\\").;"
(QUERY
        (INSERT ((STRING "OR")) arch.logic_operation)
       )
      )
     )
      (DEBUG 
 "arch.logic_operation(\"TEST\").\nin file arch_x86.dl [95:1-95:25]" 
      (TIMER_ON arch.logic_operation "@t-nonrecursive-rule;arch.logic_operation;arch_x86.dl [95:1-95:25];arch.logic_operation(\\\"TEST\\\").;"
(QUERY
        (INSERT ((STRING "TEST")) arch.logic_operation)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.loop_operation
(STMTS     (TIMER_ON arch.loop_operation "@t-nonrecursive-relation;arch.loop_operation;arch_x86.dl [97:7-97:21];"
(STMTS      (DEBUG 
 "arch.loop_operation(\"LOOP\",\"NE\").\nin file arch_x86.dl [98:1-98:29]" 
      (TIMER_ON arch.loop_operation "@t-nonrecursive-rule;arch.loop_operation;arch_x86.dl [98:1-98:29];arch.loop_operation(\\\"LOOP\\\",\\\"NE\\\").;"
(QUERY
        (INSERT ((STRING "LOOP") (STRING "NE")) arch.loop_operation)
       )
      )
     )
      (DEBUG 
 "arch.loop_operation(\"LOOPE\",\"?\").\nin file arch_x86.dl [102:1-102:29]" 
      (TIMER_ON arch.loop_operation "@t-nonrecursive-rule;arch.loop_operation;arch_x86.dl [102:1-102:29];arch.loop_operation(\\\"LOOPE\\\",\\\"?\\\").;"
(QUERY
        (INSERT ((STRING "LOOPE") (STRING "?")) arch.loop_operation)
       )
      )
     )
      (DEBUG 
 "arch.loop_operation(\"LOOPZ\",\"?\").\nin file arch_x86.dl [103:1-103:29]" 
      (TIMER_ON arch.loop_operation "@t-nonrecursive-rule;arch.loop_operation;arch_x86.dl [103:1-103:29];arch.loop_operation(\\\"LOOPZ\\\",\\\"?\\\").;"
(QUERY
        (INSERT ((STRING "LOOPZ") (STRING "?")) arch.loop_operation)
       )
      )
     )
      (DEBUG 
 "arch.loop_operation(\"LOOPNE\",\"?\").\nin file arch_x86.dl [104:1-104:30]" 
      (TIMER_ON arch.loop_operation "@t-nonrecursive-rule;arch.loop_operation;arch_x86.dl [104:1-104:30];arch.loop_operation(\\\"LOOPNE\\\",\\\"?\\\").;"
(QUERY
        (INSERT ((STRING "LOOPNE") (STRING "?")) arch.loop_operation)
       )
      )
     )
      (DEBUG 
 "arch.loop_operation(\"LOOPNZ\",\"?\").\nin file arch_x86.dl [105:1-105:30]" 
      (TIMER_ON arch.loop_operation "@t-nonrecursive-rule;arch.loop_operation;arch_x86.dl [105:1-105:30];arch.loop_operation(\\\"LOOPNZ\\\",\\\"?\\\").;"
(QUERY
        (INSERT ((STRING "LOOPNZ") (STRING "?")) arch.loop_operation)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.loop_prefix
(STMTS     (TIMER_ON arch.loop_prefix "@t-nonrecursive-relation;arch.loop_prefix;arch/arch.dl [542:7-542:18];"
(STMTS      (DEBUG 
 "arch.loop_prefix(\"REP\").\nin file arch_x86.dl [112:1-112:20]" 
      (TIMER_ON arch.loop_prefix "@t-nonrecursive-rule;arch.loop_prefix;arch_x86.dl [112:1-112:20];arch.loop_prefix(\\\"REP\\\").;"
(QUERY
        (INSERT ((STRING "REP")) arch.loop_prefix)
       )
      )
     )
      (DEBUG 
 "arch.loop_prefix(\"REPE\").\nin file arch_x86.dl [113:1-113:21]" 
      (TIMER_ON arch.loop_prefix "@t-nonrecursive-rule;arch.loop_prefix;arch_x86.dl [113:1-113:21];arch.loop_prefix(\\\"REPE\\\").;"
(QUERY
        (INSERT ((STRING "REPE")) arch.loop_prefix)
       )
      )
     )
      (DEBUG 
 "arch.loop_prefix(\"REPNE\").\nin file arch_x86.dl [114:1-114:22]" 
      (TIMER_ON arch.loop_prefix "@t-nonrecursive-rule;arch.loop_prefix;arch_x86.dl [114:1-114:22];arch.loop_prefix(\\\"REPNE\\\").;"
(QUERY
        (INSERT ((STRING "REPNE")) arch.loop_prefix)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.memory_access
(STMTS (STMTS (STMTS     (TIMER_ON arch.memory_access "@t-nonrecursive-relation;arch.memory_access;arch/arch.dl [293:7-293:20];"
(STMTS      (DEBUG 
 "arch.memory_access(\"LOAD\",EA,1,2,DstReg,BaseReg,IndexReg,Mult,Offset) :- \n   instruction(EA,_,_,Operation,SrcOp,DestOp,0,0,_,_),\n   arch.move_operation(Operation),\n   op_indirect_mapped(SrcOp,\"NONE\",BaseReg,IndexReg,Mult,Offset,_),\n   op_regdirect_contains_reg(DestOp,DstReg).\nin file memory_access.dl [28:1-32:46]" 
      (TIMER_ON arch.memory_access "@t-nonrecursive-rule;arch.memory_access;memory_access.dl [28:1-32:46];arch.memory_access(\\\"LOAD\\\",EA,1,2,DstReg,BaseReg,IndexReg,Mult,Offset) :- \\n   instruction(EA,_,_,Operation,SrcOp,DestOp,0,0,_,_),\\n   arch.move_operation(Operation),\\n   op_indirect_mapped(SrcOp,\\\"NONE\\\",BaseReg,IndexReg,Mult,Offset,_),\\n   op_regdirect_contains_reg(DestOp,DstReg).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY op_regdirect_contains_reg))) (NOT (ISEMPTY op_indirect_mapped))) (NOT (ISEMPTY arch.move_operation)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (IF (EXISTS arch.move_operation ((TUPLE t0 3)))
           (FOR t1 op_indirect_mapped (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)) (= (TUPLE t1 1) (STRING "NONE")))
            (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 5)))
             (INSERT ((STRING "LOAD") (TUPLE t0 0) (UNSIGNED 1) (UNSIGNED 2) (TUPLE t2 1) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5)) arch.memory_access)
))          ))        )       )
      )
     )
      (DEBUG 
 "arch.memory_access(\"STORE\",EA,1,2,SrcReg,BaseReg,IndexReg,Mult,Offset) :- \n   instruction(EA,_,_,Operation,SrcOp,DestOp,0,0,_,_),\n   arch.move_operation(Operation),\n   op_indirect_mapped(DestOp,\"NONE\",BaseReg,IndexReg,Mult,Offset,_),\n   op_regdirect_contains_reg(SrcOp,SrcReg).\nin file memory_access.dl [34:1-38:45]" 
      (TIMER_ON arch.memory_access "@t-nonrecursive-rule;arch.memory_access;memory_access.dl [34:1-38:45];arch.memory_access(\\\"STORE\\\",EA,1,2,SrcReg,BaseReg,IndexReg,Mult,Offset) :- \\n   instruction(EA,_,_,Operation,SrcOp,DestOp,0,0,_,_),\\n   arch.move_operation(Operation),\\n   op_indirect_mapped(DestOp,\\\"NONE\\\",BaseReg,IndexReg,Mult,Offset,_),\\n   op_regdirect_contains_reg(SrcOp,SrcReg).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY op_regdirect_contains_reg))) (NOT (ISEMPTY op_indirect_mapped))) (NOT (ISEMPTY arch.move_operation)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (IF (EXISTS arch.move_operation ((TUPLE t0 3)))
           (FOR t1 op_indirect_mapped (INDEX  (= (TUPLE t1 0) (TUPLE t0 5)) (= (TUPLE t1 1) (STRING "NONE")))
            (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 4)))
             (INSERT ((STRING "STORE") (TUPLE t0 0) (UNSIGNED 1) (UNSIGNED 2) (TUPLE t2 1) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5)) arch.memory_access)
))          ))        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON arch.memory_access "@t-relation-savetime;arch.memory_access;arch/arch.dl [293:7-293:20];savetime;"
     (IO arch.memory_access ((= IO "file") (= attributeNames "AccessType\tEA\tSrcOp\tDstOp\tDirectReg\tBaseReg\tIndexReg\tMult\tOffset") (= auxArity "0") (= name "arch.memory_access") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 9, \"params\": [\"AccessType\", \"EA\", \"SrcOp\", \"DstOp\", \"DirectReg\", \"BaseReg\", \"IndexReg\", \"Mult\", \"Offset\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 9, \"types\": [\"s:symbol\", \"u:address\", \"u:operand_index\", \"u:operand_index\", \"s:register\", \"s:reg_nullable\", \"s:reg_nullable\", \"i:number\", \"i:number\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE arch.move_operation
(STMTS     (TIMER_ON arch.move_operation "@t-nonrecursive-relation;arch.move_operation;arch/arch.dl [110:7-110:21];"
(STMTS      (DEBUG 
 "arch.move_operation(\"CBW\").\nin file arch_x86.dl [38:1-38:23]" 
      (TIMER_ON arch.move_operation "@t-nonrecursive-rule;arch.move_operation;arch_x86.dl [38:1-38:23];arch.move_operation(\\\"CBW\\\").;"
(QUERY
        (INSERT ((STRING "CBW")) arch.move_operation)
       )
      )
     )
      (DEBUG 
 "arch.move_operation(\"CWDE\").\nin file arch_x86.dl [39:1-39:24]" 
      (TIMER_ON arch.move_operation "@t-nonrecursive-rule;arch.move_operation;arch_x86.dl [39:1-39:24];arch.move_operation(\\\"CWDE\\\").;"
(QUERY
        (INSERT ((STRING "CWDE")) arch.move_operation)
       )
      )
     )
      (DEBUG 
 "arch.move_operation(\"CDQE\").\nin file arch_x86.dl [40:1-40:24]" 
      (TIMER_ON arch.move_operation "@t-nonrecursive-rule;arch.move_operation;arch_x86.dl [40:1-40:24];arch.move_operation(\\\"CDQE\\\").;"
(QUERY
        (INSERT ((STRING "CDQE")) arch.move_operation)
       )
      )
     )
      (DEBUG 
 "arch.move_operation(Operation) :- \n   instruction(_,_,_,Operation,_,_,_,_,_,_),\n   contains(\"MOV\", Operation).\nin file arch_x86.dl [33:1-35:32]" 
      (TIMER_ON arch.move_operation "@t-nonrecursive-rule;arch.move_operation;arch_x86.dl [33:1-35:32];arch.move_operation(Operation) :- \\n   instruction(_,_,_,Operation,_,_,_,_,_,_),\\n   contains(\\\"MOV\\\", Operation).;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR_IN t0 instruction           (IF (CONSTRAINT contains (STRING "MOV")  (TUPLE t0 3))
           (INSERT ((TUPLE t0 3)) arch.move_operation)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.move_reg_imm
(STMTS     (TIMER_ON arch.move_reg_imm "@t-nonrecursive-relation;arch.move_reg_imm;arch/arch.dl [213:7-213:19];"
(STMTS      (DEBUG 
 "arch.move_reg_imm(EA,Dst,Value,1) :- \n   instruction(EA,_,_,Operation,Op1,Op2,0,0,_,_),\n   arch.move_operation(Operation),\n   op_immediate(Op1,Value),\n   op_regdirect_contains_reg(Op2,Dst).\nin file arch.dl [215:1-219:40]" 
      (TIMER_ON arch.move_reg_imm "@t-nonrecursive-rule;arch.move_reg_imm;arch/arch.dl [215:1-219:40];arch.move_reg_imm(EA,Dst,Value,1) :- \\n   instruction(EA,_,_,Operation,Op1,Op2,0,0,_,_),\\n   arch.move_operation(Operation),\\n   op_immediate(Op1,Value),\\n   op_regdirect_contains_reg(Op2,Dst).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY op_regdirect_contains_reg))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY arch.move_operation)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (IF (EXISTS arch.move_operation ((TUPLE t0 3)))
           (FOR t1 op_immediate (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)))
            (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 5)))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t1 1) (UNSIGNED 1)) arch.move_reg_imm)
))          ))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.move_reg_reg
(STMTS     (TIMER_ON arch.move_reg_reg "@t-nonrecursive-relation;arch.move_reg_reg;arch/arch.dl [200:7-200:19];"
(STMTS      (DEBUG 
 "arch.move_reg_reg(EA,Dst,Src) :- \n   instruction(EA,_,_,Operation,Op1,Op2,0,0,_,_),\n   arch.move_operation(Operation),\n   op_regdirect_contains_reg(Op1,Src),\n   op_regdirect_contains_reg(Op2,Dst).\nin file arch.dl [202:1-206:40]" 
      (TIMER_ON arch.move_reg_reg "@t-nonrecursive-rule;arch.move_reg_reg;arch/arch.dl [202:1-206:40];arch.move_reg_reg(EA,Dst,Src) :- \\n   instruction(EA,_,_,Operation,Op1,Op2,0,0,_,_),\\n   arch.move_operation(Operation),\\n   op_regdirect_contains_reg(Op1,Src),\\n   op_regdirect_contains_reg(Op2,Dst).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY arch.move_operation)) (NOT (ISEMPTY op_regdirect_contains_reg))) (NOT (ISEMPTY instruction)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (IF (EXISTS arch.move_operation ((TUPLE t0 3)))
           (FOR t1 op_regdirect_contains_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)))
            (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 5)))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t1 1)) arch.move_reg_reg)
))          ))        )       )
      )
     )
      (DEBUG 
 "arch.move_reg_reg(EA,\"RAX\",\"RAX\") :- \n   instruction(EA,_,_,<inlined_Operation_31>,_,_,_,_,_,_),\n   <inlined_Operation_31> = \"CBW\".\nin file arch_x86.dl [42:1-49:7]" 
      (TIMER_ON arch.move_reg_reg "@t-nonrecursive-rule;arch.move_reg_reg;arch_x86.dl [42:1-49:7];arch.move_reg_reg(EA,\\\"RAX\\\",\\\"RAX\\\") :- \\n   instruction(EA,_,_,<inlined_Operation_31>,_,_,_,_,_,_),\\n   <inlined_Operation_31> = \\\"CBW\\\".;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "CBW")))
          (INSERT ((TUPLE t0 0) (STRING "RAX") (STRING "RAX")) arch.move_reg_reg)
)        )       )
      )
     )
      (DEBUG 
 "arch.move_reg_reg(EA,\"RAX\",\"RAX\") :- \n   instruction(EA,_,_,<inlined_Operation_32>,_,_,_,_,_,_),\n   <inlined_Operation_32> = \"CWDE\".\nin file arch_x86.dl [42:1-49:7]" 
      (TIMER_ON arch.move_reg_reg "@t-nonrecursive-rule;arch.move_reg_reg;arch_x86.dl [42:1-49:7];arch.move_reg_reg(EA,\\\"RAX\\\",\\\"RAX\\\") :- \\n   instruction(EA,_,_,<inlined_Operation_32>,_,_,_,_,_,_),\\n   <inlined_Operation_32> = \\\"CWDE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "CWDE")))
          (INSERT ((TUPLE t0 0) (STRING "RAX") (STRING "RAX")) arch.move_reg_reg)
)        )       )
      )
     )
      (DEBUG 
 "arch.move_reg_reg(EA,\"RAX\",\"RAX\") :- \n   instruction(EA,_,_,<inlined_Operation_33>,_,_,_,_,_,_),\n   <inlined_Operation_33> = \"CDQE\".\nin file arch_x86.dl [42:1-49:7]" 
      (TIMER_ON arch.move_reg_reg "@t-nonrecursive-rule;arch.move_reg_reg;arch_x86.dl [42:1-49:7];arch.move_reg_reg(EA,\\\"RAX\\\",\\\"RAX\\\") :- \\n   instruction(EA,_,_,<inlined_Operation_33>,_,_,_,_,_,_),\\n   <inlined_Operation_33> = \\\"CDQE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "CDQE")))
          (INSERT ((TUPLE t0 0) (STRING "RAX") (STRING "RAX")) arch.move_reg_reg)
)        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.multiplication_operation
(STMTS     (TIMER_ON arch.multiplication_operation "@t-nonrecursive-relation;arch.multiplication_operation;arch/arch.dl [131:7-131:31];"
(STMTS      (DEBUG 
 "arch.multiplication_operation(\"IMUL\").\nin file arch_x86.dl [80:1-80:34]" 
      (TIMER_ON arch.multiplication_operation "@t-nonrecursive-rule;arch.multiplication_operation;arch_x86.dl [80:1-80:34];arch.multiplication_operation(\\\"IMUL\\\").;"
(QUERY
        (INSERT ((STRING "IMUL")) arch.multiplication_operation)
       )
      )
     )
      (DEBUG 
 "arch.multiplication_operation(\"SHL\").\nin file arch_x86.dl [81:1-81:33]" 
      (TIMER_ON arch.multiplication_operation "@t-nonrecursive-rule;arch.multiplication_operation;arch_x86.dl [81:1-81:33];arch.multiplication_operation(\\\"SHL\\\").;"
(QUERY
        (INSERT ((STRING "SHL")) arch.multiplication_operation)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.pc_relative_addr
(STMTS     (TIMER_ON arch.pc_relative_addr "@t-nonrecursive-relation;arch.pc_relative_addr;arch/arch.dl [514:7-514:23];"
(STMTS      (DEBUG 
 "arch.pc_relative_addr(EA,Reg,Base) :- \n   instruction(EA,_,_,<inlined_Operation_34>,_,_,_,_,_,_),\n   <inlined_Operation_34> = \"LEA\",\n   instruction_get_dest_op(EA,_,DestOp),\n   op_regdirect_contains_reg(DestOp,Reg),\n   instruction_get_src_op(EA,SrcOpIndex,_),\n   pc_relative_operand(EA,SrcOpIndex,Base).\nin file arch_x86.dl [236:1-241:45]" 
      (TIMER_ON arch.pc_relative_addr "@t-nonrecursive-rule;arch.pc_relative_addr;arch_x86.dl [236:1-241:45];arch.pc_relative_addr(EA,Reg,Base) :- \\n   instruction(EA,_,_,<inlined_Operation_34>,_,_,_,_,_,_),\\n   <inlined_Operation_34> = \\\"LEA\\\",\\n   instruction_get_dest_op(EA,_,DestOp),\\n   op_regdirect_contains_reg(DestOp,Reg),\\n   instruction_get_src_op(EA,SrcOpIndex,_),\\n   pc_relative_operand(EA,SrcOpIndex,Base).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY pc_relative_operand)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY op_regdirect_contains_reg))) (NOT (ISEMPTY instruction_get_src_op))) (NOT (ISEMPTY instruction_get_dest_op)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "LEA")))
          (FOR t1 instruction_get_dest_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
            (FOR t3 instruction_get_src_op (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)))
             (FOR t4 pc_relative_operand (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)) (= (TUPLE t4 1) (TUPLE t3 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t4 2)) arch.pc_relative_addr)
)))))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.reg_arithmetic_operation
(STMTS     (TIMER_ON arch.reg_arithmetic_operation "@t-nonrecursive-relation;arch.reg_arithmetic_operation;arch/arch.dl [339:7-339:31];"
(STMTS      (DEBUG 
 "arch.reg_arithmetic_operation(EA,Dst,Src,(Mult+1),Offset) :- \n   Mult != -1,\n   arch.reg_reg_arithmetic_operation(EA,Dst,Src,Src,Mult,Offset).\nin file arch.dl [342:1-344:67]" 
      (TIMER_ON arch.reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_arithmetic_operation;arch/arch.dl [342:1-344:67];arch.reg_arithmetic_operation(EA,Dst,Src,(Mult+1),Offset) :- \\n   Mult != -1,\\n   arch.reg_reg_arithmetic_operation(EA,Dst,Src,Src,Mult,Offset).;"
(QUERY
        (IF (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))
         (FOR_IN t0 arch.reg_reg_arithmetic_operation           (IF (AND (CONSTRAINT = (TUPLE t0 2)  (TUPLE t0 3)) (CONSTRAINT != (TUPLE t0 4)  (NUMBER -1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (INTRINSIC + (TUPLE t0 4) (NUMBER 1)) (TUPLE t0 5)) arch.reg_arithmetic_operation)
          ))
        )       )
      )
     )
      (DEBUG 
 "arch.reg_arithmetic_operation(EA,Reg,Reg,1,Immediate) :- \n   instruction(EA,_,_,\"ADD\",Op1,Op2,0,0,_,_),\n   op_immediate(Op1,Immediate),\n   op_regdirect_contains_reg(Op2,Reg).\nin file arch_x86.dl [142:1-145:40]" 
      (TIMER_ON arch.reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_arithmetic_operation;arch_x86.dl [142:1-145:40];arch.reg_arithmetic_operation(EA,Reg,Reg,1,Immediate) :- \\n   instruction(EA,_,_,\\\"ADD\\\",Op1,Op2,0,0,_,_),\\n   op_immediate(Op1,Immediate),\\n   op_regdirect_contains_reg(Op2,Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY op_immediate)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "ADD")) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_immediate (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)))
           (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 5)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 1) (NUMBER 1) (TUPLE t1 1)) arch.reg_arithmetic_operation)
)))        )       )
      )
     )
      (DEBUG 
 "arch.reg_arithmetic_operation(EA,Reg,Reg,1,-(Immediate)) :- \n   instruction(EA,_,_,\"SUB\",Op1,Op2,0,0,_,_),\n   op_immediate(Op1,Immediate),\n   op_regdirect_contains_reg(Op2,Reg).\nin file arch_x86.dl [148:1-151:40]" 
      (TIMER_ON arch.reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_arithmetic_operation;arch_x86.dl [148:1-151:40];arch.reg_arithmetic_operation(EA,Reg,Reg,1,-(Immediate)) :- \\n   instruction(EA,_,_,\\\"SUB\\\",Op1,Op2,0,0,_,_),\\n   op_immediate(Op1,Immediate),\\n   op_regdirect_contains_reg(Op2,Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY op_immediate)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "SUB")) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_immediate (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)))
           (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 5)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 1) (NUMBER 1) (INTRINSIC - (TUPLE t1 1))) arch.reg_arithmetic_operation)
)))        )       )
      )
     )
      (DEBUG 
 "arch.reg_arithmetic_operation(EA,Reg,Reg,1,1) :- \n   instruction(EA,_,_,\"INC\",Op1,0,0,0,_,_),\n   op_regdirect_contains_reg(Op1,Reg).\nin file arch_x86.dl [154:1-156:40]" 
      (TIMER_ON arch.reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_arithmetic_operation;arch_x86.dl [154:1-156:40];arch.reg_arithmetic_operation(EA,Reg,Reg,1,1) :- \\n   instruction(EA,_,_,\\\"INC\\\",Op1,0,0,0,_,_),\\n   op_regdirect_contains_reg(Op1,Reg).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY op_regdirect_contains_reg)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "INC")) (= (TUPLE t0 5) (UNSIGNED 0)) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_regdirect_contains_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 1) (NUMBER 1) (NUMBER 1)) arch.reg_arithmetic_operation)
))        )       )
      )
     )
      (DEBUG 
 "arch.reg_arithmetic_operation(EA,Reg,Reg,1,-1) :- \n   instruction(EA,_,_,\"DEC\",Op1,0,0,0,_,_),\n   op_regdirect_contains_reg(Op1,Reg).\nin file arch_x86.dl [159:1-161:40]" 
      (TIMER_ON arch.reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_arithmetic_operation;arch_x86.dl [159:1-161:40];arch.reg_arithmetic_operation(EA,Reg,Reg,1,-1) :- \\n   instruction(EA,_,_,\\\"DEC\\\",Op1,0,0,0,_,_),\\n   op_regdirect_contains_reg(Op1,Reg).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY op_regdirect_contains_reg)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "DEC")) (= (TUPLE t0 5) (UNSIGNED 0)) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_regdirect_contains_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 1) (NUMBER 1) (NUMBER -1)) arch.reg_arithmetic_operation)
))        )       )
      )
     )
      (DEBUG 
 "arch.reg_arithmetic_operation(EA,Reg,Reg,(2**Shift),0) :- \n   instruction(EA,_,_,\"SHL\",Op1,Op2,0,0,_,_),\n   op_immediate(Op1,Shift),\n   op_regdirect_contains_reg(Op2,Reg).\nin file arch_x86.dl [164:1-167:40]" 
      (TIMER_ON arch.reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_arithmetic_operation;arch_x86.dl [164:1-167:40];arch.reg_arithmetic_operation(EA,Reg,Reg,(2**Shift),0) :- \\n   instruction(EA,_,_,\\\"SHL\\\",Op1,Op2,0,0,_,_),\\n   op_immediate(Op1,Shift),\\n   op_regdirect_contains_reg(Op2,Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY op_immediate)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "SHL")) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_immediate (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)))
           (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 5)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 1) (INTRINSIC ^ (NUMBER 2) (TUPLE t1 1)) (NUMBER 0)) arch.reg_arithmetic_operation)
)))        )       )
      )
     )
      (DEBUG 
 "arch.reg_arithmetic_operation(EA,Reg,Reg,Mult,0) :- \n   instruction(EA,_,_,\"IMUL\",Op1,Op2,0,0,_,_),\n   op_immediate(Op1,Mult),\n   op_regdirect_contains_reg(Op2,Reg).\nin file arch_x86.dl [170:1-173:40]" 
      (TIMER_ON arch.reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_arithmetic_operation;arch_x86.dl [170:1-173:40];arch.reg_arithmetic_operation(EA,Reg,Reg,Mult,0) :- \\n   instruction(EA,_,_,\\\"IMUL\\\",Op1,Op2,0,0,_,_),\\n   op_immediate(Op1,Mult),\\n   op_regdirect_contains_reg(Op2,Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY op_immediate)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "IMUL")) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_immediate (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)))
           (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 5)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 1) (TUPLE t1 1) (NUMBER 0)) arch.reg_arithmetic_operation)
)))        )       )
      )
     )
      (DEBUG 
 "arch.reg_arithmetic_operation(EA,Dst,Src,Mult,0) :- \n   instruction(EA,_,_,\"IMUL\",Op1,Op2,Op3,0,_,_),\n   op_immediate(Op2,Mult),\n   op_regdirect_contains_reg(Op3,Dst),\n   op_regdirect_contains_reg(Op1,Src).\nin file arch_x86.dl [176:1-180:40]" 
      (TIMER_ON arch.reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_arithmetic_operation;arch_x86.dl [176:1-180:40];arch.reg_arithmetic_operation(EA,Dst,Src,Mult,0) :- \\n   instruction(EA,_,_,\\\"IMUL\\\",Op1,Op2,Op3,0,_,_),\\n   op_immediate(Op2,Mult),\\n   op_regdirect_contains_reg(Op3,Dst),\\n   op_regdirect_contains_reg(Op1,Src).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_immediate)) (NOT (ISEMPTY op_regdirect_contains_reg))) (NOT (ISEMPTY instruction)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "IMUL")) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_immediate (INDEX  (= (TUPLE t1 0) (TUPLE t0 5)))
           (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 6)))
            (FOR t3 op_regdirect_contains_reg (INDEX  (= (TUPLE t3 0) (TUPLE t0 4)))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 1) (TUPLE t1 1) (NUMBER 0)) arch.reg_arithmetic_operation)
))))        )       )
      )
     )
      (DEBUG 
 "arch.reg_arithmetic_operation(EA,Reg,as(Reg_origin, register),Mult,Offset) :- \n   instruction(EA,_,_,\"LEA\",Op1,Op2,0,0,_,_),\n   op_indirect_mapped(Op1,_,\"NONE\",Reg_origin,Mult,Offset,_),\n   Reg_origin != \"NONE\",\n   op_regdirect_contains_reg(Op2,Reg).\nin file arch_x86.dl [183:1-187:40]" 
      (TIMER_ON arch.reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_arithmetic_operation;arch_x86.dl [183:1-187:40];arch.reg_arithmetic_operation(EA,Reg,as(Reg_origin, register),Mult,Offset) :- \\n   instruction(EA,_,_,\\\"LEA\\\",Op1,Op2,0,0,_,_),\\n   op_indirect_mapped(Op1,_,\\\"NONE\\\",Reg_origin,Mult,Offset,_),\\n   Reg_origin != \\\"NONE\\\",\\n   op_regdirect_contains_reg(Op2,Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY op_indirect_mapped)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "LEA")) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_indirect_mapped (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)) (= (TUPLE t1 2) (STRING "NONE")))
           (IF (CONSTRAINT != (TUPLE t1 3)  (STRING "NONE"))
            (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 5)))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5)) arch.reg_arithmetic_operation)
)           )))        )       )
      )
     )
      (DEBUG 
 "arch.reg_arithmetic_operation(EA,Reg,as(Reg_origin, register),1,Offset) :- \n   instruction(EA,_,_,\"LEA\",Op1,Op2,0,0,_,_),\n   op_indirect_mapped(Op1,_,Reg_origin,\"NONE\",1,Offset,_),\n   Reg_origin != \"NONE\",\n   op_regdirect_contains_reg(Op2,Reg).\nin file arch_x86.dl [190:1-194:40]" 
      (TIMER_ON arch.reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_arithmetic_operation;arch_x86.dl [190:1-194:40];arch.reg_arithmetic_operation(EA,Reg,as(Reg_origin, register),1,Offset) :- \\n   instruction(EA,_,_,\\\"LEA\\\",Op1,Op2,0,0,_,_),\\n   op_indirect_mapped(Op1,_,Reg_origin,\\\"NONE\\\",1,Offset,_),\\n   Reg_origin != \\\"NONE\\\",\\n   op_regdirect_contains_reg(Op2,Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY op_indirect_mapped)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "LEA")) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_indirect_mapped (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)) (= (TUPLE t1 3) (STRING "NONE")) (= (TUPLE t1 4) (NUMBER 1)))
           (IF (CONSTRAINT != (TUPLE t1 2)  (STRING "NONE"))
            (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 5)))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t1 2) (NUMBER 1) (TUPLE t1 5)) arch.reg_arithmetic_operation)
)           )))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.reg_map_rule
(STMTS     (TIMER_ON arch.reg_map_rule "@t-nonrecursive-relation;arch.reg_map_rule;arch/arch.dl [447:7-447:19];"
(STMTS      (DEBUG 
 "arch.reg_map_rule(\"AL\",\"RAX\").\nin file registers_x86_64.dl [30:1-30:26]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [30:1-30:26];arch.reg_map_rule(\\\"AL\\\",\\\"RAX\\\").;"
(QUERY
        (INSERT ((STRING "AL") (STRING "RAX")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"BL\",\"RBX\").\nin file registers_x86_64.dl [31:1-31:26]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [31:1-31:26];arch.reg_map_rule(\\\"BL\\\",\\\"RBX\\\").;"
(QUERY
        (INSERT ((STRING "BL") (STRING "RBX")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"CL\",\"RCX\").\nin file registers_x86_64.dl [32:1-32:26]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [32:1-32:26];arch.reg_map_rule(\\\"CL\\\",\\\"RCX\\\").;"
(QUERY
        (INSERT ((STRING "CL") (STRING "RCX")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"DL\",\"RDX\").\nin file registers_x86_64.dl [33:1-33:26]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [33:1-33:26];arch.reg_map_rule(\\\"DL\\\",\\\"RDX\\\").;"
(QUERY
        (INSERT ((STRING "DL") (STRING "RDX")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"DI\",\"RDI\").\nin file registers_x86_64.dl [34:1-34:26]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [34:1-34:26];arch.reg_map_rule(\\\"DI\\\",\\\"RDI\\\").;"
(QUERY
        (INSERT ((STRING "DI") (STRING "RDI")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"SI\",\"RSI\").\nin file registers_x86_64.dl [35:1-35:26]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [35:1-35:26];arch.reg_map_rule(\\\"SI\\\",\\\"RSI\\\").;"
(QUERY
        (INSERT ((STRING "SI") (STRING "RSI")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"BP\",\"RBP\").\nin file registers_x86_64.dl [36:1-36:26]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [36:1-36:26];arch.reg_map_rule(\\\"BP\\\",\\\"RBP\\\").;"
(QUERY
        (INSERT ((STRING "BP") (STRING "RBP")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"SP\",\"RSP\").\nin file registers_x86_64.dl [37:1-37:26]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [37:1-37:26];arch.reg_map_rule(\\\"SP\\\",\\\"RSP\\\").;"
(QUERY
        (INSERT ((STRING "SP") (STRING "RSP")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"EAX\",\"RAX\").\nin file registers_x86_64.dl [38:1-38:27]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [38:1-38:27];arch.reg_map_rule(\\\"EAX\\\",\\\"RAX\\\").;"
(QUERY
        (INSERT ((STRING "EAX") (STRING "RAX")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"EBX\",\"RBX\").\nin file registers_x86_64.dl [39:1-39:27]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [39:1-39:27];arch.reg_map_rule(\\\"EBX\\\",\\\"RBX\\\").;"
(QUERY
        (INSERT ((STRING "EBX") (STRING "RBX")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"ECX\",\"RCX\").\nin file registers_x86_64.dl [40:1-40:27]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [40:1-40:27];arch.reg_map_rule(\\\"ECX\\\",\\\"RCX\\\").;"
(QUERY
        (INSERT ((STRING "ECX") (STRING "RCX")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"EDX\",\"RDX\").\nin file registers_x86_64.dl [41:1-41:27]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [41:1-41:27];arch.reg_map_rule(\\\"EDX\\\",\\\"RDX\\\").;"
(QUERY
        (INSERT ((STRING "EDX") (STRING "RDX")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"EDI\",\"RDI\").\nin file registers_x86_64.dl [42:1-42:27]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [42:1-42:27];arch.reg_map_rule(\\\"EDI\\\",\\\"RDI\\\").;"
(QUERY
        (INSERT ((STRING "EDI") (STRING "RDI")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"ESI\",\"RSI\").\nin file registers_x86_64.dl [43:1-43:27]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [43:1-43:27];arch.reg_map_rule(\\\"ESI\\\",\\\"RSI\\\").;"
(QUERY
        (INSERT ((STRING "ESI") (STRING "RSI")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"EBP\",\"RBP\").\nin file registers_x86_64.dl [44:1-44:27]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [44:1-44:27];arch.reg_map_rule(\\\"EBP\\\",\\\"RBP\\\").;"
(QUERY
        (INSERT ((STRING "EBP") (STRING "RBP")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"ESP\",\"RSP\").\nin file registers_x86_64.dl [45:1-45:27]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [45:1-45:27];arch.reg_map_rule(\\\"ESP\\\",\\\"RSP\\\").;"
(QUERY
        (INSERT ((STRING "ESP") (STRING "RSP")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"R8D\",\"R8\").\nin file registers_x86_64.dl [46:1-46:26]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [46:1-46:26];arch.reg_map_rule(\\\"R8D\\\",\\\"R8\\\").;"
(QUERY
        (INSERT ((STRING "R8D") (STRING "R8")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"R9D\",\"R9\").\nin file registers_x86_64.dl [47:1-47:26]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [47:1-47:26];arch.reg_map_rule(\\\"R9D\\\",\\\"R9\\\").;"
(QUERY
        (INSERT ((STRING "R9D") (STRING "R9")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"R10D\",\"R10\").\nin file registers_x86_64.dl [48:1-48:28]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [48:1-48:28];arch.reg_map_rule(\\\"R10D\\\",\\\"R10\\\").;"
(QUERY
        (INSERT ((STRING "R10D") (STRING "R10")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"R11D\",\"R11\").\nin file registers_x86_64.dl [49:1-49:28]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [49:1-49:28];arch.reg_map_rule(\\\"R11D\\\",\\\"R11\\\").;"
(QUERY
        (INSERT ((STRING "R11D") (STRING "R11")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"R12D\",\"R12\").\nin file registers_x86_64.dl [50:1-50:28]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [50:1-50:28];arch.reg_map_rule(\\\"R12D\\\",\\\"R12\\\").;"
(QUERY
        (INSERT ((STRING "R12D") (STRING "R12")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"R13D\",\"R13\").\nin file registers_x86_64.dl [51:1-51:28]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [51:1-51:28];arch.reg_map_rule(\\\"R13D\\\",\\\"R13\\\").;"
(QUERY
        (INSERT ((STRING "R13D") (STRING "R13")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"R14D\",\"R14\").\nin file registers_x86_64.dl [52:1-52:28]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [52:1-52:28];arch.reg_map_rule(\\\"R14D\\\",\\\"R14\\\").;"
(QUERY
        (INSERT ((STRING "R14D") (STRING "R14")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"R15D\",\"R15\").\nin file registers_x86_64.dl [53:1-53:28]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [53:1-53:28];arch.reg_map_rule(\\\"R15D\\\",\\\"R15\\\").;"
(QUERY
        (INSERT ((STRING "R15D") (STRING "R15")) arch.reg_map_rule)
       )
      )
     )
      (DEBUG 
 "arch.reg_map_rule(\"EFLAGS\",\"RFLAGS\").\nin file registers_x86_64.dl [55:1-55:34]" 
      (TIMER_ON arch.reg_map_rule "@t-nonrecursive-rule;arch.reg_map_rule;registers_x86_64.dl [55:1-55:34];arch.reg_map_rule(\\\"EFLAGS\\\",\\\"RFLAGS\\\").;"
(QUERY
        (INSERT ((STRING "EFLAGS") (STRING "RFLAGS")) arch.reg_map_rule)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.reg_reg_arithmetic_operation
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON arch.reg_reg_arithmetic_operation "@t-nonrecursive-relation;arch.reg_reg_arithmetic_operation;arch/arch.dl [351:7-351:35];"
(STMTS      (DEBUG 
 "arch.reg_reg_arithmetic_operation(EA,Reg2,Reg2,Reg1,-1,0) :- \n   instruction(EA,_,_,\"SUB\",Op1,Op2,0,0,_,_),\n   op_regdirect_contains_reg(Op1,Reg1),\n   op_regdirect_contains_reg(Op2,Reg2).\nin file arch_x86.dl [196:1-199:41]" 
      (TIMER_ON arch.reg_reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_reg_arithmetic_operation;arch_x86.dl [196:1-199:41];arch.reg_reg_arithmetic_operation(EA,Reg2,Reg2,Reg1,-1,0) :- \\n   instruction(EA,_,_,\\\"SUB\\\",Op1,Op2,0,0,_,_),\\n   op_regdirect_contains_reg(Op1,Reg1),\\n   op_regdirect_contains_reg(Op2,Reg2).;"
(QUERY
        (IF (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY instruction)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "SUB")) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_regdirect_contains_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)))
           (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 5)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 1) (TUPLE t1 1) (NUMBER -1) (NUMBER 0)) arch.reg_reg_arithmetic_operation)
)))        )       )
      )
     )
      (DEBUG 
 "arch.reg_reg_arithmetic_operation(EA,Reg2,Reg1,Reg2,1,0) :- \n   instruction(EA,_,_,\"ADD\",Op1,Op2,0,0,_,_),\n   op_regdirect_contains_reg(Op2,Reg2),\n   op_regdirect_contains_reg(Op1,Reg1).\nin file arch_x86.dl [201:1-204:41]" 
      (TIMER_ON arch.reg_reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_reg_arithmetic_operation;arch_x86.dl [201:1-204:41];arch.reg_reg_arithmetic_operation(EA,Reg2,Reg1,Reg2,1,0) :- \\n   instruction(EA,_,_,\\\"ADD\\\",Op1,Op2,0,0,_,_),\\n   op_regdirect_contains_reg(Op2,Reg2),\\n   op_regdirect_contains_reg(Op1,Reg1).;"
(QUERY
        (IF (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY instruction)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "ADD")) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_regdirect_contains_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 5)))
           (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 4)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 1) (TUPLE t1 1) (NUMBER 1) (NUMBER 0)) arch.reg_reg_arithmetic_operation)
)))        )       )
      )
     )
      (DEBUG 
 "arch.reg_reg_arithmetic_operation(EA,Reg_def,as(Reg1, register),as(Reg2, register),Mult,Offset) :- \n   instruction(EA,_,_,\"LEA\",Op1,Op2,0,0,_,_),\n   op_regdirect_contains_reg(Op2,Reg_def),\n   op_indirect_mapped(Op1,_,Reg1,Reg2,Mult,Offset,_),\n   Reg1 != \"NONE\",\n   Reg2 != \"NONE\".\nin file arch_x86.dl [207:1-212:31]" 
      (TIMER_ON arch.reg_reg_arithmetic_operation "@t-nonrecursive-rule;arch.reg_reg_arithmetic_operation;arch_x86.dl [207:1-212:31];arch.reg_reg_arithmetic_operation(EA,Reg_def,as(Reg1, register),as(Reg2, register),Mult,Offset) :- \\n   instruction(EA,_,_,\\\"LEA\\\",Op1,Op2,0,0,_,_),\\n   op_regdirect_contains_reg(Op2,Reg_def),\\n   op_indirect_mapped(Op1,_,Reg1,Reg2,Mult,Offset,_),\\n   Reg1 != \\\"NONE\\\",\\n   Reg2 != \\\"NONE\\\".;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_indirect_mapped)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY op_regdirect_contains_reg)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "LEA")) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (FOR t1 op_regdirect_contains_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 5)))
           (FOR t2 op_indirect_mapped (INDEX  (= (TUPLE t2 0) (TUPLE t0 4)))
            (IF (AND (CONSTRAINT != (TUPLE t2 2)  (STRING "NONE")) (CONSTRAINT != (TUPLE t2 3)  (STRING "NONE")))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t2 4) (TUPLE t2 5)) arch.reg_reg_arithmetic_operation)
            ))))        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 arch.reg_reg_arithmetic_operation       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @delta_arch.reg_reg_arithmetic_operation)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_arch.reg_reg_arithmetic_operation "@t-recursive-relation;arch.reg_reg_arithmetic_operation;arch/arch.dl [351:7-351:35];"
(STMTS       (DEBUG 
 "arch.reg_reg_arithmetic_operation(EA,Dst,Reg2,Reg1,1,0) :- \n   arch.reg_reg_arithmetic_operation(EA,Dst,Reg1,Reg2,1,0).\nin file arch.dl [354:1-355:56]" 
       (TIMER_ON @new_arch.reg_reg_arithmetic_operation "@t-recursive-rule;arch.reg_reg_arithmetic_operation;0;arch/arch.dl [354:1-355:56];arch.reg_reg_arithmetic_operation(EA,Dst,Reg2,Reg1,1,0) :- \\n   arch.reg_reg_arithmetic_operation(EA,Dst,Reg1,Reg2,1,0).;"
(QUERY
         (IF (NOT (ISEMPTY @delta_arch.reg_reg_arithmetic_operation))
          (FOR t0 @delta_arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t0 4) (NUMBER 1)) (= (TUPLE t0 5) (NUMBER 0)))
           (IF (NOT (EXISTS arch.reg_reg_arithmetic_operation ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t0 2) (NUMBER 1) (NUMBER 0))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t0 2) (NUMBER 1) (NUMBER 0)) @new_arch.reg_reg_arithmetic_operation)
           ))         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_arch.reg_reg_arithmetic_operation "@t-recursive-relation;arch.reg_reg_arithmetic_operation;arch/arch.dl [351:7-351:35];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_arch.reg_reg_arithmetic_operation))
 ) (STMTS      (TIMER_ON @new_arch.reg_reg_arithmetic_operation "@c-recursive-relation;arch.reg_reg_arithmetic_operation;arch/arch.dl [351:7-351:35];"
(STMTS (QUERY
       (FOR_IN t0 @new_arch.reg_reg_arithmetic_operation         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) arch.reg_reg_arithmetic_operation)
)
      )
       (SWAP @delta_arch.reg_reg_arithmetic_operation @new_arch.reg_reg_arithmetic_operation)
       (CLEAR @new_arch.reg_reg_arithmetic_operation)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_arch.reg_reg_arithmetic_operation)
     (CLEAR @new_arch.reg_reg_arithmetic_operation)
 ) )  )  )  )
  (SUBROUTINE arch.reg_relative_load
(STMTS     (TIMER_ON arch.reg_relative_load "@t-nonrecursive-relation;arch.reg_relative_load;arch/arch.dl [427:7-427:24];"
(STMTS      (DEBUG 
 "arch.reg_relative_load(EA,as(BaseReg, register),Offset,Size) :- \n   arch.memory_access(\"LOAD\",EA,MemOp,_,_,BaseReg,<inlined_IndexReg_38>,_,Offset),\n   <inlined_IndexReg_38> = \"NONE\",\n   BaseReg != \"NONE\",\n   BaseReg != \"RIP\",\n   instruction_memory_access_size(EA,MemOp,Size).\nin file arch_x86.dl [243:1-247:51]" 
      (TIMER_ON arch.reg_relative_load "@t-nonrecursive-rule;arch.reg_relative_load;arch_x86.dl [243:1-247:51];arch.reg_relative_load(EA,as(BaseReg, register),Offset,Size) :- \\n   arch.memory_access(\\\"LOAD\\\",EA,MemOp,_,_,BaseReg,<inlined_IndexReg_38>,_,Offset),\\n   <inlined_IndexReg_38> = \\\"NONE\\\",\\n   BaseReg != \\\"NONE\\\",\\n   BaseReg != \\\"RIP\\\",\\n   instruction_memory_access_size(EA,MemOp,Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.memory_access)) (NOT (ISEMPTY instruction_memory_access_size)))
         (FOR t0 arch.memory_access (INDEX  (= (TUPLE t0 0) (STRING "LOAD")) (= (TUPLE t0 6) (STRING "NONE")))
          (IF (AND (CONSTRAINT != (TUPLE t0 5)  (STRING "NONE")) (CONSTRAINT != (TUPLE t0 5)  (STRING "RIP")))
           (FOR t1 instruction_memory_access_size (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (TUPLE t0 2)))
            (INSERT ((TUPLE t0 1) (TUPLE t0 5) (TUPLE t0 8) (TUPLE t1 2)) arch.reg_relative_load)
)          ))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.register_size_bits
(STMTS     (TIMER_ON arch.register_size_bits "@t-nonrecursive-relation;arch.register_size_bits;arch/arch.dl [536:7-536:25];"
(STMTS      (DEBUG 
 "arch.register_size_bits(\"AL\",8).\nin file registers_common.dl [27:1-31:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [27:1-31:16];arch.register_size_bits(\\\"AL\\\",8).;"
(QUERY
        (INSERT ((STRING "AL") (UNSIGNED 8)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"BL\",8).\nin file registers_common.dl [27:1-31:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [27:1-31:16];arch.register_size_bits(\\\"BL\\\",8).;"
(QUERY
        (INSERT ((STRING "BL") (UNSIGNED 8)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"CL\",8).\nin file registers_common.dl [27:1-31:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [27:1-31:16];arch.register_size_bits(\\\"CL\\\",8).;"
(QUERY
        (INSERT ((STRING "CL") (UNSIGNED 8)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"DL\",8).\nin file registers_common.dl [27:1-31:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [27:1-31:16];arch.register_size_bits(\\\"DL\\\",8).;"
(QUERY
        (INSERT ((STRING "DL") (UNSIGNED 8)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"AX\",16).\nin file registers_common.dl [33:1-41:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [33:1-41:16];arch.register_size_bits(\\\"AX\\\",16).;"
(QUERY
        (INSERT ((STRING "AX") (UNSIGNED 16)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"BX\",16).\nin file registers_common.dl [33:1-41:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [33:1-41:16];arch.register_size_bits(\\\"BX\\\",16).;"
(QUERY
        (INSERT ((STRING "BX") (UNSIGNED 16)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"CX\",16).\nin file registers_common.dl [33:1-41:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [33:1-41:16];arch.register_size_bits(\\\"CX\\\",16).;"
(QUERY
        (INSERT ((STRING "CX") (UNSIGNED 16)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"DX\",16).\nin file registers_common.dl [33:1-41:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [33:1-41:16];arch.register_size_bits(\\\"DX\\\",16).;"
(QUERY
        (INSERT ((STRING "DX") (UNSIGNED 16)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"BP\",16).\nin file registers_common.dl [33:1-41:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [33:1-41:16];arch.register_size_bits(\\\"BP\\\",16).;"
(QUERY
        (INSERT ((STRING "BP") (UNSIGNED 16)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"SI\",16).\nin file registers_common.dl [33:1-41:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [33:1-41:16];arch.register_size_bits(\\\"SI\\\",16).;"
(QUERY
        (INSERT ((STRING "SI") (UNSIGNED 16)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"DI\",16).\nin file registers_common.dl [33:1-41:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [33:1-41:16];arch.register_size_bits(\\\"DI\\\",16).;"
(QUERY
        (INSERT ((STRING "DI") (UNSIGNED 16)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"SP\",16).\nin file registers_common.dl [33:1-41:16]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [33:1-41:16];arch.register_size_bits(\\\"SP\\\",16).;"
(QUERY
        (INSERT ((STRING "SP") (UNSIGNED 16)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"EAX\",32).\nin file registers_common.dl [43:1-51:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [43:1-51:17];arch.register_size_bits(\\\"EAX\\\",32).;"
(QUERY
        (INSERT ((STRING "EAX") (UNSIGNED 32)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"EBX\",32).\nin file registers_common.dl [43:1-51:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [43:1-51:17];arch.register_size_bits(\\\"EBX\\\",32).;"
(QUERY
        (INSERT ((STRING "EBX") (UNSIGNED 32)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"ECX\",32).\nin file registers_common.dl [43:1-51:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [43:1-51:17];arch.register_size_bits(\\\"ECX\\\",32).;"
(QUERY
        (INSERT ((STRING "ECX") (UNSIGNED 32)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"EDX\",32).\nin file registers_common.dl [43:1-51:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [43:1-51:17];arch.register_size_bits(\\\"EDX\\\",32).;"
(QUERY
        (INSERT ((STRING "EDX") (UNSIGNED 32)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"EBP\",32).\nin file registers_common.dl [43:1-51:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [43:1-51:17];arch.register_size_bits(\\\"EBP\\\",32).;"
(QUERY
        (INSERT ((STRING "EBP") (UNSIGNED 32)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"ESI\",32).\nin file registers_common.dl [43:1-51:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [43:1-51:17];arch.register_size_bits(\\\"ESI\\\",32).;"
(QUERY
        (INSERT ((STRING "ESI") (UNSIGNED 32)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"EDI\",32).\nin file registers_common.dl [43:1-51:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [43:1-51:17];arch.register_size_bits(\\\"EDI\\\",32).;"
(QUERY
        (INSERT ((STRING "EDI") (UNSIGNED 32)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"ESP\",32).\nin file registers_common.dl [43:1-51:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_common.dl [43:1-51:17];arch.register_size_bits(\\\"ESP\\\",32).;"
(QUERY
        (INSERT ((STRING "ESP") (UNSIGNED 32)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"DIL\",8).\nin file registers_x86_64.dl [113:1-117:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [113:1-117:17];arch.register_size_bits(\\\"DIL\\\",8).;"
(QUERY
        (INSERT ((STRING "DIL") (UNSIGNED 8)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"SIL\",8).\nin file registers_x86_64.dl [113:1-117:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [113:1-117:17];arch.register_size_bits(\\\"SIL\\\",8).;"
(QUERY
        (INSERT ((STRING "SIL") (UNSIGNED 8)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"BPL\",8).\nin file registers_x86_64.dl [113:1-117:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [113:1-117:17];arch.register_size_bits(\\\"BPL\\\",8).;"
(QUERY
        (INSERT ((STRING "BPL") (UNSIGNED 8)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"SPL\",8).\nin file registers_x86_64.dl [113:1-117:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [113:1-117:17];arch.register_size_bits(\\\"SPL\\\",8).;"
(QUERY
        (INSERT ((STRING "SPL") (UNSIGNED 8)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"RAX\",64).\nin file registers_x86_64.dl [119:1-127:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [119:1-127:17];arch.register_size_bits(\\\"RAX\\\",64).;"
(QUERY
        (INSERT ((STRING "RAX") (UNSIGNED 64)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"RBX\",64).\nin file registers_x86_64.dl [119:1-127:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [119:1-127:17];arch.register_size_bits(\\\"RBX\\\",64).;"
(QUERY
        (INSERT ((STRING "RBX") (UNSIGNED 64)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"RCX\",64).\nin file registers_x86_64.dl [119:1-127:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [119:1-127:17];arch.register_size_bits(\\\"RCX\\\",64).;"
(QUERY
        (INSERT ((STRING "RCX") (UNSIGNED 64)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"RDX\",64).\nin file registers_x86_64.dl [119:1-127:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [119:1-127:17];arch.register_size_bits(\\\"RDX\\\",64).;"
(QUERY
        (INSERT ((STRING "RDX") (UNSIGNED 64)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"RBP\",64).\nin file registers_x86_64.dl [119:1-127:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [119:1-127:17];arch.register_size_bits(\\\"RBP\\\",64).;"
(QUERY
        (INSERT ((STRING "RBP") (UNSIGNED 64)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"RSI\",64).\nin file registers_x86_64.dl [119:1-127:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [119:1-127:17];arch.register_size_bits(\\\"RSI\\\",64).;"
(QUERY
        (INSERT ((STRING "RSI") (UNSIGNED 64)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"RDI\",64).\nin file registers_x86_64.dl [119:1-127:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [119:1-127:17];arch.register_size_bits(\\\"RDI\\\",64).;"
(QUERY
        (INSERT ((STRING "RDI") (UNSIGNED 64)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(\"RSP\",64).\nin file registers_x86_64.dl [119:1-127:17]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [119:1-127:17];arch.register_size_bits(\\\"RSP\\\",64).;"
(QUERY
        (INSERT ((STRING "RSP") (UNSIGNED 64)) arch.register_size_bits)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(cat(\"R\",to_string(@generator_0),\"L\"),8) :- \n   @generator_0 = range(8,16,1).\nin file registers_x86_64.dl [129:1-137:40]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [129:1-137:40];arch.register_size_bits(cat(\\\"R\\\",to_string(@generator_0),\\\"L\\\"),8) :- \\n   @generator_0 = range(8,16,1).;"
(QUERY
        (INTRINSIC (RANGE (NUMBER 8) (NUMBER 16) (NUMBER 1)) t0)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(cat(\"R\",to_string(@generator_0),\"W\"),16) :- \n   @generator_0 = range(8,16,1).\nin file registers_x86_64.dl [129:1-137:40]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [129:1-137:40];arch.register_size_bits(cat(\\\"R\\\",to_string(@generator_0),\\\"W\\\"),16) :- \\n   @generator_0 = range(8,16,1).;"
(QUERY
        (INTRINSIC (RANGE (NUMBER 8) (NUMBER 16) (NUMBER 1)) t0)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(cat(\"R\",to_string(@generator_0),\"D\"),32) :- \n   @generator_0 = range(8,16,1).\nin file registers_x86_64.dl [129:1-137:40]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [129:1-137:40];arch.register_size_bits(cat(\\\"R\\\",to_string(@generator_0),\\\"D\\\"),32) :- \\n   @generator_0 = range(8,16,1).;"
(QUERY
        (INTRINSIC (RANGE (NUMBER 8) (NUMBER 16) (NUMBER 1)) t0)
       )
      )
     )
      (DEBUG 
 "arch.register_size_bits(cat(\"R\",to_string(@generator_0)),64) :- \n   @generator_0 = range(8,16,1).\nin file registers_x86_64.dl [129:1-137:40]" 
      (TIMER_ON arch.register_size_bits "@t-nonrecursive-rule;arch.register_size_bits;registers_x86_64.dl [129:1-137:40];arch.register_size_bits(cat(\\\"R\\\",to_string(@generator_0)),64) :- \\n   @generator_0 = range(8,16,1).;"
(QUERY
        (INTRINSIC (RANGE (NUMBER 8) (NUMBER 16) (NUMBER 1)) t0)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.return
(STMTS (STMTS     (TIMER_ON arch.return "@t-nonrecursive-relation;arch.return;arch/arch.dl [238:7-238:13];"
(STMTS      (DEBUG 
 "arch.return(EA) :- \n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.return_operation(Operation).\nin file arch.dl [239:1-241:33]" 
      (TIMER_ON arch.return "@t-nonrecursive-rule;arch.return;arch/arch.dl [239:1-241:33];arch.return(EA) :- \\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.return_operation(Operation).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY arch.return_operation)))
         (FOR_IN t0 instruction           (IF (EXISTS arch.return_operation ((TUPLE t0 3)))
           (INSERT ((TUPLE t0 0)) arch.return)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.return_operation)
 ) )  )
  (SUBROUTINE arch.return_operation
(STMTS     (TIMER_ON arch.return_operation "@t-nonrecursive-relation;arch.return_operation;arch/arch.dl [154:7-154:23];"
(STMTS      (DEBUG 
 "arch.return_operation(\"RET\").\nin file arch_x86.dl [120:1-120:25]" 
      (TIMER_ON arch.return_operation "@t-nonrecursive-rule;arch.return_operation;arch_x86.dl [120:1-120:25];arch.return_operation(\\\"RET\\\").;"
(QUERY
        (INSERT ((STRING "RET")) arch.return_operation)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.return_reg
(STMTS     (TIMER_ON arch.return_reg "@t-nonrecursive-relation;arch.return_reg;arch/arch.dl [478:7-478:17];"
(STMTS      (DEBUG 
 "arch.return_reg(\"RAX\").\nin file registers_x86_64.dl [93:1-93:19]" 
      (TIMER_ON arch.return_reg "@t-nonrecursive-rule;arch.return_reg;registers_x86_64.dl [93:1-93:19];arch.return_reg(\\\"RAX\\\").;"
(QUERY
        (INSERT ((STRING "RAX")) arch.return_reg)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.shift_rotate_operation
(STMTS     (TIMER_ON arch.shift_rotate_operation "@t-nonrecursive-relation;arch.shift_rotate_operation;arch/arch.dl [137:7-137:29];"
(STMTS      (DEBUG 
 "arch.shift_rotate_operation(\"SHL\").\nin file arch_x86.dl [83:1-83:31]" 
      (TIMER_ON arch.shift_rotate_operation "@t-nonrecursive-rule;arch.shift_rotate_operation;arch_x86.dl [83:1-83:31];arch.shift_rotate_operation(\\\"SHL\\\").;"
(QUERY
        (INSERT ((STRING "SHL")) arch.shift_rotate_operation)
       )
      )
     )
      (DEBUG 
 "arch.shift_rotate_operation(\"SAL\").\nin file arch_x86.dl [84:1-84:31]" 
      (TIMER_ON arch.shift_rotate_operation "@t-nonrecursive-rule;arch.shift_rotate_operation;arch_x86.dl [84:1-84:31];arch.shift_rotate_operation(\\\"SAL\\\").;"
(QUERY
        (INSERT ((STRING "SAL")) arch.shift_rotate_operation)
       )
      )
     )
      (DEBUG 
 "arch.shift_rotate_operation(\"SHR\").\nin file arch_x86.dl [85:1-85:31]" 
      (TIMER_ON arch.shift_rotate_operation "@t-nonrecursive-rule;arch.shift_rotate_operation;arch_x86.dl [85:1-85:31];arch.shift_rotate_operation(\\\"SHR\\\").;"
(QUERY
        (INSERT ((STRING "SHR")) arch.shift_rotate_operation)
       )
      )
     )
      (DEBUG 
 "arch.shift_rotate_operation(\"SAR\").\nin file arch_x86.dl [86:1-86:31]" 
      (TIMER_ON arch.shift_rotate_operation "@t-nonrecursive-rule;arch.shift_rotate_operation;arch_x86.dl [86:1-86:31];arch.shift_rotate_operation(\\\"SAR\\\").;"
(QUERY
        (INSERT ((STRING "SAR")) arch.shift_rotate_operation)
       )
      )
     )
      (DEBUG 
 "arch.shift_rotate_operation(\"ROR\").\nin file arch_x86.dl [87:1-87:31]" 
      (TIMER_ON arch.shift_rotate_operation "@t-nonrecursive-rule;arch.shift_rotate_operation;arch_x86.dl [87:1-87:31];arch.shift_rotate_operation(\\\"ROR\\\").;"
(QUERY
        (INSERT ((STRING "ROR")) arch.shift_rotate_operation)
       )
      )
     )
      (DEBUG 
 "arch.shift_rotate_operation(\"ROL\").\nin file arch_x86.dl [88:1-88:31]" 
      (TIMER_ON arch.shift_rotate_operation "@t-nonrecursive-rule;arch.shift_rotate_operation;arch_x86.dl [88:1-88:31];arch.shift_rotate_operation(\\\"ROL\\\").;"
(QUERY
        (INSERT ((STRING "ROL")) arch.shift_rotate_operation)
       )
      )
     )
      (DEBUG 
 "arch.shift_rotate_operation(\"RCR\").\nin file arch_x86.dl [89:1-89:31]" 
      (TIMER_ON arch.shift_rotate_operation "@t-nonrecursive-rule;arch.shift_rotate_operation;arch_x86.dl [89:1-89:31];arch.shift_rotate_operation(\\\"RCR\\\").;"
(QUERY
        (INSERT ((STRING "RCR")) arch.shift_rotate_operation)
       )
      )
     )
      (DEBUG 
 "arch.shift_rotate_operation(\"RCL\").\nin file arch_x86.dl [90:1-90:31]" 
      (TIMER_ON arch.shift_rotate_operation "@t-nonrecursive-rule;arch.shift_rotate_operation;arch_x86.dl [90:1-90:31];arch.shift_rotate_operation(\\\"RCL\\\").;"
(QUERY
        (INSERT ((STRING "RCL")) arch.shift_rotate_operation)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.simple_data_load
(STMTS     (TIMER_ON arch.simple_data_load "@t-nonrecursive-relation;arch.simple_data_load;arch/arch.dl [435:7-435:23];"
(STMTS      (DEBUG 
 "arch.simple_data_load(EA,Data,Size) :- \n   pc_relative_operand(EA,MemIndex,Data),\n   arch.memory_access(\"LOAD\",EA,MemIndex,_,_,_,_,_,_),\n   instruction_memory_access_size(EA,MemIndex,Size),\n   Size != 0.\nin file arch_x86.dl [249:1-253:15]" 
      (TIMER_ON arch.simple_data_load "@t-nonrecursive-rule;arch.simple_data_load;arch_x86.dl [249:1-253:15];arch.simple_data_load(EA,Data,Size) :- \\n   pc_relative_operand(EA,MemIndex,Data),\\n   arch.memory_access(\\\"LOAD\\\",EA,MemIndex,_,_,_,_,_,_),\\n   instruction_memory_access_size(EA,MemIndex,Size),\\n   Size != 0.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_memory_access_size)) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY arch.memory_access)))
         (FOR_IN t0 pc_relative_operand           (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 instruction_memory_access_size (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (CONSTRAINT != (TUPLE t1 2)  (UNSIGNED 0))
             (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t1 2)) arch.simple_data_load)
            ))          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.stack_pointer
(STMTS     (TIMER_ON arch.stack_pointer "@t-nonrecursive-relation;arch.stack_pointer;arch/arch.dl [473:7-473:20];"
(STMTS      (DEBUG 
 "arch.stack_pointer(\"RSP\").\nin file registers_x86_64.dl [91:1-91:22]" 
      (TIMER_ON arch.stack_pointer "@t-nonrecursive-rule;arch.stack_pointer;registers_x86_64.dl [91:1-91:22];arch.stack_pointer(\\\"RSP\\\").;"
(QUERY
        (INSERT ((STRING "RSP")) arch.stack_pointer)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE arch.syscall_operation
(STMTS     (TIMER_ON arch.syscall_operation "@t-nonrecursive-relation;arch.syscall_operation;arch/arch.dl [152:7-152:24];"
(STMTS      (DEBUG 
 "arch.syscall_operation(\"SYSCALL\").\nin file arch_x86.dl [118:1-118:30]" 
      (TIMER_ON arch.syscall_operation "@t-nonrecursive-rule;arch.syscall_operation;arch_x86.dl [118:1-118:30];arch.syscall_operation(\\\"SYSCALL\\\").;"
(QUERY
        (INSERT ((STRING "SYSCALL")) arch.syscall_operation)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE ascii_string
(STMTS (STMTS (STMTS     (TIMER_ON ascii_string "@t-relation-loadtime;ascii_string;/usr/local/src/ddisasm/src/datalog/main.dl [307:7-307:19];loadtime;"
     (IO ascii_string ((= IO "file") (= attributeNames "EA\tEnd") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "ascii_string") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"EA\", \"End\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE ascii_string "@n-nonrecursive-relation;ascii_string;/usr/local/src/ddisasm/src/datalog/main.dl [307:7-307:19];")
 )   )  )  )
  (SUBROUTINE avoid_symbols
(STMTS (STMTS     (TIMER_ON avoid_symbols "@t-nonrecursive-relation;avoid_symbols;symbols.dl [182:7-182:20];"
(STMTS      (DEBUG 
 "avoid_symbols(Name) :- \n   binary_format(\"ELF\"),\n   elf_avoid_symbols(Name).\nin file symbols.dl [184:1-186:29]" 
      (TIMER_ON avoid_symbols "@t-nonrecursive-rule;avoid_symbols;symbols.dl [184:1-186:29];avoid_symbols(Name) :- \\n   binary_format(\\\"ELF\\\"),\\n   elf_avoid_symbols(Name).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY elf_avoid_symbols))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 elf_avoid_symbols           (INSERT ((TUPLE t0 0)) avoid_symbols)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR elf_avoid_symbols)
 ) )  )
  (SUBROUTINE bad_symbol_constant
(STMTS (STMTS (STMTS     (TIMER_ON bad_symbol_constant "@t-nonrecursive-relation;bad_symbol_constant;self_diagnose.dl [32:7-32:26];"
(STMTS      (DEBUG 
 "bad_symbol_constant(EA,Cnt) :- \n   relocation_in_operand(EA,Index,Rel,InsnOffset),\n   relocation(Rel,_,_,Cnt,_,_,_),\n   pc_relative_operand(EA,Index,_),\n   instruction(EA,InsnSize,_,_,_,_,_,_,_,_),\n   symbolic_operand(EA,Index,Dest,_),\n   !moved_label(EA,Index,_,_),\n   loaded_section(Base,End,Name),\n   Dest >= Base,\n   Dest < End,\n   loaded_section(Base2,End2,Name2),\n   Name2 != Name,\n   as((as(Dest, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) >= Base2,\n   as((as(Dest, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) < End2,\n   as((as(Dest, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) != End.\nin file self_diagnose.dl [35:1-59:28]" 
      (TIMER_ON bad_symbol_constant "@t-nonrecursive-rule;bad_symbol_constant;self_diagnose.dl [35:1-59:28];bad_symbol_constant(EA,Cnt) :- \\n   relocation_in_operand(EA,Index,Rel,InsnOffset),\\n   relocation(Rel,_,_,Cnt,_,_,_),\\n   pc_relative_operand(EA,Index,_),\\n   instruction(EA,InsnSize,_,_,_,_,_,_,_,_),\\n   symbolic_operand(EA,Index,Dest,_),\\n   !moved_label(EA,Index,_,_),\\n   loaded_section(Base,End,Name),\\n   Dest >= Base,\\n   Dest < End,\\n   loaded_section(Base2,End2,Name2),\\n   Name2 != Name,\\n   as((as(Dest, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) >= Base2,\\n   as((as(Dest, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) < End2,\\n   as((as(Dest, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) != End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY relocation_in_operand))) (NOT (ISEMPTY symbolic_operand)))
         (FOR_IN t0 relocation_in_operand           (IF (AND (NOT (EXISTS moved_label ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))) (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF)))
           (FOR t1 relocation (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 instruction (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (FOR t3 symbolic_operand (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 1) (TUPLE t0 1)))
              (FOR_IN t4 loaded_section                (IF (AND (AND (CONSTRAINT >= (TUPLE t3 2)  (TUPLE t4 0)) (CONSTRAINT != (INTRINSIC - (TUPLE t3 2) (INTRINSIC + (TUPLE t1 3) (INTRINSIC - (TUPLE t2 1) (TUPLE t0 3))))  (TUPLE t4 1))) (CONSTRAINT < (TUPLE t3 2)  (TUPLE t4 1)))
                (IF_EXISTS t5 loaded_section (AND (AND (CONSTRAINT != (TUPLE t5 2)  (TUPLE t4 2)) (CONSTRAINT >= (INTRINSIC - (TUPLE t3 2) (INTRINSIC + (TUPLE t1 3) (INTRINSIC - (TUPLE t2 1) (TUPLE t0 3))))  (TUPLE t5 0))) (CONSTRAINT < (INTRINSIC - (TUPLE t3 2) (INTRINSIC + (TUPLE t1 3) (INTRINSIC - (TUPLE t2 1) (TUPLE t0 3))))  (TUPLE t5 1))) 
                 (INSERT ((TUPLE t0 0) (TUPLE t1 3)) bad_symbol_constant)
)               ))
)))          ))
        )       )
      )
     )
      (DEBUG 
 "bad_symbol_constant(EA,Cnt) :- \n   relocation_in_operand(EA,Index,Rel,_),\n   relocation(Rel,_,_,Cnt,_,_,_),\n   !pc_relative_operand(EA,Index,_),\n   symbolic_operand(EA,Index,Dest,_),\n   !moved_label(EA,Index,_,_),\n   loaded_section(Base,End,Name),\n   Dest >= Base,\n   Dest < End,\n   loaded_section(Base2,End2,Name2),\n   Name2 != Name,\n   as((as(Dest, number)-Cnt), unsigned) >= Base2,\n   as((as(Dest, number)-Cnt), unsigned) < End2,\n   as((as(Dest, number)-Cnt), unsigned) != End.\nin file self_diagnose.dl [35:1-59:28]" 
      (TIMER_ON bad_symbol_constant "@t-nonrecursive-rule;bad_symbol_constant;self_diagnose.dl [35:1-59:28];bad_symbol_constant(EA,Cnt) :- \\n   relocation_in_operand(EA,Index,Rel,_),\\n   relocation(Rel,_,_,Cnt,_,_,_),\\n   !pc_relative_operand(EA,Index,_),\\n   symbolic_operand(EA,Index,Dest,_),\\n   !moved_label(EA,Index,_,_),\\n   loaded_section(Base,End,Name),\\n   Dest >= Base,\\n   Dest < End,\\n   loaded_section(Base2,End2,Name2),\\n   Name2 != Name,\\n   as((as(Dest, number)-Cnt), unsigned) >= Base2,\\n   as((as(Dest, number)-Cnt), unsigned) < End2,\\n   as((as(Dest, number)-Cnt), unsigned) != End.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY relocation_in_operand))) (NOT (ISEMPTY symbolic_operand)))
         (FOR_IN t0 relocation_in_operand           (IF (AND (NOT (EXISTS moved_label ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))) (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))))
           (FOR t1 relocation (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 symbolic_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
             (FOR_IN t3 loaded_section               (IF (AND (AND (CONSTRAINT >= (TUPLE t2 2)  (TUPLE t3 0)) (CONSTRAINT != (INTRINSIC - (TUPLE t2 2) (TUPLE t1 3))  (TUPLE t3 1))) (CONSTRAINT < (TUPLE t2 2)  (TUPLE t3 1)))
               (IF_EXISTS t4 loaded_section (AND (AND (CONSTRAINT != (TUPLE t4 2)  (TUPLE t3 2)) (CONSTRAINT >= (INTRINSIC - (TUPLE t2 2) (TUPLE t1 3))  (TUPLE t4 0))) (CONSTRAINT < (INTRINSIC - (TUPLE t2 2) (TUPLE t1 3))  (TUPLE t4 1))) 
                (INSERT ((TUPLE t0 0) (TUPLE t1 3)) bad_symbol_constant)
)              ))
))          ))
        )       )
      )
     )
      (DEBUG 
 "bad_symbol_constant(EA,Cnt) :- \n   relocation_in_operand(EA,Index,Rel,InsnOffset),\n   relocation(Rel,_,_,Cnt,_,_,_),\n   pc_relative_operand(EA,Index,_),\n   instruction(EA,InsnSize,_,_,_,_,_,_,_,_),\n   moved_label(EA,Index,Orig,Dest),\n   loaded_section(Base,End,Name),\n   Dest >= Base,\n   Dest < End,\n   loaded_section(Base2,End2,Name2),\n   Name2 != Name,\n   as((as(Orig, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) >= Base2,\n   as((as(Orig, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) < End2,\n   as((as(Orig, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) != End.\nin file self_diagnose.dl [61:1-84:28]" 
      (TIMER_ON bad_symbol_constant "@t-nonrecursive-rule;bad_symbol_constant;self_diagnose.dl [61:1-84:28];bad_symbol_constant(EA,Cnt) :- \\n   relocation_in_operand(EA,Index,Rel,InsnOffset),\\n   relocation(Rel,_,_,Cnt,_,_,_),\\n   pc_relative_operand(EA,Index,_),\\n   instruction(EA,InsnSize,_,_,_,_,_,_,_,_),\\n   moved_label(EA,Index,Orig,Dest),\\n   loaded_section(Base,End,Name),\\n   Dest >= Base,\\n   Dest < End,\\n   loaded_section(Base2,End2,Name2),\\n   Name2 != Name,\\n   as((as(Orig, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) >= Base2,\\n   as((as(Orig, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) < End2,\\n   as((as(Orig, number)-(Cnt+as((InsnSize-InsnOffset), number))), unsigned) != End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY relocation_in_operand))) (NOT (ISEMPTY moved_label)))
         (FOR_IN t0 relocation_in_operand           (IF (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))
           (FOR t1 relocation (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 instruction (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (FOR t3 moved_label (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 1) (TUPLE t0 1)))
              (FOR_IN t4 loaded_section                (IF (AND (AND (CONSTRAINT >= (TUPLE t3 3)  (TUPLE t4 0)) (CONSTRAINT != (INTRINSIC - (TUPLE t3 2) (INTRINSIC + (TUPLE t1 3) (INTRINSIC - (TUPLE t2 1) (TUPLE t0 3))))  (TUPLE t4 1))) (CONSTRAINT < (TUPLE t3 3)  (TUPLE t4 1)))
                (IF_EXISTS t5 loaded_section (AND (AND (CONSTRAINT != (TUPLE t5 2)  (TUPLE t4 2)) (CONSTRAINT >= (INTRINSIC - (TUPLE t3 2) (INTRINSIC + (TUPLE t1 3) (INTRINSIC - (TUPLE t2 1) (TUPLE t0 3))))  (TUPLE t5 0))) (CONSTRAINT < (INTRINSIC - (TUPLE t3 2) (INTRINSIC + (TUPLE t1 3) (INTRINSIC - (TUPLE t2 1) (TUPLE t0 3))))  (TUPLE t5 1))) 
                 (INSERT ((TUPLE t0 0) (TUPLE t1 3)) bad_symbol_constant)
)               ))
)))          ))
        )       )
      )
     )
      (DEBUG 
 "bad_symbol_constant(EA,Cnt) :- \n   relocation_in_operand(EA,Index,Rel,_),\n   relocation(Rel,_,_,Cnt,_,_,_),\n   !pc_relative_operand(EA,Index,_),\n   moved_label(EA,Index,Orig,Dest),\n   loaded_section(Base,End,Name),\n   Dest >= Base,\n   Dest < End,\n   loaded_section(Base2,End2,Name2),\n   Name2 != Name,\n   as((as(Orig, number)-Cnt), unsigned) >= Base2,\n   as((as(Orig, number)-Cnt), unsigned) < End2,\n   as((as(Orig, number)-Cnt), unsigned) != End.\nin file self_diagnose.dl [61:1-84:28]" 
      (TIMER_ON bad_symbol_constant "@t-nonrecursive-rule;bad_symbol_constant;self_diagnose.dl [61:1-84:28];bad_symbol_constant(EA,Cnt) :- \\n   relocation_in_operand(EA,Index,Rel,_),\\n   relocation(Rel,_,_,Cnt,_,_,_),\\n   !pc_relative_operand(EA,Index,_),\\n   moved_label(EA,Index,Orig,Dest),\\n   loaded_section(Base,End,Name),\\n   Dest >= Base,\\n   Dest < End,\\n   loaded_section(Base2,End2,Name2),\\n   Name2 != Name,\\n   as((as(Orig, number)-Cnt), unsigned) >= Base2,\\n   as((as(Orig, number)-Cnt), unsigned) < End2,\\n   as((as(Orig, number)-Cnt), unsigned) != End.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY relocation_in_operand))) (NOT (ISEMPTY moved_label)))
         (FOR_IN t0 relocation_in_operand           (IF (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF)))
           (FOR t1 relocation (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 moved_label (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
             (FOR_IN t3 loaded_section               (IF (AND (AND (CONSTRAINT >= (TUPLE t2 3)  (TUPLE t3 0)) (CONSTRAINT != (INTRINSIC - (TUPLE t2 2) (TUPLE t1 3))  (TUPLE t3 1))) (CONSTRAINT < (TUPLE t2 3)  (TUPLE t3 1)))
               (IF_EXISTS t4 loaded_section (AND (AND (CONSTRAINT != (TUPLE t4 2)  (TUPLE t3 2)) (CONSTRAINT >= (INTRINSIC - (TUPLE t2 2) (TUPLE t1 3))  (TUPLE t4 0))) (CONSTRAINT < (INTRINSIC - (TUPLE t2 2) (TUPLE t1 3))  (TUPLE t4 1))) 
                (INSERT ((TUPLE t0 0) (TUPLE t1 3)) bad_symbol_constant)
)              ))
))          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON bad_symbol_constant "@t-relation-savetime;bad_symbol_constant;self_diagnose.dl [32:7-32:26];savetime;"
     (IO bad_symbol_constant ((= IO "file") (= attributeNames "EA\tcnt") (= auxArity "0") (= name "bad_symbol_constant") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"EA\", \"cnt\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"i:number\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE base_address
(STMTS (STMTS (STMTS     (TIMER_ON base_address "@t-relation-loadtime;base_address;/usr/local/src/ddisasm/src/datalog/main.dl [151:7-151:19];loadtime;"
     (IO base_address ((= IO "file") (= attributeNames "ea") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "base_address") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"ea\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE base_address "@n-nonrecursive-relation;base_address;/usr/local/src/ddisasm/src/datalog/main.dl [151:7-151:19];")
 )   )  )  )
  (SUBROUTINE base_relative_jump
(STMTS (STMTS (STMTS (STMTS (STMTS     (LOGSIZE base_relative_jump "@n-nonrecursive-relation;base_relative_jump;binary/pe/symbolization.dl [174:7-174:25];")
 ) (STMTS     (LOGSIZE base_relative_operand "@n-nonrecursive-relation;base_relative_operand;binary/pe/symbolization.dl [85:7-85:28];")
 ) (STMTS     (LOGSIZE base_relative_operation "@n-nonrecursive-relation;base_relative_operation;binary/pe/symbolization.dl [163:7-163:30];")
 ) (STMTS     (TIMER_ON block_next "@t-nonrecursive-relation;block_next;use_def_analysis.dl [70:7-70:17];"
(STMTS      (DEBUG 
 "block_next(Block,EA,Block2) :- \n   block_last_instruction(Block,EA),\n   may_fallthrough(EA,Block2),\n   !no_return_call_propagated(EA),\n   !inter_procedural_edge(EA,Block2),\n   block(Block2).\nin file use_def_analysis.dl [72:1-77:19]" 
      (TIMER_ON block_next "@t-nonrecursive-rule;block_next;use_def_analysis.dl [72:1-77:19];block_next(Block,EA,Block2) :- \\n   block_last_instruction(Block,EA),\\n   may_fallthrough(EA,Block2),\\n   !no_return_call_propagated(EA),\\n   !inter_procedural_edge(EA,Block2),\\n   block(Block2).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY block)) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY may_fallthrough)))
         (FOR_IN t0 block_last_instruction           (IF (NOT (EXISTS no_return_call_propagated ((TUPLE t0 1))))
           (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (AND (EXISTS block ((TUPLE t1 1))) (NOT (EXISTS inter_procedural_edge ((TUPLE t0 1) (TUPLE t1 1)))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1)) block_next)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "block_next(Block,EA,Block2) :- \n   lsda_callsite_addresses(Beg,End,Block2),\n   block_last_instruction(Block,EA),\n   EA >= Beg,\n   EA < End,\n   block(Block2).\nin file use_def_analysis.dl [96:1-100:19]" 
      (TIMER_ON block_next "@t-nonrecursive-rule;block_next;use_def_analysis.dl [96:1-100:19];block_next(Block,EA,Block2) :- \\n   lsda_callsite_addresses(Beg,End,Block2),\\n   block_last_instruction(Block,EA),\\n   EA >= Beg,\\n   EA < End,\\n   block(Block2).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY lsda_callsite_addresses))) (NOT (ISEMPTY block)))
         (FOR_IN t0 lsda_callsite_addresses           (IF (EXISTS block ((TUPLE t0 2)))
           (FOR_IN t1 block_last_instruction             (IF (AND (CONSTRAINT < (TUPLE t1 1)  (TUPLE t0 1)) (CONSTRAINT >= (TUPLE t1 1)  (TUPLE t0 0)))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t0 2)) block_next)
            ))
          ))
        )       )
      )
     )
      (DEBUG 
 "block_next(Block,EA,EA_next) :- \n   block_last_instruction(Block,EA),\n   direct_jump(EA,EA_next),\n   !inter_procedural_edge(EA,EA_next).\nin file use_def_analysis.dl [79:1-83:40]" 
      (TIMER_ON block_next "@t-nonrecursive-rule;block_next;use_def_analysis.dl [79:1-83:40];block_next(Block,EA,EA_next) :- \\n   block_last_instruction(Block,EA),\\n   direct_jump(EA,EA_next),\\n   !inter_procedural_edge(EA,EA_next).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY direct_jump)))
         (FOR_IN t0 block_last_instruction           (FOR t1 direct_jump (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (IF (NOT (EXISTS inter_procedural_edge ((TUPLE t0 1) (TUPLE t1 1))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1)) block_next)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE cmp_defines "@n-nonrecursive-relation;cmp_defines;boundary_value_analysis.dl [212:7-212:18];")
 ) (STMTS     (TIMER_ON compare_and_jump_immediate "@t-nonrecursive-relation;compare_and_jump_immediate;boundary_value_analysis.dl [58:7-58:33];"
(STMTS      (DEBUG 
 "compare_and_jump_immediate(EA,EA,CC,Reg,0) :- \n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.cmp_zero_operation(Operation),\n   arch.jump(EA),\n   arch.conditional(EA,CC),\n   instruction_get_op(EA,_,Op),\n   op_regdirect_contains_reg(Op,Reg).\nin file boundary_value_analysis.dl [68:1-82:7]" 
      (TIMER_ON compare_and_jump_immediate "@t-nonrecursive-rule;compare_and_jump_immediate;boundary_value_analysis.dl [68:1-82:7];compare_and_jump_immediate(EA,EA,CC,Reg,0) :- \\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.cmp_zero_operation(Operation),\\n   arch.jump(EA),\\n   arch.conditional(EA,CC),\\n   instruction_get_op(EA,_,Op),\\n   op_regdirect_contains_reg(Op,Reg).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY op_regdirect_contains_reg))) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY arch.cmp_zero_operation)))
         (FOR_IN t0 instruction           (IF (AND (EXISTS arch.jump ((TUPLE t0 0))) (EXISTS arch.cmp_zero_operation ((TUPLE t0 3))))
           (FOR t1 arch.conditional (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (FOR t3 op_regdirect_contains_reg (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 0) (TUPLE t1 1) (TUPLE t3 1) (NUMBER 0)) compare_and_jump_immediate)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "compare_and_jump_immediate(EA,EA,CC,Reg,0) :- \n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.cmp_zero_operation(Operation),\n   arch.jump(EA),\n   arch.conditional(EA,CC),\n   instruction_get_op(EA,_,Op),\n   register_access(EA,RegIn,\"R\"),\n   reg_map(RegIn,Reg),\n   !op_regdirect_contains_reg(Op,Reg).\nin file boundary_value_analysis.dl [68:1-82:7]" 
      (TIMER_ON compare_and_jump_immediate "@t-nonrecursive-rule;compare_and_jump_immediate;boundary_value_analysis.dl [68:1-82:7];compare_and_jump_immediate(EA,EA,CC,Reg,0) :- \\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.cmp_zero_operation(Operation),\\n   arch.jump(EA),\\n   arch.conditional(EA,CC),\\n   instruction_get_op(EA,_,Op),\\n   register_access(EA,RegIn,\\\"R\\\"),\\n   reg_map(RegIn,Reg),\\n   !op_regdirect_contains_reg(Op,Reg).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY reg_map)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY register_access))) (NOT (ISEMPTY arch.cmp_zero_operation)))
         (FOR_IN t0 instruction           (IF (AND (EXISTS arch.jump ((TUPLE t0 0))) (EXISTS arch.cmp_zero_operation ((TUPLE t0 3))))
           (FOR t1 arch.conditional (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (FOR t3 register_access (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 2) (STRING "R")))
              (FOR t4 reg_map (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)))
               (IF (NOT (EXISTS op_regdirect_contains_reg ((TUPLE t2 2) (TUPLE t4 1))))
                (INSERT ((TUPLE t0 0) (TUPLE t0 0) (TUPLE t1 1) (TUPLE t4 1) (NUMBER 0)) compare_and_jump_immediate)
               )))))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE compare_and_jump_indirect "@n-nonrecursive-relation;compare_and_jump_indirect;boundary_value_analysis.dl [105:7-105:32];")
 ) (STMTS     (TIMER_ON compare_and_jump_register "@t-nonrecursive-relation;compare_and_jump_register;boundary_value_analysis.dl [88:7-88:32];"
(STMTS      (DEBUG 
 "compare_and_jump_register(EA,EA,CC,Reg1,Reg2) :- \n   cmp_reg_to_reg(EA,Reg1,Reg2),\n   arch.jump(EA),\n   arch.conditional(EA,CC).\nin file boundary_value_analysis.dl [96:1-99:29]" 
      (TIMER_ON compare_and_jump_register "@t-nonrecursive-rule;compare_and_jump_register;boundary_value_analysis.dl [96:1-99:29];compare_and_jump_register(EA,EA,CC,Reg1,Reg2) :- \\n   cmp_reg_to_reg(EA,Reg1,Reg2),\\n   arch.jump(EA),\\n   arch.conditional(EA,CC).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY arch.conditional)) (NOT (ISEMPTY cmp_reg_to_reg))) (NOT (ISEMPTY arch.jump)))
         (FOR_IN t0 cmp_reg_to_reg           (IF (EXISTS arch.jump ((TUPLE t0 0)))
           (FOR t1 arch.conditional (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 2)) compare_and_jump_register)
)          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE const_value_reg_used "@n-nonrecursive-relation;const_value_reg_used;value_analysis.dl [369:7-369:27];")
 ) (STMTS     (TIMER_ON def_used_for_address "@t-nonrecursive-relation;def_used_for_address;use_def_analysis.dl [569:7-569:27];"
(STMTS      (DEBUG 
 "def_used_for_address(EA,Reg,\"PCRelative\") :- \n   arch.pc_relative_addr(EA,Reg,_).\nin file use_def_analysis.dl [579:1-580:37]" 
      (TIMER_ON def_used_for_address "@t-nonrecursive-rule;def_used_for_address;use_def_analysis.dl [579:1-580:37];def_used_for_address(EA,Reg,\\\"PCRelative\\\") :- \\n   arch.pc_relative_addr(EA,Reg,_).;"
(QUERY
        (IF (NOT (ISEMPTY arch.pc_relative_addr))
         (FOR_IN t0 arch.pc_relative_addr           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "PCRelative")) def_used_for_address)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE flags_and_jump_pair "@n-nonrecursive-relation;flags_and_jump_pair;boundary_value_analysis.dl [46:7-46:26];")
 ) (STMTS     (TIMER_ON got_relative_operand "@t-nonrecursive-relation;got_relative_operand;binary/elf/symbolization.dl [88:7-88:27];"
(STMTS      (DEBUG 
 "got_relative_operand(EA,Index,as(((as(TargetEA, number)+Addend)+Adjustment), address)) :- \n   relocation( _tmp_53,\"GOTOFF\",Symbol,Addend,SymbolIndex,_,_),\n   relocation_adjustment_total( _tmp_53,Adjustment),\n   symbol(TargetEA,_,_,_,_,_,_,SymbolIndex,Symbol),\n   instruction_displacement_offset(EA,Index,DisplacementOffset,_),\n    _tmp_53 = (EA+DisplacementOffset).\nin file symbolization.dl [117:1-122:68]" 
      (TIMER_ON got_relative_operand "@t-nonrecursive-rule;got_relative_operand;binary/elf/symbolization.dl [117:1-122:68];got_relative_operand(EA,Index,as(((as(TargetEA, number)+Addend)+Adjustment), address)) :- \\n   relocation( _tmp_53,\\\"GOTOFF\\\",Symbol,Addend,SymbolIndex,_,_),\\n   relocation_adjustment_total( _tmp_53,Adjustment),\\n   symbol(TargetEA,_,_,_,_,_,_,SymbolIndex,Symbol),\\n   instruction_displacement_offset(EA,Index,DisplacementOffset,_),\\n    _tmp_53 = (EA+DisplacementOffset).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY symbol))) (NOT (ISEMPTY relocation_adjustment_total)))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "GOTOFF")))
          (FOR t1 relocation_adjustment_total (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 symbol (INDEX  (= (TUPLE t2 7) (TUPLE t0 4)) (= (TUPLE t2 8) (TUPLE t0 2)))
            (FOR_IN t3 instruction_displacement_offset              (IF (CONSTRAINT = (TUPLE t0 0)  (INTRINSIC + (TUPLE t3 0) (TUPLE t3 2)))
              (INSERT ((TUPLE t3 0) (TUPLE t3 1) (INTRINSIC + (INTRINSIC + (TUPLE t2 0) (TUPLE t0 3)) (TUPLE t1 1))) got_relative_operand)
             ))
)))        )       )
      )
     )
 )    )
 ) (STMTS     (TIMER_ON jump_table_element_access "@t-nonrecursive-relation;jump_table_element_access;relative_jump_tables.dl [98:7-98:32];"
(STMTS      (DEBUG 
 "jump_table_element_access(EA,Size,as(TableStart, address),as(RegIndex, register)) :- \n   data_access(EA,_,\"NONE\",\"NONE\",RegIndex, _tmp_69,TableStart,Size),\n   RegIndex != \"NONE\",\n   data_segment(Beg,End),\n   as(TableStart, address) >= Beg,\n   as(TableStart, address) <= End,\n    _tmp_69 = as(Size, number).\nin file relative_jump_tables.dl [100:1-106:27]" 
      (TIMER_ON jump_table_element_access "@t-nonrecursive-rule;jump_table_element_access;relative_jump_tables.dl [100:1-106:27];jump_table_element_access(EA,Size,as(TableStart, address),as(RegIndex, register)) :- \\n   data_access(EA,_,\\\"NONE\\\",\\\"NONE\\\",RegIndex, _tmp_69,TableStart,Size),\\n   RegIndex != \\\"NONE\\\",\\n   data_segment(Beg,End),\\n   as(TableStart, address) >= Beg,\\n   as(TableStart, address) <= End,\\n    _tmp_69 = as(Size, number).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment)))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 3) (STRING "NONE")))
          (IF (AND (CONSTRAINT = (TUPLE t0 5)  (TUPLE t0 7)) (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE")))
           (IF_EXISTS t1 data_segment (AND (CONSTRAINT >= (TUPLE t0 6)  (TUPLE t1 0)) (CONSTRAINT <= (TUPLE t0 6)  (TUPLE t1 1))) 
            (INSERT ((TUPLE t0 0) (TUPLE t0 7) (TUPLE t0 6) (TUPLE t0 4)) jump_table_element_access)
)          ))        )       )
      )
     )
      (DEBUG 
 "jump_table_element_access(EA,1,as(TableStart, address),as(RegBase, register)) :- \n   data_access(EA,_,\"NONE\",RegBase,\"NONE\",_,TableStart,1),\n   RegBase != \"NONE\",\n   data_segment(Beg,End),\n   as(TableStart, address) >= Beg,\n   as(TableStart, address) <= End.\nin file relative_jump_tables.dl [108:1-114:27]" 
      (TIMER_ON jump_table_element_access "@t-nonrecursive-rule;jump_table_element_access;relative_jump_tables.dl [108:1-114:27];jump_table_element_access(EA,1,as(TableStart, address),as(RegBase, register)) :- \\n   data_access(EA,_,\\\"NONE\\\",RegBase,\\\"NONE\\\",_,TableStart,1),\\n   RegBase != \\\"NONE\\\",\\n   data_segment(Beg,End),\\n   as(TableStart, address) >= Beg,\\n   as(TableStart, address) <= End.;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment)))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 4) (STRING "NONE")) (= (TUPLE t0 7) (UNSIGNED 1)))
          (IF (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE"))
           (IF_EXISTS t1 data_segment (AND (CONSTRAINT >= (TUPLE t0 6)  (TUPLE t1 0)) (CONSTRAINT <= (TUPLE t0 6)  (TUPLE t1 1))) 
            (INSERT ((TUPLE t0 0) (UNSIGNED 1) (TUPLE t0 6) (TUPLE t0 3)) jump_table_element_access)
)          ))        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE jump_table_max "@n-nonrecursive-relation;jump_table_max;relative_jump_tables.dl [211:7-211:21];")
 ) (STMTS     (LOGSIZE jump_table_signed "@n-nonrecursive-relation;jump_table_signed;relative_jump_tables.dl [172:7-172:24];")
 ) (STMTS     (LOGSIZE jump_table_start "@n-nonrecursive-relation;jump_table_start;relative_jump_tables.dl [259:7-259:23];")
 ) (STMTS     (LOGSIZE jump_table_target "@n-nonrecursive-relation;jump_table_target;jump_tables.dl [100:7-100:24];")
 ) (STMTS     (LOGSIZE last_value_reg_limit "@n-nonrecursive-relation;last_value_reg_limit;boundary_value_analysis.dl [281:7-281:27];")
 ) (STMTS     (LOGSIZE no_value_reg_limit "@n-nonrecursive-relation;no_value_reg_limit;boundary_value_analysis.dl [225:7-225:25];")
 ) (STMTS     (TIMER_ON reg_def_use.def_used "@t-nonrecursive-relation;reg_def_use.def_used;use_def_analysis.dl [361:11-361:19];"
(STMTS      (DEBUG 
 "reg_def_use.def_used(EA_def,Var,EA_used,Index) :- \n   reg_def_use.used(EA_used,Var,Index),\n   reg_def_use.block_last_def(EA_used,EA_def,Var).\nin file use_def_analysis.dl [364:5-366:44]" 
      (TIMER_ON reg_def_use.def_used "@t-nonrecursive-rule;reg_def_use.def_used;use_def_analysis.dl [364:5-366:44];reg_def_use.def_used(EA_def,Var,EA_used,Index) :- \\n   reg_def_use.used(EA_used,Var,Index),\\n   reg_def_use.block_last_def(EA_used,EA_def,Var).;"
(QUERY
        (IF (AND (NOT (ISEMPTY reg_def_use.used)) (NOT (ISEMPTY reg_def_use.block_last_def)))
         (FOR_IN t0 reg_def_use.used           (FOR t1 reg_def_use.block_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 1)))
           (INSERT ((TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 0) (TUPLE t0 2)) reg_def_use.def_used)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE reg_def_use.live_var_at_block_end "@n-nonrecursive-relation;reg_def_use.live_var_at_block_end;use_def_analysis.dl [253:11-253:32];")
 ) (STMTS     (LOGSIZE reg_def_use.live_var_at_prior_used "@n-nonrecursive-relation;reg_def_use.live_var_at_prior_used;use_def_analysis.dl [280:11-280:33];")
 ) (STMTS     (TIMER_ON reg_def_use.live_var_used "@t-nonrecursive-relation;reg_def_use.live_var_used;use_def_analysis.dl [229:11-229:24];"
(STMTS      (DEBUG 
 "reg_def_use.live_var_used(Block,Var,Var,EA_used,Index,0) :- \n   reg_def_use.used_in_block(Block,EA_used,Var,Index),\n   !reg_def_use.block_last_def(EA_used,_,Var).\nin file use_def_analysis.dl [232:5-234:40]" 
      (TIMER_ON reg_def_use.live_var_used "@t-nonrecursive-rule;reg_def_use.live_var_used;use_def_analysis.dl [232:5-234:40];reg_def_use.live_var_used(Block,Var,Var,EA_used,Index,0) :- \\n   reg_def_use.used_in_block(Block,EA_used,Var,Index),\\n   !reg_def_use.block_last_def(EA_used,_,Var).;"
(QUERY
        (IF (NOT (ISEMPTY reg_def_use.used_in_block))
         (FOR_IN t0 reg_def_use.used_in_block           (IF (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t0 1) UNDEF (TUPLE t0 2))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (UNSIGNED 0)) reg_def_use.live_var_used)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE reg_def_use.return_val_used "@n-nonrecursive-relation;reg_def_use.return_val_used;use_def_analysis.dl [327:11-327:26];")
 ) (STMTS     (TIMER_ON reg_has_base_image "@t-nonrecursive-relation;reg_has_base_image;binary/pe/symbolization.dl [46:7-46:25];"
(STMTS      (DEBUG 
 "reg_has_base_image(EA,Reg) :- \n   base_address(ImageBase),\n   pc_relative_operand(EA,_,ImageBase),\n   code_in_block(EA,_),\n   reg_def_use.def(EA,Reg),\n   instruction(EA,_,_,<inlined_Operation_750>,_,_,_,_,_,_),\n   <inlined_Operation_750> = \"LEA\".\nin file symbolization.dl [48:1-53:41]" 
      (TIMER_ON reg_has_base_image "@t-nonrecursive-rule;reg_has_base_image;binary/pe/symbolization.dl [48:1-53:41];reg_has_base_image(EA,Reg) :- \\n   base_address(ImageBase),\\n   pc_relative_operand(EA,_,ImageBase),\\n   code_in_block(EA,_),\\n   reg_def_use.def(EA,Reg),\\n   instruction(EA,_,_,<inlined_Operation_750>,_,_,_,_,_,_),\\n   <inlined_Operation_750> = \\\"LEA\\\".;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY base_address))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY reg_def_use.def))) (NOT (ISEMPTY pc_relative_operand)))
         (FOR_IN t0 base_address           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (IF (AND (EXISTS code_in_block ((TUPLE t1 0) UNDEF)) (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
            (FOR t2 reg_def_use.def (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (INSERT ((TUPLE t1 0) (TUPLE t2 1)) reg_has_base_image)
)           )))
        )       )
      )
     )
      (DEBUG 
 "reg_has_base_image(EA_code,Reg) :- \n   binary_format(\"PE\"),\n   base_address(ImageBase),\n   code_in_block(EA_code,_),\n   arch.memory_access(\"LOAD\",EA_code,_,_,_,_,_,_,_),\n   pc_relative_operand(EA_code,_,EA_data),\n   @functor_data_valid(EA_data,8) = 1,\n   ImageBase = as(@functor_data_signed(EA_data,8), address),\n   reg_def_use.def(EA_code,Reg).\nin file symbolization.dl [55:1-64:34]" 
      (TIMER_ON reg_has_base_image "@t-nonrecursive-rule;reg_has_base_image;binary/pe/symbolization.dl [55:1-64:34];reg_has_base_image(EA_code,Reg) :- \\n   binary_format(\\\"PE\\\"),\\n   base_address(ImageBase),\\n   code_in_block(EA_code,_),\\n   arch.memory_access(\\\"LOAD\\\",EA_code,_,_,_,_,_,_,_),\\n   pc_relative_operand(EA_code,_,EA_data),\\n   @functor_data_valid(EA_data,8) = 1,\\n   ImageBase = as(@functor_data_signed(EA_data,8), address),\\n   reg_def_use.def(EA_code,Reg).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY reg_def_use.def)) (NOT (ISEMPTY base_address))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY pc_relative_operand))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 base_address           (FOR_IN t1 code_in_block            (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t1 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
            (INDEXED_IF_EXISTS t2 pc_relative_operand (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (AND (CONSTRAINT = (TUPLE t0 0)  (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t2 2) (UNSIGNED 8)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t2 2) (UNSIGNED 8)))  (UNSIGNED 1)))
             (FOR t3 reg_def_use.def (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)))
              (INSERT ((TUPLE t1 0) (TUPLE t3 1)) reg_has_base_image)
))           ))
)
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE reg_has_got "@n-nonrecursive-relation;reg_has_got;binary/elf/symbolization.dl [37:7-37:18];")
 ) (STMTS     (LOGSIZE reg_reg_arithmetic_operation_defs "@n-nonrecursive-relation;reg_reg_arithmetic_operation_defs;value_analysis.dl [272:7-272:40];")
 ) (STMTS     (TIMER_ON relative_jump_table_entry_candidate "@t-nonrecursive-relation;relative_jump_table_entry_candidate;relative_jump_tables.dl [354:7-354:42];"
(STMTS      (DEBUG 
 "relative_jump_table_entry_candidate(EA,TableStart,1,Ref,Dest,4,0) :- \n   relative_address(EA,1,TableStart,Ref,Dest,\"first\"),\n   Dest < TableStart,\n   relative_address_start(Ref,4,_,_,_),\n   loaded_section(Start,End,_),\n   Ref >= Start,\n   Ref < End,\n   Dest >= Start,\n   Dest < End.\nin file jump_tables.dl [223:1-230:31]" 
      (TIMER_ON relative_jump_table_entry_candidate "@t-nonrecursive-rule;relative_jump_table_entry_candidate;binary/pe/jump_tables.dl [223:1-230:31];relative_jump_table_entry_candidate(EA,TableStart,1,Ref,Dest,4,0) :- \\n   relative_address(EA,1,TableStart,Ref,Dest,\\\"first\\\"),\\n   Dest < TableStart,\\n   relative_address_start(Ref,4,_,_,_),\\n   loaded_section(Start,End,_),\\n   Ref >= Start,\\n   Ref < End,\\n   Dest >= Start,\\n   Dest < End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY relative_address))) (NOT (ISEMPTY relative_address_start)))
         (FOR t0 relative_address (INDEX  (= (TUPLE t0 1) (UNSIGNED 1)) (= (TUPLE t0 5) (STRING "first")))
          (IF (AND (CONSTRAINT < (TUPLE t0 4)  (TUPLE t0 2)) (EXISTS relative_address_start ((TUPLE t0 3) (UNSIGNED 4) UNDEF UNDEF UNDEF)))
           (IF_EXISTS t1 loaded_section (AND (AND (AND (CONSTRAINT >= (TUPLE t0 4)  (TUPLE t1 0)) (CONSTRAINT >= (TUPLE t0 3)  (TUPLE t1 0))) (CONSTRAINT < (TUPLE t0 3)  (TUPLE t1 1))) (CONSTRAINT < (TUPLE t0 4)  (TUPLE t1 1))) 
            (INSERT ((TUPLE t0 0) (TUPLE t0 2) (UNSIGNED 1) (TUPLE t0 3) (TUPLE t0 4) (NUMBER 4) (NUMBER 0)) relative_jump_table_entry_candidate)
)          ))        )       )
      )
     )
 )    )
 ) (STMTS     (TIMER_ON stack_def_use.def_used "@t-nonrecursive-relation;stack_def_use.def_used;use_def_analysis.dl [466:11-466:19];"
(STMTS      (DEBUG 
 "stack_def_use.def_used(EA_def,Var,EA_used,Var,Index) :- \n   stack_def_use.used(EA_used,Var,Index),\n   stack_def_use.block_last_def(EA_used,EA_def,Var).\nin file use_def_analysis.dl [469:5-471:44]" 
      (TIMER_ON stack_def_use.def_used "@t-nonrecursive-rule;stack_def_use.def_used;use_def_analysis.dl [469:5-471:44];stack_def_use.def_used(EA_def,Var,EA_used,Var,Index) :- \\n   stack_def_use.used(EA_used,Var,Index),\\n   stack_def_use.block_last_def(EA_used,EA_def,Var).;"
(QUERY
        (IF (AND (NOT (ISEMPTY stack_def_use.used)) (NOT (ISEMPTY stack_def_use.block_last_def)))
         (FOR_IN t0 stack_def_use.used           (FOR t1 stack_def_use.block_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 1)))
           (INSERT ((TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) stack_def_use.def_used)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE stack_def_use.live_var_at_block_end "@n-nonrecursive-relation;stack_def_use.live_var_at_block_end;use_def_analysis.dl [253:11-253:32];")
 ) (STMTS     (LOGSIZE stack_def_use.live_var_at_prior_used "@n-nonrecursive-relation;stack_def_use.live_var_at_prior_used;use_def_analysis.dl [280:11-280:33];")
 ) (STMTS     (LOGSIZE stack_def_use.live_var_used "@n-nonrecursive-relation;stack_def_use.live_var_used;use_def_analysis.dl [229:11-229:24];")
 ) (STMTS     (TIMER_ON stack_def_use.live_var_used_in_block "@t-nonrecursive-relation;stack_def_use.live_var_used_in_block;use_def_analysis.dl [498:11-498:33];"
(STMTS      (DEBUG 
 "stack_def_use.live_var_used_in_block(Block,EA_used,[BaseReg,StackPos],[BaseReg,StackPos],EA_used,Index,0) :- \n   stack_def_use.used_in_block(Block,EA_used,[BaseReg,StackPos],Index).\nin file use_def_analysis.dl [501:5-502:63]" 
      (TIMER_ON stack_def_use.live_var_used_in_block "@t-nonrecursive-rule;stack_def_use.live_var_used_in_block;use_def_analysis.dl [501:5-502:63];stack_def_use.live_var_used_in_block(Block,EA_used,[BaseReg,StackPos],[BaseReg,StackPos],EA_used,Index,0) :- \\n   stack_def_use.used_in_block(Block,EA_used,[BaseReg,StackPos],Index).;"
(QUERY
        (IF (NOT (ISEMPTY stack_def_use.used_in_block))
         (FOR_IN t0 stack_def_use.used_in_block           (UNPACK t1 2 ((TUPLE t0 2))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (PACK (TUPLE t1 0) (TUPLE t1 1)) (PACK (TUPLE t1 0) (TUPLE t1 1)) (TUPLE t0 1) (TUPLE t0 3) (UNSIGNED 0)) stack_def_use.live_var_used_in_block)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE tls_desc_call "@n-nonrecursive-relation;tls_desc_call;tls.dl [286:7-286:20];")
 ) (STMTS     (LOGSIZE tls_get_addr "@n-nonrecursive-relation;tls_get_addr;tls.dl [262:7-262:19];")
 ) (STMTS     (TIMER_ON value_reg "@t-nonrecursive-relation;value_reg;value_analysis.dl [63:7-63:16];"
(STMTS      (DEBUG 
 "value_reg(EA,Reg,EA,\"NONE\",0,as(Val, number),1) :- \n   arch.pc_relative_addr(EA,Reg,Val),\n   track_register(Reg).\nin file value_analysis.dl [167:1-169:25]" 
      (TIMER_ON value_reg "@t-nonrecursive-rule;value_reg;value_analysis.dl [167:1-169:25];value_reg(EA,Reg,EA,\\\"NONE\\\",0,as(Val, number),1) :- \\n   arch.pc_relative_addr(EA,Reg,Val),\\n   track_register(Reg).;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.pc_relative_addr)) (NOT (ISEMPTY track_register)))
         (FOR_IN t0 arch.pc_relative_addr           (IF (EXISTS track_register ((TUPLE t0 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (TUPLE t0 2) (UNSIGNED 1)) value_reg)
          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg(EA,Reg,EA,\"NONE\",0,(as((EA+Size), number)+Offset),1) :- \n   code_in_block(EA,_),\n   arch.reg_arithmetic_operation(EA,Reg,PcReg,1,Offset),\n   instruction(EA,Size,_,_,_,_,_,_,_,_),\n   !instruction_has_relocation(EA,_),\n   PcReg = \"RIP\",\n   track_register(Reg).\nin file value_analysis.dl [158:1-165:41]" 
      (TIMER_ON value_reg "@t-nonrecursive-rule;value_reg;value_analysis.dl [158:1-165:41];value_reg(EA,Reg,EA,\\\"NONE\\\",0,(as((EA+Size), number)+Offset),1) :- \\n   code_in_block(EA,_),\\n   arch.reg_arithmetic_operation(EA,Reg,PcReg,1,Offset),\\n   instruction(EA,Size,_,_,_,_,_,_,_,_),\\n   !instruction_has_relocation(EA,_),\\n   PcReg = \\\"RIP\\\",\\n   track_register(Reg).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY track_register))) (NOT (ISEMPTY arch.reg_arithmetic_operation)))
         (FOR_IN t0 code_in_block           (IF (NOT (EXISTS instruction_has_relocation ((TUPLE t0 0) UNDEF)))
           (FOR t1 arch.reg_arithmetic_operation (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (STRING "RIP")) (= (TUPLE t1 3) (NUMBER 1)))
            (IF (EXISTS track_register ((TUPLE t1 1)))
             (FOR t2 instruction (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t2 1)) (TUPLE t1 4)) (UNSIGNED 1)) value_reg)
)            ))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE value_reg_edge "@n-nonrecursive-relation;value_reg_edge;value_analysis.dl [61:7-61:21];")
 ) (STMTS     (LOGSIZE value_reg_limit "@n-nonrecursive-relation;value_reg_limit;boundary_value_analysis.dl [141:7-141:22];")
 ) (STMTS     (LOGSIZE value_reg_unsupported "@n-nonrecursive-relation;value_reg_unsupported;value_analysis.dl [104:7-104:28];")
 ) (STMTS     (DEBUG 
 "value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps1) <= value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps2) :- \n   Steps2 <= Steps1.\nin file value_analysis.dl [246:1-247:22]" 
     (TIMER_ON value_reg "@t-nonrecursive-rule;value_reg;value_analysis.dl [246:1-247:22];value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps1) <= value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps2) :- \\n   Steps2 <= Steps1.;"
(QUERY
       (IF (NOT (ISEMPTY value_reg))
        (FOR_IN t0 value_reg          (INDEXED_IF_EXISTS t1 value_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)) (= (TUPLE t1 3) (TUPLE t0 3)) (= (TUPLE t1 4) (TUPLE t0 4)) (= (TUPLE t1 5) (TUPLE t0 5))) (AND (NOT (CONSTRAINT = (TUPLE t0 6)  (TUPLE t1 6))) (CONSTRAINT <= (TUPLE t1 6)  (TUPLE t0 6)))
          (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @delete_value_reg)
))
       )      )
     )
    )
 (STMTS (QUERY
     (FOR_IN t0 @delete_value_reg       (ERASE ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) value_reg)
)
    )
     (CLEAR @delete_value_reg)
 ) ) (QUERY
     (FOR_IN t0 base_relative_jump       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_base_relative_jump)
)
    )
 (QUERY
     (FOR_IN t0 base_relative_operand       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_base_relative_operand)
)
    )
 (QUERY
     (FOR_IN t0 base_relative_operation       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_base_relative_operation)
)
    )
 (QUERY
     (FOR_IN t0 block_next       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_block_next)
)
    )
 (QUERY
     (FOR_IN t0 cmp_defines       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_cmp_defines)
)
    )
 (QUERY
     (FOR_IN t0 compare_and_jump_immediate       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @delta_compare_and_jump_immediate)
)
    )
 (QUERY
     (FOR_IN t0 compare_and_jump_indirect       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @delta_compare_and_jump_indirect)
)
    )
 (QUERY
     (FOR_IN t0 compare_and_jump_register       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @delta_compare_and_jump_register)
)
    )
 (QUERY
     (FOR_IN t0 const_value_reg_used       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @delta_const_value_reg_used)
)
    )
 (QUERY
     (FOR_IN t0 def_used_for_address       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_def_used_for_address)
)
    )
 (QUERY
     (FOR_IN t0 flags_and_jump_pair       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_flags_and_jump_pair)
)
    )
 (QUERY
     (FOR_IN t0 got_relative_operand       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_got_relative_operand)
)
    )
 (QUERY
     (FOR_IN t0 jump_table_element_access       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) @delta_jump_table_element_access)
)
    )
 (QUERY
     (FOR_IN t0 jump_table_max       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_jump_table_max)
)
    )
 (QUERY
     (FOR_IN t0 jump_table_signed       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_jump_table_signed)
)
    )
 (QUERY
     (FOR_IN t0 jump_table_start       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @delta_jump_table_start)
)
    )
 (QUERY
     (FOR_IN t0 jump_table_target       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_jump_table_target)
)
    )
 (QUERY
     (FOR_IN t0 last_value_reg_limit       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @delta_last_value_reg_limit)
)
    )
 (QUERY
     (FOR_IN t0 no_value_reg_limit       (INSERT ((TUPLE t0 0)) @delta_no_value_reg_limit)
)
    )
 (QUERY
     (FOR_IN t0 reg_def_use.def_used       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) @delta_reg_def_use.def_used)
)
    )
 (QUERY
     (FOR_IN t0 reg_def_use.live_var_at_block_end       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_reg_def_use.live_var_at_block_end)
)
    )
 (QUERY
     (FOR_IN t0 reg_def_use.live_var_at_prior_used       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_reg_def_use.live_var_at_prior_used)
)
    )
 (QUERY
     (FOR_IN t0 reg_def_use.live_var_used       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @delta_reg_def_use.live_var_used)
)
    )
 (QUERY
     (FOR_IN t0 reg_def_use.return_val_used       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @delta_reg_def_use.return_val_used)
)
    )
 (QUERY
     (FOR_IN t0 reg_has_base_image       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_reg_has_base_image)
)
    )
 (QUERY
     (FOR_IN t0 reg_has_got       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_reg_has_got)
)
    )
 (QUERY
     (FOR_IN t0 reg_reg_arithmetic_operation_defs       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6) (TUPLE t0 7)) @delta_reg_reg_arithmetic_operation_defs)
)
    )
 (QUERY
     (FOR_IN t0 relative_jump_table_entry_candidate       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @delta_relative_jump_table_entry_candidate)
)
    )
 (QUERY
     (FOR_IN t0 stack_def_use.def_used       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @delta_stack_def_use.def_used)
)
    )
 (QUERY
     (FOR_IN t0 stack_def_use.live_var_at_block_end       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_stack_def_use.live_var_at_block_end)
)
    )
 (QUERY
     (FOR_IN t0 stack_def_use.live_var_at_prior_used       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_stack_def_use.live_var_at_prior_used)
)
    )
 (QUERY
     (FOR_IN t0 stack_def_use.live_var_used       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @delta_stack_def_use.live_var_used)
)
    )
 (QUERY
     (FOR_IN t0 stack_def_use.live_var_used_in_block       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @delta_stack_def_use.live_var_used_in_block)
)
    )
 (QUERY
     (FOR_IN t0 tls_desc_call       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_tls_desc_call)
)
    )
 (QUERY
     (FOR_IN t0 tls_get_addr       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_tls_get_addr)
)
    )
 (QUERY
     (FOR_IN t0 value_reg       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @delta_value_reg)
)
    )
 (QUERY
     (FOR_IN t0 value_reg_edge       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @delta_value_reg_edge)
)
    )
 (QUERY
     (FOR_IN t0 value_reg_limit       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @delta_value_reg_limit)
)
    )
 (QUERY
     (FOR_IN t0 value_reg_unsupported       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_value_reg_unsupported)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_base_relative_jump "@t-recursive-relation;base_relative_jump;binary/pe/symbolization.dl [174:7-174:25];"
(STMTS       (DEBUG 
 "base_relative_jump(EA_relop,EA) :- \n   reg_jump(EA,_),\n   base_relative_operation(EA_relop,EA).\nin file symbolization.dl [178:1-180:42]" 
       (TIMER_ON @new_base_relative_jump "@t-recursive-rule;base_relative_jump;0;binary/pe/symbolization.dl [178:1-180:42];base_relative_jump(EA_relop,EA) :- \\n   reg_jump(EA,_),\\n   base_relative_operation(EA_relop,EA).;"
(QUERY
         (IF (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY @delta_base_relative_operation)))
          (FOR_IN t0 reg_jump            (FOR t1 @delta_base_relative_operation (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (IF (NOT (EXISTS base_relative_jump ((TUPLE t1 0) (TUPLE t0 0))))
             (INSERT ((TUPLE t1 0) (TUPLE t0 0)) @new_base_relative_jump)
            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_base_relative_operand "@t-recursive-relation;base_relative_operand;binary/pe/symbolization.dl [85:7-85:28];"
(STMTS (STMTS (STMTS       (DEBUG 
 "base_relative_operand(EA_used,Op_index,RVA) :- \n   reg_has_base_image(EA_def,Reg),\n   reg_def_use.def_used(EA_def,Reg,EA_used,Op_index),\n   possible_rva_operand(EA_used,Op_index,RVA).\nin file symbolization.dl [88:1-91:48]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;0;binary/pe/symbolization.dl [88:1-91:48];base_relative_operand(EA_used,Op_index,RVA) :- \\n   reg_has_base_image(EA_def,Reg),\\n   reg_def_use.def_used(EA_def,Reg,EA_used,Op_index),\\n   possible_rva_operand(EA_used,Op_index,RVA).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY possible_rva_operand)) (NOT (ISEMPTY @delta_reg_has_base_image))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 @delta_reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) (TUPLE t1 3))))
             (FOR t2 possible_rva_operand (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)))
              (IF (NOT (EXISTS base_relative_operand ((TUPLE t1 2) (TUPLE t1 3) (TUPLE t2 2))))
               (INSERT ((TUPLE t1 2) (TUPLE t1 3) (TUPLE t2 2)) @new_base_relative_operand)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_used,Op_index,RVA) :- \n   reg_has_base_image(EA_def,Reg),\n   reg_def_use.def_used(EA_def,Reg,EA_used,Op_index),\n   possible_rva_operand(EA_used,Op_index,RVA).\nin file symbolization.dl [88:1-91:48]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;1;binary/pe/symbolization.dl [88:1-91:48];base_relative_operand(EA_used,Op_index,RVA) :- \\n   reg_has_base_image(EA_def,Reg),\\n   reg_def_use.def_used(EA_def,Reg,EA_used,Op_index),\\n   possible_rva_operand(EA_used,Op_index,RVA).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY possible_rva_operand)) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 possible_rva_operand (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)))
             (IF (NOT (EXISTS base_relative_operand ((TUPLE t1 2) (TUPLE t1 3) (TUPLE t2 2))))
              (INSERT ((TUPLE t1 2) (TUPLE t1 3) (TUPLE t2 2)) @new_base_relative_operand)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def2,Op_index_access,RVA) :- \n   reg_has_base_image(EA_def1,Reg1),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   data_access(EA_def2,Op_index_access,\"NONE\",\"NONE\",_,4,Offset,_),\n   Offset > 0,\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\n   data_access(EA,_,\"NONE\",Reg1,Reg2,1,_,_).\nin file symbolization.dl [125:1-136:7]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;0;binary/pe/symbolization.dl [125:1-136:7];base_relative_operand(EA_def2,Op_index_access,RVA) :- \\n   reg_has_base_image(EA_def1,Reg1),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   data_access(EA_def2,Op_index_access,\\\"NONE\\\",\\\"NONE\\\",_,4,Offset,_),\\n   Offset > 0,\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\\n   data_access(EA,_,\\\"NONE\\\",Reg1,Reg2,1,_,_).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY @delta_reg_has_base_image))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY possible_rva_operand)))
          (FOR_IN t0 @delta_reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF)))
             (FOR t2 data_access (INDEX  (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 3) (STRING "NONE")) (= (TUPLE t2 5) (NUMBER 4)) (<= (NUMBER 0) (TUPLE t2 6) ))
              (IF (CONSTRAINT != (TUPLE t2 6)  (NUMBER 0))
               (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)) (= (TUPLE t3 2) (TUPLE t1 2)))
                (IF (AND (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t2 0) (TUPLE t3 1) (TUPLE t1 2) UNDEF))) (EXISTS data_access ((TUPLE t1 2) UNDEF (STRING "NONE") (TUPLE t0 1) (TUPLE t3 1) (NUMBER 1) UNDEF UNDEF)))
                 (FOR t4 possible_rva_operand (INDEX  (= (TUPLE t4 0) (TUPLE t2 0)) (= (TUPLE t4 1) (TUPLE t2 1)))
                  (IF (NOT (EXISTS base_relative_operand ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2))))
                   (INSERT ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2)) @new_base_relative_operand)
                  ))                ))              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def2,Op_index_access,RVA) :- \n   reg_has_base_image(EA_def1,Reg1),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   data_access(EA_def2,Op_index_access,\"NONE\",\"NONE\",_,4,Offset,_),\n   Offset > 0,\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\n   data_access(EA,_,\"NONE\",Reg1,Reg2,1,_,_).\nin file symbolization.dl [125:1-136:7]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;1;binary/pe/symbolization.dl [125:1-136:7];base_relative_operand(EA_def2,Op_index_access,RVA) :- \\n   reg_has_base_image(EA_def1,Reg1),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   data_access(EA_def2,Op_index_access,\\\"NONE\\\",\\\"NONE\\\",_,4,Offset,_),\\n   Offset > 0,\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\\n   data_access(EA,_,\\\"NONE\\\",Reg1,Reg2,1,_,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_reg_def_use.def_used)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY possible_rva_operand)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 data_access (INDEX  (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 3) (STRING "NONE")) (= (TUPLE t2 5) (NUMBER 4)) (<= (NUMBER 0) (TUPLE t2 6) ))
             (IF (CONSTRAINT != (TUPLE t2 6)  (NUMBER 0))
              (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (AND (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t2 0) (TUPLE t3 1) (TUPLE t1 2) UNDEF))) (EXISTS data_access ((TUPLE t1 2) UNDEF (STRING "NONE") (TUPLE t0 1) (TUPLE t3 1) (NUMBER 1) UNDEF UNDEF)))
                (FOR t4 possible_rva_operand (INDEX  (= (TUPLE t4 0) (TUPLE t2 0)) (= (TUPLE t4 1) (TUPLE t2 1)))
                 (IF (NOT (EXISTS base_relative_operand ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2))))
                  (INSERT ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2)) @new_base_relative_operand)
                 ))               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def2,Op_index_access,RVA) :- \n   reg_has_base_image(EA_def1,Reg1),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   data_access(EA_def2,Op_index_access,\"NONE\",\"NONE\",_,4,Offset,_),\n   Offset > 0,\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\n   data_access(EA,_,\"NONE\",Reg1,Reg2,1,_,_).\nin file symbolization.dl [125:1-136:7]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;2;binary/pe/symbolization.dl [125:1-136:7];base_relative_operand(EA_def2,Op_index_access,RVA) :- \\n   reg_has_base_image(EA_def1,Reg1),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   data_access(EA_def2,Op_index_access,\\\"NONE\\\",\\\"NONE\\\",_,4,Offset,_),\\n   Offset > 0,\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\\n   data_access(EA,_,\\\"NONE\\\",Reg1,Reg2,1,_,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY reg_def_use.def_used)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY possible_rva_operand)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 data_access (INDEX  (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 3) (STRING "NONE")) (= (TUPLE t2 5) (NUMBER 4)) (<= (NUMBER 0) (TUPLE t2 6) ))
             (IF (CONSTRAINT != (TUPLE t2 6)  (NUMBER 0))
              (FOR t3 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (EXISTS data_access ((TUPLE t1 2) UNDEF (STRING "NONE") (TUPLE t0 1) (TUPLE t3 1) (NUMBER 1) UNDEF UNDEF))
                (FOR t4 possible_rva_operand (INDEX  (= (TUPLE t4 0) (TUPLE t2 0)) (= (TUPLE t4 1) (TUPLE t2 1)))
                 (IF (NOT (EXISTS base_relative_operand ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2))))
                  (INSERT ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2)) @new_base_relative_operand)
                 ))               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def2,Op_index_access,RVA) :- \n   reg_has_base_image(EA_def1,Reg1),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   data_access(EA_def2,Op_index_access,\"NONE\",\"NONE\",_,4,Offset,_),\n   Offset > 0,\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\n   data_access(EA,_,\"NONE\",Reg2,Reg1,1,_,_).\nin file symbolization.dl [125:1-136:7]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;0;binary/pe/symbolization.dl [125:1-136:7];base_relative_operand(EA_def2,Op_index_access,RVA) :- \\n   reg_has_base_image(EA_def1,Reg1),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   data_access(EA_def2,Op_index_access,\\\"NONE\\\",\\\"NONE\\\",_,4,Offset,_),\\n   Offset > 0,\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\\n   data_access(EA,_,\\\"NONE\\\",Reg2,Reg1,1,_,_).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY @delta_reg_has_base_image))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY possible_rva_operand)))
          (FOR_IN t0 @delta_reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF)))
             (FOR t2 data_access (INDEX  (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 3) (STRING "NONE")) (= (TUPLE t2 5) (NUMBER 4)) (<= (NUMBER 0) (TUPLE t2 6) ))
              (IF (CONSTRAINT != (TUPLE t2 6)  (NUMBER 0))
               (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)) (= (TUPLE t3 2) (TUPLE t1 2)))
                (IF (AND (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t2 0) (TUPLE t3 1) (TUPLE t1 2) UNDEF))) (EXISTS data_access ((TUPLE t1 2) UNDEF (STRING "NONE") (TUPLE t3 1) (TUPLE t0 1) (NUMBER 1) UNDEF UNDEF)))
                 (FOR t4 possible_rva_operand (INDEX  (= (TUPLE t4 0) (TUPLE t2 0)) (= (TUPLE t4 1) (TUPLE t2 1)))
                  (IF (NOT (EXISTS base_relative_operand ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2))))
                   (INSERT ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2)) @new_base_relative_operand)
                  ))                ))              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def2,Op_index_access,RVA) :- \n   reg_has_base_image(EA_def1,Reg1),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   data_access(EA_def2,Op_index_access,\"NONE\",\"NONE\",_,4,Offset,_),\n   Offset > 0,\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\n   data_access(EA,_,\"NONE\",Reg2,Reg1,1,_,_).\nin file symbolization.dl [125:1-136:7]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;1;binary/pe/symbolization.dl [125:1-136:7];base_relative_operand(EA_def2,Op_index_access,RVA) :- \\n   reg_has_base_image(EA_def1,Reg1),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   data_access(EA_def2,Op_index_access,\\\"NONE\\\",\\\"NONE\\\",_,4,Offset,_),\\n   Offset > 0,\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\\n   data_access(EA,_,\\\"NONE\\\",Reg2,Reg1,1,_,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_reg_def_use.def_used)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY possible_rva_operand)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 data_access (INDEX  (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 3) (STRING "NONE")) (= (TUPLE t2 5) (NUMBER 4)) (<= (NUMBER 0) (TUPLE t2 6) ))
             (IF (CONSTRAINT != (TUPLE t2 6)  (NUMBER 0))
              (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (AND (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t2 0) (TUPLE t3 1) (TUPLE t1 2) UNDEF))) (EXISTS data_access ((TUPLE t1 2) UNDEF (STRING "NONE") (TUPLE t3 1) (TUPLE t0 1) (NUMBER 1) UNDEF UNDEF)))
                (FOR t4 possible_rva_operand (INDEX  (= (TUPLE t4 0) (TUPLE t2 0)) (= (TUPLE t4 1) (TUPLE t2 1)))
                 (IF (NOT (EXISTS base_relative_operand ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2))))
                  (INSERT ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2)) @new_base_relative_operand)
                 ))               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def2,Op_index_access,RVA) :- \n   reg_has_base_image(EA_def1,Reg1),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   data_access(EA_def2,Op_index_access,\"NONE\",\"NONE\",_,4,Offset,_),\n   Offset > 0,\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\n   data_access(EA,_,\"NONE\",Reg2,Reg1,1,_,_).\nin file symbolization.dl [125:1-136:7]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;2;binary/pe/symbolization.dl [125:1-136:7];base_relative_operand(EA_def2,Op_index_access,RVA) :- \\n   reg_has_base_image(EA_def1,Reg1),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   data_access(EA_def2,Op_index_access,\\\"NONE\\\",\\\"NONE\\\",_,4,Offset,_),\\n   Offset > 0,\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   possible_rva_operand(EA_def2,Op_index_access,RVA),\\n   data_access(EA,_,\\\"NONE\\\",Reg2,Reg1,1,_,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY reg_def_use.def_used)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY possible_rva_operand)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 data_access (INDEX  (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 3) (STRING "NONE")) (= (TUPLE t2 5) (NUMBER 4)) (<= (NUMBER 0) (TUPLE t2 6) ))
             (IF (CONSTRAINT != (TUPLE t2 6)  (NUMBER 0))
              (FOR t3 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (EXISTS data_access ((TUPLE t1 2) UNDEF (STRING "NONE") (TUPLE t3 1) (TUPLE t0 1) (NUMBER 1) UNDEF UNDEF))
                (FOR t4 possible_rva_operand (INDEX  (= (TUPLE t4 0) (TUPLE t2 0)) (= (TUPLE t4 1) (TUPLE t2 1)))
                 (IF (NOT (EXISTS base_relative_operand ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2))))
                  (INSERT ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t4 2)) @new_base_relative_operand)
                 ))               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \n   reg_has_base_image(EA_def2,Reg2),\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   arch.reg_reg_arithmetic_operation(EA,Reg1,Reg1,Reg2,1,0),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   instruction_get_op(EA_def1,Op_index,Op),\n   instruction(EA_def1,_,_,<inlined_Operation_41>,_,_,_,_,_,_),\n   <inlined_Operation_41> = \"LEA\",\n   op_indirect(Op,_,_,_,_,Value,_),\n   Value > 0.\nin file symbolization.dl [94:1-102:48]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;0;binary/pe/symbolization.dl [94:1-102:48];base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \\n   reg_has_base_image(EA_def2,Reg2),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   arch.reg_reg_arithmetic_operation(EA,Reg1,Reg1,Reg2,1,0),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   instruction_get_op(EA_def1,Op_index,Op),\\n   instruction(EA_def1,_,_,<inlined_Operation_41>,_,_,_,_,_,_),\\n   <inlined_Operation_41> = \\\"LEA\\\",\\n   op_indirect(Op,_,_,_,_,Value,_),\\n   Value > 0.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY @delta_reg_has_base_image))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY instruction)))
          (FOR_IN t0 @delta_reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF)))
             (FOR t2 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 3) (TUPLE t0 1)) (= (TUPLE t2 4) (NUMBER 1)) (= (TUPLE t2 5) (NUMBER 0)))
              (IF (CONSTRAINT = (TUPLE t2 1)  (TUPLE t2 2))
               (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)) (= (TUPLE t3 2) (TUPLE t1 2)))
                (IF (AND (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t2 1) (TUPLE t1 2) UNDEF))) (EXISTS instruction ((TUPLE t3 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                 (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                  (FOR t5 op_indirect (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (<= (NUMBER 0) (TUPLE t5 5) ))
                   (IF (AND (CONSTRAINT != (TUPLE t5 5)  (NUMBER 0)) (NOT (EXISTS base_relative_operand ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)))))
                    (INSERT ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)) @new_base_relative_operand)
                   )))                ))              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \n   reg_has_base_image(EA_def2,Reg2),\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   arch.reg_reg_arithmetic_operation(EA,Reg1,Reg1,Reg2,1,0),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   instruction_get_op(EA_def1,Op_index,Op),\n   instruction(EA_def1,_,_,<inlined_Operation_41>,_,_,_,_,_,_),\n   <inlined_Operation_41> = \"LEA\",\n   op_indirect(Op,_,_,_,_,Value,_),\n   Value > 0.\nin file symbolization.dl [94:1-102:48]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;1;binary/pe/symbolization.dl [94:1-102:48];base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \\n   reg_has_base_image(EA_def2,Reg2),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   arch.reg_reg_arithmetic_operation(EA,Reg1,Reg1,Reg2,1,0),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   instruction_get_op(EA_def1,Op_index,Op),\\n   instruction(EA_def1,_,_,<inlined_Operation_41>,_,_,_,_,_,_),\\n   <inlined_Operation_41> = \\\"LEA\\\",\\n   op_indirect(Op,_,_,_,_,Value,_),\\n   Value > 0.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 3) (TUPLE t0 1)) (= (TUPLE t2 4) (NUMBER 1)) (= (TUPLE t2 5) (NUMBER 0)))
             (IF (CONSTRAINT = (TUPLE t2 1)  (TUPLE t2 2))
              (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (AND (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t2 1) (TUPLE t1 2) UNDEF))) (EXISTS instruction ((TUPLE t3 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                 (FOR t5 op_indirect (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (<= (NUMBER 0) (TUPLE t5 5) ))
                  (IF (AND (CONSTRAINT != (TUPLE t5 5)  (NUMBER 0)) (NOT (EXISTS base_relative_operand ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)))))
                   (INSERT ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)) @new_base_relative_operand)
                  )))               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \n   reg_has_base_image(EA_def2,Reg2),\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   arch.reg_reg_arithmetic_operation(EA,Reg1,Reg1,Reg2,1,0),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   instruction_get_op(EA_def1,Op_index,Op),\n   instruction(EA_def1,_,_,<inlined_Operation_41>,_,_,_,_,_,_),\n   <inlined_Operation_41> = \"LEA\",\n   op_indirect(Op,_,_,_,_,Value,_),\n   Value > 0.\nin file symbolization.dl [94:1-102:48]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;2;binary/pe/symbolization.dl [94:1-102:48];base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \\n   reg_has_base_image(EA_def2,Reg2),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   arch.reg_reg_arithmetic_operation(EA,Reg1,Reg1,Reg2,1,0),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   instruction_get_op(EA_def1,Op_index,Op),\\n   instruction(EA_def1,_,_,<inlined_Operation_41>,_,_,_,_,_,_),\\n   <inlined_Operation_41> = \\\"LEA\\\",\\n   op_indirect(Op,_,_,_,_,Value,_),\\n   Value > 0.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 3) (TUPLE t0 1)) (= (TUPLE t2 4) (NUMBER 1)) (= (TUPLE t2 5) (NUMBER 0)))
             (IF (CONSTRAINT = (TUPLE t2 1)  (TUPLE t2 2))
              (FOR t3 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (EXISTS instruction ((TUPLE t3 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
                (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                 (FOR t5 op_indirect (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (<= (NUMBER 0) (TUPLE t5 5) ))
                  (IF (AND (CONSTRAINT != (TUPLE t5 5)  (NUMBER 0)) (NOT (EXISTS base_relative_operand ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)))))
                   (INSERT ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)) @new_base_relative_operand)
                  )))               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \n   reg_has_base_image(EA_def2,Reg2),\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\n   data_access(EA,Op_index_access,\"NONE\",Reg2,Reg1,1,0,_),\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   instruction_get_op(EA_def1,Op_index,Op),\n   instruction(EA_def1,_,_,<inlined_Operation_483>,_,_,_,_,_,_),\n   <inlined_Operation_483> = \"LEA\",\n   op_indirect(Op,_,_,_,_,Value,_),\n   Value > 0.\nin file symbolization.dl [105:1-117:48]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;0;binary/pe/symbolization.dl [105:1-117:48];base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \\n   reg_has_base_image(EA_def2,Reg2),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\\n   data_access(EA,Op_index_access,\\\"NONE\\\",Reg2,Reg1,1,0,_),\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   instruction_get_op(EA_def1,Op_index,Op),\\n   instruction(EA_def1,_,_,<inlined_Operation_483>,_,_,_,_,_,_),\\n   <inlined_Operation_483> = \\\"LEA\\\",\\n   op_indirect(Op,_,_,_,_,Value,_),\\n   Value > 0.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY @delta_reg_has_base_image))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY instruction)))
          (FOR_IN t0 @delta_reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (AND (NOT (EXISTS instruction ((TUPLE t1 2) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) (TUPLE t1 3)))))
             (FOR t2 data_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 3) (TUPLE t0 1)) (= (TUPLE t2 5) (NUMBER 1)) (= (TUPLE t2 6) (NUMBER 0)))
              (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 4)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (AND (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t2 4) (TUPLE t1 2) UNDEF))) (EXISTS instruction ((TUPLE t3 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                 (FOR t5 op_indirect (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (<= (NUMBER 0) (TUPLE t5 5) ))
                  (IF (AND (CONSTRAINT != (TUPLE t5 5)  (NUMBER 0)) (NOT (EXISTS base_relative_operand ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)))))
                   (INSERT ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)) @new_base_relative_operand)
                  )))               )))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \n   reg_has_base_image(EA_def2,Reg2),\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\n   data_access(EA,Op_index_access,\"NONE\",Reg2,Reg1,1,0,_),\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   instruction_get_op(EA_def1,Op_index,Op),\n   instruction(EA_def1,_,_,<inlined_Operation_483>,_,_,_,_,_,_),\n   <inlined_Operation_483> = \"LEA\",\n   op_indirect(Op,_,_,_,_,Value,_),\n   Value > 0.\nin file symbolization.dl [105:1-117:48]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;1;binary/pe/symbolization.dl [105:1-117:48];base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \\n   reg_has_base_image(EA_def2,Reg2),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\\n   data_access(EA,Op_index_access,\\\"NONE\\\",Reg2,Reg1,1,0,_),\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   instruction_get_op(EA_def1,Op_index,Op),\\n   instruction(EA_def1,_,_,<inlined_Operation_483>,_,_,_,_,_,_),\\n   <inlined_Operation_483> = \\\"LEA\\\",\\n   op_indirect(Op,_,_,_,_,Value,_),\\n   Value > 0.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS instruction ((TUPLE t1 2) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
             (FOR t2 data_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 3) (TUPLE t0 1)) (= (TUPLE t2 5) (NUMBER 1)) (= (TUPLE t2 6) (NUMBER 0)))
              (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 4)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (AND (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t2 4) (TUPLE t1 2) UNDEF))) (EXISTS instruction ((TUPLE t3 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                 (FOR t5 op_indirect (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (<= (NUMBER 0) (TUPLE t5 5) ))
                  (IF (AND (CONSTRAINT != (TUPLE t5 5)  (NUMBER 0)) (NOT (EXISTS base_relative_operand ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)))))
                   (INSERT ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)) @new_base_relative_operand)
                  )))               )))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \n   reg_has_base_image(EA_def2,Reg2),\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\n   data_access(EA,Op_index_access,\"NONE\",Reg2,Reg1,1,0,_),\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   instruction_get_op(EA_def1,Op_index,Op),\n   instruction(EA_def1,_,_,<inlined_Operation_483>,_,_,_,_,_,_),\n   <inlined_Operation_483> = \"LEA\",\n   op_indirect(Op,_,_,_,_,Value,_),\n   Value > 0.\nin file symbolization.dl [105:1-117:48]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;2;binary/pe/symbolization.dl [105:1-117:48];base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \\n   reg_has_base_image(EA_def2,Reg2),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\\n   data_access(EA,Op_index_access,\\\"NONE\\\",Reg2,Reg1,1,0,_),\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   instruction_get_op(EA_def1,Op_index,Op),\\n   instruction(EA_def1,_,_,<inlined_Operation_483>,_,_,_,_,_,_),\\n   <inlined_Operation_483> = \\\"LEA\\\",\\n   op_indirect(Op,_,_,_,_,Value,_),\\n   Value > 0.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS instruction ((TUPLE t1 2) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
             (FOR t2 data_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 3) (TUPLE t0 1)) (= (TUPLE t2 5) (NUMBER 1)) (= (TUPLE t2 6) (NUMBER 0)))
              (FOR t3 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 4)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (EXISTS instruction ((TUPLE t3 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
                (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                 (FOR t5 op_indirect (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (<= (NUMBER 0) (TUPLE t5 5) ))
                  (IF (AND (CONSTRAINT != (TUPLE t5 5)  (NUMBER 0)) (NOT (EXISTS base_relative_operand ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)))))
                   (INSERT ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)) @new_base_relative_operand)
                  )))               )))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \n   reg_has_base_image(EA_def2,Reg2),\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\n   data_access(EA,Op_index_access,\"NONE\",Reg1,Reg2,1,0,_),\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   instruction_get_op(EA_def1,Op_index,Op),\n   instruction(EA_def1,_,_,<inlined_Operation_484>,_,_,_,_,_,_),\n   <inlined_Operation_484> = \"LEA\",\n   op_indirect(Op,_,_,_,_,Value,_),\n   Value > 0.\nin file symbolization.dl [105:1-117:48]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;0;binary/pe/symbolization.dl [105:1-117:48];base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \\n   reg_has_base_image(EA_def2,Reg2),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\\n   data_access(EA,Op_index_access,\\\"NONE\\\",Reg1,Reg2,1,0,_),\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   instruction_get_op(EA_def1,Op_index,Op),\\n   instruction(EA_def1,_,_,<inlined_Operation_484>,_,_,_,_,_,_),\\n   <inlined_Operation_484> = \\\"LEA\\\",\\n   op_indirect(Op,_,_,_,_,Value,_),\\n   Value > 0.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY @delta_reg_has_base_image))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY instruction)))
          (FOR_IN t0 @delta_reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (AND (NOT (EXISTS instruction ((TUPLE t1 2) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) (TUPLE t1 3)))))
             (FOR t2 data_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 4) (TUPLE t0 1)) (= (TUPLE t2 5) (NUMBER 1)) (= (TUPLE t2 6) (NUMBER 0)))
              (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 3)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (AND (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t2 3) (TUPLE t1 2) UNDEF))) (EXISTS instruction ((TUPLE t3 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                 (FOR t5 op_indirect (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (<= (NUMBER 0) (TUPLE t5 5) ))
                  (IF (AND (CONSTRAINT != (TUPLE t5 5)  (NUMBER 0)) (NOT (EXISTS base_relative_operand ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)))))
                   (INSERT ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)) @new_base_relative_operand)
                  )))               )))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \n   reg_has_base_image(EA_def2,Reg2),\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\n   data_access(EA,Op_index_access,\"NONE\",Reg1,Reg2,1,0,_),\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   instruction_get_op(EA_def1,Op_index,Op),\n   instruction(EA_def1,_,_,<inlined_Operation_484>,_,_,_,_,_,_),\n   <inlined_Operation_484> = \"LEA\",\n   op_indirect(Op,_,_,_,_,Value,_),\n   Value > 0.\nin file symbolization.dl [105:1-117:48]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;1;binary/pe/symbolization.dl [105:1-117:48];base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \\n   reg_has_base_image(EA_def2,Reg2),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\\n   data_access(EA,Op_index_access,\\\"NONE\\\",Reg1,Reg2,1,0,_),\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   instruction_get_op(EA_def1,Op_index,Op),\\n   instruction(EA_def1,_,_,<inlined_Operation_484>,_,_,_,_,_,_),\\n   <inlined_Operation_484> = \\\"LEA\\\",\\n   op_indirect(Op,_,_,_,_,Value,_),\\n   Value > 0.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS instruction ((TUPLE t1 2) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
             (FOR t2 data_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 4) (TUPLE t0 1)) (= (TUPLE t2 5) (NUMBER 1)) (= (TUPLE t2 6) (NUMBER 0)))
              (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 3)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (AND (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t2 3) (TUPLE t1 2) UNDEF))) (EXISTS instruction ((TUPLE t3 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                 (FOR t5 op_indirect (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (<= (NUMBER 0) (TUPLE t5 5) ))
                  (IF (AND (CONSTRAINT != (TUPLE t5 5)  (NUMBER 0)) (NOT (EXISTS base_relative_operand ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)))))
                   (INSERT ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)) @new_base_relative_operand)
                  )))               )))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \n   reg_has_base_image(EA_def2,Reg2),\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\n   data_access(EA,Op_index_access,\"NONE\",Reg1,Reg2,1,0,_),\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   instruction_get_op(EA_def1,Op_index,Op),\n   instruction(EA_def1,_,_,<inlined_Operation_484>,_,_,_,_,_,_),\n   <inlined_Operation_484> = \"LEA\",\n   op_indirect(Op,_,_,_,_,Value,_),\n   Value > 0.\nin file symbolization.dl [105:1-117:48]" 
       (TIMER_ON @new_base_relative_operand "@t-recursive-rule;base_relative_operand;2;binary/pe/symbolization.dl [105:1-117:48];base_relative_operand(EA_def1,Op_index,as(Value, address)) :- \\n   reg_has_base_image(EA_def2,Reg2),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,Op_index_access),\\n   data_access(EA,Op_index_access,\\\"NONE\\\",Reg1,Reg2,1,0,_),\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   instruction_get_op(EA_def1,Op_index,Op),\\n   instruction(EA_def1,_,_,<inlined_Operation_484>,_,_,_,_,_,_),\\n   <inlined_Operation_484> = \\\"LEA\\\",\\n   op_indirect(Op,_,_,_,_,Value,_),\\n   Value > 0.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS instruction ((TUPLE t1 2) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
             (FOR t2 data_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 4) (TUPLE t0 1)) (= (TUPLE t2 5) (NUMBER 1)) (= (TUPLE t2 6) (NUMBER 0)))
              (FOR t3 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 3)) (= (TUPLE t3 2) (TUPLE t1 2)))
               (IF (EXISTS instruction ((TUPLE t3 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
                (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                 (FOR t5 op_indirect (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (<= (NUMBER 0) (TUPLE t5 5) ))
                  (IF (AND (CONSTRAINT != (TUPLE t5 5)  (NUMBER 0)) (NOT (EXISTS base_relative_operand ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)))))
                   (INSERT ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t5 5)) @new_base_relative_operand)
                  )))               )))            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_base_relative_operation "@t-recursive-relation;base_relative_operation;binary/pe/symbolization.dl [163:7-163:30];"
(STMTS (STMTS (STMTS       (DEBUG 
 "base_relative_operation(EA_relop,EA_inst) :- \n   base_relative_operand(EA_relop,_,_),\n   reg_def_use.def_used(EA_relop,_,EA_inst,_).\nin file symbolization.dl [165:1-167:48]" 
       (TIMER_ON @new_base_relative_operation "@t-recursive-rule;base_relative_operation;0;binary/pe/symbolization.dl [165:1-167:48];base_relative_operation(EA_relop,EA_inst) :- \\n   base_relative_operand(EA_relop,_,_),\\n   reg_def_use.def_used(EA_relop,_,EA_inst,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_base_relative_operand)) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 @delta_base_relative_operand            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS base_relative_operation ((TUPLE t0 0) (TUPLE t1 2)))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) UNDEF (TUPLE t1 2) UNDEF))))
             (INSERT ((TUPLE t0 0) (TUPLE t1 2)) @new_base_relative_operation)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operation(EA_relop,EA_inst) :- \n   base_relative_operand(EA_relop,_,_),\n   reg_def_use.def_used(EA_relop,_,EA_inst,_).\nin file symbolization.dl [165:1-167:48]" 
       (TIMER_ON @new_base_relative_operation "@t-recursive-rule;base_relative_operation;1;binary/pe/symbolization.dl [165:1-167:48];base_relative_operation(EA_relop,EA_inst) :- \\n   base_relative_operand(EA_relop,_,_),\\n   reg_def_use.def_used(EA_relop,_,EA_inst,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY base_relative_operand)) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 base_relative_operand            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (NOT (EXISTS base_relative_operation ((TUPLE t0 0) (TUPLE t1 2))))
             (INSERT ((TUPLE t0 0) (TUPLE t1 2)) @new_base_relative_operation)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operation(EA_relop,EA_next) :- \n   base_relative_operand(EA_relop,_,_),\n   reg_def_use.def_used(EA_relop,_,EA_inst,_),\n   reg_def_use.def_used(EA_inst,_,EA_next,_).\nin file symbolization.dl [169:1-172:47]" 
       (TIMER_ON @new_base_relative_operation "@t-recursive-rule;base_relative_operation;0;binary/pe/symbolization.dl [169:1-172:47];base_relative_operation(EA_relop,EA_next) :- \\n   base_relative_operand(EA_relop,_,_),\\n   reg_def_use.def_used(EA_relop,_,EA_inst,_),\\n   reg_def_use.def_used(EA_inst,_,EA_next,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY reg_def_use.def_used)) (NOT (ISEMPTY @delta_base_relative_operand)))
          (FOR_IN t0 @delta_base_relative_operand            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) UNDEF (TUPLE t1 2) UNDEF)))
             (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
              (IF (AND (NOT (EXISTS base_relative_operation ((TUPLE t0 0) (TUPLE t2 2)))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t1 2) UNDEF (TUPLE t2 2) UNDEF))))
               (INSERT ((TUPLE t0 0) (TUPLE t2 2)) @new_base_relative_operation)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operation(EA_relop,EA_next) :- \n   base_relative_operand(EA_relop,_,_),\n   reg_def_use.def_used(EA_relop,_,EA_inst,_),\n   reg_def_use.def_used(EA_inst,_,EA_next,_).\nin file symbolization.dl [169:1-172:47]" 
       (TIMER_ON @new_base_relative_operation "@t-recursive-rule;base_relative_operation;1;binary/pe/symbolization.dl [169:1-172:47];base_relative_operation(EA_relop,EA_next) :- \\n   base_relative_operand(EA_relop,_,_),\\n   reg_def_use.def_used(EA_relop,_,EA_inst,_),\\n   reg_def_use.def_used(EA_inst,_,EA_next,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY reg_def_use.def_used)) (NOT (ISEMPTY base_relative_operand))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 base_relative_operand            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (IF (AND (NOT (EXISTS base_relative_operation ((TUPLE t0 0) (TUPLE t2 2)))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t1 2) UNDEF (TUPLE t2 2) UNDEF))))
              (INSERT ((TUPLE t0 0) (TUPLE t2 2)) @new_base_relative_operation)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "base_relative_operation(EA_relop,EA_next) :- \n   base_relative_operand(EA_relop,_,_),\n   reg_def_use.def_used(EA_relop,_,EA_inst,_),\n   reg_def_use.def_used(EA_inst,_,EA_next,_).\nin file symbolization.dl [169:1-172:47]" 
       (TIMER_ON @new_base_relative_operation "@t-recursive-rule;base_relative_operation;2;binary/pe/symbolization.dl [169:1-172:47];base_relative_operation(EA_relop,EA_next) :- \\n   base_relative_operand(EA_relop,_,_),\\n   reg_def_use.def_used(EA_relop,_,EA_inst,_),\\n   reg_def_use.def_used(EA_inst,_,EA_next,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_reg_def_use.def_used)) (NOT (ISEMPTY base_relative_operand))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 base_relative_operand            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (IF (NOT (EXISTS base_relative_operation ((TUPLE t0 0) (TUPLE t2 2))))
              (INSERT ((TUPLE t0 0) (TUPLE t2 2)) @new_base_relative_operation)
             ))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_block_next "@t-recursive-relation;block_next;use_def_analysis.dl [70:7-70:17];"
(STMTS       (DEBUG 
 "block_next(Block,EA,Dest) :- \n   block_last_instruction(Block,EA),\n   jump_table_target(EA,Dest).\nin file use_def_analysis.dl [91:1-93:32]" 
       (TIMER_ON @new_block_next "@t-recursive-rule;block_next;0;use_def_analysis.dl [91:1-93:32];block_next(Block,EA,Dest) :- \\n   block_last_instruction(Block,EA),\\n   jump_table_target(EA,Dest).;"
(QUERY
         (IF (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY @delta_jump_table_target)))
          (FOR_IN t0 block_last_instruction            (FOR t1 @delta_jump_table_target (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (NOT (EXISTS block_next ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1)) @new_block_next)
            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_cmp_defines "@t-recursive-relation;cmp_defines;boundary_value_analysis.dl [212:7-212:18];"
(STMTS (STMTS (STMTS       (DEBUG 
 "cmp_defines(EA_jmp,EA_dst,Reg) :- \n   compare_and_jump_immediate(_,EA_jmp,\"E\",Reg,_),\n   direct_jump(EA_jmp,EA_dst).\nin file boundary_value_analysis.dl [214:1-216:32]" 
       (TIMER_ON @new_cmp_defines "@t-recursive-rule;cmp_defines;0;boundary_value_analysis.dl [214:1-216:32];cmp_defines(EA_jmp,EA_dst,Reg) :- \\n   compare_and_jump_immediate(_,EA_jmp,\\\"E\\\",Reg,_),\\n   direct_jump(EA_jmp,EA_dst).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_compare_and_jump_immediate)) (NOT (ISEMPTY direct_jump)))
          (FOR t0 @delta_compare_and_jump_immediate (INDEX  (= (TUPLE t0 2) (STRING "E")))
           (FOR t1 direct_jump (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (NOT (EXISTS cmp_defines ((TUPLE t0 1) (TUPLE t1 1) (TUPLE t0 3))))
             (INSERT ((TUPLE t0 1) (TUPLE t1 1) (TUPLE t0 3)) @new_cmp_defines)
            )))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "cmp_defines(EA_jmp,EA_dst,Reg) :- \n   compare_and_jump_immediate(_,EA_jmp,\"NE\",Reg,_),\n   may_fallthrough(EA_jmp,EA_dst).\nin file boundary_value_analysis.dl [218:1-220:36]" 
       (TIMER_ON @new_cmp_defines "@t-recursive-rule;cmp_defines;0;boundary_value_analysis.dl [218:1-220:36];cmp_defines(EA_jmp,EA_dst,Reg) :- \\n   compare_and_jump_immediate(_,EA_jmp,\\\"NE\\\",Reg,_),\\n   may_fallthrough(EA_jmp,EA_dst).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_compare_and_jump_immediate)) (NOT (ISEMPTY may_fallthrough)))
          (FOR t0 @delta_compare_and_jump_immediate (INDEX  (= (TUPLE t0 2) (STRING "NE")))
           (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (NOT (EXISTS cmp_defines ((TUPLE t0 1) (TUPLE t1 1) (TUPLE t0 3))))
             (INSERT ((TUPLE t0 1) (TUPLE t1 1) (TUPLE t0 3)) @new_cmp_defines)
            )))         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_compare_and_jump_immediate "@t-recursive-relation;compare_and_jump_immediate;boundary_value_analysis.dl [58:7-58:33];"
(STMTS       (DEBUG 
 "compare_and_jump_immediate(EA_cmp,EA_jmp,CC,Reg,Immediate) :- \n   flags_and_jump_pair(EA_cmp,EA_jmp,CC),\n   instruction(EA_cmp,_,_,Operation,_,_,_,_,_,_),\n   arch.cmp_operation(Operation),\n   cmp_immediate_to_reg(EA_cmp,Reg,_,Immediate).\nin file boundary_value_analysis.dl [61:1-65:50]" 
       (TIMER_ON @new_compare_and_jump_immediate "@t-recursive-rule;compare_and_jump_immediate;0;boundary_value_analysis.dl [61:1-65:50];compare_and_jump_immediate(EA_cmp,EA_jmp,CC,Reg,Immediate) :- \\n   flags_and_jump_pair(EA_cmp,EA_jmp,CC),\\n   instruction(EA_cmp,_,_,Operation,_,_,_,_,_,_),\\n   arch.cmp_operation(Operation),\\n   cmp_immediate_to_reg(EA_cmp,Reg,_,Immediate).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_flags_and_jump_pair)) (NOT (ISEMPTY cmp_immediate_to_reg))) (NOT (ISEMPTY arch.cmp_operation))) (NOT (ISEMPTY instruction)))
          (FOR_IN t0 @delta_flags_and_jump_pair            (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS arch.cmp_operation ((TUPLE t1 3)))
            (FOR t2 cmp_immediate_to_reg (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (NOT (EXISTS compare_and_jump_immediate ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t2 1) (TUPLE t2 3))))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t2 1) (TUPLE t2 3)) @new_compare_and_jump_immediate)
             ))))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_compare_and_jump_indirect "@t-recursive-relation;compare_and_jump_indirect;boundary_value_analysis.dl [105:7-105:32];"
(STMTS       (DEBUG 
 "compare_and_jump_indirect(EA_cmp,EA_jmp,CC,IndirectOp,Immediate) :- \n   flags_and_jump_pair(EA_cmp,EA_jmp,CC),\n   instruction(EA_cmp,_,_,CmpOperation,_,_,_,_,_,_),\n   arch.cmp_operation(CmpOperation),\n   instruction_get_op(EA_cmp,_,IndirectOp),\n   op_indirect(IndirectOp,_,_,_,_,_,_),\n   instruction_get_op(EA_cmp,_,ImmOp),\n   op_immediate(ImmOp,Immediate).\nin file boundary_value_analysis.dl [107:1-114:35]" 
       (TIMER_ON @new_compare_and_jump_indirect "@t-recursive-rule;compare_and_jump_indirect;0;boundary_value_analysis.dl [107:1-114:35];compare_and_jump_indirect(EA_cmp,EA_jmp,CC,IndirectOp,Immediate) :- \\n   flags_and_jump_pair(EA_cmp,EA_jmp,CC),\\n   instruction(EA_cmp,_,_,CmpOperation,_,_,_,_,_,_),\\n   arch.cmp_operation(CmpOperation),\\n   instruction_get_op(EA_cmp,_,IndirectOp),\\n   op_indirect(IndirectOp,_,_,_,_,_,_),\\n   instruction_get_op(EA_cmp,_,ImmOp),\\n   op_immediate(ImmOp,Immediate).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY op_immediate)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY arch.cmp_operation))) (NOT (ISEMPTY op_indirect))) (NOT (ISEMPTY @delta_flags_and_jump_pair))) (NOT (ISEMPTY instruction_get_op)))
          (FOR_IN t0 @delta_flags_and_jump_pair            (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS arch.cmp_operation ((TUPLE t1 3)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (EXISTS op_indirect ((TUPLE t2 2) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t3 instruction_get_op (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)))
               (FOR t4 op_immediate (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)))
                (IF (NOT (EXISTS compare_and_jump_indirect ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t2 2) (TUPLE t4 1))))
                 (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t2 2) (TUPLE t4 1)) @new_compare_and_jump_indirect)
                )))             ))))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_compare_and_jump_register "@t-recursive-relation;compare_and_jump_register;boundary_value_analysis.dl [88:7-88:32];"
(STMTS       (DEBUG 
 "compare_and_jump_register(EA_cmp,EA_jmp,CC,Reg1,Reg2) :- \n   flags_and_jump_pair(EA_cmp,EA_jmp,CC),\n   cmp_reg_to_reg(EA_cmp,Reg1,Reg2).\nin file boundary_value_analysis.dl [91:1-93:38]" 
       (TIMER_ON @new_compare_and_jump_register "@t-recursive-rule;compare_and_jump_register;0;boundary_value_analysis.dl [91:1-93:38];compare_and_jump_register(EA_cmp,EA_jmp,CC,Reg1,Reg2) :- \\n   flags_and_jump_pair(EA_cmp,EA_jmp,CC),\\n   cmp_reg_to_reg(EA_cmp,Reg1,Reg2).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_flags_and_jump_pair)) (NOT (ISEMPTY cmp_reg_to_reg)))
          (FOR_IN t0 @delta_flags_and_jump_pair            (FOR t1 cmp_reg_to_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (NOT (EXISTS compare_and_jump_register ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 1) (TUPLE t1 2))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 1) (TUPLE t1 2)) @new_compare_and_jump_register)
            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_const_value_reg_used "@t-recursive-relation;const_value_reg_used;value_analysis.dl [369:7-369:27];"
(STMTS (STMTS (STMTS       (DEBUG 
 "const_value_reg_used(UsedEA,EADef,EARegDef,Reg,Value) :- \n   value_reg(EARegDef,Reg,EADef,\"NONE\",0,Value,_),\n   reg_def_use.def_used(EARegDef,Reg,UsedEA,_).\nin file value_analysis.dl [371:1-373:49]" 
       (TIMER_ON @new_const_value_reg_used "@t-recursive-rule;const_value_reg_used;0;value_analysis.dl [371:1-373:49];const_value_reg_used(UsedEA,EADef,EARegDef,Reg,Value) :- \\n   value_reg(EARegDef,Reg,EADef,\\\"NONE\\\",0,Value,_),\\n   reg_def_use.def_used(EARegDef,Reg,UsedEA,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_value_reg)) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR t0 @delta_value_reg (INDEX  (= (TUPLE t0 3) (STRING "NONE")) (= (TUPLE t0 4) (NUMBER 0)))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (AND (NOT (EXISTS const_value_reg_used ((TUPLE t1 2) (TUPLE t0 2) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 5)))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF))))
             (INSERT ((TUPLE t1 2) (TUPLE t0 2) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 5)) @new_const_value_reg_used)
            )))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "const_value_reg_used(UsedEA,EADef,EARegDef,Reg,Value) :- \n   value_reg(EARegDef,Reg,EADef,\"NONE\",0,Value,_),\n   reg_def_use.def_used(EARegDef,Reg,UsedEA,_).\nin file value_analysis.dl [371:1-373:49]" 
       (TIMER_ON @new_const_value_reg_used "@t-recursive-rule;const_value_reg_used;1;value_analysis.dl [371:1-373:49];const_value_reg_used(UsedEA,EADef,EARegDef,Reg,Value) :- \\n   value_reg(EARegDef,Reg,EADef,\\\"NONE\\\",0,Value,_),\\n   reg_def_use.def_used(EARegDef,Reg,UsedEA,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY value_reg)) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR t0 value_reg (INDEX  (= (TUPLE t0 3) (STRING "NONE")) (= (TUPLE t0 4) (NUMBER 0)))
           (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS const_value_reg_used ((TUPLE t1 2) (TUPLE t0 2) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 5))))
             (INSERT ((TUPLE t1 2) (TUPLE t0 2) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 5)) @new_const_value_reg_used)
            )))         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_def_used_for_address "@t-recursive-relation;def_used_for_address;use_def_analysis.dl [569:7-569:27];"
(STMTS (STMTS (STMTS       (DEBUG 
 "def_used_for_address(EA_def,Reg,Type) :- \n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   reg_used_for(EA,Reg,Type).\nin file use_def_analysis.dl [571:1-573:31]" 
       (TIMER_ON @new_def_used_for_address "@t-recursive-rule;def_used_for_address;0;use_def_analysis.dl [571:1-573:31];def_used_for_address(EA_def,Reg,Type) :- \\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   reg_used_for(EA,Reg,Type).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_reg_def_use.def_used)) (NOT (ISEMPTY reg_used_for)))
          (FOR_IN t0 @delta_reg_def_use.def_used            (FOR t1 reg_used_for (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS def_used_for_address ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2)) @new_def_used_for_address)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "def_used_for_address(EA_def,Reg,Type) :- \n   def_used_for_address(EA_used,_,Type),\n   reg_def_use.def_used(EA_def,Reg,EA_used,_).\nin file use_def_analysis.dl [575:1-577:48]" 
       (TIMER_ON @new_def_used_for_address "@t-recursive-rule;def_used_for_address;0;use_def_analysis.dl [575:1-577:48];def_used_for_address(EA_def,Reg,Type) :- \\n   def_used_for_address(EA_used,_,Type),\\n   reg_def_use.def_used(EA_def,Reg,EA_used,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_def_used_for_address)) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 @delta_def_used_for_address            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS def_used_for_address ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t0 2)))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t0 0) UNDEF))))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t0 2)) @new_def_used_for_address)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "def_used_for_address(EA_def,Reg,Type) :- \n   def_used_for_address(EA_used,_,Type),\n   reg_def_use.def_used(EA_def,Reg,EA_used,_).\nin file use_def_analysis.dl [575:1-577:48]" 
       (TIMER_ON @new_def_used_for_address "@t-recursive-rule;def_used_for_address;1;use_def_analysis.dl [575:1-577:48];def_used_for_address(EA_def,Reg,Type) :- \\n   def_used_for_address(EA_used,_,Type),\\n   reg_def_use.def_used(EA_def,Reg,EA_used,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY def_used_for_address)) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 def_used_for_address            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
            (IF (NOT (EXISTS def_used_for_address ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t0 2))))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t0 2)) @new_def_used_for_address)
            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_flags_and_jump_pair "@t-recursive-relation;flags_and_jump_pair;boundary_value_analysis.dl [46:7-46:26];"
(STMTS       (DEBUG 
 "flags_and_jump_pair(EA_flags,EA_jmp,CC) :- \n   arch.condition_flags_reg(Reg),\n   reg_def_use.def_used(EA_flags,Reg,EA_jmp,_),\n   arch.jump(EA_jmp),\n   arch.conditional(EA_jmp,CC).\nin file boundary_value_analysis.dl [48:1-52:33]" 
       (TIMER_ON @new_flags_and_jump_pair "@t-recursive-rule;flags_and_jump_pair;0;boundary_value_analysis.dl [48:1-52:33];flags_and_jump_pair(EA_flags,EA_jmp,CC) :- \\n   arch.condition_flags_reg(Reg),\\n   reg_def_use.def_used(EA_flags,Reg,EA_jmp,_),\\n   arch.jump(EA_jmp),\\n   arch.conditional(EA_jmp,CC).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY arch.condition_flags_reg)) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 arch.condition_flags_reg            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (IF (EXISTS arch.jump ((TUPLE t1 2)))
             (FOR t2 arch.conditional (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
              (IF (NOT (EXISTS flags_and_jump_pair ((TUPLE t1 0) (TUPLE t1 2) (TUPLE t2 1))))
               (INSERT ((TUPLE t1 0) (TUPLE t1 2) (TUPLE t2 1)) @new_flags_and_jump_pair)
              ))            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_got_relative_operand "@t-recursive-relation;got_relative_operand;binary/elf/symbolization.dl [88:7-88:27];"
(STMTS (STMTS (STMTS       (DEBUG 
 "got_relative_operand(EA3,Index,as(Dest, address)) :- \n   reg_has_got(EA1,Reg1),\n   reg_def_use.def_used(EA1,Reg1,EA2,_),\n   arch.reg_reg_arithmetic_operation(EA2,Reg3,Reg1,Reg2,Mult,0),\n   reg_def_use.def_used(EA2,Reg3,EA3,_),\n   op_immediate_and_reg(EA3,_,Reg3,Index,_),\n   value_reg(EA3,Reg3,_,Reg2,Mult,Dest,_).\nin file symbolization.dl [109:1-115:44]" 
       (TIMER_ON @new_got_relative_operand "@t-recursive-rule;got_relative_operand;0;binary/elf/symbolization.dl [109:1-115:44];got_relative_operand(EA3,Index,as(Dest, address)) :- \\n   reg_has_got(EA1,Reg1),\\n   reg_def_use.def_used(EA1,Reg1,EA2,_),\\n   arch.reg_reg_arithmetic_operation(EA2,Reg3,Reg1,Reg2,Mult,0),\\n   reg_def_use.def_used(EA2,Reg3,EA3,_),\\n   op_immediate_and_reg(EA3,_,Reg3,Index,_),\\n   value_reg(EA3,Reg3,_,Reg2,Mult,Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_reg_has_got)) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY op_immediate_and_reg)))
          (FOR_IN t0 @delta_reg_has_got            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF)))
             (FOR t2 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)) (= (TUPLE t2 5) (NUMBER 0)))
              (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)) (= (TUPLE t3 1) (TUPLE t2 1)))
               (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t1 2) (TUPLE t2 1) (TUPLE t3 2) UNDEF)))
                (FOR t4 op_immediate_and_reg (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t2 1)))
                 (FOR t5 value_reg (INDEX  (= (TUPLE t5 0) (TUPLE t3 2)) (= (TUPLE t5 1) (TUPLE t2 1)) (= (TUPLE t5 3) (TUPLE t2 3)) (= (TUPLE t5 4) (TUPLE t2 4)))
                  (IF (AND (NOT (EXISTS got_relative_operand ((TUPLE t3 2) (TUPLE t4 3) (TUPLE t5 5)))) (NOT (EXISTS @delta_value_reg ((TUPLE t3 2) (TUPLE t2 1) UNDEF (TUPLE t2 3) (TUPLE t2 4) (TUPLE t5 5) UNDEF))))
                   (INSERT ((TUPLE t3 2) (TUPLE t4 3) (TUPLE t5 5)) @new_got_relative_operand)
                  )))               )))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "got_relative_operand(EA3,Index,as(Dest, address)) :- \n   reg_has_got(EA1,Reg1),\n   reg_def_use.def_used(EA1,Reg1,EA2,_),\n   arch.reg_reg_arithmetic_operation(EA2,Reg3,Reg1,Reg2,Mult,0),\n   reg_def_use.def_used(EA2,Reg3,EA3,_),\n   op_immediate_and_reg(EA3,_,Reg3,Index,_),\n   value_reg(EA3,Reg3,_,Reg2,Mult,Dest,_).\nin file symbolization.dl [109:1-115:44]" 
       (TIMER_ON @new_got_relative_operand "@t-recursive-rule;got_relative_operand;1;binary/elf/symbolization.dl [109:1-115:44];got_relative_operand(EA3,Index,as(Dest, address)) :- \\n   reg_has_got(EA1,Reg1),\\n   reg_def_use.def_used(EA1,Reg1,EA2,_),\\n   arch.reg_reg_arithmetic_operation(EA2,Reg3,Reg1,Reg2,Mult,0),\\n   reg_def_use.def_used(EA2,Reg3,EA3,_),\\n   op_immediate_and_reg(EA3,_,Reg3,Index,_),\\n   value_reg(EA3,Reg3,_,Reg2,Mult,Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY reg_has_got)) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY op_immediate_and_reg))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 reg_has_got            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)) (= (TUPLE t2 5) (NUMBER 0)))
             (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)) (= (TUPLE t3 1) (TUPLE t2 1)))
              (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t1 2) (TUPLE t2 1) (TUPLE t3 2) UNDEF)))
               (FOR t4 op_immediate_and_reg (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t2 1)))
                (FOR t5 value_reg (INDEX  (= (TUPLE t5 0) (TUPLE t3 2)) (= (TUPLE t5 1) (TUPLE t2 1)) (= (TUPLE t5 3) (TUPLE t2 3)) (= (TUPLE t5 4) (TUPLE t2 4)))
                 (IF (AND (NOT (EXISTS got_relative_operand ((TUPLE t3 2) (TUPLE t4 3) (TUPLE t5 5)))) (NOT (EXISTS @delta_value_reg ((TUPLE t3 2) (TUPLE t2 1) UNDEF (TUPLE t2 3) (TUPLE t2 4) (TUPLE t5 5) UNDEF))))
                  (INSERT ((TUPLE t3 2) (TUPLE t4 3) (TUPLE t5 5)) @new_got_relative_operand)
                 )))              )))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "got_relative_operand(EA3,Index,as(Dest, address)) :- \n   reg_has_got(EA1,Reg1),\n   reg_def_use.def_used(EA1,Reg1,EA2,_),\n   arch.reg_reg_arithmetic_operation(EA2,Reg3,Reg1,Reg2,Mult,0),\n   reg_def_use.def_used(EA2,Reg3,EA3,_),\n   op_immediate_and_reg(EA3,_,Reg3,Index,_),\n   value_reg(EA3,Reg3,_,Reg2,Mult,Dest,_).\nin file symbolization.dl [109:1-115:44]" 
       (TIMER_ON @new_got_relative_operand "@t-recursive-rule;got_relative_operand;2;binary/elf/symbolization.dl [109:1-115:44];got_relative_operand(EA3,Index,as(Dest, address)) :- \\n   reg_has_got(EA1,Reg1),\\n   reg_def_use.def_used(EA1,Reg1,EA2,_),\\n   arch.reg_reg_arithmetic_operation(EA2,Reg3,Reg1,Reg2,Mult,0),\\n   reg_def_use.def_used(EA2,Reg3,EA3,_),\\n   op_immediate_and_reg(EA3,_,Reg3,Index,_),\\n   value_reg(EA3,Reg3,_,Reg2,Mult,Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY reg_has_got)) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY op_immediate_and_reg))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 reg_has_got            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)) (= (TUPLE t2 5) (NUMBER 0)))
             (FOR t3 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)) (= (TUPLE t3 1) (TUPLE t2 1)))
              (FOR t4 op_immediate_and_reg (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t2 1)))
               (FOR t5 value_reg (INDEX  (= (TUPLE t5 0) (TUPLE t3 2)) (= (TUPLE t5 1) (TUPLE t2 1)) (= (TUPLE t5 3) (TUPLE t2 3)) (= (TUPLE t5 4) (TUPLE t2 4)))
                (IF (AND (NOT (EXISTS got_relative_operand ((TUPLE t3 2) (TUPLE t4 3) (TUPLE t5 5)))) (NOT (EXISTS @delta_value_reg ((TUPLE t3 2) (TUPLE t2 1) UNDEF (TUPLE t2 3) (TUPLE t2 4) (TUPLE t5 5) UNDEF))))
                 (INSERT ((TUPLE t3 2) (TUPLE t4 3) (TUPLE t5 5)) @new_got_relative_operand)
                )))))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "got_relative_operand(EA3,Index,as(Dest, address)) :- \n   reg_has_got(EA1,Reg1),\n   reg_def_use.def_used(EA1,Reg1,EA2,_),\n   arch.reg_reg_arithmetic_operation(EA2,Reg3,Reg1,Reg2,Mult,0),\n   reg_def_use.def_used(EA2,Reg3,EA3,_),\n   op_immediate_and_reg(EA3,_,Reg3,Index,_),\n   value_reg(EA3,Reg3,_,Reg2,Mult,Dest,_).\nin file symbolization.dl [109:1-115:44]" 
       (TIMER_ON @new_got_relative_operand "@t-recursive-rule;got_relative_operand;3;binary/elf/symbolization.dl [109:1-115:44];got_relative_operand(EA3,Index,as(Dest, address)) :- \\n   reg_has_got(EA1,Reg1),\\n   reg_def_use.def_used(EA1,Reg1,EA2,_),\\n   arch.reg_reg_arithmetic_operation(EA2,Reg3,Reg1,Reg2,Mult,0),\\n   reg_def_use.def_used(EA2,Reg3,EA3,_),\\n   op_immediate_and_reg(EA3,_,Reg3,Index,_),\\n   value_reg(EA3,Reg3,_,Reg2,Mult,Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY reg_has_got)) (NOT (ISEMPTY @delta_value_reg))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY op_immediate_and_reg)))
          (FOR_IN t0 reg_has_got            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)) (= (TUPLE t2 5) (NUMBER 0)))
             (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)) (= (TUPLE t3 1) (TUPLE t2 1)))
              (FOR t4 op_immediate_and_reg (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t2 1)))
               (FOR t5 @delta_value_reg (INDEX  (= (TUPLE t5 0) (TUPLE t3 2)) (= (TUPLE t5 1) (TUPLE t2 1)) (= (TUPLE t5 3) (TUPLE t2 3)) (= (TUPLE t5 4) (TUPLE t2 4)))
                (IF (NOT (EXISTS got_relative_operand ((TUPLE t3 2) (TUPLE t4 3) (TUPLE t5 5))))
                 (INSERT ((TUPLE t3 2) (TUPLE t4 3) (TUPLE t5 5)) @new_got_relative_operand)
                )))))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "got_relative_operand(EA,Index,(Got+as(Offset, address))) :- \n   reg_has_got(EA_base,Reg),\n   reg_def_use.def_used(EA_base,Reg,EA,Index),\n   instruction_get_op(EA,Index,Op),\n   op_indirect_mapped(Op,\"NONE\",Reg,_,_,Offset,_),\n   Offset != 0,\n   got_reference_pointer(Got).\nin file symbolization.dl [97:1-107:33]" 
       (TIMER_ON @new_got_relative_operand "@t-recursive-rule;got_relative_operand;0;binary/elf/symbolization.dl [97:1-107:33];got_relative_operand(EA,Index,(Got+as(Offset, address))) :- \\n   reg_has_got(EA_base,Reg),\\n   reg_def_use.def_used(EA_base,Reg,EA,Index),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect_mapped(Op,\\\"NONE\\\",Reg,_,_,Offset,_),\\n   Offset != 0,\\n   got_reference_pointer(Got).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY got_reference_pointer)) (NOT (ISEMPTY @delta_reg_has_got))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY op_indirect_mapped))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 @delta_reg_has_got            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) (TUPLE t1 3))))
             (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)))
              (FOR t3 op_indirect_mapped (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 1) (STRING "NONE")) (= (TUPLE t3 2) (TUPLE t0 1)))
               (IF (CONSTRAINT != (TUPLE t3 5)  (NUMBER 0))
                (FOR_IN t4 got_reference_pointer                  (IF (NOT (EXISTS got_relative_operand ((TUPLE t1 2) (TUPLE t1 3) (INTRINSIC + (TUPLE t4 0) (TUPLE t3 5)))))
                  (INSERT ((TUPLE t1 2) (TUPLE t1 3) (INTRINSIC + (TUPLE t4 0) (TUPLE t3 5))) @new_got_relative_operand)
                 ))
               )))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "got_relative_operand(EA,Index,(Got+as(Offset, address))) :- \n   reg_has_got(EA_base,Reg),\n   reg_def_use.def_used(EA_base,Reg,EA,Index),\n   instruction_get_op(EA,Index,Op),\n   op_indirect_mapped(Op,\"NONE\",Reg,_,_,Offset,_),\n   Offset != 0,\n   got_reference_pointer(Got).\nin file symbolization.dl [97:1-107:33]" 
       (TIMER_ON @new_got_relative_operand "@t-recursive-rule;got_relative_operand;1;binary/elf/symbolization.dl [97:1-107:33];got_relative_operand(EA,Index,(Got+as(Offset, address))) :- \\n   reg_has_got(EA_base,Reg),\\n   reg_def_use.def_used(EA_base,Reg,EA,Index),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect_mapped(Op,\\\"NONE\\\",Reg,_,_,Offset,_),\\n   Offset != 0,\\n   got_reference_pointer(Got).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY got_reference_pointer)) (NOT (ISEMPTY reg_has_got))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY op_indirect_mapped))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 reg_has_got            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)))
             (FOR t3 op_indirect_mapped (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 1) (STRING "NONE")) (= (TUPLE t3 2) (TUPLE t0 1)))
              (IF (CONSTRAINT != (TUPLE t3 5)  (NUMBER 0))
               (FOR_IN t4 got_reference_pointer                 (IF (NOT (EXISTS got_relative_operand ((TUPLE t1 2) (TUPLE t1 3) (INTRINSIC + (TUPLE t4 0) (TUPLE t3 5)))))
                 (INSERT ((TUPLE t1 2) (TUPLE t1 3) (INTRINSIC + (TUPLE t4 0) (TUPLE t3 5))) @new_got_relative_operand)
                ))
              )))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "got_relative_operand(EA,Index,(Got+as(Offset, address))) :- \n   reg_has_got(EA_base,Reg),\n   reg_def_use.def_used(EA_base,Reg,EA,Index),\n   instruction_get_op(EA,Index,Op),\n   op_indirect_mapped(Op,\"NONE\",_,Reg,1,Offset,_),\n   Offset != 0,\n   got_reference_pointer(Got).\nin file symbolization.dl [97:1-107:33]" 
       (TIMER_ON @new_got_relative_operand "@t-recursive-rule;got_relative_operand;0;binary/elf/symbolization.dl [97:1-107:33];got_relative_operand(EA,Index,(Got+as(Offset, address))) :- \\n   reg_has_got(EA_base,Reg),\\n   reg_def_use.def_used(EA_base,Reg,EA,Index),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect_mapped(Op,\\\"NONE\\\",_,Reg,1,Offset,_),\\n   Offset != 0,\\n   got_reference_pointer(Got).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY got_reference_pointer)) (NOT (ISEMPTY @delta_reg_has_got))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY op_indirect_mapped))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 @delta_reg_has_got            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) (TUPLE t1 3))))
             (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)))
              (FOR t3 op_indirect_mapped (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 1) (STRING "NONE")) (= (TUPLE t3 3) (TUPLE t0 1)) (= (TUPLE t3 4) (NUMBER 1)))
               (IF (CONSTRAINT != (TUPLE t3 5)  (NUMBER 0))
                (FOR_IN t4 got_reference_pointer                  (IF (NOT (EXISTS got_relative_operand ((TUPLE t1 2) (TUPLE t1 3) (INTRINSIC + (TUPLE t4 0) (TUPLE t3 5)))))
                  (INSERT ((TUPLE t1 2) (TUPLE t1 3) (INTRINSIC + (TUPLE t4 0) (TUPLE t3 5))) @new_got_relative_operand)
                 ))
               )))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "got_relative_operand(EA,Index,(Got+as(Offset, address))) :- \n   reg_has_got(EA_base,Reg),\n   reg_def_use.def_used(EA_base,Reg,EA,Index),\n   instruction_get_op(EA,Index,Op),\n   op_indirect_mapped(Op,\"NONE\",_,Reg,1,Offset,_),\n   Offset != 0,\n   got_reference_pointer(Got).\nin file symbolization.dl [97:1-107:33]" 
       (TIMER_ON @new_got_relative_operand "@t-recursive-rule;got_relative_operand;1;binary/elf/symbolization.dl [97:1-107:33];got_relative_operand(EA,Index,(Got+as(Offset, address))) :- \\n   reg_has_got(EA_base,Reg),\\n   reg_def_use.def_used(EA_base,Reg,EA,Index),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect_mapped(Op,\\\"NONE\\\",_,Reg,1,Offset,_),\\n   Offset != 0,\\n   got_reference_pointer(Got).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY got_reference_pointer)) (NOT (ISEMPTY reg_has_got))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY op_indirect_mapped))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 reg_has_got            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)))
             (FOR t3 op_indirect_mapped (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 1) (STRING "NONE")) (= (TUPLE t3 3) (TUPLE t0 1)) (= (TUPLE t3 4) (NUMBER 1)))
              (IF (CONSTRAINT != (TUPLE t3 5)  (NUMBER 0))
               (FOR_IN t4 got_reference_pointer                 (IF (NOT (EXISTS got_relative_operand ((TUPLE t1 2) (TUPLE t1 3) (INTRINSIC + (TUPLE t4 0) (TUPLE t3 5)))))
                 (INSERT ((TUPLE t1 2) (TUPLE t1 3) (INTRINSIC + (TUPLE t4 0) (TUPLE t3 5))) @new_got_relative_operand)
                ))
              )))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_jump_table_element_access "@t-recursive-relation;jump_table_element_access;relative_jump_tables.dl [98:7-98:32];"
(STMTS (STMTS (STMTS       (DEBUG 
 "jump_table_element_access(EA,Size,TableStartAddr,\"NONE\") :- \n   pc_relative_operand(EA,1,TableStartAddr),\n   data_access(EA,_,_,_,_,_,_,Size),\n   def_used_for_address(EA,_,Type),\n   Type = \"Jump\",\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\n   take_address(EA2,TableStartAddr),\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\n   data_segment(Beg,End),\n   TableStartAddr >= Beg,\n   TableStartAddr <= End.\nin file relative_jump_tables.dl [142:1-155:27]" 
       (TIMER_ON @new_jump_table_element_access "@t-recursive-rule;jump_table_element_access;0;relative_jump_tables.dl [142:1-155:27];jump_table_element_access(EA,Size,TableStartAddr,\\\"NONE\\\") :- \\n   pc_relative_operand(EA,1,TableStartAddr),\\n   data_access(EA,_,_,_,_,_,_,Size),\\n   def_used_for_address(EA,_,Type),\\n   Type = \\\"Jump\\\",\\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\\n   take_address(EA2,TableStartAddr),\\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\\n   data_segment(Beg,End),\\n   TableStartAddr >= Beg,\\n   TableStartAddr <= End.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY @delta_def_used_for_address))) (NOT (ISEMPTY take_address))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation)))
          (FOR t0 pc_relative_operand (INDEX  (= (TUPLE t0 1) (UNSIGNED 1)))
           (IF (EXISTS @delta_def_used_for_address ((TUPLE t0 0) UNDEF (STRING "Jump")))
            (FOR t1 data_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (NOT (EXISTS jump_table_element_access ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE"))))
              (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
               (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) UNDEF)))
                (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 2) (TUPLE t2 2)))
                 (IF (AND (AND (EXISTS arch.reg_reg_arithmetic_operation ((TUPLE t2 2) UNDEF (TUPLE t3 1) (TUPLE t2 1) (NUMBER 1) (NUMBER 0))) (EXISTS take_address ((TUPLE t3 0) (TUPLE t0 2)))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t3 1) (TUPLE t2 2) UNDEF))))
                  (IF_EXISTS t4 data_segment (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t4 1))) 
                   (INSERT ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE")) @new_jump_table_element_access)
)                 ))               ))             ))           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_element_access(EA,Size,TableStartAddr,\"NONE\") :- \n   pc_relative_operand(EA,1,TableStartAddr),\n   data_access(EA,_,_,_,_,_,_,Size),\n   def_used_for_address(EA,_,Type),\n   Type = \"Jump\",\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\n   take_address(EA2,TableStartAddr),\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\n   data_segment(Beg,End),\n   TableStartAddr >= Beg,\n   TableStartAddr <= End.\nin file relative_jump_tables.dl [142:1-155:27]" 
       (TIMER_ON @new_jump_table_element_access "@t-recursive-rule;jump_table_element_access;1;relative_jump_tables.dl [142:1-155:27];jump_table_element_access(EA,Size,TableStartAddr,\\\"NONE\\\") :- \\n   pc_relative_operand(EA,1,TableStartAddr),\\n   data_access(EA,_,_,_,_,_,_,Size),\\n   def_used_for_address(EA,_,Type),\\n   Type = \\\"Jump\\\",\\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\\n   take_address(EA2,TableStartAddr),\\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\\n   data_segment(Beg,End),\\n   TableStartAddr >= Beg,\\n   TableStartAddr <= End.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY pc_relative_operand)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY take_address))) (NOT (ISEMPTY def_used_for_address))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY data_access)))
          (FOR t0 pc_relative_operand (INDEX  (= (TUPLE t0 1) (UNSIGNED 1)))
           (IF (EXISTS def_used_for_address ((TUPLE t0 0) UNDEF (STRING "Jump")))
            (FOR t1 data_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (NOT (EXISTS jump_table_element_access ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE"))))
              (FOR t2 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
               (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 2) (TUPLE t2 2)))
                (IF (AND (AND (EXISTS arch.reg_reg_arithmetic_operation ((TUPLE t2 2) UNDEF (TUPLE t3 1) (TUPLE t2 1) (NUMBER 1) (NUMBER 0))) (EXISTS take_address ((TUPLE t3 0) (TUPLE t0 2)))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t3 1) (TUPLE t2 2) UNDEF))))
                 (IF_EXISTS t4 data_segment (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t4 1))) 
                  (INSERT ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE")) @new_jump_table_element_access)
)                )))             ))           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_element_access(EA,Size,TableStartAddr,\"NONE\") :- \n   pc_relative_operand(EA,1,TableStartAddr),\n   data_access(EA,_,_,_,_,_,_,Size),\n   def_used_for_address(EA,_,Type),\n   Type = \"Jump\",\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\n   take_address(EA2,TableStartAddr),\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\n   data_segment(Beg,End),\n   TableStartAddr >= Beg,\n   TableStartAddr <= End.\nin file relative_jump_tables.dl [142:1-155:27]" 
       (TIMER_ON @new_jump_table_element_access "@t-recursive-rule;jump_table_element_access;2;relative_jump_tables.dl [142:1-155:27];jump_table_element_access(EA,Size,TableStartAddr,\\\"NONE\\\") :- \\n   pc_relative_operand(EA,1,TableStartAddr),\\n   data_access(EA,_,_,_,_,_,_,Size),\\n   def_used_for_address(EA,_,Type),\\n   Type = \\\"Jump\\\",\\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\\n   take_address(EA2,TableStartAddr),\\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\\n   data_segment(Beg,End),\\n   TableStartAddr >= Beg,\\n   TableStartAddr <= End.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY pc_relative_operand)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY take_address))) (NOT (ISEMPTY def_used_for_address))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY data_access)))
          (FOR t0 pc_relative_operand (INDEX  (= (TUPLE t0 1) (UNSIGNED 1)))
           (IF (EXISTS def_used_for_address ((TUPLE t0 0) UNDEF (STRING "Jump")))
            (FOR t1 data_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (NOT (EXISTS jump_table_element_access ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE"))))
              (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
               (FOR t3 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t3 2) (TUPLE t2 2)))
                (IF (AND (EXISTS arch.reg_reg_arithmetic_operation ((TUPLE t2 2) UNDEF (TUPLE t3 1) (TUPLE t2 1) (NUMBER 1) (NUMBER 0))) (EXISTS take_address ((TUPLE t3 0) (TUPLE t0 2))))
                 (IF_EXISTS t4 data_segment (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t4 1))) 
                  (INSERT ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE")) @new_jump_table_element_access)
)                )))             ))           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_element_access(EA,Size,TableStartAddr,\"NONE\") :- \n   pc_relative_operand(EA,1,TableStartAddr),\n   data_access(EA,_,_,_,_,_,_,Size),\n   def_used_for_address(EA,_,Type),\n   Type = \"Call\",\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\n   take_address(EA2,TableStartAddr),\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\n   data_segment(Beg,End),\n   TableStartAddr >= Beg,\n   TableStartAddr <= End.\nin file relative_jump_tables.dl [142:1-155:27]" 
       (TIMER_ON @new_jump_table_element_access "@t-recursive-rule;jump_table_element_access;0;relative_jump_tables.dl [142:1-155:27];jump_table_element_access(EA,Size,TableStartAddr,\\\"NONE\\\") :- \\n   pc_relative_operand(EA,1,TableStartAddr),\\n   data_access(EA,_,_,_,_,_,_,Size),\\n   def_used_for_address(EA,_,Type),\\n   Type = \\\"Call\\\",\\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\\n   take_address(EA2,TableStartAddr),\\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\\n   data_segment(Beg,End),\\n   TableStartAddr >= Beg,\\n   TableStartAddr <= End.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY @delta_def_used_for_address))) (NOT (ISEMPTY take_address))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation)))
          (FOR t0 pc_relative_operand (INDEX  (= (TUPLE t0 1) (UNSIGNED 1)))
           (IF (EXISTS @delta_def_used_for_address ((TUPLE t0 0) UNDEF (STRING "Call")))
            (FOR t1 data_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (NOT (EXISTS jump_table_element_access ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE"))))
              (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
               (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) UNDEF)))
                (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 2) (TUPLE t2 2)))
                 (IF (AND (AND (EXISTS arch.reg_reg_arithmetic_operation ((TUPLE t2 2) UNDEF (TUPLE t3 1) (TUPLE t2 1) (NUMBER 1) (NUMBER 0))) (EXISTS take_address ((TUPLE t3 0) (TUPLE t0 2)))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t3 1) (TUPLE t2 2) UNDEF))))
                  (IF_EXISTS t4 data_segment (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t4 1))) 
                   (INSERT ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE")) @new_jump_table_element_access)
)                 ))               ))             ))           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_element_access(EA,Size,TableStartAddr,\"NONE\") :- \n   pc_relative_operand(EA,1,TableStartAddr),\n   data_access(EA,_,_,_,_,_,_,Size),\n   def_used_for_address(EA,_,Type),\n   Type = \"Call\",\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\n   take_address(EA2,TableStartAddr),\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\n   data_segment(Beg,End),\n   TableStartAddr >= Beg,\n   TableStartAddr <= End.\nin file relative_jump_tables.dl [142:1-155:27]" 
       (TIMER_ON @new_jump_table_element_access "@t-recursive-rule;jump_table_element_access;1;relative_jump_tables.dl [142:1-155:27];jump_table_element_access(EA,Size,TableStartAddr,\\\"NONE\\\") :- \\n   pc_relative_operand(EA,1,TableStartAddr),\\n   data_access(EA,_,_,_,_,_,_,Size),\\n   def_used_for_address(EA,_,Type),\\n   Type = \\\"Call\\\",\\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\\n   take_address(EA2,TableStartAddr),\\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\\n   data_segment(Beg,End),\\n   TableStartAddr >= Beg,\\n   TableStartAddr <= End.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY pc_relative_operand)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY take_address))) (NOT (ISEMPTY def_used_for_address))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY data_access)))
          (FOR t0 pc_relative_operand (INDEX  (= (TUPLE t0 1) (UNSIGNED 1)))
           (IF (EXISTS def_used_for_address ((TUPLE t0 0) UNDEF (STRING "Call")))
            (FOR t1 data_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (NOT (EXISTS jump_table_element_access ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE"))))
              (FOR t2 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
               (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 2) (TUPLE t2 2)))
                (IF (AND (AND (EXISTS arch.reg_reg_arithmetic_operation ((TUPLE t2 2) UNDEF (TUPLE t3 1) (TUPLE t2 1) (NUMBER 1) (NUMBER 0))) (EXISTS take_address ((TUPLE t3 0) (TUPLE t0 2)))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t3 1) (TUPLE t2 2) UNDEF))))
                 (IF_EXISTS t4 data_segment (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t4 1))) 
                  (INSERT ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE")) @new_jump_table_element_access)
)                )))             ))           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_element_access(EA,Size,TableStartAddr,\"NONE\") :- \n   pc_relative_operand(EA,1,TableStartAddr),\n   data_access(EA,_,_,_,_,_,_,Size),\n   def_used_for_address(EA,_,Type),\n   Type = \"Call\",\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\n   take_address(EA2,TableStartAddr),\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\n   data_segment(Beg,End),\n   TableStartAddr >= Beg,\n   TableStartAddr <= End.\nin file relative_jump_tables.dl [142:1-155:27]" 
       (TIMER_ON @new_jump_table_element_access "@t-recursive-rule;jump_table_element_access;2;relative_jump_tables.dl [142:1-155:27];jump_table_element_access(EA,Size,TableStartAddr,\\\"NONE\\\") :- \\n   pc_relative_operand(EA,1,TableStartAddr),\\n   data_access(EA,_,_,_,_,_,_,Size),\\n   def_used_for_address(EA,_,Type),\\n   Type = \\\"Call\\\",\\n   reg_def_use.def_used(EA,Reg1,EA_add,_),\\n   reg_def_use.def_used(EA2,Reg2,EA_add,_),\\n   take_address(EA2,TableStartAddr),\\n   arch.reg_reg_arithmetic_operation(EA_add,_,Reg2,Reg1,1,0),\\n   data_segment(Beg,End),\\n   TableStartAddr >= Beg,\\n   TableStartAddr <= End.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY pc_relative_operand)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY take_address))) (NOT (ISEMPTY def_used_for_address))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY data_access)))
          (FOR t0 pc_relative_operand (INDEX  (= (TUPLE t0 1) (UNSIGNED 1)))
           (IF (EXISTS def_used_for_address ((TUPLE t0 0) UNDEF (STRING "Call")))
            (FOR t1 data_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (NOT (EXISTS jump_table_element_access ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE"))))
              (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
               (FOR t3 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t3 2) (TUPLE t2 2)))
                (IF (AND (EXISTS arch.reg_reg_arithmetic_operation ((TUPLE t2 2) UNDEF (TUPLE t3 1) (TUPLE t2 1) (NUMBER 1) (NUMBER 0))) (EXISTS take_address ((TUPLE t3 0) (TUPLE t0 2))))
                 (IF_EXISTS t4 data_segment (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t4 1))) 
                  (INSERT ((TUPLE t0 0) (TUPLE t1 7) (TUPLE t0 2) (STRING "NONE")) @new_jump_table_element_access)
)                )))             ))           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_element_access(EA,Size,as((Base+Offset), address),as(RegIndex, register)) :- \n   data_access(EA,_,\"NONE\",RegBase,RegIndex, _tmp_70,Offset,Size),\n   RegBase != \"NONE\",\n   RegBase_nn = as(RegBase, register),\n   RegIndex != \"NONE\",\n   const_value_reg_used(EA,_,_,RegBase_nn,Base),\n   data_segment(Beg,End),\n   as((Base+Offset), address) >= Beg,\n   as((Base+Offset), address) <= End,\n    _tmp_70 = as(Size, number).\nin file relative_jump_tables.dl [116:1-124:27]" 
       (TIMER_ON @new_jump_table_element_access "@t-recursive-rule;jump_table_element_access;0;relative_jump_tables.dl [116:1-124:27];jump_table_element_access(EA,Size,as((Base+Offset), address),as(RegIndex, register)) :- \\n   data_access(EA,_,\\\"NONE\\\",RegBase,RegIndex, _tmp_70,Offset,Size),\\n   RegBase != \\\"NONE\\\",\\n   RegBase_nn = as(RegBase, register),\\n   RegIndex != \\\"NONE\\\",\\n   const_value_reg_used(EA,_,_,RegBase_nn,Base),\\n   data_segment(Beg,End),\\n   as((Base+Offset), address) >= Beg,\\n   as((Base+Offset), address) <= End,\\n    _tmp_70 = as(Size, number).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY data_segment)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY @delta_const_value_reg_used)))
          (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")))
           (IF (AND (AND (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE")) (CONSTRAINT = (TUPLE t0 5)  (TUPLE t0 7))) (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE")))
            (FOR t1 @delta_const_value_reg_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 3)))
             (IF (NOT (EXISTS jump_table_element_access ((TUPLE t0 0) (TUPLE t0 7) (INTRINSIC + (TUPLE t1 4) (TUPLE t0 6)) (TUPLE t0 4))))
              (IF_EXISTS t2 data_segment (AND (CONSTRAINT >= (INTRINSIC + (TUPLE t1 4) (TUPLE t0 6))  (TUPLE t2 0)) (CONSTRAINT <= (INTRINSIC + (TUPLE t1 4) (TUPLE t0 6))  (TUPLE t2 1))) 
               (INSERT ((TUPLE t0 0) (TUPLE t0 7) (INTRINSIC + (TUPLE t1 4) (TUPLE t0 6)) (TUPLE t0 4)) @new_jump_table_element_access)
)             ))           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_element_access(EA,Size,as(TableStart, address),as(RegBase, register)) :- \n   data_access(EA,_,\"NONE\",RegBase,RegIndex,1,0,Size),\n   RegBase != \"NONE\",\n   RegIndex != \"NONE\",\n   RegIndex_nn = as(RegIndex, register),\n   const_value_reg_used(EA,_,_,RegIndex_nn,TableStart),\n   data_segment(Beg,End),\n   as(TableStart, address) >= Beg,\n   as(TableStart, address) <= End.\nin file relative_jump_tables.dl [159:1-167:27]" 
       (TIMER_ON @new_jump_table_element_access "@t-recursive-rule;jump_table_element_access;0;relative_jump_tables.dl [159:1-167:27];jump_table_element_access(EA,Size,as(TableStart, address),as(RegBase, register)) :- \\n   data_access(EA,_,\\\"NONE\\\",RegBase,RegIndex,1,0,Size),\\n   RegBase != \\\"NONE\\\",\\n   RegIndex != \\\"NONE\\\",\\n   RegIndex_nn = as(RegIndex, register),\\n   const_value_reg_used(EA,_,_,RegIndex_nn,TableStart),\\n   data_segment(Beg,End),\\n   as(TableStart, address) >= Beg,\\n   as(TableStart, address) <= End.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY data_segment)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY @delta_const_value_reg_used)))
          (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 5) (NUMBER 1)) (= (TUPLE t0 6) (NUMBER 0)))
           (IF (AND (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE")) (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE")))
            (FOR t1 @delta_const_value_reg_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 4)))
             (IF (NOT (EXISTS jump_table_element_access ((TUPLE t0 0) (TUPLE t0 7) (TUPLE t1 4) (TUPLE t0 3))))
              (IF_EXISTS t2 data_segment (AND (CONSTRAINT >= (TUPLE t1 4)  (TUPLE t2 0)) (CONSTRAINT <= (TUPLE t1 4)  (TUPLE t2 1))) 
               (INSERT ((TUPLE t0 0) (TUPLE t0 7) (TUPLE t1 4) (TUPLE t0 3)) @new_jump_table_element_access)
)             ))           ))         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_jump_table_max "@t-recursive-relation;jump_table_max;relative_jump_tables.dl [211:7-211:21];"
(STMTS (STMTS (STMTS       (DEBUG 
 "jump_table_max(TableStart,(TableStart+(as(Value, unsigned)*Size))) :- \n   jump_table_element_access(EA,Size,TableStart,RegIndex),\n   code_in_block(EA,Block),\n   !reg_def_use.block_last_def(EA,_,RegIndex),\n   last_value_reg_limit(_,Block,RegIndex,Value,\"MAX\",_),\n   Value >= 0.\nin file relative_jump_tables.dl [213:1-225:16]" 
       (TIMER_ON @new_jump_table_max "@t-recursive-rule;jump_table_max;0;relative_jump_tables.dl [213:1-225:16];jump_table_max(TableStart,(TableStart+(as(Value, unsigned)*Size))) :- \\n   jump_table_element_access(EA,Size,TableStart,RegIndex),\\n   code_in_block(EA,Block),\\n   !reg_def_use.block_last_def(EA,_,RegIndex),\\n   last_value_reg_limit(_,Block,RegIndex,Value,\\\"MAX\\\",_),\\n   Value >= 0.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY last_value_reg_limit)) (NOT (ISEMPTY @delta_jump_table_element_access))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 @delta_jump_table_element_access            (IF (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t0 0) UNDEF (TUPLE t0 3))))
            (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (FOR t2 last_value_reg_limit (INDEX  (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 2) (TUPLE t0 3)) (<= (NUMBER 0) (TUPLE t2 3) ) (= (TUPLE t2 4) (STRING "MAX")))
              (IF (AND (NOT (EXISTS jump_table_max ((TUPLE t0 2) (INTRINSIC + (TUPLE t0 2) (INTRINSIC * (TUPLE t2 3) (TUPLE t0 1)))))) (NOT (EXISTS @delta_last_value_reg_limit (UNDEF (TUPLE t1 1) (TUPLE t0 3) (TUPLE t2 3) (STRING "MAX") UNDEF))))
               (INSERT ((TUPLE t0 2) (INTRINSIC + (TUPLE t0 2) (INTRINSIC * (TUPLE t2 3) (TUPLE t0 1)))) @new_jump_table_max)
              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_max(TableStart,(TableStart+(as(Value, unsigned)*Size))) :- \n   jump_table_element_access(EA,Size,TableStart,RegIndex),\n   code_in_block(EA,Block),\n   !reg_def_use.block_last_def(EA,_,RegIndex),\n   last_value_reg_limit(_,Block,RegIndex,Value,\"MAX\",_),\n   Value >= 0.\nin file relative_jump_tables.dl [213:1-225:16]" 
       (TIMER_ON @new_jump_table_max "@t-recursive-rule;jump_table_max;1;relative_jump_tables.dl [213:1-225:16];jump_table_max(TableStart,(TableStart+(as(Value, unsigned)*Size))) :- \\n   jump_table_element_access(EA,Size,TableStart,RegIndex),\\n   code_in_block(EA,Block),\\n   !reg_def_use.block_last_def(EA,_,RegIndex),\\n   last_value_reg_limit(_,Block,RegIndex,Value,\\\"MAX\\\",_),\\n   Value >= 0.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_last_value_reg_limit)) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 jump_table_element_access            (IF (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t0 0) UNDEF (TUPLE t0 3))))
            (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (FOR t2 @delta_last_value_reg_limit (INDEX  (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 2) (TUPLE t0 3)) (<= (NUMBER 0) (TUPLE t2 3) ) (= (TUPLE t2 4) (STRING "MAX")))
              (IF (NOT (EXISTS jump_table_max ((TUPLE t0 2) (INTRINSIC + (TUPLE t0 2) (INTRINSIC * (TUPLE t2 3) (TUPLE t0 1))))))
               (INSERT ((TUPLE t0 2) (INTRINSIC + (TUPLE t0 2) (INTRINSIC * (TUPLE t2 3) (TUPLE t0 1)))) @new_jump_table_max)
              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_max(TableStart,(TableStart+(as(Value, unsigned)*Size))) :- \n   jump_table_element_access(EA,Size,TableStart,RegIndex),\n   code_in_block(EA,_),\n   reg_def_use.block_last_def(EA,EA_def,RegIndex),\n   last_value_reg_limit(EA_def,_,RegIndex,Value,\"MAX\",_),\n   Value >= 0.\nin file relative_jump_tables.dl [213:1-225:16]" 
       (TIMER_ON @new_jump_table_max "@t-recursive-rule;jump_table_max;0;relative_jump_tables.dl [213:1-225:16];jump_table_max(TableStart,(TableStart+(as(Value, unsigned)*Size))) :- \\n   jump_table_element_access(EA,Size,TableStart,RegIndex),\\n   code_in_block(EA,_),\\n   reg_def_use.block_last_def(EA,EA_def,RegIndex),\\n   last_value_reg_limit(EA_def,_,RegIndex,Value,\\\"MAX\\\",_),\\n   Value >= 0.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_jump_table_element_access)) (NOT (ISEMPTY last_value_reg_limit))) (NOT (ISEMPTY reg_def_use.block_last_def))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 @delta_jump_table_element_access            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 reg_def_use.block_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 3)))
             (FOR t2 last_value_reg_limit (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)) (= (TUPLE t2 2) (TUPLE t0 3)) (<= (NUMBER 0) (TUPLE t2 3) ) (= (TUPLE t2 4) (STRING "MAX")))
              (IF (AND (NOT (EXISTS jump_table_max ((TUPLE t0 2) (INTRINSIC + (TUPLE t0 2) (INTRINSIC * (TUPLE t2 3) (TUPLE t0 1)))))) (NOT (EXISTS @delta_last_value_reg_limit ((TUPLE t1 1) UNDEF (TUPLE t0 3) (TUPLE t2 3) (STRING "MAX") UNDEF))))
               (INSERT ((TUPLE t0 2) (INTRINSIC + (TUPLE t0 2) (INTRINSIC * (TUPLE t2 3) (TUPLE t0 1)))) @new_jump_table_max)
              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_max(TableStart,(TableStart+(as(Value, unsigned)*Size))) :- \n   jump_table_element_access(EA,Size,TableStart,RegIndex),\n   code_in_block(EA,_),\n   reg_def_use.block_last_def(EA,EA_def,RegIndex),\n   last_value_reg_limit(EA_def,_,RegIndex,Value,\"MAX\",_),\n   Value >= 0.\nin file relative_jump_tables.dl [213:1-225:16]" 
       (TIMER_ON @new_jump_table_max "@t-recursive-rule;jump_table_max;1;relative_jump_tables.dl [213:1-225:16];jump_table_max(TableStart,(TableStart+(as(Value, unsigned)*Size))) :- \\n   jump_table_element_access(EA,Size,TableStart,RegIndex),\\n   code_in_block(EA,_),\\n   reg_def_use.block_last_def(EA,EA_def,RegIndex),\\n   last_value_reg_limit(EA_def,_,RegIndex,Value,\\\"MAX\\\",_),\\n   Value >= 0.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY jump_table_element_access)) (NOT (ISEMPTY @delta_last_value_reg_limit))) (NOT (ISEMPTY reg_def_use.block_last_def))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 jump_table_element_access            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 reg_def_use.block_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 3)))
             (FOR t2 @delta_last_value_reg_limit (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)) (= (TUPLE t2 2) (TUPLE t0 3)) (<= (NUMBER 0) (TUPLE t2 3) ) (= (TUPLE t2 4) (STRING "MAX")))
              (IF (NOT (EXISTS jump_table_max ((TUPLE t0 2) (INTRINSIC + (TUPLE t0 2) (INTRINSIC * (TUPLE t2 3) (TUPLE t0 1))))))
               (INSERT ((TUPLE t0 2) (INTRINSIC + (TUPLE t0 2) (INTRINSIC * (TUPLE t2 3) (TUPLE t0 1)))) @new_jump_table_max)
              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_max(TableStart2,(TableStart2+(@functor_data_unsigned(@generator_0,Size1)*Size2))) :- \n   jump_table_element_access(EA1,Size1,TableStart1,_),\n   jump_table_max(TableStart1,TableEnd1),\n   reg_def_use.def_used(EA1,Reg,EA2,_),\n   EA1 != EA2,\n   jump_table_element_access(EA2,Size2,TableStart2,Reg),\n   TableStart1 != TableStart2,\n   @functor_data_valid(@generator_0,Size1) = 1,\n   @generator_0 = range(TableStart1,(TableEnd1+Size1),Size1).\nin file relative_jump_tables.dl [246:1-254:47]" 
       (TIMER_ON @new_jump_table_max "@t-recursive-rule;jump_table_max;0;relative_jump_tables.dl [246:1-254:47];jump_table_max(TableStart2,(TableStart2+(@functor_data_unsigned(@generator_0,Size1)*Size2))) :- \\n   jump_table_element_access(EA1,Size1,TableStart1,_),\\n   jump_table_max(TableStart1,TableEnd1),\\n   reg_def_use.def_used(EA1,Reg,EA2,_),\\n   EA1 != EA2,\\n   jump_table_element_access(EA2,Size2,TableStart2,Reg),\\n   TableStart1 != TableStart2,\\n   @functor_data_valid(@generator_0,Size1) = 1,\\n   @generator_0 = range(TableStart1,(TableEnd1+Size1),Size1).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_jump_table_element_access)) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY jump_table_max)))
          (FOR_IN t0 @delta_jump_table_element_access            (FOR t1 jump_table_max (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (IF (NOT (EXISTS @delta_jump_table_max ((TUPLE t0 2) (TUPLE t1 1))))
             (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
              (IF (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 2)) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) UNDEF))))
               (FOR t3 jump_table_element_access (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 3) (TUPLE t2 1)))
                (IF (AND (CONSTRAINT != (TUPLE t0 2)  (TUPLE t3 2)) (NOT (EXISTS @delta_jump_table_element_access ((TUPLE t2 2) (TUPLE t3 1) (TUPLE t3 2) (TUPLE t2 1)))))
                 (INTRINSIC (URANGE (TUPLE t0 2) (INTRINSIC + (TUPLE t1 1) (TUPLE t0 1)) (TUPLE t0 1)) t4)
                ))              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_max(TableStart2,(TableStart2+(@functor_data_unsigned(@generator_0,Size1)*Size2))) :- \n   jump_table_element_access(EA1,Size1,TableStart1,_),\n   jump_table_max(TableStart1,TableEnd1),\n   reg_def_use.def_used(EA1,Reg,EA2,_),\n   EA1 != EA2,\n   jump_table_element_access(EA2,Size2,TableStart2,Reg),\n   TableStart1 != TableStart2,\n   @functor_data_valid(@generator_0,Size1) = 1,\n   @generator_0 = range(TableStart1,(TableEnd1+Size1),Size1).\nin file relative_jump_tables.dl [246:1-254:47]" 
       (TIMER_ON @new_jump_table_max "@t-recursive-rule;jump_table_max;1;relative_jump_tables.dl [246:1-254:47];jump_table_max(TableStart2,(TableStart2+(@functor_data_unsigned(@generator_0,Size1)*Size2))) :- \\n   jump_table_element_access(EA1,Size1,TableStart1,_),\\n   jump_table_max(TableStart1,TableEnd1),\\n   reg_def_use.def_used(EA1,Reg,EA2,_),\\n   EA1 != EA2,\\n   jump_table_element_access(EA2,Size2,TableStart2,Reg),\\n   TableStart1 != TableStart2,\\n   @functor_data_valid(@generator_0,Size1) = 1,\\n   @generator_0 = range(TableStart1,(TableEnd1+Size1),Size1).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_jump_table_max)) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 jump_table_element_access            (FOR t1 @delta_jump_table_max (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 2)) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) UNDEF))))
              (FOR t3 jump_table_element_access (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 3) (TUPLE t2 1)))
               (IF (AND (CONSTRAINT != (TUPLE t0 2)  (TUPLE t3 2)) (NOT (EXISTS @delta_jump_table_element_access ((TUPLE t2 2) (TUPLE t3 1) (TUPLE t3 2) (TUPLE t2 1)))))
                (INTRINSIC (URANGE (TUPLE t0 2) (INTRINSIC + (TUPLE t1 1) (TUPLE t0 1)) (TUPLE t0 1)) t4)
               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_max(TableStart2,(TableStart2+(@functor_data_unsigned(@generator_0,Size1)*Size2))) :- \n   jump_table_element_access(EA1,Size1,TableStart1,_),\n   jump_table_max(TableStart1,TableEnd1),\n   reg_def_use.def_used(EA1,Reg,EA2,_),\n   EA1 != EA2,\n   jump_table_element_access(EA2,Size2,TableStart2,Reg),\n   TableStart1 != TableStart2,\n   @functor_data_valid(@generator_0,Size1) = 1,\n   @generator_0 = range(TableStart1,(TableEnd1+Size1),Size1).\nin file relative_jump_tables.dl [246:1-254:47]" 
       (TIMER_ON @new_jump_table_max "@t-recursive-rule;jump_table_max;2;relative_jump_tables.dl [246:1-254:47];jump_table_max(TableStart2,(TableStart2+(@functor_data_unsigned(@generator_0,Size1)*Size2))) :- \\n   jump_table_element_access(EA1,Size1,TableStart1,_),\\n   jump_table_max(TableStart1,TableEnd1),\\n   reg_def_use.def_used(EA1,Reg,EA2,_),\\n   EA1 != EA2,\\n   jump_table_element_access(EA2,Size2,TableStart2,Reg),\\n   TableStart1 != TableStart2,\\n   @functor_data_valid(@generator_0,Size1) = 1,\\n   @generator_0 = range(TableStart1,(TableEnd1+Size1),Size1).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY jump_table_max)) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 jump_table_element_access            (FOR t1 jump_table_max (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 2))
              (FOR t3 jump_table_element_access (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 3) (TUPLE t2 1)))
               (IF (AND (CONSTRAINT != (TUPLE t0 2)  (TUPLE t3 2)) (NOT (EXISTS @delta_jump_table_element_access ((TUPLE t2 2) (TUPLE t3 1) (TUPLE t3 2) (TUPLE t2 1)))))
                (INTRINSIC (URANGE (TUPLE t0 2) (INTRINSIC + (TUPLE t1 1) (TUPLE t0 1)) (TUPLE t0 1)) t4)
               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_max(TableStart2,(TableStart2+(@functor_data_unsigned(@generator_0,Size1)*Size2))) :- \n   jump_table_element_access(EA1,Size1,TableStart1,_),\n   jump_table_max(TableStart1,TableEnd1),\n   reg_def_use.def_used(EA1,Reg,EA2,_),\n   EA1 != EA2,\n   jump_table_element_access(EA2,Size2,TableStart2,Reg),\n   TableStart1 != TableStart2,\n   @functor_data_valid(@generator_0,Size1) = 1,\n   @generator_0 = range(TableStart1,(TableEnd1+Size1),Size1).\nin file relative_jump_tables.dl [246:1-254:47]" 
       (TIMER_ON @new_jump_table_max "@t-recursive-rule;jump_table_max;3;relative_jump_tables.dl [246:1-254:47];jump_table_max(TableStart2,(TableStart2+(@functor_data_unsigned(@generator_0,Size1)*Size2))) :- \\n   jump_table_element_access(EA1,Size1,TableStart1,_),\\n   jump_table_max(TableStart1,TableEnd1),\\n   reg_def_use.def_used(EA1,Reg,EA2,_),\\n   EA1 != EA2,\\n   jump_table_element_access(EA2,Size2,TableStart2,Reg),\\n   TableStart1 != TableStart2,\\n   @functor_data_valid(@generator_0,Size1) = 1,\\n   @generator_0 = range(TableStart1,(TableEnd1+Size1),Size1).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY jump_table_element_access)) (NOT (ISEMPTY @delta_jump_table_element_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY jump_table_max)))
          (FOR_IN t0 jump_table_element_access            (FOR t1 jump_table_max (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 2))
              (FOR t3 @delta_jump_table_element_access (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 3) (TUPLE t2 1)))
               (IF (CONSTRAINT != (TUPLE t0 2)  (TUPLE t3 2))
                (INTRINSIC (URANGE (TUPLE t0 2) (INTRINSIC + (TUPLE t1 1) (TUPLE t0 1)) (TUPLE t0 1)) t4)
               ))             ))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_jump_table_signed "@t-recursive-relation;jump_table_signed;relative_jump_tables.dl [172:7-172:24];"
(STMTS (STMTS (STMTS       (DEBUG 
 "jump_table_signed(TableStart,Signed) :- \n   jump_table_element_access(EA,Size,TableStart,_),\n   arch.extend_load(EA,Signed, _tmp_71),\n    _tmp_71 = (8*Size).\nin file relative_jump_tables.dl [175:1-177:40]" 
       (TIMER_ON @new_jump_table_signed "@t-recursive-rule;jump_table_signed;0;relative_jump_tables.dl [175:1-177:40];jump_table_signed(TableStart,Signed) :- \\n   jump_table_element_access(EA,Size,TableStart,_),\\n   arch.extend_load(EA,Signed, _tmp_71),\\n    _tmp_71 = (8*Size).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_jump_table_element_access)) (NOT (ISEMPTY arch.extend_load)))
          (FOR_IN t0 @delta_jump_table_element_access            (FOR t1 arch.extend_load (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (INTRINSIC * (UNSIGNED 8) (TUPLE t0 1))))
            (IF (NOT (EXISTS jump_table_signed ((TUPLE t0 2) (TUPLE t1 1))))
             (INSERT ((TUPLE t0 2) (TUPLE t1 1)) @new_jump_table_signed)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_signed(TableStart,Signed) :- \n   jump_table_element_access(EA,Size,TableStart,_),\n   value_reg(EA_used,_,EA,Reg,_,_,_),\n   arch.extend_reg(EA_used,Reg,Signed, _tmp_72),\n    _tmp_72 = (8*Size).\nin file relative_jump_tables.dl [180:1-183:48]" 
       (TIMER_ON @new_jump_table_signed "@t-recursive-rule;jump_table_signed;0;relative_jump_tables.dl [180:1-183:48];jump_table_signed(TableStart,Signed) :- \\n   jump_table_element_access(EA,Size,TableStart,_),\\n   value_reg(EA_used,_,EA,Reg,_,_,_),\\n   arch.extend_reg(EA_used,Reg,Signed, _tmp_72),\\n    _tmp_72 = (8*Size).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY arch.extend_reg)) (NOT (ISEMPTY @delta_jump_table_element_access))) (NOT (ISEMPTY value_reg)))
          (FOR_IN t0 @delta_jump_table_element_access            (FOR t1 value_reg (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
            (IF (NOT (EXISTS @delta_value_reg ((TUPLE t1 0) UNDEF (TUPLE t0 0) (TUPLE t1 3) UNDEF UNDEF UNDEF)))
             (FOR t2 arch.extend_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 3) (INTRINSIC * (UNSIGNED 8) (TUPLE t0 1))))
              (IF (NOT (EXISTS jump_table_signed ((TUPLE t0 2) (TUPLE t2 2))))
               (INSERT ((TUPLE t0 2) (TUPLE t2 2)) @new_jump_table_signed)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_signed(TableStart,Signed) :- \n   jump_table_element_access(EA,Size,TableStart,_),\n   value_reg(EA_used,_,EA,Reg,_,_,_),\n   arch.extend_reg(EA_used,Reg,Signed, _tmp_72),\n    _tmp_72 = (8*Size).\nin file relative_jump_tables.dl [180:1-183:48]" 
       (TIMER_ON @new_jump_table_signed "@t-recursive-rule;jump_table_signed;1;relative_jump_tables.dl [180:1-183:48];jump_table_signed(TableStart,Signed) :- \\n   jump_table_element_access(EA,Size,TableStart,_),\\n   value_reg(EA_used,_,EA,Reg,_,_,_),\\n   arch.extend_reg(EA_used,Reg,Signed, _tmp_72),\\n    _tmp_72 = (8*Size).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY arch.extend_reg)) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY @delta_value_reg)))
          (FOR_IN t0 jump_table_element_access            (FOR t1 @delta_value_reg (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
            (FOR t2 arch.extend_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 3) (INTRINSIC * (UNSIGNED 8) (TUPLE t0 1))))
             (IF (NOT (EXISTS jump_table_signed ((TUPLE t0 2) (TUPLE t2 2))))
              (INSERT ((TUPLE t0 2) (TUPLE t2 2)) @new_jump_table_signed)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_signed(TableStart,0) :- \n   jump_table_element_access(EA,_,TableStart,_),\n   instruction_get_dest_op(EA,_,DstOp),\n   op_regdirect(DstOp,DefReg),\n   reg_map(DefReg,DefRegMapped),\n   value_reg(EA_used,_,EA,DefRegMapped,_,_,_),\n   instruction_get_src_op(EA_used,_,Op),\n   op_regdirect(Op,UsedReg),\n   reg_map(UsedReg,DefRegMapped),\n   arch.register_size_bits(DefReg,DefSize),\n   arch.register_size_bits(UsedReg,UsedSize),\n   UsedSize > DefSize.\nin file relative_jump_tables.dl [186:1-199:16]" 
       (TIMER_ON @new_jump_table_signed "@t-recursive-rule;jump_table_signed;0;relative_jump_tables.dl [186:1-199:16];jump_table_signed(TableStart,0) :- \\n   jump_table_element_access(EA,_,TableStart,_),\\n   instruction_get_dest_op(EA,_,DstOp),\\n   op_regdirect(DstOp,DefReg),\\n   reg_map(DefReg,DefRegMapped),\\n   value_reg(EA_used,_,EA,DefRegMapped,_,_,_),\\n   instruction_get_src_op(EA_used,_,Op),\\n   op_regdirect(Op,UsedReg),\\n   reg_map(UsedReg,DefRegMapped),\\n   arch.register_size_bits(DefReg,DefSize),\\n   arch.register_size_bits(UsedReg,UsedSize),\\n   UsedSize > DefSize.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY instruction_get_dest_op)) (NOT (ISEMPTY arch.register_size_bits))) (NOT (ISEMPTY instruction_get_src_op))) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY op_regdirect))) (NOT (ISEMPTY @delta_jump_table_element_access))) (NOT (ISEMPTY reg_map)))
          (FOR_IN t0 @delta_jump_table_element_access            (IF (NOT (EXISTS jump_table_signed ((TUPLE t0 2) (UNSIGNED 0))))
            (FOR t1 instruction_get_dest_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (FOR t2 op_regdirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
              (FOR t3 reg_map (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (FOR t4 value_reg (INDEX  (= (TUPLE t4 2) (TUPLE t0 0)) (= (TUPLE t4 3) (TUPLE t3 1)))
                (IF (NOT (EXISTS @delta_value_reg ((TUPLE t4 0) UNDEF (TUPLE t0 0) (TUPLE t3 1) UNDEF UNDEF UNDEF)))
                 (FOR t5 instruction_get_src_op (INDEX  (= (TUPLE t5 0) (TUPLE t4 0)))
                  (FOR t6 op_regdirect (INDEX  (= (TUPLE t6 0) (TUPLE t5 2)))
                   (IF (EXISTS reg_map ((TUPLE t6 1) (TUPLE t3 1)))
                    (FOR t7 arch.register_size_bits (INDEX  (= (TUPLE t7 0) (TUPLE t2 1)))
                     (INDEXED_IF_EXISTS t8 arch.register_size_bits (INDEX  (= (TUPLE t8 0) (TUPLE t6 1))) (AND (CONSTRAINT != (TUPLE t8 1)  (TUPLE t7 1)) (CONSTRAINT >= (TUPLE t8 1)  (TUPLE t7 1)))
                      (INSERT ((TUPLE t0 2) (UNSIGNED 0)) @new_jump_table_signed)
))                   )))                )))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_signed(TableStart,0) :- \n   jump_table_element_access(EA,_,TableStart,_),\n   instruction_get_dest_op(EA,_,DstOp),\n   op_regdirect(DstOp,DefReg),\n   reg_map(DefReg,DefRegMapped),\n   value_reg(EA_used,_,EA,DefRegMapped,_,_,_),\n   instruction_get_src_op(EA_used,_,Op),\n   op_regdirect(Op,UsedReg),\n   reg_map(UsedReg,DefRegMapped),\n   arch.register_size_bits(DefReg,DefSize),\n   arch.register_size_bits(UsedReg,UsedSize),\n   UsedSize > DefSize.\nin file relative_jump_tables.dl [186:1-199:16]" 
       (TIMER_ON @new_jump_table_signed "@t-recursive-rule;jump_table_signed;1;relative_jump_tables.dl [186:1-199:16];jump_table_signed(TableStart,0) :- \\n   jump_table_element_access(EA,_,TableStart,_),\\n   instruction_get_dest_op(EA,_,DstOp),\\n   op_regdirect(DstOp,DefReg),\\n   reg_map(DefReg,DefRegMapped),\\n   value_reg(EA_used,_,EA,DefRegMapped,_,_,_),\\n   instruction_get_src_op(EA_used,_,Op),\\n   op_regdirect(Op,UsedReg),\\n   reg_map(UsedReg,DefRegMapped),\\n   arch.register_size_bits(DefReg,DefSize),\\n   arch.register_size_bits(UsedReg,UsedSize),\\n   UsedSize > DefSize.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY instruction_get_dest_op)) (NOT (ISEMPTY arch.register_size_bits))) (NOT (ISEMPTY instruction_get_src_op))) (NOT (ISEMPTY @delta_value_reg))) (NOT (ISEMPTY op_regdirect))) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY reg_map)))
          (FOR_IN t0 jump_table_element_access            (IF (NOT (EXISTS jump_table_signed ((TUPLE t0 2) (UNSIGNED 0))))
            (FOR t1 instruction_get_dest_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (FOR t2 op_regdirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
              (FOR t3 reg_map (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (FOR t4 @delta_value_reg (INDEX  (= (TUPLE t4 2) (TUPLE t0 0)) (= (TUPLE t4 3) (TUPLE t3 1)))
                (FOR t5 instruction_get_src_op (INDEX  (= (TUPLE t5 0) (TUPLE t4 0)))
                 (FOR t6 op_regdirect (INDEX  (= (TUPLE t6 0) (TUPLE t5 2)))
                  (IF (EXISTS reg_map ((TUPLE t6 1) (TUPLE t3 1)))
                   (FOR t7 arch.register_size_bits (INDEX  (= (TUPLE t7 0) (TUPLE t2 1)))
                    (INDEXED_IF_EXISTS t8 arch.register_size_bits (INDEX  (= (TUPLE t8 0) (TUPLE t6 1))) (AND (CONSTRAINT != (TUPLE t8 1)  (TUPLE t7 1)) (CONSTRAINT >= (TUPLE t8 1)  (TUPLE t7 1)))
                     (INSERT ((TUPLE t0 2) (UNSIGNED 0)) @new_jump_table_signed)
))                  )))))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_signed(TableStart,1) :- \n   jump_table_element_access(_,PtrSize,TableStart,_),\n   PtrSize = 8.\nin file relative_jump_tables.dl [201:1-206:16]" 
       (TIMER_ON @new_jump_table_signed "@t-recursive-rule;jump_table_signed;0;relative_jump_tables.dl [201:1-206:16];jump_table_signed(TableStart,1) :- \\n   jump_table_element_access(_,PtrSize,TableStart,_),\\n   PtrSize = 8.;"
(QUERY
         (IF (NOT (ISEMPTY @delta_jump_table_element_access))
          (FOR t0 @delta_jump_table_element_access (INDEX  (= (TUPLE t0 1) (UNSIGNED 8)))
           (IF (NOT (EXISTS jump_table_signed ((TUPLE t0 2) (UNSIGNED 1))))
            (INSERT ((TUPLE t0 2) (UNSIGNED 1)) @new_jump_table_signed)
           ))         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_jump_table_start "@t-recursive-relation;jump_table_start;relative_jump_tables.dl [259:7-259:23];"
(STMTS (STMTS (STMTS       (DEBUG 
 "jump_table_start(EA_jump,4,(ImageBase+Value),ImageBase,1) :- \n   base_address(ImageBase),\n   base_relative_jump(EA_base,EA_jump),\n   base_relative_operand(EA_base,_,Value).\nin file symbolization.dl [222:1-227:30]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;0;binary/pe/symbolization.dl [222:1-227:30];jump_table_start(EA_jump,4,(ImageBase+Value),ImageBase,1) :- \\n   base_address(ImageBase),\\n   base_relative_jump(EA_base,EA_jump),\\n   base_relative_operand(EA_base,_,Value).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY base_relative_operand)) (NOT (ISEMPTY base_address))) (NOT (ISEMPTY @delta_base_relative_jump)))
          (FOR_IN t0 base_address            (FOR_IN t1 @delta_base_relative_jump             (FOR t2 base_relative_operand (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (IF (AND (NOT (EXISTS jump_table_start ((TUPLE t1 1) (UNSIGNED 4) (INTRINSIC + (TUPLE t0 0) (TUPLE t2 2)) (TUPLE t0 0) (NUMBER 1)))) (NOT (EXISTS @delta_base_relative_operand ((TUPLE t1 0) UNDEF (TUPLE t2 2)))))
              (INSERT ((TUPLE t1 1) (UNSIGNED 4) (INTRINSIC + (TUPLE t0 0) (TUPLE t2 2)) (TUPLE t0 0) (NUMBER 1)) @new_jump_table_start)
             )))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,4,(ImageBase+Value),ImageBase,1) :- \n   base_address(ImageBase),\n   base_relative_jump(EA_base,EA_jump),\n   base_relative_operand(EA_base,_,Value).\nin file symbolization.dl [222:1-227:30]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;1;binary/pe/symbolization.dl [222:1-227:30];jump_table_start(EA_jump,4,(ImageBase+Value),ImageBase,1) :- \\n   base_address(ImageBase),\\n   base_relative_jump(EA_base,EA_jump),\\n   base_relative_operand(EA_base,_,Value).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_base_relative_operand)) (NOT (ISEMPTY base_address))) (NOT (ISEMPTY base_relative_jump)))
          (FOR_IN t0 base_address            (FOR_IN t1 base_relative_jump             (FOR t2 @delta_base_relative_operand (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (IF (NOT (EXISTS jump_table_start ((TUPLE t1 1) (UNSIGNED 4) (INTRINSIC + (TUPLE t0 0) (TUPLE t2 2)) (TUPLE t0 0) (NUMBER 1))))
              (INSERT ((TUPLE t1 1) (UNSIGNED 4) (INTRINSIC + (TUPLE t0 0) (TUPLE t2 2)) (TUPLE t0 0) (NUMBER 1)) @new_jump_table_start)
             )))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \n   jump_table_element_access(EA,Size,TableStart,_),\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\n   Reg != \"NONE\",\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\n   reg_call(EA_jump,_),\n   code_in_block(EA_jump,_).\nin file relative_jump_tables.dl [261:1-273:19]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;0;relative_jump_tables.dl [261:1-273:19];jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \\n   jump_table_element_access(EA,Size,TableStart,_),\\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\\n   Reg != \\\"NONE\\\",\\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\\n   reg_call(EA_jump,_),\\n   code_in_block(EA_jump,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY @delta_jump_table_element_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY reg_call))) (NOT (ISEMPTY value_reg)))
          (FOR_IN t0 @delta_jump_table_element_access            (FOR t1 value_reg (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
            (IF (AND (CONSTRAINT != (TUPLE t1 3)  (STRING "NONE")) (NOT (EXISTS @delta_value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5) UNDEF))))
             (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
              (IF (AND (AND (AND (NOT (EXISTS jump_table_start ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)))) (EXISTS code_in_block ((TUPLE t2 2) UNDEF))) (EXISTS reg_call ((TUPLE t2 2) UNDEF))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 2) UNDEF))))
               (INSERT ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)) @new_jump_table_start)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \n   jump_table_element_access(EA,Size,TableStart,_),\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\n   Reg != \"NONE\",\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\n   reg_call(EA_jump,_),\n   code_in_block(EA_jump,_).\nin file relative_jump_tables.dl [261:1-273:19]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;1;relative_jump_tables.dl [261:1-273:19];jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \\n   jump_table_element_access(EA,Size,TableStart,_),\\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\\n   Reg != \\\"NONE\\\",\\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\\n   reg_call(EA_jump,_),\\n   code_in_block(EA_jump,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY reg_call))) (NOT (ISEMPTY @delta_value_reg)))
          (FOR_IN t0 jump_table_element_access            (FOR t1 @delta_value_reg (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
            (IF (CONSTRAINT != (TUPLE t1 3)  (STRING "NONE"))
             (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
              (IF (AND (AND (AND (NOT (EXISTS jump_table_start ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)))) (EXISTS code_in_block ((TUPLE t2 2) UNDEF))) (EXISTS reg_call ((TUPLE t2 2) UNDEF))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 2) UNDEF))))
               (INSERT ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)) @new_jump_table_start)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \n   jump_table_element_access(EA,Size,TableStart,_),\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\n   Reg != \"NONE\",\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\n   reg_call(EA_jump,_),\n   code_in_block(EA_jump,_).\nin file relative_jump_tables.dl [261:1-273:19]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;2;relative_jump_tables.dl [261:1-273:19];jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \\n   jump_table_element_access(EA,Size,TableStart,_),\\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\\n   Reg != \\\"NONE\\\",\\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\\n   reg_call(EA_jump,_),\\n   code_in_block(EA_jump,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY reg_call))) (NOT (ISEMPTY value_reg)))
          (FOR_IN t0 jump_table_element_access            (FOR t1 value_reg (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
            (IF (CONSTRAINT != (TUPLE t1 3)  (STRING "NONE"))
             (FOR t2 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
              (IF (AND (AND (EXISTS code_in_block ((TUPLE t2 2) UNDEF)) (EXISTS reg_call ((TUPLE t2 2) UNDEF))) (NOT (EXISTS jump_table_start ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)))))
               (INSERT ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)) @new_jump_table_start)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \n   jump_table_element_access(EA,Size,TableStart,_),\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\n   Reg != \"NONE\",\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_).\nin file relative_jump_tables.dl [261:1-273:19]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;0;relative_jump_tables.dl [261:1-273:19];jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \\n   jump_table_element_access(EA,Size,TableStart,_),\\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\\n   Reg != \\\"NONE\\\",\\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY @delta_jump_table_element_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY reg_jump))) (NOT (ISEMPTY value_reg)))
          (FOR_IN t0 @delta_jump_table_element_access            (FOR t1 value_reg (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
            (IF (AND (CONSTRAINT != (TUPLE t1 3)  (STRING "NONE")) (NOT (EXISTS @delta_value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5) UNDEF))))
             (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
              (IF (AND (AND (AND (NOT (EXISTS jump_table_start ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)))) (EXISTS code_in_block ((TUPLE t2 2) UNDEF))) (EXISTS reg_jump ((TUPLE t2 2) UNDEF))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 2) UNDEF))))
               (INSERT ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)) @new_jump_table_start)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \n   jump_table_element_access(EA,Size,TableStart,_),\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\n   Reg != \"NONE\",\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_).\nin file relative_jump_tables.dl [261:1-273:19]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;1;relative_jump_tables.dl [261:1-273:19];jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \\n   jump_table_element_access(EA,Size,TableStart,_),\\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\\n   Reg != \\\"NONE\\\",\\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY reg_jump))) (NOT (ISEMPTY @delta_value_reg)))
          (FOR_IN t0 jump_table_element_access            (FOR t1 @delta_value_reg (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
            (IF (CONSTRAINT != (TUPLE t1 3)  (STRING "NONE"))
             (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
              (IF (AND (AND (AND (NOT (EXISTS jump_table_start ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)))) (EXISTS code_in_block ((TUPLE t2 2) UNDEF))) (EXISTS reg_jump ((TUPLE t2 2) UNDEF))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 2) UNDEF))))
               (INSERT ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)) @new_jump_table_start)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \n   jump_table_element_access(EA,Size,TableStart,_),\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\n   Reg != \"NONE\",\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_).\nin file relative_jump_tables.dl [261:1-273:19]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;2;relative_jump_tables.dl [261:1-273:19];jump_table_start(EA_jump,Size,TableStart,as(Base, address),Scale) :- \\n   jump_table_element_access(EA,Size,TableStart,_),\\n   value_reg(EA_add,RegJump,EA,Reg,Scale,Base,_),\\n   Reg != \\\"NONE\\\",\\n   reg_def_use.def_used(EA_add,RegJump,EA_jump,_),\\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY reg_jump))) (NOT (ISEMPTY value_reg)))
          (FOR_IN t0 jump_table_element_access            (FOR t1 value_reg (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
            (IF (CONSTRAINT != (TUPLE t1 3)  (STRING "NONE"))
             (FOR t2 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
              (IF (AND (AND (EXISTS code_in_block ((TUPLE t2 2) UNDEF)) (EXISTS reg_jump ((TUPLE t2 2) UNDEF))) (NOT (EXISTS jump_table_start ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)))))
               (INSERT ((TUPLE t2 2) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 5) (TUPLE t1 4)) @new_jump_table_start)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_569>,_,_,_,_,_,_),\n   <inlined_Operation_569> = \"ADD\",\n   jump_table_element_access(EA_base,Size, _tmp_73,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n    _tmp_73 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;0;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_569>,_,_,_,_,_,_),\\n   <inlined_Operation_569> = \\\"ADD\\\",\\n   jump_table_element_access(EA_base,Size, _tmp_73,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n    _tmp_73 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY const_value_reg_used))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "ADD") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (IF (NOT (EXISTS @delta_jump_table_element_access ((TUPLE t1 0) (TUPLE t2 1) (TUPLE t2 2) UNDEF)))
                (FOR t3 const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)) (= (TUPLE t3 4) (TUPLE t2 2)))
                 (IF (AND (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER 1)))) (NOT (EXISTS @delta_const_value_reg_used ((TUPLE t1 0) UNDEF UNDEF (TUPLE t1 1) (TUPLE t3 4)))))
                  (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER 1)) @new_jump_table_start)
                 ))               ))             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_569>,_,_,_,_,_,_),\n   <inlined_Operation_569> = \"ADD\",\n   jump_table_element_access(EA_base,Size, _tmp_73,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n    _tmp_73 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;1;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_569>,_,_,_,_,_,_),\\n   <inlined_Operation_569> = \\\"ADD\\\",\\n   jump_table_element_access(EA_base,Size, _tmp_73,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n    _tmp_73 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY const_value_reg_used))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY @delta_jump_table_element_access))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "ADD") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 @delta_jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (FOR t3 const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)) (= (TUPLE t3 4) (TUPLE t2 2)))
                (IF (AND (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER 1)))) (NOT (EXISTS @delta_const_value_reg_used ((TUPLE t1 0) UNDEF UNDEF (TUPLE t1 1) (TUPLE t3 4)))))
                 (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER 1)) @new_jump_table_start)
                )))             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_569>,_,_,_,_,_,_),\n   <inlined_Operation_569> = \"ADD\",\n   jump_table_element_access(EA_base,Size, _tmp_73,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n    _tmp_73 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;2;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_569>,_,_,_,_,_,_),\\n   <inlined_Operation_569> = \\\"ADD\\\",\\n   jump_table_element_access(EA_base,Size, _tmp_73,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n    _tmp_73 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY @delta_const_value_reg_used))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "ADD") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (FOR t3 @delta_const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)) (= (TUPLE t3 4) (TUPLE t2 2)))
                (IF (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER 1))))
                 (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER 1)) @new_jump_table_start)
                )))             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),-1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_571>,_,_,_,_,_,_),\n   <inlined_Operation_571> = \"SUB\",\n   jump_table_element_access(EA_base,Size, _tmp_74,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n    _tmp_74 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;0;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),-1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_571>,_,_,_,_,_,_),\\n   <inlined_Operation_571> = \\\"SUB\\\",\\n   jump_table_element_access(EA_base,Size, _tmp_74,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n    _tmp_74 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY const_value_reg_used))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "SUB") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (IF (NOT (EXISTS @delta_jump_table_element_access ((TUPLE t1 0) (TUPLE t2 1) (TUPLE t2 2) UNDEF)))
                (FOR t3 const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)) (= (TUPLE t3 4) (TUPLE t2 2)))
                 (IF (AND (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER -1)))) (NOT (EXISTS @delta_const_value_reg_used ((TUPLE t1 0) UNDEF UNDEF (TUPLE t1 1) (TUPLE t3 4)))))
                  (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER -1)) @new_jump_table_start)
                 ))               ))             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),-1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_571>,_,_,_,_,_,_),\n   <inlined_Operation_571> = \"SUB\",\n   jump_table_element_access(EA_base,Size, _tmp_74,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n    _tmp_74 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;1;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),-1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_571>,_,_,_,_,_,_),\\n   <inlined_Operation_571> = \\\"SUB\\\",\\n   jump_table_element_access(EA_base,Size, _tmp_74,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n    _tmp_74 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY const_value_reg_used))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY @delta_jump_table_element_access))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "SUB") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 @delta_jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (FOR t3 const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)) (= (TUPLE t3 4) (TUPLE t2 2)))
                (IF (AND (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER -1)))) (NOT (EXISTS @delta_const_value_reg_used ((TUPLE t1 0) UNDEF UNDEF (TUPLE t1 1) (TUPLE t3 4)))))
                 (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER -1)) @new_jump_table_start)
                )))             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),-1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_571>,_,_,_,_,_,_),\n   <inlined_Operation_571> = \"SUB\",\n   jump_table_element_access(EA_base,Size, _tmp_74,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n    _tmp_74 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;2;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,as(TableReference, address),as(TableReference, address),-1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_571>,_,_,_,_,_,_),\\n   <inlined_Operation_571> = \\\"SUB\\\",\\n   jump_table_element_access(EA_base,Size, _tmp_74,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n    _tmp_74 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY @delta_const_value_reg_used))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "SUB") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (FOR t3 @delta_const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)) (= (TUPLE t3 4) (TUPLE t2 2)))
                (IF (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER -1))))
                 (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t3 4) (TUPLE t3 4) (NUMBER -1)) @new_jump_table_start)
                )))             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_568>,_,_,_,_,_,_),\n   <inlined_Operation_568> = \"ADD\",\n   jump_table_element_access(EA_base,Size,TableStart,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n   code_in_block( _tmp_153,_),\n    _tmp_153 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;0;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_568>,_,_,_,_,_,_),\\n   <inlined_Operation_568> = \\\"ADD\\\",\\n   jump_table_element_access(EA_base,Size,TableStart,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n   code_in_block( _tmp_153,_),\\n    _tmp_153 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY reg_jump))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY const_value_reg_used)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "ADD") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (IF (NOT (EXISTS @delta_jump_table_element_access ((TUPLE t1 0) (TUPLE t2 1) (TUPLE t2 2) UNDEF)))
                (FOR t3 const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)))
                 (IF (AND (AND (EXISTS code_in_block ((TUPLE t3 4) UNDEF)) (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER 1))))) (NOT (EXISTS @delta_const_value_reg_used ((TUPLE t1 0) UNDEF UNDEF (TUPLE t1 1) (TUPLE t3 4)))))
                  (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER 1)) @new_jump_table_start)
                 ))               ))             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_568>,_,_,_,_,_,_),\n   <inlined_Operation_568> = \"ADD\",\n   jump_table_element_access(EA_base,Size,TableStart,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n   code_in_block( _tmp_153,_),\n    _tmp_153 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;1;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_568>,_,_,_,_,_,_),\\n   <inlined_Operation_568> = \\\"ADD\\\",\\n   jump_table_element_access(EA_base,Size,TableStart,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n   code_in_block( _tmp_153,_),\\n    _tmp_153 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY reg_jump))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY @delta_jump_table_element_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY const_value_reg_used)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "ADD") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 @delta_jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (FOR t3 const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)))
                (IF (AND (AND (EXISTS code_in_block ((TUPLE t3 4) UNDEF)) (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER 1))))) (NOT (EXISTS @delta_const_value_reg_used ((TUPLE t1 0) UNDEF UNDEF (TUPLE t1 1) (TUPLE t3 4)))))
                 (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER 1)) @new_jump_table_start)
                )))             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_568>,_,_,_,_,_,_),\n   <inlined_Operation_568> = \"ADD\",\n   jump_table_element_access(EA_base,Size,TableStart,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n   code_in_block( _tmp_153,_),\n    _tmp_153 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;2;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_568>,_,_,_,_,_,_),\\n   <inlined_Operation_568> = \\\"ADD\\\",\\n   jump_table_element_access(EA_base,Size,TableStart,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n   code_in_block( _tmp_153,_),\\n    _tmp_153 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY reg_jump))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY @delta_const_value_reg_used)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "ADD") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (FOR t3 @delta_const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)))
                (IF (AND (EXISTS code_in_block ((TUPLE t3 4) UNDEF)) (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER 1)))))
                 (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER 1)) @new_jump_table_start)
                )))             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),-1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_570>,_,_,_,_,_,_),\n   <inlined_Operation_570> = \"SUB\",\n   jump_table_element_access(EA_base,Size,TableStart,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n   code_in_block( _tmp_154,_),\n    _tmp_154 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;0;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),-1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_570>,_,_,_,_,_,_),\\n   <inlined_Operation_570> = \\\"SUB\\\",\\n   jump_table_element_access(EA_base,Size,TableStart,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n   code_in_block( _tmp_154,_),\\n    _tmp_154 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY reg_jump))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY const_value_reg_used)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "SUB") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (IF (NOT (EXISTS @delta_jump_table_element_access ((TUPLE t1 0) (TUPLE t2 1) (TUPLE t2 2) UNDEF)))
                (FOR t3 const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)))
                 (IF (AND (AND (EXISTS code_in_block ((TUPLE t3 4) UNDEF)) (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER -1))))) (NOT (EXISTS @delta_const_value_reg_used ((TUPLE t1 0) UNDEF UNDEF (TUPLE t1 1) (TUPLE t3 4)))))
                  (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER -1)) @new_jump_table_start)
                 ))               ))             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),-1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_570>,_,_,_,_,_,_),\n   <inlined_Operation_570> = \"SUB\",\n   jump_table_element_access(EA_base,Size,TableStart,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n   code_in_block( _tmp_154,_),\n    _tmp_154 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;1;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),-1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_570>,_,_,_,_,_,_),\\n   <inlined_Operation_570> = \\\"SUB\\\",\\n   jump_table_element_access(EA_base,Size,TableStart,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n   code_in_block( _tmp_154,_),\\n    _tmp_154 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY reg_jump))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY @delta_jump_table_element_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY const_value_reg_used)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "SUB") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 @delta_jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (FOR t3 const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)))
                (IF (AND (AND (EXISTS code_in_block ((TUPLE t3 4) UNDEF)) (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER -1))))) (NOT (EXISTS @delta_const_value_reg_used ((TUPLE t1 0) UNDEF UNDEF (TUPLE t1 1) (TUPLE t3 4)))))
                 (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER -1)) @new_jump_table_start)
                )))             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),-1) :- \n   reg_jump(EA_jump,_),\n   code_in_block(EA_jump,_),\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\n   instruction(EA_base,_,_,<inlined_Operation_570>,_,_,_,_,_,_),\n   <inlined_Operation_570> = \"SUB\",\n   jump_table_element_access(EA_base,Size,TableStart,_),\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\n   code_in_block( _tmp_154,_),\n    _tmp_154 = as(TableReference, address).\nin file relative_jump_tables.dl [278:1-293:7]" 
       (TIMER_ON @new_jump_table_start "@t-recursive-rule;jump_table_start;2;relative_jump_tables.dl [278:1-293:7];jump_table_start(EA_jump,Size,TableStart,as(TableReference, address),-1) :- \\n   reg_jump(EA_jump,_),\\n   code_in_block(EA_jump,_),\\n   reg_def_use.def_used(EA_base,Reg,EA_jump,_),\\n   instruction(EA_base,_,_,<inlined_Operation_570>,_,_,_,_,_,_),\\n   <inlined_Operation_570> = \\\"SUB\\\",\\n   jump_table_element_access(EA_base,Size,TableStart,_),\\n   const_value_reg_used(EA_base,_,_,Reg,TableReference),\\n   code_in_block( _tmp_154,_),\\n    _tmp_154 = as(TableReference, address).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY reg_jump))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY jump_table_element_access))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY @delta_const_value_reg_used)))
          (FOR_IN t0 reg_jump            (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "SUB") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t2 jump_table_element_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
               (FOR t3 @delta_const_value_reg_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 3) (TUPLE t1 1)))
                (IF (AND (EXISTS code_in_block ((TUPLE t3 4) UNDEF)) (NOT (EXISTS jump_table_start ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER -1)))))
                 (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t3 4) (NUMBER -1)) @new_jump_table_start)
                )))             ))           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_jump_table_target "@t-recursive-relation;jump_table_target;jump_tables.dl [100:7-100:24];"
(STMTS (STMTS (STMTS       (DEBUG 
 "jump_table_target(EA,Dest) :- \n   jump_table_start(EA,Size,TableStart,_,_),\n   relative_jump_table_entry_candidate(_,TableStart,Size,_,Dest,_,_).\nin file jump_tables.dl [105:1-107:71]" 
       (TIMER_ON @new_jump_table_target "@t-recursive-rule;jump_table_target;0;jump_tables.dl [105:1-107:71];jump_table_target(EA,Dest) :- \\n   jump_table_start(EA,Size,TableStart,_,_),\\n   relative_jump_table_entry_candidate(_,TableStart,Size,_,Dest,_,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_jump_table_start)) (NOT (ISEMPTY relative_jump_table_entry_candidate)))
          (FOR_IN t0 @delta_jump_table_start            (FOR t1 relative_jump_table_entry_candidate (INDEX  (= (TUPLE t1 1) (TUPLE t0 2)) (= (TUPLE t1 2) (TUPLE t0 1)))
            (IF (AND (NOT (EXISTS jump_table_target ((TUPLE t0 0) (TUPLE t1 4)))) (NOT (EXISTS @delta_relative_jump_table_entry_candidate (UNDEF (TUPLE t0 2) (TUPLE t0 1) UNDEF (TUPLE t1 4) UNDEF UNDEF))))
             (INSERT ((TUPLE t0 0) (TUPLE t1 4)) @new_jump_table_target)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table_target(EA,Dest) :- \n   jump_table_start(EA,Size,TableStart,_,_),\n   relative_jump_table_entry_candidate(_,TableStart,Size,_,Dest,_,_).\nin file jump_tables.dl [105:1-107:71]" 
       (TIMER_ON @new_jump_table_target "@t-recursive-rule;jump_table_target;1;jump_tables.dl [105:1-107:71];jump_table_target(EA,Dest) :- \\n   jump_table_start(EA,Size,TableStart,_,_),\\n   relative_jump_table_entry_candidate(_,TableStart,Size,_,Dest,_,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY jump_table_start)) (NOT (ISEMPTY @delta_relative_jump_table_entry_candidate)))
          (FOR_IN t0 jump_table_start            (FOR t1 @delta_relative_jump_table_entry_candidate (INDEX  (= (TUPLE t1 1) (TUPLE t0 2)) (= (TUPLE t1 2) (TUPLE t0 1)))
            (IF (NOT (EXISTS jump_table_target ((TUPLE t0 0) (TUPLE t1 4))))
             (INSERT ((TUPLE t0 0) (TUPLE t1 4)) @new_jump_table_target)
            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_last_value_reg_limit "@t-recursive-relation;last_value_reg_limit;boundary_value_analysis.dl [281:7-281:27];"
(STMTS (STMTS (STMTS       (DEBUG 
 "last_value_reg_limit(From,To,Reg,Value,LimitType,0) :- \n   value_reg_limit(From,To,Reg,Value,LimitType).\nin file boundary_value_analysis.dl [283:1-284:50]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [283:1-284:50];last_value_reg_limit(From,To,Reg,Value,LimitType,0) :- \\n   value_reg_limit(From,To,Reg,Value,LimitType).;"
(QUERY
         (IF (NOT (ISEMPTY @delta_value_reg_limit))
          (FOR_IN t0 @delta_value_reg_limit            (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (UNSIGNED 0))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (UNSIGNED 0)) @new_last_value_reg_limit)
           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   !conditional_jump(BlockEnd).\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   !conditional_jump(BlockEnd).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY step_limit_small)) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY @delta_last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 @delta_last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (AND (AND (NOT (EXISTS @delta_block_next ((TUPLE t2 1) (TUPLE t3 1) (TUPLE t3 2)))) (NOT (EXISTS conditional_jump ((TUPLE t3 1))))) (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))))
                 (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   !conditional_jump(BlockEnd).\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;1;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   !conditional_jump(BlockEnd).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY step_limit_small)) (NOT (ISEMPTY @delta_block_next))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 @delta_block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (AND (NOT (EXISTS conditional_jump ((TUPLE t3 1)))) (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))))
                 (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   no_value_reg_limit(BlockEnd).\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   no_value_reg_limit(BlockEnd).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY no_value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY @delta_last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 @delta_last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (AND (AND (AND (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))) (EXISTS no_value_reg_limit ((TUPLE t3 1)))) (NOT (EXISTS @delta_no_value_reg_limit ((TUPLE t3 1))))) (NOT (EXISTS @delta_block_next ((TUPLE t2 1) (TUPLE t3 1) (TUPLE t3 2)))))
                 (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   no_value_reg_limit(BlockEnd).\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;1;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   no_value_reg_limit(BlockEnd).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY no_value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY @delta_block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 @delta_block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (AND (AND (EXISTS no_value_reg_limit ((TUPLE t3 1))) (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))) (NOT (EXISTS @delta_no_value_reg_limit ((TUPLE t3 1)))))
                 (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   no_value_reg_limit(BlockEnd).\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;2;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   no_value_reg_limit(BlockEnd).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_no_value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (AND (EXISTS @delta_no_value_reg_limit ((TUPLE t3 1))) (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))))
                 (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   cmp_defines(BlockEnd,BlockNext,Reg),\n   Reg != PropagatedReg.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   cmp_defines(BlockEnd,BlockNext,Reg),\\n   Reg != PropagatedReg.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY cmp_defines)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY @delta_last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 @delta_last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (AND (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))) (NOT (EXISTS @delta_block_next ((TUPLE t2 1) (TUPLE t3 1) (TUPLE t3 2)))))
                 (INDEXED_IF_EXISTS t4 cmp_defines (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2))) (AND (CONSTRAINT != (TUPLE t4 2)  (TUPLE t1 2)) (NOT (EXISTS @delta_cmp_defines ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t4 2)))))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   cmp_defines(BlockEnd,BlockNext,Reg),\n   Reg != PropagatedReg.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;1;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   cmp_defines(BlockEnd,BlockNext,Reg),\\n   Reg != PropagatedReg.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY cmp_defines)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY @delta_block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 @delta_block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                 (INDEXED_IF_EXISTS t4 cmp_defines (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2))) (AND (CONSTRAINT != (TUPLE t4 2)  (TUPLE t1 2)) (NOT (EXISTS @delta_cmp_defines ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t4 2)))))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   cmp_defines(BlockEnd,BlockNext,Reg),\n   Reg != PropagatedReg.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;2;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   cmp_defines(BlockEnd,BlockNext,Reg),\\n   Reg != PropagatedReg.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_cmp_defines)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                 (INDEXED_IF_EXISTS t4 @delta_cmp_defines (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2))) (CONSTRAINT != (TUPLE t4 2)  (TUPLE t1 2))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   cmp_defines(BlockEnd,DefinedNext,PropagatedReg),\n   BlockNext != DefinedNext.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   cmp_defines(BlockEnd,DefinedNext,PropagatedReg),\\n   BlockNext != DefinedNext.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY cmp_defines)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY @delta_last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 @delta_last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (AND (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))) (NOT (EXISTS @delta_block_next ((TUPLE t2 1) (TUPLE t3 1) (TUPLE t3 2)))))
                 (INDEXED_IF_EXISTS t4 cmp_defines (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 2) (TUPLE t1 2))) (AND (CONSTRAINT != (TUPLE t3 2)  (TUPLE t4 1)) (NOT (EXISTS @delta_cmp_defines ((TUPLE t3 1) (TUPLE t4 1) (TUPLE t1 2)))))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   cmp_defines(BlockEnd,DefinedNext,PropagatedReg),\n   BlockNext != DefinedNext.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;1;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   cmp_defines(BlockEnd,DefinedNext,PropagatedReg),\\n   BlockNext != DefinedNext.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY cmp_defines)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY @delta_block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 @delta_block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                 (INDEXED_IF_EXISTS t4 cmp_defines (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 2) (TUPLE t1 2))) (AND (CONSTRAINT != (TUPLE t3 2)  (TUPLE t4 1)) (NOT (EXISTS @delta_cmp_defines ((TUPLE t3 1) (TUPLE t4 1) (TUPLE t1 2)))))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   cmp_defines(BlockEnd,DefinedNext,PropagatedReg),\n   BlockNext != DefinedNext.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;2;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   cmp_defines(BlockEnd,DefinedNext,PropagatedReg),\\n   BlockNext != DefinedNext.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_cmp_defines)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                 (INDEXED_IF_EXISTS t4 @delta_cmp_defines (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 2) (TUPLE t1 2))) (CONSTRAINT != (TUPLE t3 2)  (TUPLE t4 1))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   value_reg_limit(BlockEnd,BlockNext,Reg,_,_),\n   Reg != PropagatedReg.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   value_reg_limit(BlockEnd,BlockNext,Reg,_,_),\\n   Reg != PropagatedReg.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY @delta_last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 @delta_last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (AND (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))) (NOT (EXISTS @delta_block_next ((TUPLE t2 1) (TUPLE t3 1) (TUPLE t3 2)))))
                 (INDEXED_IF_EXISTS t4 value_reg_limit (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2))) (AND (CONSTRAINT != (TUPLE t4 2)  (TUPLE t1 2)) (NOT (EXISTS @delta_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t4 2) UNDEF UNDEF))))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   value_reg_limit(BlockEnd,BlockNext,Reg,_,_),\n   Reg != PropagatedReg.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;1;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   value_reg_limit(BlockEnd,BlockNext,Reg,_,_),\\n   Reg != PropagatedReg.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY @delta_block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 @delta_block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                 (INDEXED_IF_EXISTS t4 value_reg_limit (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2))) (AND (CONSTRAINT != (TUPLE t4 2)  (TUPLE t1 2)) (NOT (EXISTS @delta_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t4 2) UNDEF UNDEF))))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   value_reg_limit(BlockEnd,BlockNext,Reg,_,_),\n   Reg != PropagatedReg.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;2;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   value_reg_limit(BlockEnd,BlockNext,Reg,_,_),\\n   Reg != PropagatedReg.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                 (INDEXED_IF_EXISTS t4 @delta_value_reg_limit (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2))) (CONSTRAINT != (TUPLE t4 2)  (TUPLE t1 2))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\n   PropagatedType = \"MAX\",\n   Type = \"MAX\",\n   PropagatedVal < Val.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\\n   PropagatedType = \\\"MAX\\\",\\n   Type = \\\"MAX\\\",\\n   PropagatedVal < Val.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY @delta_last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR t1 @delta_last_value_reg_limit (INDEX  (= (TUPLE t1 4) (STRING "MAX")))
            (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (AND (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))) (NOT (EXISTS @delta_block_next ((TUPLE t2 1) (TUPLE t3 1) (TUPLE t3 2)))))
                 (INDEXED_IF_EXISTS t4 value_reg_limit (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t1 2)) (<= (TUPLE t1 3) (TUPLE t4 3) ) (= (TUPLE t4 4) (STRING "MAX"))) (AND (CONSTRAINT != (TUPLE t1 3)  (TUPLE t4 3)) (NOT (EXISTS @delta_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t4 3) (TUPLE t4 4)))))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\n   PropagatedType = \"MAX\",\n   Type = \"MAX\",\n   PropagatedVal < Val.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;1;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\\n   PropagatedType = \\\"MAX\\\",\\n   Type = \\\"MAX\\\",\\n   PropagatedVal < Val.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY @delta_block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR t1 last_value_reg_limit (INDEX  (= (TUPLE t1 4) (STRING "MAX")))
            (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 @delta_block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                 (INDEXED_IF_EXISTS t4 value_reg_limit (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t1 2)) (<= (TUPLE t1 3) (TUPLE t4 3) ) (= (TUPLE t4 4) (STRING "MAX"))) (AND (CONSTRAINT != (TUPLE t1 3)  (TUPLE t4 3)) (NOT (EXISTS @delta_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t4 3) (TUPLE t4 4)))))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\n   PropagatedType = \"MAX\",\n   Type = \"MAX\",\n   PropagatedVal < Val.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;2;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\\n   PropagatedType = \\\"MAX\\\",\\n   Type = \\\"MAX\\\",\\n   PropagatedVal < Val.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR t1 last_value_reg_limit (INDEX  (= (TUPLE t1 4) (STRING "MAX")))
            (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                 (INDEXED_IF_EXISTS t4 @delta_value_reg_limit (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t1 2)) (<= (TUPLE t1 3) (TUPLE t4 3) ) (= (TUPLE t4 4) (STRING "MAX"))) (CONSTRAINT != (TUPLE t1 3)  (TUPLE t4 3))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\n   PropagatedType = \"MIN\",\n   Type = \"MIN\",\n   PropagatedVal > Val.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\\n   PropagatedType = \\\"MIN\\\",\\n   Type = \\\"MIN\\\",\\n   PropagatedVal > Val.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY @delta_last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR t1 @delta_last_value_reg_limit (INDEX  (= (TUPLE t1 4) (STRING "MIN")))
            (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (AND (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))) (NOT (EXISTS @delta_block_next ((TUPLE t2 1) (TUPLE t3 1) (TUPLE t3 2)))))
                 (INDEXED_IF_EXISTS t4 value_reg_limit (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t1 2)) (<= (TUPLE t4 3) (TUPLE t1 3)) (= (TUPLE t4 4) (STRING "MIN"))) (AND (CONSTRAINT != (TUPLE t1 3)  (TUPLE t4 3)) (NOT (EXISTS @delta_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t4 3) (TUPLE t4 4)))))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\n   PropagatedType = \"MIN\",\n   Type = \"MIN\",\n   PropagatedVal > Val.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;1;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\\n   PropagatedType = \\\"MIN\\\",\\n   Type = \\\"MIN\\\",\\n   PropagatedVal > Val.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY @delta_block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR t1 last_value_reg_limit (INDEX  (= (TUPLE t1 4) (STRING "MIN")))
            (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 @delta_block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                 (INDEXED_IF_EXISTS t4 value_reg_limit (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t1 2)) (<= (TUPLE t4 3) (TUPLE t1 3)) (= (TUPLE t4 4) (STRING "MIN"))) (AND (CONSTRAINT != (TUPLE t1 3)  (TUPLE t4 3)) (NOT (EXISTS @delta_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t4 3) (TUPLE t4 4)))))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_next(Block,BlockEnd,BlockNext),\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\n   PropagatedType = \"MIN\",\n   Type = \"MIN\",\n   PropagatedVal > Val.\nin file boundary_value_analysis.dl [287:1-313:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;2;boundary_value_analysis.dl [287:1-313:7];last_value_reg_limit(BlockEnd,BlockNext,PropagatedReg,PropagatedVal,PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,PropagatedReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_next(Block,BlockEnd,BlockNext),\\n   !reg_def_use.defined_in_block(Block,PropagatedReg),\\n   value_reg_limit(BlockEnd,BlockNext,PropagatedReg,Val,Type),\\n   PropagatedType = \\\"MIN\\\",\\n   Type = \\\"MIN\\\",\\n   PropagatedVal > Val.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_value_reg_limit)) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY last_value_reg_limit)))
          (FOR_IN t0 step_limit_small            (FOR t1 last_value_reg_limit (INDEX  (= (TUPLE t1 4) (STRING "MIN")))
            (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t2 1) (TUPLE t1 2))))
               (FOR t3 block_next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                 (INDEXED_IF_EXISTS t4 @delta_value_reg_limit (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 1) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t1 2)) (<= (TUPLE t4 3) (TUPLE t1 3)) (= (TUPLE t4 4) (STRING "MIN"))) (CONSTRAINT != (TUPLE t1 3)  (TUPLE t4 3))
                  (INSERT ((TUPLE t3 1) (TUPLE t3 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
)                ))              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_last_instruction(Block,BlockEnd),\n   limit_reg_op(BlockEnd,DstReg,SrcReg,Offset),\n   EA <= BlockEnd,\n   BlockEnd <= BlockEnd,\n   code_in_block(BlockEnd,Block),\n   block_next(Block,BlockEnd,EA_next),\n   !reg_def_use.block_last_def(BlockEnd,_,SrcReg).\nin file boundary_value_analysis.dl [329:1-354:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [329:1-354:7];last_value_reg_limit(BlockEnd,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_last_instruction(Block,BlockEnd),\\n   limit_reg_op(BlockEnd,DstReg,SrcReg,Offset),\\n   EA <= BlockEnd,\\n   BlockEnd <= BlockEnd,\\n   code_in_block(BlockEnd,Block),\\n   block_next(Block,BlockEnd,EA_next),\\n   !reg_def_use.block_last_def(BlockEnd,_,SrcReg).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY block_next)) (NOT (ISEMPTY @delta_last_value_reg_limit))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY limit_reg_op)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 @delta_last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (FOR t3 block_last_instruction (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t3 1)  (TUPLE t3 1))) (EXISTS code_in_block ((TUPLE t3 1) (TUPLE t2 1)))) (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t3 1) UNDEF (TUPLE t1 2)))))
                (FOR t4 limit_reg_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 2) (TUPLE t1 2)))
                 (FOR t5 block_next (INDEX  (= (TUPLE t5 0) (TUPLE t2 1)) (= (TUPLE t5 1) (TUPLE t3 1)))
                  (IF (AND (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t5 2) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))) (NOT (EXISTS @delta_block_next ((TUPLE t2 1) (TUPLE t3 1) (TUPLE t5 2)))))
                   (INSERT ((TUPLE t3 1) (TUPLE t5 2) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
                  )))               )))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_last_instruction(Block,BlockEnd),\n   limit_reg_op(BlockEnd,DstReg,SrcReg,Offset),\n   EA <= BlockEnd,\n   BlockEnd <= BlockEnd,\n   code_in_block(BlockEnd,Block),\n   block_next(Block,BlockEnd,EA_next),\n   !reg_def_use.block_last_def(BlockEnd,_,SrcReg).\nin file boundary_value_analysis.dl [329:1-354:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;1;boundary_value_analysis.dl [329:1-354:7];last_value_reg_limit(BlockEnd,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_last_instruction(Block,BlockEnd),\\n   limit_reg_op(BlockEnd,DstReg,SrcReg,Offset),\\n   EA <= BlockEnd,\\n   BlockEnd <= BlockEnd,\\n   code_in_block(BlockEnd,Block),\\n   block_next(Block,BlockEnd,EA_next),\\n   !reg_def_use.block_last_def(BlockEnd,_,SrcReg).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY @delta_block_next)) (NOT (ISEMPTY last_value_reg_limit))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY limit_reg_op)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (FOR t3 block_last_instruction (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t3 1)  (TUPLE t3 1))) (EXISTS code_in_block ((TUPLE t3 1) (TUPLE t2 1)))) (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t3 1) UNDEF (TUPLE t1 2)))))
                (FOR t4 limit_reg_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 2) (TUPLE t1 2)))
                 (FOR t5 @delta_block_next (INDEX  (= (TUPLE t5 0) (TUPLE t2 1)) (= (TUPLE t5 1) (TUPLE t3 1)))
                  (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t5 2) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                   (INSERT ((TUPLE t3 1) (TUPLE t5 2) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
                  )))               )))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(From,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_last_instruction(Block,BlockEnd),\n   limit_reg_op(BlockEnd,DstReg,SrcReg,Offset),\n   EA <= BlockEnd,\n   BlockEnd <= BlockEnd,\n   code_in_block(BlockEnd,Block),\n   block_next(Block,BlockEnd,EA_next),\n   reg_def_use.block_last_def(BlockEnd,From,SrcReg).\nin file boundary_value_analysis.dl [329:1-354:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [329:1-354:7];last_value_reg_limit(BlockEnd,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(From,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_last_instruction(Block,BlockEnd),\\n   limit_reg_op(BlockEnd,DstReg,SrcReg,Offset),\\n   EA <= BlockEnd,\\n   BlockEnd <= BlockEnd,\\n   code_in_block(BlockEnd,Block),\\n   block_next(Block,BlockEnd,EA_next),\\n   reg_def_use.block_last_def(BlockEnd,From,SrcReg).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY @delta_last_value_reg_limit)) (NOT (ISEMPTY block_next))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY reg_def_use.block_last_def))) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY limit_reg_op)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 @delta_last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (FOR t3 block_last_instruction (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t3 1)  (TUPLE t3 1))) (EXISTS reg_def_use.block_last_def ((TUPLE t3 1) (TUPLE t1 0) (TUPLE t1 2)))) (EXISTS code_in_block ((TUPLE t3 1) (TUPLE t2 1))))
                (FOR t4 limit_reg_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 2) (TUPLE t1 2)))
                 (FOR t5 block_next (INDEX  (= (TUPLE t5 0) (TUPLE t2 1)) (= (TUPLE t5 1) (TUPLE t3 1)))
                  (IF (AND (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t5 2) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))) (NOT (EXISTS @delta_block_next ((TUPLE t2 1) (TUPLE t3 1) (TUPLE t5 2)))))
                   (INSERT ((TUPLE t3 1) (TUPLE t5 2) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
                  )))               )))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(BlockEnd,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(From,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_last_instruction(Block,BlockEnd),\n   limit_reg_op(BlockEnd,DstReg,SrcReg,Offset),\n   EA <= BlockEnd,\n   BlockEnd <= BlockEnd,\n   code_in_block(BlockEnd,Block),\n   block_next(Block,BlockEnd,EA_next),\n   reg_def_use.block_last_def(BlockEnd,From,SrcReg).\nin file boundary_value_analysis.dl [329:1-354:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;1;boundary_value_analysis.dl [329:1-354:7];last_value_reg_limit(BlockEnd,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(From,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_last_instruction(Block,BlockEnd),\\n   limit_reg_op(BlockEnd,DstReg,SrcReg,Offset),\\n   EA <= BlockEnd,\\n   BlockEnd <= BlockEnd,\\n   code_in_block(BlockEnd,Block),\\n   block_next(Block,BlockEnd,EA_next),\\n   reg_def_use.block_last_def(BlockEnd,From,SrcReg).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY last_value_reg_limit)) (NOT (ISEMPTY @delta_block_next))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY reg_def_use.block_last_def))) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY limit_reg_op)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (FOR t3 block_last_instruction (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t3 1)  (TUPLE t3 1))) (EXISTS reg_def_use.block_last_def ((TUPLE t3 1) (TUPLE t1 0) (TUPLE t1 2)))) (EXISTS code_in_block ((TUPLE t3 1) (TUPLE t2 1))))
                (FOR t4 limit_reg_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)) (= (TUPLE t4 2) (TUPLE t1 2)))
                 (FOR t5 @delta_block_next (INDEX  (= (TUPLE t5 0) (TUPLE t2 1)) (= (TUPLE t5 1) (TUPLE t3 1)))
                  (IF (NOT (EXISTS last_value_reg_limit ((TUPLE t3 1) (TUPLE t5 2) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1)))))
                   (INSERT ((TUPLE t3 1) (TUPLE t5 2) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
                  )))               )))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(EA_mov,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(From,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_last_instruction(Block,BlockEnd),\n   limit_reg_op(EA_mov,DstReg,SrcReg,Offset),\n   EA <= EA_mov,\n   EA_mov <= BlockEnd,\n   code_in_block(EA_mov,Block),\n   EA_mov != BlockEnd,\n   code_in_block(EA_mov,<inlined_Block_185>),\n   may_fallthrough(EA_mov,EA_next),\n   code_in_block(EA_next,<inlined_Block_185>),\n   reg_def_use.block_last_def(EA_mov,From,SrcReg).\nin file boundary_value_analysis.dl [329:1-354:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [329:1-354:7];last_value_reg_limit(EA_mov,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(From,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_last_instruction(Block,BlockEnd),\\n   limit_reg_op(EA_mov,DstReg,SrcReg,Offset),\\n   EA <= EA_mov,\\n   EA_mov <= BlockEnd,\\n   code_in_block(EA_mov,Block),\\n   EA_mov != BlockEnd,\\n   code_in_block(EA_mov,<inlined_Block_185>),\\n   may_fallthrough(EA_mov,EA_next),\\n   code_in_block(EA_next,<inlined_Block_185>),\\n   reg_def_use.block_last_def(EA_mov,From,SrcReg).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY @delta_last_value_reg_limit)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY limit_reg_op))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY reg_def_use.block_last_def))) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY may_fallthrough)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 @delta_last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (FOR t3 block_last_instruction (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (FOR t4 limit_reg_op (INDEX  (= (TUPLE t4 2) (TUPLE t1 2)))
                (IF (AND (AND (AND (AND (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t3 1))) (CONSTRAINT != (TUPLE t4 0)  (TUPLE t3 1))) (EXISTS reg_def_use.block_last_def ((TUPLE t4 0) (TUPLE t1 0) (TUPLE t1 2)))) (EXISTS code_in_block ((TUPLE t4 0) (TUPLE t2 1))))
                 (FOR t5 code_in_block (INDEX  (= (TUPLE t5 0) (TUPLE t4 0)))
                  (FOR t6 may_fallthrough (INDEX  (= (TUPLE t6 0) (TUPLE t4 0)))
                   (IF (AND (EXISTS code_in_block ((TUPLE t6 1) (TUPLE t5 1))) (NOT (EXISTS last_value_reg_limit ((TUPLE t4 0) (TUPLE t6 1) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))))
                    (INSERT ((TUPLE t4 0) (TUPLE t6 1) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
                   )))                ))))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "last_value_reg_limit(EA_mov,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \n   step_limit_small(StepLimit),\n   last_value_reg_limit(_,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\n   Steps <= StepLimit,\n   code_in_block(EA,Block),\n   block_last_instruction(Block,BlockEnd),\n   limit_reg_op(EA_mov,DstReg,SrcReg,Offset),\n   EA <= EA_mov,\n   EA_mov <= BlockEnd,\n   code_in_block(EA_mov,Block),\n   EA_mov != BlockEnd,\n   code_in_block(EA_mov,<inlined_Block_186>),\n   may_fallthrough(EA_mov,EA_next),\n   code_in_block(EA_next,<inlined_Block_186>),\n   !reg_def_use.block_last_def(EA_mov,_,SrcReg).\nin file boundary_value_analysis.dl [329:1-354:7]" 
       (TIMER_ON @new_last_value_reg_limit "@t-recursive-rule;last_value_reg_limit;0;boundary_value_analysis.dl [329:1-354:7];last_value_reg_limit(EA_mov,EA_next,DstReg,(PropagatedVal+Offset),PropagatedType,(Steps+1)) :- \\n   step_limit_small(StepLimit),\\n   last_value_reg_limit(_,EA,SrcReg,PropagatedVal,PropagatedType,Steps),\\n   Steps <= StepLimit,\\n   code_in_block(EA,Block),\\n   block_last_instruction(Block,BlockEnd),\\n   limit_reg_op(EA_mov,DstReg,SrcReg,Offset),\\n   EA <= EA_mov,\\n   EA_mov <= BlockEnd,\\n   code_in_block(EA_mov,Block),\\n   EA_mov != BlockEnd,\\n   code_in_block(EA_mov,<inlined_Block_186>),\\n   may_fallthrough(EA_mov,EA_next),\\n   code_in_block(EA_next,<inlined_Block_186>),\\n   !reg_def_use.block_last_def(EA_mov,_,SrcReg).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY @delta_last_value_reg_limit))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY limit_reg_op))) (NOT (ISEMPTY step_limit_small))) (NOT (ISEMPTY may_fallthrough)))
          (FOR_IN t0 step_limit_small            (FOR_IN t1 @delta_last_value_reg_limit             (IF (CONSTRAINT <= (TUPLE t1 5)  (TUPLE t0 0))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (FOR t3 block_last_instruction (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (FOR t4 limit_reg_op (INDEX  (= (TUPLE t4 2) (TUPLE t1 2)))
                (IF (AND (AND (AND (AND (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t3 1))) (CONSTRAINT != (TUPLE t4 0)  (TUPLE t3 1))) (EXISTS code_in_block ((TUPLE t4 0) (TUPLE t2 1)))) (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t4 0) UNDEF (TUPLE t1 2)))))
                 (FOR t5 code_in_block (INDEX  (= (TUPLE t5 0) (TUPLE t4 0)))
                  (FOR t6 may_fallthrough (INDEX  (= (TUPLE t6 0) (TUPLE t4 0)))
                   (IF (AND (EXISTS code_in_block ((TUPLE t6 1) (TUPLE t5 1))) (NOT (EXISTS last_value_reg_limit ((TUPLE t4 0) (TUPLE t6 1) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))))))
                    (INSERT ((TUPLE t4 0) (TUPLE t6 1) (TUPLE t4 1) (INTRINSIC + (TUPLE t1 3) (TUPLE t4 3)) (TUPLE t1 4) (INTRINSIC + (TUPLE t1 5) (UNSIGNED 1))) @new_last_value_reg_limit)
                   )))                ))))            ))
)
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_no_value_reg_limit "@t-recursive-relation;no_value_reg_limit;boundary_value_analysis.dl [225:7-225:25];"
(STMTS (STMTS (STMTS       (DEBUG 
 "no_value_reg_limit(EA_jmp) :- \n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\n   CC = \"O\".\nin file boundary_value_analysis.dl [229:1-238:7]" 
       (TIMER_ON @new_no_value_reg_limit "@t-recursive-rule;no_value_reg_limit;0;boundary_value_analysis.dl [229:1-238:7];no_value_reg_limit(EA_jmp) :- \\n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\\n   CC = \\\"O\\\".;"
(QUERY
         (IF (NOT (ISEMPTY @delta_compare_and_jump_immediate))
          (FOR t0 @delta_compare_and_jump_immediate (INDEX  (= (TUPLE t0 2) (STRING "O")))
           (IF (NOT (EXISTS no_value_reg_limit ((TUPLE t0 1))))
            (INSERT ((TUPLE t0 1)) @new_no_value_reg_limit)
           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_value_reg_limit(EA_jmp) :- \n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\n   CC = \"NO\".\nin file boundary_value_analysis.dl [229:1-238:7]" 
       (TIMER_ON @new_no_value_reg_limit "@t-recursive-rule;no_value_reg_limit;0;boundary_value_analysis.dl [229:1-238:7];no_value_reg_limit(EA_jmp) :- \\n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\\n   CC = \\\"NO\\\".;"
(QUERY
         (IF (NOT (ISEMPTY @delta_compare_and_jump_immediate))
          (FOR t0 @delta_compare_and_jump_immediate (INDEX  (= (TUPLE t0 2) (STRING "NO")))
           (IF (NOT (EXISTS no_value_reg_limit ((TUPLE t0 1))))
            (INSERT ((TUPLE t0 1)) @new_no_value_reg_limit)
           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_value_reg_limit(EA_jmp) :- \n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\n   CC = \"P\".\nin file boundary_value_analysis.dl [229:1-238:7]" 
       (TIMER_ON @new_no_value_reg_limit "@t-recursive-rule;no_value_reg_limit;0;boundary_value_analysis.dl [229:1-238:7];no_value_reg_limit(EA_jmp) :- \\n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\\n   CC = \\\"P\\\".;"
(QUERY
         (IF (NOT (ISEMPTY @delta_compare_and_jump_immediate))
          (FOR t0 @delta_compare_and_jump_immediate (INDEX  (= (TUPLE t0 2) (STRING "P")))
           (IF (NOT (EXISTS no_value_reg_limit ((TUPLE t0 1))))
            (INSERT ((TUPLE t0 1)) @new_no_value_reg_limit)
           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_value_reg_limit(EA_jmp) :- \n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\n   CC = \"PE\".\nin file boundary_value_analysis.dl [229:1-238:7]" 
       (TIMER_ON @new_no_value_reg_limit "@t-recursive-rule;no_value_reg_limit;0;boundary_value_analysis.dl [229:1-238:7];no_value_reg_limit(EA_jmp) :- \\n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\\n   CC = \\\"PE\\\".;"
(QUERY
         (IF (NOT (ISEMPTY @delta_compare_and_jump_immediate))
          (FOR t0 @delta_compare_and_jump_immediate (INDEX  (= (TUPLE t0 2) (STRING "PE")))
           (IF (NOT (EXISTS no_value_reg_limit ((TUPLE t0 1))))
            (INSERT ((TUPLE t0 1)) @new_no_value_reg_limit)
           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_value_reg_limit(EA_jmp) :- \n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\n   CC = \"S\".\nin file boundary_value_analysis.dl [229:1-238:7]" 
       (TIMER_ON @new_no_value_reg_limit "@t-recursive-rule;no_value_reg_limit;0;boundary_value_analysis.dl [229:1-238:7];no_value_reg_limit(EA_jmp) :- \\n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\\n   CC = \\\"S\\\".;"
(QUERY
         (IF (NOT (ISEMPTY @delta_compare_and_jump_immediate))
          (FOR t0 @delta_compare_and_jump_immediate (INDEX  (= (TUPLE t0 2) (STRING "S")))
           (IF (NOT (EXISTS no_value_reg_limit ((TUPLE t0 1))))
            (INSERT ((TUPLE t0 1)) @new_no_value_reg_limit)
           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_value_reg_limit(EA_jmp) :- \n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\n   CC = \"NS\".\nin file boundary_value_analysis.dl [229:1-238:7]" 
       (TIMER_ON @new_no_value_reg_limit "@t-recursive-rule;no_value_reg_limit;0;boundary_value_analysis.dl [229:1-238:7];no_value_reg_limit(EA_jmp) :- \\n   compare_and_jump_immediate(_,EA_jmp,CC,_,_),\\n   CC = \\\"NS\\\".;"
(QUERY
         (IF (NOT (ISEMPTY @delta_compare_and_jump_immediate))
          (FOR t0 @delta_compare_and_jump_immediate (INDEX  (= (TUPLE t0 2) (STRING "NS")))
           (IF (NOT (EXISTS no_value_reg_limit ((TUPLE t0 1))))
            (INSERT ((TUPLE t0 1)) @new_no_value_reg_limit)
           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_value_reg_limit(EA_jmp) :- \n   compare_and_jump_register(EA_cmp,EA_jmp,_,Reg1,Reg2),\n   !reg_def_use.block_last_def(EA_cmp,_,Reg1),\n   !reg_def_use.block_last_def(EA_cmp,_,Reg2).\nin file boundary_value_analysis.dl [241:1-263:7]" 
       (TIMER_ON @new_no_value_reg_limit "@t-recursive-rule;no_value_reg_limit;0;boundary_value_analysis.dl [241:1-263:7];no_value_reg_limit(EA_jmp) :- \\n   compare_and_jump_register(EA_cmp,EA_jmp,_,Reg1,Reg2),\\n   !reg_def_use.block_last_def(EA_cmp,_,Reg1),\\n   !reg_def_use.block_last_def(EA_cmp,_,Reg2).;"
(QUERY
         (IF (NOT (ISEMPTY @delta_compare_and_jump_register))
          (FOR_IN t0 @delta_compare_and_jump_register            (IF (AND (AND (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t0 0) UNDEF (TUPLE t0 3)))) (NOT (EXISTS no_value_reg_limit ((TUPLE t0 1))))) (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t0 0) UNDEF (TUPLE t0 4)))))
            (INSERT ((TUPLE t0 1)) @new_no_value_reg_limit)
           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_value_reg_limit(EA_jmp) :- \n   compare_and_jump_register(EA_cmp,EA_jmp,_,Reg1,Reg2),\n   reg_def_use.block_last_def(EA_cmp,EA,Reg1),\n   !arch.move_reg_imm(EA,Reg1,_,_),\n   !reg_def_use.block_last_def(EA_cmp,_,Reg2).\nin file boundary_value_analysis.dl [241:1-263:7]" 
       (TIMER_ON @new_no_value_reg_limit "@t-recursive-rule;no_value_reg_limit;0;boundary_value_analysis.dl [241:1-263:7];no_value_reg_limit(EA_jmp) :- \\n   compare_and_jump_register(EA_cmp,EA_jmp,_,Reg1,Reg2),\\n   reg_def_use.block_last_def(EA_cmp,EA,Reg1),\\n   !arch.move_reg_imm(EA,Reg1,_,_),\\n   !reg_def_use.block_last_def(EA_cmp,_,Reg2).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_compare_and_jump_register)) (NOT (ISEMPTY reg_def_use.block_last_def)))
          (FOR_IN t0 @delta_compare_and_jump_register            (IF (AND (NOT (EXISTS no_value_reg_limit ((TUPLE t0 1)))) (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t0 0) UNDEF (TUPLE t0 4)))))
            (INDEXED_IF_EXISTS t1 reg_def_use.block_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 3))) (NOT (EXISTS arch.move_reg_imm ((TUPLE t1 1) (TUPLE t0 3) UNDEF UNDEF)))
             (INSERT ((TUPLE t0 1)) @new_no_value_reg_limit)
)           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_value_reg_limit(EA_jmp) :- \n   compare_and_jump_register(EA_cmp,EA_jmp,_,Reg1,Reg2),\n   reg_def_use.block_last_def(EA_cmp,EA,Reg2),\n   !arch.move_reg_imm(EA,Reg2,_,_),\n   !reg_def_use.block_last_def(EA_cmp,_,Reg1).\nin file boundary_value_analysis.dl [241:1-263:7]" 
       (TIMER_ON @new_no_value_reg_limit "@t-recursive-rule;no_value_reg_limit;0;boundary_value_analysis.dl [241:1-263:7];no_value_reg_limit(EA_jmp) :- \\n   compare_and_jump_register(EA_cmp,EA_jmp,_,Reg1,Reg2),\\n   reg_def_use.block_last_def(EA_cmp,EA,Reg2),\\n   !arch.move_reg_imm(EA,Reg2,_,_),\\n   !reg_def_use.block_last_def(EA_cmp,_,Reg1).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_compare_and_jump_register)) (NOT (ISEMPTY reg_def_use.block_last_def)))
          (FOR_IN t0 @delta_compare_and_jump_register            (IF (AND (NOT (EXISTS no_value_reg_limit ((TUPLE t0 1)))) (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t0 0) UNDEF (TUPLE t0 3)))))
            (INDEXED_IF_EXISTS t1 reg_def_use.block_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 4))) (NOT (EXISTS arch.move_reg_imm ((TUPLE t1 1) (TUPLE t0 4) UNDEF UNDEF)))
             (INSERT ((TUPLE t0 1)) @new_no_value_reg_limit)
)           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_value_reg_limit(EA_jmp) :- \n   compare_and_jump_register(EA_cmp,EA_jmp,_,Reg1,Reg2),\n   reg_def_use.block_last_def(EA_cmp,EA,Reg1),\n   !arch.move_reg_imm(EA,Reg1,_,_),\n   reg_def_use.block_last_def(EA_cmp,_,Reg2),\n   !arch.move_reg_imm(EA,Reg2,_,_).\nin file boundary_value_analysis.dl [241:1-263:7]" 
       (TIMER_ON @new_no_value_reg_limit "@t-recursive-rule;no_value_reg_limit;0;boundary_value_analysis.dl [241:1-263:7];no_value_reg_limit(EA_jmp) :- \\n   compare_and_jump_register(EA_cmp,EA_jmp,_,Reg1,Reg2),\\n   reg_def_use.block_last_def(EA_cmp,EA,Reg1),\\n   !arch.move_reg_imm(EA,Reg1,_,_),\\n   reg_def_use.block_last_def(EA_cmp,_,Reg2),\\n   !arch.move_reg_imm(EA,Reg2,_,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY reg_def_use.block_last_def)) (NOT (ISEMPTY @delta_compare_and_jump_register)))
          (FOR_IN t0 @delta_compare_and_jump_register            (IF (AND (NOT (EXISTS no_value_reg_limit ((TUPLE t0 1)))) (EXISTS reg_def_use.block_last_def ((TUPLE t0 0) UNDEF (TUPLE t0 4))))
            (INDEXED_IF_EXISTS t1 reg_def_use.block_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 3))) (AND (NOT (EXISTS arch.move_reg_imm ((TUPLE t1 1) (TUPLE t0 4) UNDEF UNDEF))) (NOT (EXISTS arch.move_reg_imm ((TUPLE t1 1) (TUPLE t0 3) UNDEF UNDEF))))
             (INSERT ((TUPLE t0 1)) @new_no_value_reg_limit)
)           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_value_reg_limit(EA_jmp) :- \n   flags_and_jump_pair(EA_cmp,EA_jmp,_),\n   instruction(EA_cmp,_,_,Operation,_,_,_,_,_,_),\n   !arch.cmp_operation(Operation).\nin file boundary_value_analysis.dl [266:1-269:36]" 
       (TIMER_ON @new_no_value_reg_limit "@t-recursive-rule;no_value_reg_limit;0;boundary_value_analysis.dl [266:1-269:36];no_value_reg_limit(EA_jmp) :- \\n   flags_and_jump_pair(EA_cmp,EA_jmp,_),\\n   instruction(EA_cmp,_,_,Operation,_,_,_,_,_,_),\\n   !arch.cmp_operation(Operation).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_flags_and_jump_pair)) (NOT (ISEMPTY instruction)))
          (FOR_IN t0 @delta_flags_and_jump_pair            (IF (NOT (EXISTS no_value_reg_limit ((TUPLE t0 1))))
            (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (NOT (EXISTS arch.cmp_operation ((TUPLE t1 3))))
             (INSERT ((TUPLE t0 1)) @new_no_value_reg_limit)
)           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_reg_def_use.def_used "@t-recursive-relation;reg_def_use.def_used;use_def_analysis.dl [361:11-361:19];"
(STMTS (STMTS (STMTS       (DEBUG 
 "reg_def_use.def_used(EA_def,VarIdentity,EA_used,Index) :- \n   reg_def_use.live_var_at_block_end(Block,BlockUsed,Var),\n   reg_def_use.live_var_def(Block,VarIdentity,Var,EA_def),\n   reg_def_use.live_var_used(BlockUsed,Var,Var,EA_used,Index,_). .plan 1:(3,1,2)\nin file use_def_analysis.dl [369:5-372:58]" 
       (TIMER_ON @new_reg_def_use.def_used "@t-recursive-rule;reg_def_use.def_used;0;use_def_analysis.dl [369:5-372:58];reg_def_use.def_used(EA_def,VarIdentity,EA_used,Index) :- \\n   reg_def_use.live_var_at_block_end(Block,BlockUsed,Var),\\n   reg_def_use.live_var_def(Block,VarIdentity,Var,EA_def),\\n   reg_def_use.live_var_used(BlockUsed,Var,Var,EA_used,Index,_). .plan 1:(3,1,2);"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY reg_def_use.live_var_used)) (NOT (ISEMPTY @delta_reg_def_use.live_var_at_block_end))) (NOT (ISEMPTY reg_def_use.live_var_def)))
          (FOR_IN t0 @delta_reg_def_use.live_var_at_block_end            (FOR t1 reg_def_use.live_var_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 2)))
            (FOR t2 reg_def_use.live_var_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (TUPLE t0 2)) (= (TUPLE t2 2) (TUPLE t0 2)))
             (IF (AND (NOT (EXISTS reg_def_use.def_used ((TUPLE t1 3) (TUPLE t1 1) (TUPLE t2 3) (TUPLE t2 4)))) (NOT (EXISTS @delta_reg_def_use.live_var_used ((TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 2) (TUPLE t2 3) (TUPLE t2 4) UNDEF))))
              (INSERT ((TUPLE t1 3) (TUPLE t1 1) (TUPLE t2 3) (TUPLE t2 4)) @new_reg_def_use.def_used)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_def_use.def_used(EA_def,VarIdentity,EA_used,Index) :- \n   reg_def_use.live_var_at_block_end(Block,BlockUsed,Var),\n   reg_def_use.live_var_def(Block,VarIdentity,Var,EA_def),\n   reg_def_use.live_var_used(BlockUsed,Var,Var,EA_used,Index,_). .plan 1:(3,1,2)\nin file use_def_analysis.dl [369:5-372:58]" 
       (TIMER_ON @new_reg_def_use.def_used "@t-recursive-rule;reg_def_use.def_used;1;use_def_analysis.dl [369:5-372:58];reg_def_use.def_used(EA_def,VarIdentity,EA_used,Index) :- \\n   reg_def_use.live_var_at_block_end(Block,BlockUsed,Var),\\n   reg_def_use.live_var_def(Block,VarIdentity,Var,EA_def),\\n   reg_def_use.live_var_used(BlockUsed,Var,Var,EA_used,Index,_). .plan 1:(3,1,2);"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY reg_def_use.live_var_def)) (NOT (ISEMPTY @delta_reg_def_use.live_var_used))) (NOT (ISEMPTY reg_def_use.live_var_at_block_end)))
          (FOR_IN t0 @delta_reg_def_use.live_var_used            (IF (CONSTRAINT = (TUPLE t0 1)  (TUPLE t0 2))
            (FOR t1 reg_def_use.live_var_at_block_end (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 1)))
             (FOR t2 reg_def_use.live_var_def (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 2) (TUPLE t0 1)))
              (IF (NOT (EXISTS reg_def_use.def_used ((TUPLE t2 3) (TUPLE t2 1) (TUPLE t0 3) (TUPLE t0 4))))
               (INSERT ((TUPLE t2 3) (TUPLE t2 1) (TUPLE t0 3) (TUPLE t0 4)) @new_reg_def_use.def_used)
              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_def_use.def_used(EA_def,Var,Next_EA_used,NextIndex) :- \n   reg_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\n   reg_def_use.def_used(EA_def,Var,EA_used,_),\n   reg_def_use.live_var_used(NextUsedBlock,Var,Var,Next_EA_used,NextIndex,_).\nin file use_def_analysis.dl [377:5-380:71]" 
       (TIMER_ON @new_reg_def_use.def_used "@t-recursive-rule;reg_def_use.def_used;0;use_def_analysis.dl [377:5-380:71];reg_def_use.def_used(EA_def,Var,Next_EA_used,NextIndex) :- \\n   reg_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\\n   reg_def_use.def_used(EA_def,Var,EA_used,_),\\n   reg_def_use.live_var_used(NextUsedBlock,Var,Var,Next_EA_used,NextIndex,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY reg_def_use.live_var_used)) (NOT (ISEMPTY @delta_reg_def_use.live_var_at_prior_used))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 @delta_reg_def_use.live_var_at_prior_used            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 2)) (= (TUPLE t1 2) (TUPLE t0 0)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t1 0) (TUPLE t0 2) (TUPLE t0 0) UNDEF)))
             (FOR t2 reg_def_use.live_var_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (TUPLE t0 2)) (= (TUPLE t2 2) (TUPLE t0 2)))
              (IF (AND (NOT (EXISTS reg_def_use.def_used ((TUPLE t1 0) (TUPLE t0 2) (TUPLE t2 3) (TUPLE t2 4)))) (NOT (EXISTS @delta_reg_def_use.live_var_used ((TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 2) (TUPLE t2 3) (TUPLE t2 4) UNDEF))))
               (INSERT ((TUPLE t1 0) (TUPLE t0 2) (TUPLE t2 3) (TUPLE t2 4)) @new_reg_def_use.def_used)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_def_use.def_used(EA_def,Var,Next_EA_used,NextIndex) :- \n   reg_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\n   reg_def_use.def_used(EA_def,Var,EA_used,_),\n   reg_def_use.live_var_used(NextUsedBlock,Var,Var,Next_EA_used,NextIndex,_).\nin file use_def_analysis.dl [377:5-380:71]" 
       (TIMER_ON @new_reg_def_use.def_used "@t-recursive-rule;reg_def_use.def_used;1;use_def_analysis.dl [377:5-380:71];reg_def_use.def_used(EA_def,Var,Next_EA_used,NextIndex) :- \\n   reg_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\\n   reg_def_use.def_used(EA_def,Var,EA_used,_),\\n   reg_def_use.live_var_used(NextUsedBlock,Var,Var,Next_EA_used,NextIndex,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY reg_def_use.live_var_used)) (NOT (ISEMPTY reg_def_use.live_var_at_prior_used))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 reg_def_use.live_var_at_prior_used            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 2)) (= (TUPLE t1 2) (TUPLE t0 0)))
            (FOR t2 reg_def_use.live_var_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (TUPLE t0 2)) (= (TUPLE t2 2) (TUPLE t0 2)))
             (IF (AND (NOT (EXISTS reg_def_use.def_used ((TUPLE t1 0) (TUPLE t0 2) (TUPLE t2 3) (TUPLE t2 4)))) (NOT (EXISTS @delta_reg_def_use.live_var_used ((TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 2) (TUPLE t2 3) (TUPLE t2 4) UNDEF))))
              (INSERT ((TUPLE t1 0) (TUPLE t0 2) (TUPLE t2 3) (TUPLE t2 4)) @new_reg_def_use.def_used)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_def_use.def_used(EA_def,Var,Next_EA_used,NextIndex) :- \n   reg_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\n   reg_def_use.def_used(EA_def,Var,EA_used,_),\n   reg_def_use.live_var_used(NextUsedBlock,Var,Var,Next_EA_used,NextIndex,_).\nin file use_def_analysis.dl [377:5-380:71]" 
       (TIMER_ON @new_reg_def_use.def_used "@t-recursive-rule;reg_def_use.def_used;2;use_def_analysis.dl [377:5-380:71];reg_def_use.def_used(EA_def,Var,Next_EA_used,NextIndex) :- \\n   reg_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\\n   reg_def_use.def_used(EA_def,Var,EA_used,_),\\n   reg_def_use.live_var_used(NextUsedBlock,Var,Var,Next_EA_used,NextIndex,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_reg_def_use.live_var_used)) (NOT (ISEMPTY reg_def_use.live_var_at_prior_used))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 reg_def_use.live_var_at_prior_used            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 2)) (= (TUPLE t1 2) (TUPLE t0 0)))
            (FOR t2 @delta_reg_def_use.live_var_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (TUPLE t0 2)) (= (TUPLE t2 2) (TUPLE t0 2)))
             (IF (NOT (EXISTS reg_def_use.def_used ((TUPLE t1 0) (TUPLE t0 2) (TUPLE t2 3) (TUPLE t2 4))))
              (INSERT ((TUPLE t1 0) (TUPLE t0 2) (TUPLE t2 3) (TUPLE t2 4)) @new_reg_def_use.def_used)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_def_use.def_used(EA_def,Reg,EA_used,Index) :- \n   reg_def_use.return_val_used(_,Callee,Reg,EA_used,Index),\n   reg_def_use.return_block_end(Callee,_,_,BlockEnd),\n   reg_def_use.block_last_def(BlockEnd,EA_def,Reg).\nin file use_def_analysis.dl [383:5-386:45]" 
       (TIMER_ON @new_reg_def_use.def_used "@t-recursive-rule;reg_def_use.def_used;0;use_def_analysis.dl [383:5-386:45];reg_def_use.def_used(EA_def,Reg,EA_used,Index) :- \\n   reg_def_use.return_val_used(_,Callee,Reg,EA_used,Index),\\n   reg_def_use.return_block_end(Callee,_,_,BlockEnd),\\n   reg_def_use.block_last_def(BlockEnd,EA_def,Reg).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY reg_def_use.block_last_def)) (NOT (ISEMPTY @delta_reg_def_use.return_val_used))) (NOT (ISEMPTY reg_def_use.return_block_end)))
          (FOR_IN t0 @delta_reg_def_use.return_val_used            (FOR t1 reg_def_use.return_block_end (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (FOR t2 reg_def_use.block_last_def (INDEX  (= (TUPLE t2 0) (TUPLE t1 3)) (= (TUPLE t2 2) (TUPLE t0 2)))
             (IF (NOT (EXISTS reg_def_use.def_used ((TUPLE t2 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4))))
              (INSERT ((TUPLE t2 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @new_reg_def_use.def_used)
             ))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_reg_def_use.live_var_at_block_end "@t-recursive-relation;reg_def_use.live_var_at_block_end;use_def_analysis.dl [253:11-253:32];"
(STMTS (STMTS (STMTS       (DEBUG 
 "reg_def_use.live_var_at_block_end(PrevBlock,Block,Var) :- \n   block_next(PrevBlock,PrevBlockEnd,Block),\n   reg_def_use.live_var_used(Block,Var,_,_,_,_),\n   !reg_def_use.flow_def(PrevBlockEnd,Var,Block,_).\nin file use_def_analysis.dl [256:5-259:45]" 
       (TIMER_ON @new_reg_def_use.live_var_at_block_end "@t-recursive-rule;reg_def_use.live_var_at_block_end;0;use_def_analysis.dl [256:5-259:45];reg_def_use.live_var_at_block_end(PrevBlock,Block,Var) :- \\n   block_next(PrevBlock,PrevBlockEnd,Block),\\n   reg_def_use.live_var_used(Block,Var,_,_,_,_),\\n   !reg_def_use.flow_def(PrevBlockEnd,Var,Block,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_block_next)) (NOT (ISEMPTY reg_def_use.live_var_used)))
          (FOR_IN t0 @delta_block_next            (FOR t1 reg_def_use.live_var_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (IF (AND (AND (NOT (EXISTS @delta_reg_def_use.live_var_used ((TUPLE t0 2) (TUPLE t1 1) UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS reg_def_use.flow_def ((TUPLE t0 1) (TUPLE t1 1) (TUPLE t0 2) UNDEF)))) (NOT (EXISTS reg_def_use.live_var_at_block_end ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t1 1)))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t1 1)) @new_reg_def_use.live_var_at_block_end)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_def_use.live_var_at_block_end(PrevBlock,Block,Var) :- \n   block_next(PrevBlock,PrevBlockEnd,Block),\n   reg_def_use.live_var_used(Block,Var,_,_,_,_),\n   !reg_def_use.flow_def(PrevBlockEnd,Var,Block,_).\nin file use_def_analysis.dl [256:5-259:45]" 
       (TIMER_ON @new_reg_def_use.live_var_at_block_end "@t-recursive-rule;reg_def_use.live_var_at_block_end;1;use_def_analysis.dl [256:5-259:45];reg_def_use.live_var_at_block_end(PrevBlock,Block,Var) :- \\n   block_next(PrevBlock,PrevBlockEnd,Block),\\n   reg_def_use.live_var_used(Block,Var,_,_,_,_),\\n   !reg_def_use.flow_def(PrevBlockEnd,Var,Block,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY block_next)) (NOT (ISEMPTY @delta_reg_def_use.live_var_used)))
          (FOR_IN t0 block_next            (FOR t1 @delta_reg_def_use.live_var_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (IF (AND (NOT (EXISTS reg_def_use.flow_def ((TUPLE t0 1) (TUPLE t1 1) (TUPLE t0 2) UNDEF))) (NOT (EXISTS reg_def_use.live_var_at_block_end ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t1 1)))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t1 1)) @new_reg_def_use.live_var_at_block_end)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_def_use.live_var_at_block_end(PrevBlock,BlockUsed,Var) :- \n   reg_def_use.live_var_at_block_end(Block,BlockUsed,Var),\n   !reg_def_use.ref_in_block(Block,Var),\n   block_next(PrevBlock,_,Block). .plan 1:(2,1)\nin file use_def_analysis.dl [262:5-266:39]" 
       (TIMER_ON @new_reg_def_use.live_var_at_block_end "@t-recursive-rule;reg_def_use.live_var_at_block_end;0;use_def_analysis.dl [262:5-266:39];reg_def_use.live_var_at_block_end(PrevBlock,BlockUsed,Var) :- \\n   reg_def_use.live_var_at_block_end(Block,BlockUsed,Var),\\n   !reg_def_use.ref_in_block(Block,Var),\\n   block_next(PrevBlock,_,Block). .plan 1:(2,1);"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_reg_def_use.live_var_at_block_end)) (NOT (ISEMPTY block_next)))
          (FOR_IN t0 @delta_reg_def_use.live_var_at_block_end            (IF (NOT (EXISTS reg_def_use.ref_in_block ((TUPLE t0 0) (TUPLE t0 2))))
            (FOR t1 block_next (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
             (IF (AND (NOT (EXISTS reg_def_use.live_var_at_block_end ((TUPLE t1 0) (TUPLE t0 1) (TUPLE t0 2)))) (NOT (EXISTS @delta_block_next ((TUPLE t1 0) UNDEF (TUPLE t0 0)))))
              (INSERT ((TUPLE t1 0) (TUPLE t0 1) (TUPLE t0 2)) @new_reg_def_use.live_var_at_block_end)
             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_def_use.live_var_at_block_end(PrevBlock,BlockUsed,Var) :- \n   reg_def_use.live_var_at_block_end(Block,BlockUsed,Var),\n   !reg_def_use.ref_in_block(Block,Var),\n   block_next(PrevBlock,_,Block). .plan 1:(2,1)\nin file use_def_analysis.dl [262:5-266:39]" 
       (TIMER_ON @new_reg_def_use.live_var_at_block_end "@t-recursive-rule;reg_def_use.live_var_at_block_end;1;use_def_analysis.dl [262:5-266:39];reg_def_use.live_var_at_block_end(PrevBlock,BlockUsed,Var) :- \\n   reg_def_use.live_var_at_block_end(Block,BlockUsed,Var),\\n   !reg_def_use.ref_in_block(Block,Var),\\n   block_next(PrevBlock,_,Block). .plan 1:(2,1);"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_block_next)) (NOT (ISEMPTY reg_def_use.live_var_at_block_end)))
          (FOR_IN t0 @delta_block_next            (FOR t1 reg_def_use.live_var_at_block_end (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (IF (AND (NOT (EXISTS reg_def_use.ref_in_block ((TUPLE t0 2) (TUPLE t1 2)))) (NOT (EXISTS reg_def_use.live_var_at_block_end ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 2)))))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 2)) @new_reg_def_use.live_var_at_block_end)
            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_reg_def_use.live_var_at_prior_used "@t-recursive-relation;reg_def_use.live_var_at_prior_used;use_def_analysis.dl [280:11-280:33];"
(STMTS       (DEBUG 
 "reg_def_use.live_var_at_prior_used(EA_used,BlockUsed,Var) :- \n   reg_def_use.live_var_at_block_end(Block,BlockUsed,Var),\n   reg_def_use.used_in_block(Block,EA_used,Var,_),\n   !reg_def_use.defined_in_block(Block,Var).\nin file use_def_analysis.dl [282:5-291:38]" 
       (TIMER_ON @new_reg_def_use.live_var_at_prior_used "@t-recursive-rule;reg_def_use.live_var_at_prior_used;0;use_def_analysis.dl [282:5-291:38];reg_def_use.live_var_at_prior_used(EA_used,BlockUsed,Var) :- \\n   reg_def_use.live_var_at_block_end(Block,BlockUsed,Var),\\n   reg_def_use.used_in_block(Block,EA_used,Var,_),\\n   !reg_def_use.defined_in_block(Block,Var).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_reg_def_use.live_var_at_block_end)) (NOT (ISEMPTY reg_def_use.used_in_block)))
          (FOR_IN t0 @delta_reg_def_use.live_var_at_block_end            (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t0 0) (TUPLE t0 2))))
            (FOR t1 reg_def_use.used_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 2)))
             (IF (NOT (EXISTS reg_def_use.live_var_at_prior_used ((TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 2))))
              (INSERT ((TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 2)) @new_reg_def_use.live_var_at_prior_used)
             ))           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_reg_def_use.live_var_used "@t-recursive-relation;reg_def_use.live_var_used;use_def_analysis.dl [229:11-229:24];"
(STMTS       (DEBUG 
 "reg_def_use.live_var_used(RetBlock,Reg,Reg,EA_used,Index,1) :- \n   reg_def_use.return_block_end(Callee,_,RetBlock,RetBlockEnd),\n   !reg_def_use.block_last_def(RetBlockEnd,_,Reg),\n   reg_def_use.return_val_used(_,Callee,Reg,EA_used,Index).\nin file use_def_analysis.dl [350:5-353:53]" 
       (TIMER_ON @new_reg_def_use.live_var_used "@t-recursive-rule;reg_def_use.live_var_used;0;use_def_analysis.dl [350:5-353:53];reg_def_use.live_var_used(RetBlock,Reg,Reg,EA_used,Index,1) :- \\n   reg_def_use.return_block_end(Callee,_,RetBlock,RetBlockEnd),\\n   !reg_def_use.block_last_def(RetBlockEnd,_,Reg),\\n   reg_def_use.return_val_used(_,Callee,Reg,EA_used,Index).;"
(QUERY
         (IF (AND (NOT (ISEMPTY reg_def_use.return_block_end)) (NOT (ISEMPTY @delta_reg_def_use.return_val_used)))
          (FOR_IN t0 reg_def_use.return_block_end            (FOR t1 @delta_reg_def_use.return_val_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t0 3) UNDEF (TUPLE t1 2)))) (NOT (EXISTS reg_def_use.live_var_used ((TUPLE t0 2) (TUPLE t1 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (UNSIGNED 1)))))
             (INSERT ((TUPLE t0 2) (TUPLE t1 2) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (UNSIGNED 1)) @new_reg_def_use.live_var_used)
            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_reg_def_use.return_val_used "@t-recursive-relation;reg_def_use.return_val_used;use_def_analysis.dl [327:11-327:26];"
(STMTS       (DEBUG 
 "reg_def_use.return_val_used(EA_call,Callee,Reg,EA_used,Index_used) :- \n   arch.return_reg(Reg),\n   reg_def_use.def_used(EA_call,Reg,EA_used,Index_used),\n   direct_call(EA_call,Callee).\nin file use_def_analysis.dl [329:5-332:37]" 
       (TIMER_ON @new_reg_def_use.return_val_used "@t-recursive-rule;reg_def_use.return_val_used;0;use_def_analysis.dl [329:5-332:37];reg_def_use.return_val_used(EA_call,Callee,Reg,EA_used,Index_used) :- \\n   arch.return_reg(Reg),\\n   reg_def_use.def_used(EA_call,Reg,EA_used,Index_used),\\n   direct_call(EA_call,Callee).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY direct_call)) (NOT (ISEMPTY arch.return_reg))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 arch.return_reg            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (FOR t2 direct_call (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (IF (NOT (EXISTS reg_def_use.return_val_used ((TUPLE t1 0) (TUPLE t2 1) (TUPLE t0 0) (TUPLE t1 2) (TUPLE t1 3))))
              (INSERT ((TUPLE t1 0) (TUPLE t2 1) (TUPLE t0 0) (TUPLE t1 2) (TUPLE t1 3)) @new_reg_def_use.return_val_used)
             ))))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_reg_has_base_image "@t-recursive-relation;reg_has_base_image;binary/pe/symbolization.dl [46:7-46:25];"
(STMTS (STMTS (STMTS       (DEBUG 
 "reg_has_base_image(EA,Reg) :- \n   reg_has_base_image(EA2,Reg2),\n   reg_def_use.def_used(EA2,Reg2,EA,_),\n   arch.move_reg_reg(EA,Reg,Reg2).\nin file symbolization.dl [66:1-72:7]" 
       (TIMER_ON @new_reg_has_base_image "@t-recursive-rule;reg_has_base_image;0;binary/pe/symbolization.dl [66:1-72:7];reg_has_base_image(EA,Reg) :- \\n   reg_has_base_image(EA2,Reg2),\\n   reg_def_use.def_used(EA2,Reg2,EA,_),\\n   arch.move_reg_reg(EA,Reg,Reg2).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY arch.move_reg_reg)) (NOT (ISEMPTY @delta_reg_has_base_image))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 @delta_reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF)))
             (FOR t2 arch.move_reg_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)))
              (IF (NOT (EXISTS reg_has_base_image ((TUPLE t1 2) (TUPLE t2 1))))
               (INSERT ((TUPLE t1 2) (TUPLE t2 1)) @new_reg_has_base_image)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_has_base_image(EA,Reg) :- \n   reg_has_base_image(EA2,Reg2),\n   reg_def_use.def_used(EA2,Reg2,EA,_),\n   arch.move_reg_reg(EA,Reg,Reg2).\nin file symbolization.dl [66:1-72:7]" 
       (TIMER_ON @new_reg_has_base_image "@t-recursive-rule;reg_has_base_image;1;binary/pe/symbolization.dl [66:1-72:7];reg_has_base_image(EA,Reg) :- \\n   reg_has_base_image(EA2,Reg2),\\n   reg_def_use.def_used(EA2,Reg2,EA,_),\\n   arch.move_reg_reg(EA,Reg,Reg2).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY arch.move_reg_reg)) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 arch.move_reg_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)))
             (IF (NOT (EXISTS reg_has_base_image ((TUPLE t1 2) (TUPLE t2 1))))
              (INSERT ((TUPLE t1 2) (TUPLE t2 1)) @new_reg_has_base_image)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_has_base_image(EA,Reg) :- \n   reg_has_base_image(EA2,Reg2),\n   reg_def_use.def_used(EA2,Reg2,EA,_),\n   arch.reg_reg_arithmetic_operation(EA,Reg,Reg2,_,Mult,0),\n   Mult > 1.\nin file symbolization.dl [66:1-72:7]" 
       (TIMER_ON @new_reg_has_base_image "@t-recursive-rule;reg_has_base_image;0;binary/pe/symbolization.dl [66:1-72:7];reg_has_base_image(EA,Reg) :- \\n   reg_has_base_image(EA2,Reg2),\\n   reg_def_use.def_used(EA2,Reg2,EA,_),\\n   arch.reg_reg_arithmetic_operation(EA,Reg,Reg2,_,Mult,0),\\n   Mult > 1.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY arch.reg_reg_arithmetic_operation)) (NOT (ISEMPTY @delta_reg_has_base_image))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 @delta_reg_has_base_image            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF)))
             (FOR t2 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)) (<= (NUMBER 1) (TUPLE t2 4) ) (= (TUPLE t2 5) (NUMBER 0)))
              (IF (AND (CONSTRAINT != (TUPLE t2 4)  (NUMBER 1)) (NOT (EXISTS reg_has_base_image ((TUPLE t1 2) (TUPLE t2 1)))))
               (INSERT ((TUPLE t1 2) (TUPLE t2 1)) @new_reg_has_base_image)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_has_base_image(EA,Reg) :- \n   reg_has_base_image(EA2,Reg2),\n   reg_def_use.def_used(EA2,Reg2,EA,_),\n   arch.reg_reg_arithmetic_operation(EA,Reg,Reg2,_,Mult,0),\n   Mult > 1.\nin file symbolization.dl [66:1-72:7]" 
       (TIMER_ON @new_reg_has_base_image "@t-recursive-rule;reg_has_base_image;1;binary/pe/symbolization.dl [66:1-72:7];reg_has_base_image(EA,Reg) :- \\n   reg_has_base_image(EA2,Reg2),\\n   reg_def_use.def_used(EA2,Reg2,EA,_),\\n   arch.reg_reg_arithmetic_operation(EA,Reg,Reg2,_,Mult,0),\\n   Mult > 1.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY arch.reg_reg_arithmetic_operation)) (NOT (ISEMPTY reg_has_base_image))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 reg_has_base_image            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)) (<= (NUMBER 1) (TUPLE t2 4) ) (= (TUPLE t2 5) (NUMBER 0)))
             (IF (AND (CONSTRAINT != (TUPLE t2 4)  (NUMBER 1)) (NOT (EXISTS reg_has_base_image ((TUPLE t1 2) (TUPLE t2 1)))))
              (INSERT ((TUPLE t1 2) (TUPLE t2 1)) @new_reg_has_base_image)
             ))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_reg_has_got "@t-recursive-relation;reg_has_got;binary/elf/symbolization.dl [37:7-37:18];"
(STMTS       (DEBUG 
 "reg_has_got(EA,Reg) :- \n   value_reg(EA,Reg,_,\"NONE\",_,Offset,_),\n   got_section(Name),\n   loaded_section( _tmp_88,_,Name),\n    _tmp_88 = as(Offset, address).\nin file symbolization.dl [49:1-52:47]" 
       (TIMER_ON @new_reg_has_got "@t-recursive-rule;reg_has_got;0;binary/elf/symbolization.dl [49:1-52:47];reg_has_got(EA,Reg) :- \\n   value_reg(EA,Reg,_,\\\"NONE\\\",_,Offset,_),\\n   got_section(Name),\\n   loaded_section( _tmp_88,_,Name),\\n    _tmp_88 = as(Offset, address).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY @delta_value_reg))) (NOT (ISEMPTY got_section)))
          (FOR t0 @delta_value_reg (INDEX  (= (TUPLE t0 3) (STRING "NONE")))
           (IF (NOT (EXISTS reg_has_got ((TUPLE t0 0) (TUPLE t0 1))))
            (IF_EXISTS t1 got_section (EXISTS loaded_section ((TUPLE t0 5) UNDEF (TUPLE t1 0))) 
             (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @new_reg_has_got)
)           ))         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_reg_reg_arithmetic_operation_defs "@t-recursive-relation;reg_reg_arithmetic_operation_defs;value_analysis.dl [272:7-272:40];"
(STMTS (STMTS (STMTS       (DEBUG 
 "reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset) :- \n   def_used_for_address(EA,Reg_def,_),\n   arch.reg_reg_arithmetic_operation(EA,Reg_def,Reg1,Reg2,Mult,Offset),\n   Reg1 != Reg2,\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   EA != EA_def1,\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   EA != EA_def2. .plan 1:(3,1,2,4), 2:(4,1,2,3)\nin file value_analysis.dl [274:1-281:19]" 
       (TIMER_ON @new_reg_reg_arithmetic_operation_defs "@t-recursive-rule;reg_reg_arithmetic_operation_defs;0;value_analysis.dl [274:1-281:19];reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset) :- \\n   def_used_for_address(EA,Reg_def,_),\\n   arch.reg_reg_arithmetic_operation(EA,Reg_def,Reg1,Reg2,Mult,Offset),\\n   Reg1 != Reg2,\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   EA != EA_def1,\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   EA != EA_def2. .plan 1:(3,1,2,4), 2:(4,1,2,3);"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY arch.reg_reg_arithmetic_operation)) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY @delta_def_used_for_address)))
          (FOR_IN t0 @delta_def_used_for_address            (FOR t1 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (CONSTRAINT != (TUPLE t1 2)  (TUPLE t1 3))
             (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 1) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 0)))
              (IF (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 0)) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t2 0) (TUPLE t1 2) (TUPLE t0 0) UNDEF))))
               (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t1 3)) (= (TUPLE t3 2) (TUPLE t0 0)))
                (IF (AND (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t3 0)) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t1 3) (TUPLE t0 0) UNDEF)))) (NOT (EXISTS reg_reg_arithmetic_operation_defs ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 0) (TUPLE t1 2) (TUPLE t3 0) (TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5)))))
                 (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 0) (TUPLE t1 2) (TUPLE t3 0) (TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5)) @new_reg_reg_arithmetic_operation_defs)
                ))              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset) :- \n   def_used_for_address(EA,Reg_def,_),\n   arch.reg_reg_arithmetic_operation(EA,Reg_def,Reg1,Reg2,Mult,Offset),\n   Reg1 != Reg2,\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   EA != EA_def1,\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   EA != EA_def2. .plan 1:(3,1,2,4), 2:(4,1,2,3)\nin file value_analysis.dl [274:1-281:19]" 
       (TIMER_ON @new_reg_reg_arithmetic_operation_defs "@t-recursive-rule;reg_reg_arithmetic_operation_defs;1;value_analysis.dl [274:1-281:19];reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset) :- \\n   def_used_for_address(EA,Reg_def,_),\\n   arch.reg_reg_arithmetic_operation(EA,Reg_def,Reg1,Reg2,Mult,Offset),\\n   Reg1 != Reg2,\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   EA != EA_def1,\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   EA != EA_def2. .plan 1:(3,1,2,4), 2:(4,1,2,3);"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_reg_def_use.def_used)) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY def_used_for_address)))
          (FOR_IN t0 @delta_reg_def_use.def_used            (IF (CONSTRAINT != (TUPLE t0 2)  (TUPLE t0 0))
            (FOR t1 def_used_for_address (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
             (FOR t2 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t0 2)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 2) (TUPLE t0 1)))
              (IF (CONSTRAINT != (TUPLE t0 1)  (TUPLE t2 3))
               (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 3)) (= (TUPLE t3 2) (TUPLE t0 2)))
                (IF (AND (AND (CONSTRAINT != (TUPLE t0 2)  (TUPLE t3 0)) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t3 0) (TUPLE t2 3) (TUPLE t0 2) UNDEF)))) (NOT (EXISTS reg_reg_arithmetic_operation_defs ((TUPLE t0 2) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t3 0) (TUPLE t2 3) (TUPLE t2 4) (TUPLE t2 5)))))
                 (INSERT ((TUPLE t0 2) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t3 0) (TUPLE t2 3) (TUPLE t2 4) (TUPLE t2 5)) @new_reg_reg_arithmetic_operation_defs)
                ))              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset) :- \n   def_used_for_address(EA,Reg_def,_),\n   arch.reg_reg_arithmetic_operation(EA,Reg_def,Reg1,Reg2,Mult,Offset),\n   Reg1 != Reg2,\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   EA != EA_def1,\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   EA != EA_def2. .plan 1:(3,1,2,4), 2:(4,1,2,3)\nin file value_analysis.dl [274:1-281:19]" 
       (TIMER_ON @new_reg_reg_arithmetic_operation_defs "@t-recursive-rule;reg_reg_arithmetic_operation_defs;2;value_analysis.dl [274:1-281:19];reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset) :- \\n   def_used_for_address(EA,Reg_def,_),\\n   arch.reg_reg_arithmetic_operation(EA,Reg_def,Reg1,Reg2,Mult,Offset),\\n   Reg1 != Reg2,\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   EA != EA_def1,\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   EA != EA_def2. .plan 1:(3,1,2,4), 2:(4,1,2,3);"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_reg_def_use.def_used)) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY def_used_for_address)))
          (FOR_IN t0 @delta_reg_def_use.def_used            (IF (CONSTRAINT != (TUPLE t0 2)  (TUPLE t0 0))
            (FOR t1 def_used_for_address (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
             (FOR t2 arch.reg_reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t0 2)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 3) (TUPLE t0 1)))
              (IF (CONSTRAINT != (TUPLE t2 2)  (TUPLE t0 1))
               (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 2)) (= (TUPLE t3 2) (TUPLE t0 2)))
                (IF (AND (CONSTRAINT != (TUPLE t0 2)  (TUPLE t3 0)) (NOT (EXISTS reg_reg_arithmetic_operation_defs ((TUPLE t0 2) (TUPLE t1 1) (TUPLE t3 0) (TUPLE t2 2) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 4) (TUPLE t2 5)))))
                 (INSERT ((TUPLE t0 2) (TUPLE t1 1) (TUPLE t3 0) (TUPLE t2 2) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 4) (TUPLE t2 5)) @new_reg_reg_arithmetic_operation_defs)
                ))              )))           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-relation;relative_jump_table_entry_candidate;relative_jump_tables.dl [354:7-354:42];"
(STMTS (STMTS (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,(Reference+@functor_data_unsigned(TableStart,Size)),Scale,0) :- \n   jump_table_start(_,Size,TableStart,Reference,Scale),\n   jump_table_signed(TableStart,<inlined_Signed_1093>),\n   <inlined_Signed_1093> = 0,\n   @functor_data_valid(TableStart,Size) = 1,\n   code_in_block( _tmp_318,_),\n   loaded_section(SectionStart,SectionEnd,_),\n   TableStart >= SectionStart,\n   TableStart < SectionEnd,\n    _tmp_318 = (Reference+@functor_data_unsigned(TableStart,Size)).\nin file relative_jump_tables.dl [356:1-362:57]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;0;relative_jump_tables.dl [356:1-362:57];relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,(Reference+@functor_data_unsigned(TableStart,Size)),Scale,0) :- \\n   jump_table_start(_,Size,TableStart,Reference,Scale),\\n   jump_table_signed(TableStart,<inlined_Signed_1093>),\\n   <inlined_Signed_1093> = 0,\\n   @functor_data_valid(TableStart,Size) = 1,\\n   code_in_block( _tmp_318,_),\\n   loaded_section(SectionStart,SectionEnd,_),\\n   TableStart >= SectionStart,\\n   TableStart < SectionEnd,\\n    _tmp_318 = (Reference+@functor_data_unsigned(TableStart,Size)).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_jump_table_start)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY jump_table_signed)))
          (FOR_IN t0 @delta_jump_table_start            (IF (AND (AND (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))) UNDEF)) (NOT (EXISTS relative_jump_table_entry_candidate ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))) (TUPLE t0 4) (NUMBER 0))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 1) (UNSIGNED 0))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 2) (TUPLE t1 1))))
             (IF_EXISTS t2 loaded_section (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t2 0)) (CONSTRAINT < (TUPLE t0 2)  (TUPLE t2 1))) 
              (INSERT ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))) (TUPLE t0 4) (NUMBER 0)) @new_relative_jump_table_entry_candidate)
))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,(Reference+@functor_data_unsigned(TableStart,Size)),Scale,0) :- \n   jump_table_start(_,Size,TableStart,Reference,Scale),\n   jump_table_signed(TableStart,<inlined_Signed_1093>),\n   <inlined_Signed_1093> = 0,\n   @functor_data_valid(TableStart,Size) = 1,\n   code_in_block( _tmp_318,_),\n   loaded_section(SectionStart,SectionEnd,_),\n   TableStart >= SectionStart,\n   TableStart < SectionEnd,\n    _tmp_318 = (Reference+@functor_data_unsigned(TableStart,Size)).\nin file relative_jump_tables.dl [356:1-362:57]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;1;relative_jump_tables.dl [356:1-362:57];relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,(Reference+@functor_data_unsigned(TableStart,Size)),Scale,0) :- \\n   jump_table_start(_,Size,TableStart,Reference,Scale),\\n   jump_table_signed(TableStart,<inlined_Signed_1093>),\\n   <inlined_Signed_1093> = 0,\\n   @functor_data_valid(TableStart,Size) = 1,\\n   code_in_block( _tmp_318,_),\\n   loaded_section(SectionStart,SectionEnd,_),\\n   TableStart >= SectionStart,\\n   TableStart < SectionEnd,\\n    _tmp_318 = (Reference+@functor_data_unsigned(TableStart,Size)).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY jump_table_start)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY @delta_jump_table_signed)))
          (FOR_IN t0 jump_table_start            (IF (AND (AND (AND (NOT (EXISTS relative_jump_table_entry_candidate ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))) (TUPLE t0 4) (NUMBER 0)))) (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))) UNDEF))) (EXISTS @delta_jump_table_signed ((TUPLE t0 2) (UNSIGNED 0)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))  (UNSIGNED 1)))
            (IF_EXISTS t1 loaded_section (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t1 0)) (CONSTRAINT < (TUPLE t0 2)  (TUPLE t1 1))) 
             (INSERT ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))) (TUPLE t0 4) (NUMBER 0)) @new_relative_jump_table_entry_candidate)
)           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,Dest,Scale,0) :- \n   jump_table_start(_,Size,TableStart,Reference,Scale),\n   jump_table_signed(TableStart,<inlined_Signed_1094>),\n   <inlined_Signed_1094> = 0,\n   @functor_data_valid(TableStart,Size) = 1,\n   <inlined_Dest_1094> = (Reference+@functor_data_unsigned(TableStart,Size)),\n   is_padding(<inlined_Dest_1094>),\n   after_end(<inlined_Dest_1094>,<inlined_End_1094>),\n   after_end(Dest,<inlined_End_1094>),\n   !is_padding(Dest),\n   code_in_block(Dest,_),\n   loaded_section(SectionStart,SectionEnd,_),\n   TableStart >= SectionStart,\n   TableStart < SectionEnd.\nin file relative_jump_tables.dl [356:1-362:57]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;0;relative_jump_tables.dl [356:1-362:57];relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,Dest,Scale,0) :- \\n   jump_table_start(_,Size,TableStart,Reference,Scale),\\n   jump_table_signed(TableStart,<inlined_Signed_1094>),\\n   <inlined_Signed_1094> = 0,\\n   @functor_data_valid(TableStart,Size) = 1,\\n   <inlined_Dest_1094> = (Reference+@functor_data_unsigned(TableStart,Size)),\\n   is_padding(<inlined_Dest_1094>),\\n   after_end(<inlined_Dest_1094>,<inlined_End_1094>),\\n   after_end(Dest,<inlined_End_1094>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_),\\n   loaded_section(SectionStart,SectionEnd,_),\\n   TableStart >= SectionStart,\\n   TableStart < SectionEnd.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY jump_table_signed))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY after_end))) (NOT (ISEMPTY @delta_jump_table_start))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 @delta_jump_table_start            (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))  (UNSIGNED 1))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 1) (UNSIGNED 0))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 2) (TUPLE t1 1))))
             (FOR t2 is_padding (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1))))))
              (FOR t3 after_end (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
               (FOR t4 after_end (INDEX  (= (TUPLE t4 1) (TUPLE t3 1)))
                (IF (AND (AND (EXISTS code_in_block ((TUPLE t4 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t4 0))))) (NOT (EXISTS relative_jump_table_entry_candidate ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t4 0) (TUPLE t0 4) (NUMBER 0)))))
                 (IF_EXISTS t5 loaded_section (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t5 0)) (CONSTRAINT < (TUPLE t0 2)  (TUPLE t5 1))) 
                  (INSERT ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t4 0) (TUPLE t0 4) (NUMBER 0)) @new_relative_jump_table_entry_candidate)
)                )))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,Dest,Scale,0) :- \n   jump_table_start(_,Size,TableStart,Reference,Scale),\n   jump_table_signed(TableStart,<inlined_Signed_1094>),\n   <inlined_Signed_1094> = 0,\n   @functor_data_valid(TableStart,Size) = 1,\n   <inlined_Dest_1094> = (Reference+@functor_data_unsigned(TableStart,Size)),\n   is_padding(<inlined_Dest_1094>),\n   after_end(<inlined_Dest_1094>,<inlined_End_1094>),\n   after_end(Dest,<inlined_End_1094>),\n   !is_padding(Dest),\n   code_in_block(Dest,_),\n   loaded_section(SectionStart,SectionEnd,_),\n   TableStart >= SectionStart,\n   TableStart < SectionEnd.\nin file relative_jump_tables.dl [356:1-362:57]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;1;relative_jump_tables.dl [356:1-362:57];relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,Dest,Scale,0) :- \\n   jump_table_start(_,Size,TableStart,Reference,Scale),\\n   jump_table_signed(TableStart,<inlined_Signed_1094>),\\n   <inlined_Signed_1094> = 0,\\n   @functor_data_valid(TableStart,Size) = 1,\\n   <inlined_Dest_1094> = (Reference+@functor_data_unsigned(TableStart,Size)),\\n   is_padding(<inlined_Dest_1094>),\\n   after_end(<inlined_Dest_1094>,<inlined_End_1094>),\\n   after_end(Dest,<inlined_End_1094>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_),\\n   loaded_section(SectionStart,SectionEnd,_),\\n   TableStart >= SectionStart,\\n   TableStart < SectionEnd.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY @delta_jump_table_signed))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY after_end))) (NOT (ISEMPTY jump_table_start))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 jump_table_start            (IF (AND (EXISTS @delta_jump_table_signed ((TUPLE t0 2) (UNSIGNED 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))  (UNSIGNED 1)))
            (FOR t1 is_padding (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1))))))
             (FOR t2 after_end (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
              (FOR t3 after_end (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)))
               (IF (AND (AND (EXISTS code_in_block ((TUPLE t3 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t3 0))))) (NOT (EXISTS relative_jump_table_entry_candidate ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t3 0) (TUPLE t0 4) (NUMBER 0)))))
                (IF_EXISTS t4 loaded_section (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT < (TUPLE t0 2)  (TUPLE t4 1))) 
                 (INSERT ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t3 0) (TUPLE t0 4) (NUMBER 0)) @new_relative_jump_table_entry_candidate)
)               ))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address),Scale,0) :- \n   jump_table_start(_,Size,TableStart,Reference,Scale),\n   jump_table_signed(TableStart,<inlined_Signed_1095>),\n   <inlined_Signed_1095> = 1,\n   @functor_data_valid(TableStart,Size) = 1,\n   code_in_block( _tmp_319,_),\n   loaded_section(SectionStart,SectionEnd,_),\n   TableStart >= SectionStart,\n   TableStart < SectionEnd,\n    _tmp_319 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address).\nin file relative_jump_tables.dl [356:1-362:57]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;0;relative_jump_tables.dl [356:1-362:57];relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address),Scale,0) :- \\n   jump_table_start(_,Size,TableStart,Reference,Scale),\\n   jump_table_signed(TableStart,<inlined_Signed_1095>),\\n   <inlined_Signed_1095> = 1,\\n   @functor_data_valid(TableStart,Size) = 1,\\n   code_in_block( _tmp_319,_),\\n   loaded_section(SectionStart,SectionEnd,_),\\n   TableStart >= SectionStart,\\n   TableStart < SectionEnd,\\n    _tmp_319 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_jump_table_start)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY jump_table_signed)))
          (FOR_IN t0 @delta_jump_table_start            (IF (AND (AND (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 4) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 2) (TUPLE t0 1))))) UNDEF)) (NOT (EXISTS relative_jump_table_entry_candidate ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 4) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 2) (TUPLE t0 1))))) (TUPLE t0 4) (NUMBER 0))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 1) (UNSIGNED 1))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 2) (TUPLE t1 1))))
             (IF_EXISTS t2 loaded_section (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t2 0)) (CONSTRAINT < (TUPLE t0 2)  (TUPLE t2 1))) 
              (INSERT ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 4) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 2) (TUPLE t0 1))))) (TUPLE t0 4) (NUMBER 0)) @new_relative_jump_table_entry_candidate)
))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address),Scale,0) :- \n   jump_table_start(_,Size,TableStart,Reference,Scale),\n   jump_table_signed(TableStart,<inlined_Signed_1095>),\n   <inlined_Signed_1095> = 1,\n   @functor_data_valid(TableStart,Size) = 1,\n   code_in_block( _tmp_319,_),\n   loaded_section(SectionStart,SectionEnd,_),\n   TableStart >= SectionStart,\n   TableStart < SectionEnd,\n    _tmp_319 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address).\nin file relative_jump_tables.dl [356:1-362:57]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;1;relative_jump_tables.dl [356:1-362:57];relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address),Scale,0) :- \\n   jump_table_start(_,Size,TableStart,Reference,Scale),\\n   jump_table_signed(TableStart,<inlined_Signed_1095>),\\n   <inlined_Signed_1095> = 1,\\n   @functor_data_valid(TableStart,Size) = 1,\\n   code_in_block( _tmp_319,_),\\n   loaded_section(SectionStart,SectionEnd,_),\\n   TableStart >= SectionStart,\\n   TableStart < SectionEnd,\\n    _tmp_319 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY jump_table_start)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY @delta_jump_table_signed)))
          (FOR_IN t0 jump_table_start            (IF (AND (AND (AND (NOT (EXISTS relative_jump_table_entry_candidate ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 4) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 2) (TUPLE t0 1))))) (TUPLE t0 4) (NUMBER 0)))) (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 4) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 2) (TUPLE t0 1))))) UNDEF))) (EXISTS @delta_jump_table_signed ((TUPLE t0 2) (UNSIGNED 1)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))  (UNSIGNED 1)))
            (IF_EXISTS t1 loaded_section (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t1 0)) (CONSTRAINT < (TUPLE t0 2)  (TUPLE t1 1))) 
             (INSERT ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 4) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 2) (TUPLE t0 1))))) (TUPLE t0 4) (NUMBER 0)) @new_relative_jump_table_entry_candidate)
)           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,Dest,Scale,0) :- \n   jump_table_start(_,Size,TableStart,Reference,Scale),\n   jump_table_signed(TableStart,<inlined_Signed_1096>),\n   <inlined_Signed_1096> = 1,\n   @functor_data_valid(TableStart,Size) = 1,\n   <inlined_Dest_1096> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address),\n   is_padding(<inlined_Dest_1096>),\n   after_end(<inlined_Dest_1096>,<inlined_End_1096>),\n   after_end(Dest,<inlined_End_1096>),\n   !is_padding(Dest),\n   code_in_block(Dest,_),\n   loaded_section(SectionStart,SectionEnd,_),\n   TableStart >= SectionStart,\n   TableStart < SectionEnd.\nin file relative_jump_tables.dl [356:1-362:57]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;0;relative_jump_tables.dl [356:1-362:57];relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,Dest,Scale,0) :- \\n   jump_table_start(_,Size,TableStart,Reference,Scale),\\n   jump_table_signed(TableStart,<inlined_Signed_1096>),\\n   <inlined_Signed_1096> = 1,\\n   @functor_data_valid(TableStart,Size) = 1,\\n   <inlined_Dest_1096> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address),\\n   is_padding(<inlined_Dest_1096>),\\n   after_end(<inlined_Dest_1096>,<inlined_End_1096>),\\n   after_end(Dest,<inlined_End_1096>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_),\\n   loaded_section(SectionStart,SectionEnd,_),\\n   TableStart >= SectionStart,\\n   TableStart < SectionEnd.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY jump_table_signed))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY after_end))) (NOT (ISEMPTY @delta_jump_table_start))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 @delta_jump_table_start            (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))  (UNSIGNED 1))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 1) (UNSIGNED 1))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 2) (TUPLE t1 1))))
             (FOR t2 is_padding (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 4) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))))))
              (FOR t3 after_end (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
               (FOR t4 after_end (INDEX  (= (TUPLE t4 1) (TUPLE t3 1)))
                (IF (AND (AND (EXISTS code_in_block ((TUPLE t4 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t4 0))))) (NOT (EXISTS relative_jump_table_entry_candidate ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t4 0) (TUPLE t0 4) (NUMBER 0)))))
                 (IF_EXISTS t5 loaded_section (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t5 0)) (CONSTRAINT < (TUPLE t0 2)  (TUPLE t5 1))) 
                  (INSERT ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t4 0) (TUPLE t0 4) (NUMBER 0)) @new_relative_jump_table_entry_candidate)
)                )))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,Dest,Scale,0) :- \n   jump_table_start(_,Size,TableStart,Reference,Scale),\n   jump_table_signed(TableStart,<inlined_Signed_1096>),\n   <inlined_Signed_1096> = 1,\n   @functor_data_valid(TableStart,Size) = 1,\n   <inlined_Dest_1096> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address),\n   is_padding(<inlined_Dest_1096>),\n   after_end(<inlined_Dest_1096>,<inlined_End_1096>),\n   after_end(Dest,<inlined_End_1096>),\n   !is_padding(Dest),\n   code_in_block(Dest,_),\n   loaded_section(SectionStart,SectionEnd,_),\n   TableStart >= SectionStart,\n   TableStart < SectionEnd.\nin file relative_jump_tables.dl [356:1-362:57]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;1;relative_jump_tables.dl [356:1-362:57];relative_jump_table_entry_candidate(TableStart,TableStart,Size,Reference,Dest,Scale,0) :- \\n   jump_table_start(_,Size,TableStart,Reference,Scale),\\n   jump_table_signed(TableStart,<inlined_Signed_1096>),\\n   <inlined_Signed_1096> = 1,\\n   @functor_data_valid(TableStart,Size) = 1,\\n   <inlined_Dest_1096> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed(TableStart,Size))), address),\\n   is_padding(<inlined_Dest_1096>),\\n   after_end(<inlined_Dest_1096>,<inlined_End_1096>),\\n   after_end(Dest,<inlined_End_1096>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_),\\n   loaded_section(SectionStart,SectionEnd,_),\\n   TableStart >= SectionStart,\\n   TableStart < SectionEnd.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY @delta_jump_table_signed))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY after_end))) (NOT (ISEMPTY jump_table_start))) (NOT (ISEMPTY code_in_block)))
          (FOR_IN t0 jump_table_start            (IF (AND (EXISTS @delta_jump_table_signed ((TUPLE t0 2) (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))  (UNSIGNED 1)))
            (FOR t1 is_padding (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 4) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 2) (TUPLE t0 1)))))))
             (FOR t2 after_end (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
              (FOR t3 after_end (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)))
               (IF (AND (AND (EXISTS code_in_block ((TUPLE t3 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t3 0))))) (NOT (EXISTS relative_jump_table_entry_candidate ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t3 0) (TUPLE t0 4) (NUMBER 0)))))
                (IF_EXISTS t4 loaded_section (AND (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT < (TUPLE t0 2)  (TUPLE t4 1))) 
                 (INSERT ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t3 0) (TUPLE t0 4) (NUMBER 0)) @new_relative_jump_table_entry_candidate)
)               ))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,(Reference+@functor_data_unsigned((LastEA+Size),Size)),Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1097>),\n   <inlined_Signed_1097> = 0,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   code_in_block( _tmp_320,_),\n    _tmp_320 = (Reference+@functor_data_unsigned((LastEA+Size),Size)).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;0;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,(Reference+@functor_data_unsigned((LastEA+Size),Size)),Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1097>),\\n   <inlined_Signed_1097> = 0,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   code_in_block( _tmp_320,_),\\n    _tmp_320 = (Reference+@functor_data_unsigned((LastEA+Size),Size)).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY @delta_relative_jump_table_entry_candidate))) (NOT (ISEMPTY jump_table_max))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY jump_table_signed)))
          (FOR_IN t0 @delta_relative_jump_table_entry_candidate            (IF (AND (AND (AND (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) (TUPLE t0 5) (TUPLE t0 6)))) (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) UNDEF))) (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (UNSIGNED 0))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (TUPLE t1 1))))
             (INDEXED_IF_EXISTS t2 jump_table_max (INDEX  (= (TUPLE t2 0) (TUPLE t0 1))) (AND (CONSTRAINT >= (TUPLE t2 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (NOT (EXISTS @delta_jump_table_max ((TUPLE t0 1) (TUPLE t2 1)))))
              (IF_EXISTS t3 data_segment (AND (CONSTRAINT <= (TUPLE t3 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t3 1))) 
               (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
)))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,(Reference+@functor_data_unsigned((LastEA+Size),Size)),Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1097>),\n   <inlined_Signed_1097> = 0,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   code_in_block( _tmp_320,_),\n    _tmp_320 = (Reference+@functor_data_unsigned((LastEA+Size),Size)).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;1;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,(Reference+@functor_data_unsigned((LastEA+Size),Size)),Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1097>),\\n   <inlined_Signed_1097> = 0,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   code_in_block( _tmp_320,_),\\n    _tmp_320 = (Reference+@functor_data_unsigned((LastEA+Size),Size)).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY relative_jump_table_entry_candidate))) (NOT (ISEMPTY @delta_jump_table_max))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY jump_table_signed)))
          (FOR_IN t0 relative_jump_table_entry_candidate            (IF (AND (AND (AND (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) (TUPLE t0 5) (TUPLE t0 6)))) (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) UNDEF))) (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (UNSIGNED 0))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (TUPLE t1 1))))
             (INDEXED_IF_EXISTS t2 @delta_jump_table_max (INDEX  (= (TUPLE t2 0) (TUPLE t0 1))) (CONSTRAINT >= (TUPLE t2 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))
              (IF_EXISTS t3 data_segment (AND (CONSTRAINT <= (TUPLE t3 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t3 1))) 
               (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
)))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,(Reference+@functor_data_unsigned((LastEA+Size),Size)),Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1097>),\n   <inlined_Signed_1097> = 0,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   code_in_block( _tmp_320,_),\n    _tmp_320 = (Reference+@functor_data_unsigned((LastEA+Size),Size)).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;2;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,(Reference+@functor_data_unsigned((LastEA+Size),Size)),Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1097>),\\n   <inlined_Signed_1097> = 0,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   code_in_block( _tmp_320,_),\\n    _tmp_320 = (Reference+@functor_data_unsigned((LastEA+Size),Size)).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY relative_jump_table_entry_candidate))) (NOT (ISEMPTY jump_table_max))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY @delta_jump_table_signed)))
          (FOR_IN t0 relative_jump_table_entry_candidate            (IF (AND (AND (AND (AND (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) UNDEF)) (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) (TUPLE t0 5) (TUPLE t0 6))))) (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (UNSIGNED 0)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_max (INDEX  (= (TUPLE t1 0) (TUPLE t0 1))) (CONSTRAINT >= (TUPLE t1 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))
             (IF_EXISTS t2 data_segment (AND (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t2 1))) 
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1098>),\n   <inlined_Signed_1098> = 0,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   <inlined_Dest_1098> = (Reference+@functor_data_unsigned((LastEA+Size),Size)),\n   is_padding(<inlined_Dest_1098>),\n   after_end(<inlined_Dest_1098>,<inlined_End_1098>),\n   after_end(Dest,<inlined_End_1098>),\n   !is_padding(Dest),\n   code_in_block(Dest,_).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;0;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1098>),\\n   <inlined_Signed_1098> = 0,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   <inlined_Dest_1098> = (Reference+@functor_data_unsigned((LastEA+Size),Size)),\\n   is_padding(<inlined_Dest_1098>),\\n   after_end(<inlined_Dest_1098>,<inlined_End_1098>),\\n   after_end(Dest,<inlined_End_1098>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY jump_table_signed)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY jump_table_max))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY @delta_relative_jump_table_entry_candidate))) (NOT (ISEMPTY after_end)))
          (FOR_IN t0 @delta_relative_jump_table_entry_candidate            (IF (AND (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (UNSIGNED 0))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (TUPLE t1 1))))
             (FOR t2 is_padding (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))))
              (INDEXED_IF_EXISTS t3 jump_table_max (INDEX  (= (TUPLE t3 0) (TUPLE t0 1))) (AND (CONSTRAINT >= (TUPLE t3 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (NOT (EXISTS @delta_jump_table_max ((TUPLE t0 1) (TUPLE t3 1)))))
               (IF_EXISTS t4 data_segment (AND (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t4 1))) 
                (FOR t5 after_end (INDEX  (= (TUPLE t5 0) (TUPLE t2 0)))
                 (FOR t6 after_end (INDEX  (= (TUPLE t6 1) (TUPLE t5 1)))
                  (IF (AND (AND (EXISTS code_in_block ((TUPLE t6 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t6 0))))) (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t6 0) (TUPLE t0 5) (TUPLE t0 6)))))
                   (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t6 0) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
                  )))))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1098>),\n   <inlined_Signed_1098> = 0,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   <inlined_Dest_1098> = (Reference+@functor_data_unsigned((LastEA+Size),Size)),\n   is_padding(<inlined_Dest_1098>),\n   after_end(<inlined_Dest_1098>,<inlined_End_1098>),\n   after_end(Dest,<inlined_End_1098>),\n   !is_padding(Dest),\n   code_in_block(Dest,_).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;1;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1098>),\\n   <inlined_Signed_1098> = 0,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   <inlined_Dest_1098> = (Reference+@functor_data_unsigned((LastEA+Size),Size)),\\n   is_padding(<inlined_Dest_1098>),\\n   after_end(<inlined_Dest_1098>,<inlined_End_1098>),\\n   after_end(Dest,<inlined_End_1098>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY jump_table_signed)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY @delta_jump_table_max))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY relative_jump_table_entry_candidate))) (NOT (ISEMPTY after_end)))
          (FOR_IN t0 relative_jump_table_entry_candidate            (IF (AND (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (UNSIGNED 0))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (TUPLE t1 1))))
             (FOR t2 is_padding (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))))
              (INDEXED_IF_EXISTS t3 @delta_jump_table_max (INDEX  (= (TUPLE t3 0) (TUPLE t0 1))) (CONSTRAINT >= (TUPLE t3 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))
               (IF_EXISTS t4 data_segment (AND (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t4 1))) 
                (FOR t5 after_end (INDEX  (= (TUPLE t5 0) (TUPLE t2 0)))
                 (FOR t6 after_end (INDEX  (= (TUPLE t6 1) (TUPLE t5 1)))
                  (IF (AND (AND (EXISTS code_in_block ((TUPLE t6 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t6 0))))) (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t6 0) (TUPLE t0 5) (TUPLE t0 6)))))
                   (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t6 0) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
                  )))))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1098>),\n   <inlined_Signed_1098> = 0,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   <inlined_Dest_1098> = (Reference+@functor_data_unsigned((LastEA+Size),Size)),\n   is_padding(<inlined_Dest_1098>),\n   after_end(<inlined_Dest_1098>,<inlined_End_1098>),\n   after_end(Dest,<inlined_End_1098>),\n   !is_padding(Dest),\n   code_in_block(Dest,_).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;2;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1098>),\\n   <inlined_Signed_1098> = 0,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   <inlined_Dest_1098> = (Reference+@functor_data_unsigned((LastEA+Size),Size)),\\n   is_padding(<inlined_Dest_1098>),\\n   after_end(<inlined_Dest_1098>,<inlined_End_1098>),\\n   after_end(Dest,<inlined_End_1098>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY @delta_jump_table_signed)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY jump_table_max))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY relative_jump_table_entry_candidate))) (NOT (ISEMPTY after_end)))
          (FOR_IN t0 relative_jump_table_entry_candidate            (IF (AND (AND (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (UNSIGNED 0))) (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (FOR t1 is_padding (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))))
             (INDEXED_IF_EXISTS t2 jump_table_max (INDEX  (= (TUPLE t2 0) (TUPLE t0 1))) (CONSTRAINT >= (TUPLE t2 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))
              (IF_EXISTS t3 data_segment (AND (CONSTRAINT <= (TUPLE t3 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t3 1))) 
               (FOR t4 after_end (INDEX  (= (TUPLE t4 0) (TUPLE t1 0)))
                (FOR t5 after_end (INDEX  (= (TUPLE t5 1) (TUPLE t4 1)))
                 (IF (AND (AND (EXISTS code_in_block ((TUPLE t5 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t5 0))))) (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t5 0) (TUPLE t0 5) (TUPLE t0 6)))))
                  (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t5 0) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
                 ))))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1099>),\n   <inlined_Signed_1099> = 1,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   code_in_block( _tmp_321,_),\n    _tmp_321 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;0;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1099>),\\n   <inlined_Signed_1099> = 1,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   code_in_block( _tmp_321,_),\\n    _tmp_321 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY @delta_relative_jump_table_entry_candidate))) (NOT (ISEMPTY jump_table_max))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY jump_table_signed)))
          (FOR_IN t0 @delta_relative_jump_table_entry_candidate            (IF (AND (AND (AND (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) (TUPLE t0 5) (TUPLE t0 6)))) (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) UNDEF))) (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (UNSIGNED 1))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (TUPLE t1 1))))
             (INDEXED_IF_EXISTS t2 jump_table_max (INDEX  (= (TUPLE t2 0) (TUPLE t0 1))) (AND (CONSTRAINT >= (TUPLE t2 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (NOT (EXISTS @delta_jump_table_max ((TUPLE t0 1) (TUPLE t2 1)))))
              (IF_EXISTS t3 data_segment (AND (CONSTRAINT <= (TUPLE t3 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t3 1))) 
               (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
)))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1099>),\n   <inlined_Signed_1099> = 1,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   code_in_block( _tmp_321,_),\n    _tmp_321 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;1;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1099>),\\n   <inlined_Signed_1099> = 1,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   code_in_block( _tmp_321,_),\\n    _tmp_321 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY relative_jump_table_entry_candidate))) (NOT (ISEMPTY @delta_jump_table_max))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY jump_table_signed)))
          (FOR_IN t0 relative_jump_table_entry_candidate            (IF (AND (AND (AND (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) (TUPLE t0 5) (TUPLE t0 6)))) (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) UNDEF))) (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (UNSIGNED 1))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (TUPLE t1 1))))
             (INDEXED_IF_EXISTS t2 @delta_jump_table_max (INDEX  (= (TUPLE t2 0) (TUPLE t0 1))) (CONSTRAINT >= (TUPLE t2 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))
              (IF_EXISTS t3 data_segment (AND (CONSTRAINT <= (TUPLE t3 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t3 1))) 
               (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
)))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1099>),\n   <inlined_Signed_1099> = 1,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   code_in_block( _tmp_321,_),\n    _tmp_321 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;2;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1099>),\\n   <inlined_Signed_1099> = 1,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   code_in_block( _tmp_321,_),\\n    _tmp_321 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY relative_jump_table_entry_candidate))) (NOT (ISEMPTY jump_table_max))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY @delta_jump_table_signed)))
          (FOR_IN t0 relative_jump_table_entry_candidate            (IF (AND (AND (AND (AND (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) UNDEF)) (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) (TUPLE t0 5) (TUPLE t0 6))))) (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (UNSIGNED 1)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_max (INDEX  (= (TUPLE t1 0) (TUPLE t0 1))) (CONSTRAINT >= (TUPLE t1 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))
             (IF_EXISTS t2 data_segment (AND (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t2 1))) 
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1100>),\n   <inlined_Signed_1100> = 1,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   <inlined_Dest_1100> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),\n   is_padding(<inlined_Dest_1100>),\n   after_end(<inlined_Dest_1100>,<inlined_End_1100>),\n   after_end(Dest,<inlined_End_1100>),\n   !is_padding(Dest),\n   code_in_block(Dest,_).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;0;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1100>),\\n   <inlined_Signed_1100> = 1,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   <inlined_Dest_1100> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),\\n   is_padding(<inlined_Dest_1100>),\\n   after_end(<inlined_Dest_1100>,<inlined_End_1100>),\\n   after_end(Dest,<inlined_End_1100>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY jump_table_signed)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY jump_table_max))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY @delta_relative_jump_table_entry_candidate))) (NOT (ISEMPTY after_end)))
          (FOR_IN t0 @delta_relative_jump_table_entry_candidate            (IF (AND (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (UNSIGNED 1))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (TUPLE t1 1))))
             (FOR t2 is_padding (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))))))
              (INDEXED_IF_EXISTS t3 jump_table_max (INDEX  (= (TUPLE t3 0) (TUPLE t0 1))) (AND (CONSTRAINT >= (TUPLE t3 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (NOT (EXISTS @delta_jump_table_max ((TUPLE t0 1) (TUPLE t3 1)))))
               (IF_EXISTS t4 data_segment (AND (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t4 1))) 
                (FOR t5 after_end (INDEX  (= (TUPLE t5 0) (TUPLE t2 0)))
                 (FOR t6 after_end (INDEX  (= (TUPLE t6 1) (TUPLE t5 1)))
                  (IF (AND (AND (EXISTS code_in_block ((TUPLE t6 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t6 0))))) (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t6 0) (TUPLE t0 5) (TUPLE t0 6)))))
                   (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t6 0) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
                  )))))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1100>),\n   <inlined_Signed_1100> = 1,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   <inlined_Dest_1100> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),\n   is_padding(<inlined_Dest_1100>),\n   after_end(<inlined_Dest_1100>,<inlined_End_1100>),\n   after_end(Dest,<inlined_End_1100>),\n   !is_padding(Dest),\n   code_in_block(Dest,_).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;1;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1100>),\\n   <inlined_Signed_1100> = 1,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   <inlined_Dest_1100> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),\\n   is_padding(<inlined_Dest_1100>),\\n   after_end(<inlined_Dest_1100>,<inlined_End_1100>),\\n   after_end(Dest,<inlined_End_1100>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY jump_table_signed)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY @delta_jump_table_max))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY relative_jump_table_entry_candidate))) (NOT (ISEMPTY after_end)))
          (FOR_IN t0 relative_jump_table_entry_candidate            (IF (AND (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t1 jump_table_signed (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (UNSIGNED 1))) (NOT (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (TUPLE t1 1))))
             (FOR t2 is_padding (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))))))
              (INDEXED_IF_EXISTS t3 @delta_jump_table_max (INDEX  (= (TUPLE t3 0) (TUPLE t0 1))) (CONSTRAINT >= (TUPLE t3 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))
               (IF_EXISTS t4 data_segment (AND (CONSTRAINT <= (TUPLE t4 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t4 1))) 
                (FOR t5 after_end (INDEX  (= (TUPLE t5 0) (TUPLE t2 0)))
                 (FOR t6 after_end (INDEX  (= (TUPLE t6 1) (TUPLE t5 1)))
                  (IF (AND (AND (EXISTS code_in_block ((TUPLE t6 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t6 0))))) (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t6 0) (TUPLE t0 5) (TUPLE t0 6)))))
                   (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t6 0) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
                  )))))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   jump_table_max(TableStart,TableEnd),\n   TableEnd >= (LastEA+Size),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   jump_table_signed(TableStart,<inlined_Signed_1100>),\n   <inlined_Signed_1100> = 1,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   <inlined_Dest_1100> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),\n   is_padding(<inlined_Dest_1100>),\n   after_end(<inlined_Dest_1100>,<inlined_End_1100>),\n   after_end(Dest,<inlined_End_1100>),\n   !is_padding(Dest),\n   code_in_block(Dest,_).\nin file relative_jump_tables.dl [379:1-387:79]" 
       (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-rule;relative_jump_table_entry_candidate;2;relative_jump_tables.dl [379:1-387:79];relative_jump_table_entry_candidate((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \\n   relative_jump_table_entry_candidate(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   jump_table_max(TableStart,TableEnd),\\n   TableEnd >= (LastEA+Size),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   jump_table_signed(TableStart,<inlined_Signed_1100>),\\n   <inlined_Signed_1100> = 1,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   <inlined_Dest_1100> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),\\n   is_padding(<inlined_Dest_1100>),\\n   after_end(<inlined_Dest_1100>,<inlined_End_1100>),\\n   after_end(Dest,<inlined_End_1100>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY @delta_jump_table_signed)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY jump_table_max))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY relative_jump_table_entry_candidate))) (NOT (ISEMPTY after_end)))
          (FOR_IN t0 relative_jump_table_entry_candidate            (IF (AND (AND (EXISTS @delta_jump_table_signed ((TUPLE t0 1) (UNSIGNED 1))) (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (FOR t1 is_padding (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))))))
             (INDEXED_IF_EXISTS t2 jump_table_max (INDEX  (= (TUPLE t2 0) (TUPLE t0 1))) (CONSTRAINT >= (TUPLE t2 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))
              (IF_EXISTS t3 data_segment (AND (CONSTRAINT <= (TUPLE t3 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t3 1))) 
               (FOR t4 after_end (INDEX  (= (TUPLE t4 0) (TUPLE t1 0)))
                (FOR t5 after_end (INDEX  (= (TUPLE t5 1) (TUPLE t4 1)))
                 (IF (AND (AND (EXISTS code_in_block ((TUPLE t5 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t5 0))))) (NOT (EXISTS relative_jump_table_entry_candidate ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t5 0) (TUPLE t0 5) (TUPLE t0 6)))))
                  (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t5 0) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry_candidate)
                 ))))))           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_stack_def_use.def_used "@t-recursive-relation;stack_def_use.def_used;use_def_analysis.dl [466:11-466:19];"
(STMTS (STMTS (STMTS       (DEBUG 
 "stack_def_use.def_used(EA_def,VarDef,EA_used,VarUsed,Index) :- \n   stack_def_use.live_var_at_block_end(Block,BlockUsed,Var),\n   stack_def_use.live_var_def(Block,VarDef,Var,EA_def),\n   stack_def_use.live_var_used(BlockUsed,Var,VarUsed,EA_used,Index,_). .plan 1:(3,1,2)\nin file use_def_analysis.dl [474:5-477:62]" 
       (TIMER_ON @new_stack_def_use.def_used "@t-recursive-rule;stack_def_use.def_used;0;use_def_analysis.dl [474:5-477:62];stack_def_use.def_used(EA_def,VarDef,EA_used,VarUsed,Index) :- \\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,Var),\\n   stack_def_use.live_var_def(Block,VarDef,Var,EA_def),\\n   stack_def_use.live_var_used(BlockUsed,Var,VarUsed,EA_used,Index,_). .plan 1:(3,1,2);"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY stack_def_use.live_var_used)) (NOT (ISEMPTY @delta_stack_def_use.live_var_at_block_end))) (NOT (ISEMPTY stack_def_use.live_var_def)))
          (FOR_IN t0 @delta_stack_def_use.live_var_at_block_end            (FOR t1 stack_def_use.live_var_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 2)))
            (FOR t2 stack_def_use.live_var_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (TUPLE t0 2)))
             (IF (AND (NOT (EXISTS stack_def_use.def_used ((TUPLE t1 3) (TUPLE t1 1) (TUPLE t2 3) (TUPLE t2 2) (TUPLE t2 4)))) (NOT (EXISTS @delta_stack_def_use.live_var_used ((TUPLE t0 1) (TUPLE t0 2) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t2 4) UNDEF))))
              (INSERT ((TUPLE t1 3) (TUPLE t1 1) (TUPLE t2 3) (TUPLE t2 2) (TUPLE t2 4)) @new_stack_def_use.def_used)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.def_used(EA_def,VarDef,EA_used,VarUsed,Index) :- \n   stack_def_use.live_var_at_block_end(Block,BlockUsed,Var),\n   stack_def_use.live_var_def(Block,VarDef,Var,EA_def),\n   stack_def_use.live_var_used(BlockUsed,Var,VarUsed,EA_used,Index,_). .plan 1:(3,1,2)\nin file use_def_analysis.dl [474:5-477:62]" 
       (TIMER_ON @new_stack_def_use.def_used "@t-recursive-rule;stack_def_use.def_used;1;use_def_analysis.dl [474:5-477:62];stack_def_use.def_used(EA_def,VarDef,EA_used,VarUsed,Index) :- \\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,Var),\\n   stack_def_use.live_var_def(Block,VarDef,Var,EA_def),\\n   stack_def_use.live_var_used(BlockUsed,Var,VarUsed,EA_used,Index,_). .plan 1:(3,1,2);"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY stack_def_use.live_var_def)) (NOT (ISEMPTY @delta_stack_def_use.live_var_used))) (NOT (ISEMPTY stack_def_use.live_var_at_block_end)))
          (FOR_IN t0 @delta_stack_def_use.live_var_used            (FOR t1 stack_def_use.live_var_at_block_end (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 1)))
            (FOR t2 stack_def_use.live_var_def (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 2) (TUPLE t0 1)))
             (IF (NOT (EXISTS stack_def_use.def_used ((TUPLE t2 3) (TUPLE t2 1) (TUPLE t0 3) (TUPLE t0 2) (TUPLE t0 4))))
              (INSERT ((TUPLE t2 3) (TUPLE t2 1) (TUPLE t0 3) (TUPLE t0 2) (TUPLE t0 4)) @new_stack_def_use.def_used)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.def_used(EA_def,DefVar,EA_used,UsedVar,Index) :- \n   stack_def_use.live_var_used_in_block(_,EA,DefVar,UsedVar,EA_used,Index,_),\n   may_fallthrough(EA_def,EA),\n   code_in_block(EA_def,Block),\n   code_in_block(EA,Block),\n   stack_def_use.def(EA_def,DefVar).\nin file use_def_analysis.dl [482:5-487:28]" 
       (TIMER_ON @new_stack_def_use.def_used "@t-recursive-rule;stack_def_use.def_used;0;use_def_analysis.dl [482:5-487:28];stack_def_use.def_used(EA_def,DefVar,EA_used,UsedVar,Index) :- \\n   stack_def_use.live_var_used_in_block(_,EA,DefVar,UsedVar,EA_used,Index,_),\\n   may_fallthrough(EA_def,EA),\\n   code_in_block(EA_def,Block),\\n   code_in_block(EA,Block),\\n   stack_def_use.def(EA_def,DefVar).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY may_fallthrough))) (NOT (ISEMPTY @delta_stack_def_use.live_var_used_in_block))) (NOT (ISEMPTY stack_def_use.def)))
          (FOR_IN t0 @delta_stack_def_use.live_var_used_in_block            (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (AND (EXISTS stack_def_use.def ((TUPLE t1 0) (TUPLE t0 2))) (NOT (EXISTS stack_def_use.def_used ((TUPLE t1 0) (TUPLE t0 2) (TUPLE t0 4) (TUPLE t0 3) (TUPLE t0 5)))))
             (INDEXED_IF_EXISTS t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (EXISTS code_in_block ((TUPLE t0 1) (TUPLE t2 1)))
              (INSERT ((TUPLE t1 0) (TUPLE t0 2) (TUPLE t0 4) (TUPLE t0 3) (TUPLE t0 5)) @new_stack_def_use.def_used)
)            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.def_used(EA_def,VarDef,Next_EA_used,VarUsed,NextIndex) :- \n   stack_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\n   stack_def_use.def_used(EA_def,VarDef,EA_used,Var,_),\n   stack_def_use.live_var_used(NextUsedBlock,Var,VarUsed,Next_EA_used,NextIndex,_).\nin file use_def_analysis.dl [490:5-493:75]" 
       (TIMER_ON @new_stack_def_use.def_used "@t-recursive-rule;stack_def_use.def_used;0;use_def_analysis.dl [490:5-493:75];stack_def_use.def_used(EA_def,VarDef,Next_EA_used,VarUsed,NextIndex) :- \\n   stack_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\\n   stack_def_use.def_used(EA_def,VarDef,EA_used,Var,_),\\n   stack_def_use.live_var_used(NextUsedBlock,Var,VarUsed,Next_EA_used,NextIndex,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY stack_def_use.live_var_used)) (NOT (ISEMPTY @delta_stack_def_use.live_var_at_prior_used))) (NOT (ISEMPTY stack_def_use.def_used)))
          (FOR_IN t0 @delta_stack_def_use.live_var_at_prior_used            (FOR t1 stack_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 2)))
            (IF (NOT (EXISTS @delta_stack_def_use.def_used ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 2) UNDEF)))
             (FOR t2 stack_def_use.live_var_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (TUPLE t0 2)))
              (IF (AND (NOT (EXISTS stack_def_use.def_used ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 3) (TUPLE t2 2) (TUPLE t2 4)))) (NOT (EXISTS @delta_stack_def_use.live_var_used ((TUPLE t0 1) (TUPLE t0 2) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t2 4) UNDEF))))
               (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 3) (TUPLE t2 2) (TUPLE t2 4)) @new_stack_def_use.def_used)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.def_used(EA_def,VarDef,Next_EA_used,VarUsed,NextIndex) :- \n   stack_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\n   stack_def_use.def_used(EA_def,VarDef,EA_used,Var,_),\n   stack_def_use.live_var_used(NextUsedBlock,Var,VarUsed,Next_EA_used,NextIndex,_).\nin file use_def_analysis.dl [490:5-493:75]" 
       (TIMER_ON @new_stack_def_use.def_used "@t-recursive-rule;stack_def_use.def_used;1;use_def_analysis.dl [490:5-493:75];stack_def_use.def_used(EA_def,VarDef,Next_EA_used,VarUsed,NextIndex) :- \\n   stack_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\\n   stack_def_use.def_used(EA_def,VarDef,EA_used,Var,_),\\n   stack_def_use.live_var_used(NextUsedBlock,Var,VarUsed,Next_EA_used,NextIndex,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY stack_def_use.live_var_used)) (NOT (ISEMPTY stack_def_use.live_var_at_prior_used))) (NOT (ISEMPTY @delta_stack_def_use.def_used)))
          (FOR_IN t0 stack_def_use.live_var_at_prior_used            (FOR t1 @delta_stack_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 2)))
            (FOR t2 stack_def_use.live_var_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (TUPLE t0 2)))
             (IF (AND (NOT (EXISTS stack_def_use.def_used ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 3) (TUPLE t2 2) (TUPLE t2 4)))) (NOT (EXISTS @delta_stack_def_use.live_var_used ((TUPLE t0 1) (TUPLE t0 2) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t2 4) UNDEF))))
              (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 3) (TUPLE t2 2) (TUPLE t2 4)) @new_stack_def_use.def_used)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.def_used(EA_def,VarDef,Next_EA_used,VarUsed,NextIndex) :- \n   stack_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\n   stack_def_use.def_used(EA_def,VarDef,EA_used,Var,_),\n   stack_def_use.live_var_used(NextUsedBlock,Var,VarUsed,Next_EA_used,NextIndex,_).\nin file use_def_analysis.dl [490:5-493:75]" 
       (TIMER_ON @new_stack_def_use.def_used "@t-recursive-rule;stack_def_use.def_used;2;use_def_analysis.dl [490:5-493:75];stack_def_use.def_used(EA_def,VarDef,Next_EA_used,VarUsed,NextIndex) :- \\n   stack_def_use.live_var_at_prior_used(EA_used,NextUsedBlock,Var),\\n   stack_def_use.def_used(EA_def,VarDef,EA_used,Var,_),\\n   stack_def_use.live_var_used(NextUsedBlock,Var,VarUsed,Next_EA_used,NextIndex,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_stack_def_use.live_var_used)) (NOT (ISEMPTY stack_def_use.live_var_at_prior_used))) (NOT (ISEMPTY stack_def_use.def_used)))
          (FOR_IN t0 stack_def_use.live_var_at_prior_used            (FOR t1 stack_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 2)))
            (FOR t2 @delta_stack_def_use.live_var_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (TUPLE t0 2)))
             (IF (NOT (EXISTS stack_def_use.def_used ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 3) (TUPLE t2 2) (TUPLE t2 4))))
              (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 3) (TUPLE t2 2) (TUPLE t2 4)) @new_stack_def_use.def_used)
             ))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_stack_def_use.live_var_at_block_end "@t-recursive-relation;stack_def_use.live_var_at_block_end;use_def_analysis.dl [253:11-253:32];"
(STMTS (STMTS (STMTS       (DEBUG 
 "stack_def_use.live_var_at_block_end(PrevBlock,BlockUsed,[<inlined_BaseReg_362>,<inlined_StackPos_362>]) :- \n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[<inlined_BaseReg_362>,<inlined_StackPos_362>]),\n   !stack_def_use.ref_in_block(Block,[<inlined_BaseReg_362>,<inlined_StackPos_362>]),\n   !reg_def_use.defined_in_block(Block,<inlined_BaseReg_362>),\n   block_next(PrevBlock,_,Block). .plan 1:(2,1)\nin file use_def_analysis.dl [262:5-266:39]" 
       (TIMER_ON @new_stack_def_use.live_var_at_block_end "@t-recursive-rule;stack_def_use.live_var_at_block_end;0;use_def_analysis.dl [262:5-266:39];stack_def_use.live_var_at_block_end(PrevBlock,BlockUsed,[<inlined_BaseReg_362>,<inlined_StackPos_362>]) :- \\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[<inlined_BaseReg_362>,<inlined_StackPos_362>]),\\n   !stack_def_use.ref_in_block(Block,[<inlined_BaseReg_362>,<inlined_StackPos_362>]),\\n   !reg_def_use.defined_in_block(Block,<inlined_BaseReg_362>),\\n   block_next(PrevBlock,_,Block). .plan 1:(2,1);"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_stack_def_use.live_var_at_block_end)) (NOT (ISEMPTY block_next)))
          (FOR_IN t0 @delta_stack_def_use.live_var_at_block_end            (UNPACK t1 2 ((TUPLE t0 2))
            (IF (AND (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t0 0) (TUPLE t1 0)))) (NOT (EXISTS stack_def_use.ref_in_block ((TUPLE t0 0) (PACK (TUPLE t1 0) (TUPLE t1 1))))))
             (FOR t2 block_next (INDEX  (= (TUPLE t2 2) (TUPLE t0 0)))
              (IF (AND (NOT (EXISTS stack_def_use.live_var_at_block_end ((TUPLE t2 0) (TUPLE t0 1) (PACK (TUPLE t1 0) (TUPLE t1 1))))) (NOT (EXISTS @delta_block_next ((TUPLE t2 0) UNDEF (TUPLE t0 0)))))
               (INSERT ((TUPLE t2 0) (TUPLE t0 1) (PACK (TUPLE t1 0) (TUPLE t1 1))) @new_stack_def_use.live_var_at_block_end)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.live_var_at_block_end(PrevBlock,BlockUsed,[<inlined_BaseReg_362>,<inlined_StackPos_362>]) :- \n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[<inlined_BaseReg_362>,<inlined_StackPos_362>]),\n   !stack_def_use.ref_in_block(Block,[<inlined_BaseReg_362>,<inlined_StackPos_362>]),\n   !reg_def_use.defined_in_block(Block,<inlined_BaseReg_362>),\n   block_next(PrevBlock,_,Block). .plan 1:(2,1)\nin file use_def_analysis.dl [262:5-266:39]" 
       (TIMER_ON @new_stack_def_use.live_var_at_block_end "@t-recursive-rule;stack_def_use.live_var_at_block_end;1;use_def_analysis.dl [262:5-266:39];stack_def_use.live_var_at_block_end(PrevBlock,BlockUsed,[<inlined_BaseReg_362>,<inlined_StackPos_362>]) :- \\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[<inlined_BaseReg_362>,<inlined_StackPos_362>]),\\n   !stack_def_use.ref_in_block(Block,[<inlined_BaseReg_362>,<inlined_StackPos_362>]),\\n   !reg_def_use.defined_in_block(Block,<inlined_BaseReg_362>),\\n   block_next(PrevBlock,_,Block). .plan 1:(2,1);"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_block_next)) (NOT (ISEMPTY stack_def_use.live_var_at_block_end)))
          (FOR_IN t0 @delta_block_next            (FOR t1 stack_def_use.live_var_at_block_end (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (UNPACK t2 2 ((TUPLE t1 2))
             (IF (AND (AND (NOT (EXISTS stack_def_use.ref_in_block ((TUPLE t0 2) (PACK (TUPLE t2 0) (TUPLE t2 1))))) (NOT (EXISTS stack_def_use.live_var_at_block_end ((TUPLE t0 0) (TUPLE t1 1) (PACK (TUPLE t2 0) (TUPLE t2 1)))))) (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t0 2) (TUPLE t2 0)))))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (PACK (TUPLE t2 0) (TUPLE t2 1))) @new_stack_def_use.live_var_at_block_end)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.live_var_at_block_end(PrevBlock,Block,Var) :- \n   block_next(PrevBlock,_,Block),\n   stack_def_use.live_var_used(Block,Var,_,_,_,_).\nin file use_def_analysis.dl [256:5-259:45]" 
       (TIMER_ON @new_stack_def_use.live_var_at_block_end "@t-recursive-rule;stack_def_use.live_var_at_block_end;0;use_def_analysis.dl [256:5-259:45];stack_def_use.live_var_at_block_end(PrevBlock,Block,Var) :- \\n   block_next(PrevBlock,_,Block),\\n   stack_def_use.live_var_used(Block,Var,_,_,_,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_block_next)) (NOT (ISEMPTY stack_def_use.live_var_used)))
          (FOR_IN t0 @delta_block_next            (FOR t1 stack_def_use.live_var_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (IF (AND (NOT (EXISTS stack_def_use.live_var_at_block_end ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t1 1)))) (NOT (EXISTS @delta_stack_def_use.live_var_used ((TUPLE t0 2) (TUPLE t1 1) UNDEF UNDEF UNDEF UNDEF))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t1 1)) @new_stack_def_use.live_var_at_block_end)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.live_var_at_block_end(PrevBlock,Block,Var) :- \n   block_next(PrevBlock,_,Block),\n   stack_def_use.live_var_used(Block,Var,_,_,_,_).\nin file use_def_analysis.dl [256:5-259:45]" 
       (TIMER_ON @new_stack_def_use.live_var_at_block_end "@t-recursive-rule;stack_def_use.live_var_at_block_end;1;use_def_analysis.dl [256:5-259:45];stack_def_use.live_var_at_block_end(PrevBlock,Block,Var) :- \\n   block_next(PrevBlock,_,Block),\\n   stack_def_use.live_var_used(Block,Var,_,_,_,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY block_next)) (NOT (ISEMPTY @delta_stack_def_use.live_var_used)))
          (FOR_IN t0 block_next            (FOR t1 @delta_stack_def_use.live_var_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (IF (NOT (EXISTS stack_def_use.live_var_at_block_end ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t1 1))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t1 1)) @new_stack_def_use.live_var_at_block_end)
            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_stack_def_use.live_var_at_prior_used "@t-recursive-relation;stack_def_use.live_var_at_prior_used;use_def_analysis.dl [280:11-280:33];"
(STMTS       (DEBUG 
 "stack_def_use.live_var_at_prior_used(EA_used,BlockUsed,Var) :- \n   stack_def_use.live_var_at_block_end(Block,BlockUsed,Var),\n   stack_def_use.used_in_block(Block,EA_used,Var,_),\n   !stack_def_use.defined_in_block(Block,Var).\nin file use_def_analysis.dl [282:5-291:38]" 
       (TIMER_ON @new_stack_def_use.live_var_at_prior_used "@t-recursive-rule;stack_def_use.live_var_at_prior_used;0;use_def_analysis.dl [282:5-291:38];stack_def_use.live_var_at_prior_used(EA_used,BlockUsed,Var) :- \\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,Var),\\n   stack_def_use.used_in_block(Block,EA_used,Var,_),\\n   !stack_def_use.defined_in_block(Block,Var).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_stack_def_use.live_var_at_block_end)) (NOT (ISEMPTY stack_def_use.used_in_block)))
          (FOR_IN t0 @delta_stack_def_use.live_var_at_block_end            (IF (NOT (EXISTS stack_def_use.defined_in_block ((TUPLE t0 0) (TUPLE t0 2))))
            (FOR t1 stack_def_use.used_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 2)))
             (IF (NOT (EXISTS stack_def_use.live_var_at_prior_used ((TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 2))))
              (INSERT ((TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 2)) @new_stack_def_use.live_var_at_prior_used)
             ))           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_stack_def_use.live_var_used "@t-recursive-relation;stack_def_use.live_var_used;use_def_analysis.dl [229:11-229:24];"
(STMTS       (DEBUG 
 "stack_def_use.live_var_used(Block,LiveVar,UsedVar,EA_used,Index,Moves) :- \n   stack_def_use.live_var_used_in_block(Block,Block,LiveVar,UsedVar,EA_used,Index,Moves).\nin file use_def_analysis.dl [541:5-542:81]" 
       (TIMER_ON @new_stack_def_use.live_var_used "@t-recursive-rule;stack_def_use.live_var_used;0;use_def_analysis.dl [541:5-542:81];stack_def_use.live_var_used(Block,LiveVar,UsedVar,EA_used,Index,Moves) :- \\n   stack_def_use.live_var_used_in_block(Block,Block,LiveVar,UsedVar,EA_used,Index,Moves).;"
(QUERY
         (IF (NOT (ISEMPTY @delta_stack_def_use.live_var_used_in_block))
          (FOR_IN t0 @delta_stack_def_use.live_var_used_in_block            (IF (AND (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 1)) (NOT (EXISTS stack_def_use.live_var_used ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @new_stack_def_use.live_var_used)
           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_stack_def_use.live_var_used_in_block "@t-recursive-relation;stack_def_use.live_var_used_in_block;use_def_analysis.dl [498:11-498:33];"
(STMTS (STMTS (STMTS       (DEBUG 
 "stack_def_use.live_var_used_in_block(Block,NextEA,[BaseReg,StackPos],VarUsed,EA_used,Index,(Moves+1)) :- \n   adjusts_stack_in_block(Block,_,BaseReg,_),\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[BaseReg,StackPos]),\n   stack_def_use.live_var_used(BlockUsed,[BaseReg,StackPos],VarUsed,EA_used,Index,Moves),\n   Moves <= 1,\n   block_last_instruction(Block,LastEA),\n   next(LastEA,NextEA).\nin file use_def_analysis.dl [506:5-515:29]" 
       (TIMER_ON @new_stack_def_use.live_var_used_in_block "@t-recursive-rule;stack_def_use.live_var_used_in_block;0;use_def_analysis.dl [506:5-515:29];stack_def_use.live_var_used_in_block(Block,NextEA,[BaseReg,StackPos],VarUsed,EA_used,Index,(Moves+1)) :- \\n   adjusts_stack_in_block(Block,_,BaseReg,_),\\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[BaseReg,StackPos]),\\n   stack_def_use.live_var_used(BlockUsed,[BaseReg,StackPos],VarUsed,EA_used,Index,Moves),\\n   Moves <= 1,\\n   block_last_instruction(Block,LastEA),\\n   next(LastEA,NextEA).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY next)) (NOT (ISEMPTY adjusts_stack_in_block))) (NOT (ISEMPTY stack_def_use.live_var_used))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY @delta_stack_def_use.live_var_at_block_end)))
          (FOR_IN t0 adjusts_stack_in_block            (FOR t1 @delta_stack_def_use.live_var_at_block_end (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (UNPACK t2 2 ((TUPLE t1 2))
             (IF (CONSTRAINT = (TUPLE t0 2)  (TUPLE t2 0))
              (FOR t3 stack_def_use.live_var_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 1)))
               (IF (AND (CONSTRAINT <= (TUPLE t3 5)  (UNSIGNED 1)) (NOT (EXISTS @delta_stack_def_use.live_var_used ((TUPLE t1 1) (PACK (TUPLE t0 2) (TUPLE t2 1)) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (TUPLE t3 5)))))
                (UNPACK t4 2 ((TUPLE t3 1))
                 (IF (AND (CONSTRAINT = (TUPLE t2 1)  (TUPLE t4 1)) (CONSTRAINT = (TUPLE t0 2)  (TUPLE t4 0)))
                  (FOR t5 block_last_instruction (INDEX  (= (TUPLE t5 0) (TUPLE t0 0)))
                   (FOR t6 next (INDEX  (= (TUPLE t6 0) (TUPLE t5 1)))
                    (IF (NOT (EXISTS stack_def_use.live_var_used_in_block ((TUPLE t0 0) (TUPLE t6 1) (PACK (TUPLE t0 2) (TUPLE t2 1)) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (TUPLE t3 5) (UNSIGNED 1)))))
                     (INSERT ((TUPLE t0 0) (TUPLE t6 1) (PACK (TUPLE t0 2) (TUPLE t2 1)) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (TUPLE t3 5) (UNSIGNED 1))) @new_stack_def_use.live_var_used_in_block)
                    )))                 ))               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.live_var_used_in_block(Block,NextEA,[BaseReg,StackPos],VarUsed,EA_used,Index,(Moves+1)) :- \n   adjusts_stack_in_block(Block,_,BaseReg,_),\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[BaseReg,StackPos]),\n   stack_def_use.live_var_used(BlockUsed,[BaseReg,StackPos],VarUsed,EA_used,Index,Moves),\n   Moves <= 1,\n   block_last_instruction(Block,LastEA),\n   next(LastEA,NextEA).\nin file use_def_analysis.dl [506:5-515:29]" 
       (TIMER_ON @new_stack_def_use.live_var_used_in_block "@t-recursive-rule;stack_def_use.live_var_used_in_block;1;use_def_analysis.dl [506:5-515:29];stack_def_use.live_var_used_in_block(Block,NextEA,[BaseReg,StackPos],VarUsed,EA_used,Index,(Moves+1)) :- \\n   adjusts_stack_in_block(Block,_,BaseReg,_),\\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[BaseReg,StackPos]),\\n   stack_def_use.live_var_used(BlockUsed,[BaseReg,StackPos],VarUsed,EA_used,Index,Moves),\\n   Moves <= 1,\\n   block_last_instruction(Block,LastEA),\\n   next(LastEA,NextEA).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY next)) (NOT (ISEMPTY adjusts_stack_in_block))) (NOT (ISEMPTY @delta_stack_def_use.live_var_used))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY stack_def_use.live_var_at_block_end)))
          (FOR_IN t0 adjusts_stack_in_block            (FOR t1 stack_def_use.live_var_at_block_end (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (UNPACK t2 2 ((TUPLE t1 2))
             (IF (CONSTRAINT = (TUPLE t0 2)  (TUPLE t2 0))
              (FOR t3 @delta_stack_def_use.live_var_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 1)))
               (IF (CONSTRAINT <= (TUPLE t3 5)  (UNSIGNED 1))
                (UNPACK t4 2 ((TUPLE t3 1))
                 (IF (AND (CONSTRAINT = (TUPLE t2 1)  (TUPLE t4 1)) (CONSTRAINT = (TUPLE t0 2)  (TUPLE t4 0)))
                  (FOR t5 block_last_instruction (INDEX  (= (TUPLE t5 0) (TUPLE t0 0)))
                   (FOR t6 next (INDEX  (= (TUPLE t6 0) (TUPLE t5 1)))
                    (IF (NOT (EXISTS stack_def_use.live_var_used_in_block ((TUPLE t0 0) (TUPLE t6 1) (PACK (TUPLE t0 2) (TUPLE t2 1)) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (TUPLE t3 5) (UNSIGNED 1)))))
                     (INSERT ((TUPLE t0 0) (TUPLE t6 1) (PACK (TUPLE t0 2) (TUPLE t2 1)) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (TUPLE t3 5) (UNSIGNED 1))) @new_stack_def_use.live_var_used_in_block)
                    )))                 ))               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.live_var_used_in_block(Block,NextEA,[BaseReg,StackPos],VarUsed,EA_used,Index,(Moves+1)) :- \n   stack_base_reg_move(Block,_,_,BaseReg),\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[BaseReg,StackPos]),\n   stack_def_use.live_var_used(BlockUsed,[BaseReg,StackPos],VarUsed,EA_used,Index,Moves),\n   Moves <= 1,\n   block_last_instruction(Block,LastEA),\n   next(LastEA,NextEA).\nin file use_def_analysis.dl [506:5-515:29]" 
       (TIMER_ON @new_stack_def_use.live_var_used_in_block "@t-recursive-rule;stack_def_use.live_var_used_in_block;0;use_def_analysis.dl [506:5-515:29];stack_def_use.live_var_used_in_block(Block,NextEA,[BaseReg,StackPos],VarUsed,EA_used,Index,(Moves+1)) :- \\n   stack_base_reg_move(Block,_,_,BaseReg),\\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[BaseReg,StackPos]),\\n   stack_def_use.live_var_used(BlockUsed,[BaseReg,StackPos],VarUsed,EA_used,Index,Moves),\\n   Moves <= 1,\\n   block_last_instruction(Block,LastEA),\\n   next(LastEA,NextEA).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY next)) (NOT (ISEMPTY stack_base_reg_move))) (NOT (ISEMPTY stack_def_use.live_var_used))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY @delta_stack_def_use.live_var_at_block_end)))
          (FOR_IN t0 stack_base_reg_move            (FOR t1 @delta_stack_def_use.live_var_at_block_end (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (UNPACK t2 2 ((TUPLE t1 2))
             (IF (CONSTRAINT = (TUPLE t0 3)  (TUPLE t2 0))
              (FOR t3 stack_def_use.live_var_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 1)))
               (IF (AND (CONSTRAINT <= (TUPLE t3 5)  (UNSIGNED 1)) (NOT (EXISTS @delta_stack_def_use.live_var_used ((TUPLE t1 1) (PACK (TUPLE t0 3) (TUPLE t2 1)) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (TUPLE t3 5)))))
                (UNPACK t4 2 ((TUPLE t3 1))
                 (IF (AND (CONSTRAINT = (TUPLE t2 1)  (TUPLE t4 1)) (CONSTRAINT = (TUPLE t0 3)  (TUPLE t4 0)))
                  (FOR t5 block_last_instruction (INDEX  (= (TUPLE t5 0) (TUPLE t0 0)))
                   (FOR t6 next (INDEX  (= (TUPLE t6 0) (TUPLE t5 1)))
                    (IF (NOT (EXISTS stack_def_use.live_var_used_in_block ((TUPLE t0 0) (TUPLE t6 1) (PACK (TUPLE t0 3) (TUPLE t2 1)) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (TUPLE t3 5) (UNSIGNED 1)))))
                     (INSERT ((TUPLE t0 0) (TUPLE t6 1) (PACK (TUPLE t0 3) (TUPLE t2 1)) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (TUPLE t3 5) (UNSIGNED 1))) @new_stack_def_use.live_var_used_in_block)
                    )))                 ))               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.live_var_used_in_block(Block,NextEA,[BaseReg,StackPos],VarUsed,EA_used,Index,(Moves+1)) :- \n   stack_base_reg_move(Block,_,_,BaseReg),\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[BaseReg,StackPos]),\n   stack_def_use.live_var_used(BlockUsed,[BaseReg,StackPos],VarUsed,EA_used,Index,Moves),\n   Moves <= 1,\n   block_last_instruction(Block,LastEA),\n   next(LastEA,NextEA).\nin file use_def_analysis.dl [506:5-515:29]" 
       (TIMER_ON @new_stack_def_use.live_var_used_in_block "@t-recursive-rule;stack_def_use.live_var_used_in_block;1;use_def_analysis.dl [506:5-515:29];stack_def_use.live_var_used_in_block(Block,NextEA,[BaseReg,StackPos],VarUsed,EA_used,Index,(Moves+1)) :- \\n   stack_base_reg_move(Block,_,_,BaseReg),\\n   stack_def_use.live_var_at_block_end(Block,BlockUsed,[BaseReg,StackPos]),\\n   stack_def_use.live_var_used(BlockUsed,[BaseReg,StackPos],VarUsed,EA_used,Index,Moves),\\n   Moves <= 1,\\n   block_last_instruction(Block,LastEA),\\n   next(LastEA,NextEA).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY next)) (NOT (ISEMPTY stack_base_reg_move))) (NOT (ISEMPTY @delta_stack_def_use.live_var_used))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY stack_def_use.live_var_at_block_end)))
          (FOR_IN t0 stack_base_reg_move            (FOR t1 stack_def_use.live_var_at_block_end (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (UNPACK t2 2 ((TUPLE t1 2))
             (IF (CONSTRAINT = (TUPLE t0 3)  (TUPLE t2 0))
              (FOR t3 @delta_stack_def_use.live_var_used (INDEX  (= (TUPLE t3 0) (TUPLE t1 1)))
               (IF (CONSTRAINT <= (TUPLE t3 5)  (UNSIGNED 1))
                (UNPACK t4 2 ((TUPLE t3 1))
                 (IF (AND (CONSTRAINT = (TUPLE t2 1)  (TUPLE t4 1)) (CONSTRAINT = (TUPLE t0 3)  (TUPLE t4 0)))
                  (FOR t5 block_last_instruction (INDEX  (= (TUPLE t5 0) (TUPLE t0 0)))
                   (FOR t6 next (INDEX  (= (TUPLE t6 0) (TUPLE t5 1)))
                    (IF (NOT (EXISTS stack_def_use.live_var_used_in_block ((TUPLE t0 0) (TUPLE t6 1) (PACK (TUPLE t0 3) (TUPLE t2 1)) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (TUPLE t3 5) (UNSIGNED 1)))))
                     (INSERT ((TUPLE t0 0) (TUPLE t6 1) (PACK (TUPLE t0 3) (TUPLE t2 1)) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (TUPLE t3 5) (UNSIGNED 1))) @new_stack_def_use.live_var_used_in_block)
                    )))                 ))               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.live_var_used_in_block(Block,EA,[BaseReg,StackPos],[BaseReg,StackPos],EA_used,Index,Moves) :- \n   stack_def_use.live_var_used_in_block(Block,Next,[BaseReg,StackPos],[BaseReg,StackPos],EA_used,Index,Moves),\n   block_instruction_next(Block,EA,Next),\n   !reg_def_use.def(EA,BaseReg),\n   !stack_def_use.def(EA,[BaseReg,StackPos]).\nin file use_def_analysis.dl [518:5-522:37]" 
       (TIMER_ON @new_stack_def_use.live_var_used_in_block "@t-recursive-rule;stack_def_use.live_var_used_in_block;0;use_def_analysis.dl [518:5-522:37];stack_def_use.live_var_used_in_block(Block,EA,[BaseReg,StackPos],[BaseReg,StackPos],EA_used,Index,Moves) :- \\n   stack_def_use.live_var_used_in_block(Block,Next,[BaseReg,StackPos],[BaseReg,StackPos],EA_used,Index,Moves),\\n   block_instruction_next(Block,EA,Next),\\n   !reg_def_use.def(EA,BaseReg),\\n   !stack_def_use.def(EA,[BaseReg,StackPos]).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_stack_def_use.live_var_used_in_block)) (NOT (ISEMPTY block_instruction_next)))
          (FOR_IN t0 @delta_stack_def_use.live_var_used_in_block            (UNPACK t1 2 ((TUPLE t0 2))
            (UNPACK t2 2 ((TUPLE t0 3))
             (IF (AND (CONSTRAINT = (TUPLE t1 1)  (TUPLE t2 1)) (CONSTRAINT = (TUPLE t1 0)  (TUPLE t2 0)))
              (FOR t3 block_instruction_next (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 2) (TUPLE t0 1)))
               (IF (AND (AND (NOT (EXISTS stack_def_use.live_var_used_in_block ((TUPLE t0 0) (TUPLE t3 1) (PACK (TUPLE t1 0) (TUPLE t1 1)) (PACK (TUPLE t1 0) (TUPLE t1 1)) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)))) (NOT (EXISTS reg_def_use.def ((TUPLE t3 1) (TUPLE t1 0))))) (NOT (EXISTS stack_def_use.def ((TUPLE t3 1) (PACK (TUPLE t1 0) (TUPLE t1 1))))))
                (INSERT ((TUPLE t0 0) (TUPLE t3 1) (PACK (TUPLE t1 0) (TUPLE t1 1)) (PACK (TUPLE t1 0) (TUPLE t1 1)) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @new_stack_def_use.live_var_used_in_block)
               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.live_var_used_in_block(Block,EA,[BaseReg,(StackPos+Offset)],UsedVar,EA_used,Index,Moves) :- \n   stack_def_use.live_var_used_in_block(Block,Next,[BaseReg,StackPos],UsedVar,EA_used,Index,Moves),\n   block_instruction_next(Block,EA,Next),\n   adjusts_stack_in_block(_,EA,BaseReg,Offset).\nin file use_def_analysis.dl [525:5-528:53]" 
       (TIMER_ON @new_stack_def_use.live_var_used_in_block "@t-recursive-rule;stack_def_use.live_var_used_in_block;0;use_def_analysis.dl [525:5-528:53];stack_def_use.live_var_used_in_block(Block,EA,[BaseReg,(StackPos+Offset)],UsedVar,EA_used,Index,Moves) :- \\n   stack_def_use.live_var_used_in_block(Block,Next,[BaseReg,StackPos],UsedVar,EA_used,Index,Moves),\\n   block_instruction_next(Block,EA,Next),\\n   adjusts_stack_in_block(_,EA,BaseReg,Offset).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY adjusts_stack_in_block)) (NOT (ISEMPTY @delta_stack_def_use.live_var_used_in_block))) (NOT (ISEMPTY block_instruction_next)))
          (FOR_IN t0 @delta_stack_def_use.live_var_used_in_block            (UNPACK t1 2 ((TUPLE t0 2))
            (FOR t2 block_instruction_next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 2) (TUPLE t0 1)))
             (FOR t3 adjusts_stack_in_block (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)) (= (TUPLE t3 2) (TUPLE t1 0)))
              (IF (NOT (EXISTS stack_def_use.live_var_used_in_block ((TUPLE t0 0) (TUPLE t2 1) (PACK (TUPLE t1 0) (INTRINSIC + (TUPLE t1 1) (TUPLE t3 3))) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6))))
               (INSERT ((TUPLE t0 0) (TUPLE t2 1) (PACK (TUPLE t1 0) (INTRINSIC + (TUPLE t1 1) (TUPLE t3 3))) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @new_stack_def_use.live_var_used_in_block)
              )))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.live_var_used_in_block(Block,EA,[SrcBaseReg,StackPos],UsedVar,EA_used,Index,Moves) :- \n   stack_def_use.live_var_used_in_block(Block,Next,[DstBaseReg,StackPos],UsedVar,EA_used,Index,Moves),\n   block_instruction_next(Block,EA,Next),\n   stack_base_reg_move(_,EA,SrcBaseReg,DstBaseReg).\nin file use_def_analysis.dl [533:5-536:57]" 
       (TIMER_ON @new_stack_def_use.live_var_used_in_block "@t-recursive-rule;stack_def_use.live_var_used_in_block;0;use_def_analysis.dl [533:5-536:57];stack_def_use.live_var_used_in_block(Block,EA,[SrcBaseReg,StackPos],UsedVar,EA_used,Index,Moves) :- \\n   stack_def_use.live_var_used_in_block(Block,Next,[DstBaseReg,StackPos],UsedVar,EA_used,Index,Moves),\\n   block_instruction_next(Block,EA,Next),\\n   stack_base_reg_move(_,EA,SrcBaseReg,DstBaseReg).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY stack_base_reg_move)) (NOT (ISEMPTY @delta_stack_def_use.live_var_used_in_block))) (NOT (ISEMPTY block_instruction_next)))
          (FOR_IN t0 @delta_stack_def_use.live_var_used_in_block            (UNPACK t1 2 ((TUPLE t0 2))
            (FOR t2 block_instruction_next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 2) (TUPLE t0 1)))
             (FOR t3 stack_base_reg_move (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)) (= (TUPLE t3 3) (TUPLE t1 0)))
              (IF (NOT (EXISTS stack_def_use.live_var_used_in_block ((TUPLE t0 0) (TUPLE t2 1) (PACK (TUPLE t3 2) (TUPLE t1 1)) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6))))
               (INSERT ((TUPLE t0 0) (TUPLE t2 1) (PACK (TUPLE t3 2) (TUPLE t1 1)) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @new_stack_def_use.live_var_used_in_block)
              )))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_tls_desc_call "@t-recursive-relation;tls_desc_call;tls.dl [286:7-286:20];"
(STMTS (STMTS (STMTS       (DEBUG 
 "tls_desc_call(Load,Call,(Start+Offset)) :- \n   tls_segment(Start,_,_),\n   tls_descriptor(EA,Offset),\n   pc_relative_operand(Load,_,EA),\n   arch.call(Call,_),\n   const_value_reg_used(Call,Load,_,_, _tmp_137),\n    _tmp_137 = as(EA, number).\nin file tls.dl [288:1-297:27]" 
       (TIMER_ON @new_tls_desc_call "@t-recursive-rule;tls_desc_call;0;tls.dl [288:1-297:27];tls_desc_call(Load,Call,(Start+Offset)) :- \\n   tls_segment(Start,_,_),\\n   tls_descriptor(EA,Offset),\\n   pc_relative_operand(Load,_,EA),\\n   arch.call(Call,_),\\n   const_value_reg_used(Call,Load,_,_, _tmp_137),\\n    _tmp_137 = as(EA, number).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_const_value_reg_used)) (NOT (ISEMPTY tls_segment))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY arch.call))) (NOT (ISEMPTY tls_descriptor)))
          (FOR_IN t0 tls_segment            (FOR_IN t1 tls_descriptor             (FOR t2 pc_relative_operand (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (FOR_IN t3 arch.call               (IF (AND (EXISTS @delta_const_value_reg_used ((TUPLE t3 0) (TUPLE t2 0) UNDEF UNDEF (TUPLE t1 0))) (NOT (EXISTS tls_desc_call ((TUPLE t2 0) (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1))))))
               (INSERT ((TUPLE t2 0) (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1))) @new_tls_desc_call)
              ))
))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "tls_desc_call(Load,Call,(Start+Offset)) :- \n   tls_segment(Start,_,_),\n   tls_descriptor(EA,Offset),\n   got_relative_operand(Load,_,EA),\n   arch.call(Call,_),\n   const_value_reg_used(Call,Load,_,_, _tmp_138),\n    _tmp_138 = as(EA, number).\nin file tls.dl [288:1-297:27]" 
       (TIMER_ON @new_tls_desc_call "@t-recursive-rule;tls_desc_call;0;tls.dl [288:1-297:27];tls_desc_call(Load,Call,(Start+Offset)) :- \\n   tls_segment(Start,_,_),\\n   tls_descriptor(EA,Offset),\\n   got_relative_operand(Load,_,EA),\\n   arch.call(Call,_),\\n   const_value_reg_used(Call,Load,_,_, _tmp_138),\\n    _tmp_138 = as(EA, number).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY const_value_reg_used)) (NOT (ISEMPTY tls_segment))) (NOT (ISEMPTY @delta_got_relative_operand))) (NOT (ISEMPTY arch.call))) (NOT (ISEMPTY tls_descriptor)))
          (FOR_IN t0 tls_segment            (FOR_IN t1 tls_descriptor             (FOR t2 @delta_got_relative_operand (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (FOR_IN t3 arch.call               (IF (NOT (EXISTS tls_desc_call ((TUPLE t2 0) (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1)))))
               (INDEXED_IF_EXISTS t4 const_value_reg_used (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)) (= (TUPLE t4 1) (TUPLE t2 0)) (= (TUPLE t4 4) (TUPLE t1 0))) (NOT (EXISTS @delta_const_value_reg_used ((TUPLE t3 0) (TUPLE t2 0) UNDEF UNDEF (TUPLE t4 4))))
                (INSERT ((TUPLE t2 0) (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1))) @new_tls_desc_call)
)              ))
))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "tls_desc_call(Load,Call,(Start+Offset)) :- \n   tls_segment(Start,_,_),\n   tls_descriptor(EA,Offset),\n   got_relative_operand(Load,_,EA),\n   arch.call(Call,_),\n   const_value_reg_used(Call,Load,_,_, _tmp_138),\n    _tmp_138 = as(EA, number).\nin file tls.dl [288:1-297:27]" 
       (TIMER_ON @new_tls_desc_call "@t-recursive-rule;tls_desc_call;1;tls.dl [288:1-297:27];tls_desc_call(Load,Call,(Start+Offset)) :- \\n   tls_segment(Start,_,_),\\n   tls_descriptor(EA,Offset),\\n   got_relative_operand(Load,_,EA),\\n   arch.call(Call,_),\\n   const_value_reg_used(Call,Load,_,_, _tmp_138),\\n    _tmp_138 = as(EA, number).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_const_value_reg_used)) (NOT (ISEMPTY tls_segment))) (NOT (ISEMPTY got_relative_operand))) (NOT (ISEMPTY arch.call))) (NOT (ISEMPTY tls_descriptor)))
          (FOR_IN t0 tls_segment            (FOR_IN t1 tls_descriptor             (FOR t2 got_relative_operand (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (FOR_IN t3 arch.call               (IF (AND (EXISTS @delta_const_value_reg_used ((TUPLE t3 0) (TUPLE t2 0) UNDEF UNDEF (TUPLE t1 0))) (NOT (EXISTS tls_desc_call ((TUPLE t2 0) (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1))))))
               (INSERT ((TUPLE t2 0) (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1))) @new_tls_desc_call)
              ))
))
)
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_tls_get_addr "@t-recursive-relation;tls_get_addr;tls.dl [262:7-262:19];"
(STMTS       (DEBUG 
 "tls_get_addr(Load,Call,(Start+Offset)) :- \n   binary_format(\"ELF\"),\n   pc_relative_operand(Load,_,EA),\n   tls_index(EA,Offset),\n   reg_def_use.def_used(Load,Reg,Call,_),\n   call_tls_get_addr(Call,Reg),\n   tls_segment(Start,_,_).\nin file tls.dl [264:1-277:28]" 
       (TIMER_ON @new_tls_get_addr "@t-recursive-rule;tls_get_addr;0;tls.dl [264:1-277:28];tls_get_addr(Load,Call,(Start+Offset)) :- \\n   binary_format(\\\"ELF\\\"),\\n   pc_relative_operand(Load,_,EA),\\n   tls_index(EA,Offset),\\n   reg_def_use.def_used(Load,Reg,Call,_),\\n   call_tls_get_addr(Call,Reg),\\n   tls_segment(Start,_,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY tls_segment)) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY tls_index))) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY call_tls_get_addr))) (EXISTS binary_format ((STRING "ELF"))))
          (FOR_IN t0 pc_relative_operand            (FOR t1 tls_index (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (EXISTS call_tls_get_addr ((TUPLE t2 2) (TUPLE t2 1)))
              (FOR_IN t3 tls_segment                (IF (NOT (EXISTS tls_get_addr ((TUPLE t0 0) (TUPLE t2 2) (INTRINSIC + (TUPLE t3 0) (TUPLE t1 1)))))
                (INSERT ((TUPLE t0 0) (TUPLE t2 2) (INTRINSIC + (TUPLE t3 0) (TUPLE t1 1))) @new_tls_get_addr)
               ))
             ))))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_value_reg "@t-recursive-relation;value_reg;value_analysis.dl [63:7-63:16];"
(STMTS (STMTS (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,\"NONE\",0,Immediate,1) :- \n   def_used_for_address(EA,Reg,_),\n   arch.move_reg_imm(EA,Reg,Immediate,_),\n   !instruction_has_relocation(EA,_).\nin file value_analysis.dl [136:1-145:7]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [136:1-145:7];value_reg(EA,Reg,EA,\\\"NONE\\\",0,Immediate,1) :- \\n   def_used_for_address(EA,Reg,_),\\n   arch.move_reg_imm(EA,Reg,Immediate,_),\\n   !instruction_has_relocation(EA,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_def_used_for_address)) (NOT (ISEMPTY arch.move_reg_imm)))
          (FOR_IN t0 @delta_def_used_for_address            (IF (NOT (EXISTS instruction_has_relocation ((TUPLE t0 0) UNDEF)))
            (FOR t1 arch.move_reg_imm (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
             (IF (NOT (EXISTS value_reg ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (TUPLE t1 2) (UNSIGNED 1))))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (TUPLE t1 2) (UNSIGNED 1)) @new_value_reg)
             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,\"NONE\",0,0,1) :- \n   def_used_for_address(EA,Reg,_),\n   is_xor_reset(EA).\nin file value_analysis.dl [148:1-150:22]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [148:1-150:22];value_reg(EA,Reg,EA,\\\"NONE\\\",0,0,1) :- \\n   def_used_for_address(EA,Reg,_),\\n   is_xor_reset(EA).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_def_used_for_address)) (NOT (ISEMPTY is_xor_reset)))
          (FOR_IN t0 @delta_def_used_for_address            (IF (AND (EXISTS is_xor_reset ((TUPLE t0 0))) (NOT (EXISTS value_reg ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (NUMBER 0) (UNSIGNED 1)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (NUMBER 0) (UNSIGNED 1)) @new_value_reg)
           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,\"NONE\",0,Immediate,1) :- \n   def_used_for_address(EA,Reg,_),\n   reg_def_use.flow_def(EA,Reg,_,Immediate).\nin file value_analysis.dl [153:1-155:46]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [153:1-155:46];value_reg(EA,Reg,EA,\\\"NONE\\\",0,Immediate,1) :- \\n   def_used_for_address(EA,Reg,_),\\n   reg_def_use.flow_def(EA,Reg,_,Immediate).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_def_used_for_address)) (NOT (ISEMPTY reg_def_use.flow_def)))
          (FOR_IN t0 @delta_def_used_for_address            (FOR t1 reg_def_use.flow_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS value_reg ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (TUPLE t1 3) (UNSIGNED 1))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (TUPLE t1 3) (UNSIGNED 1)) @new_value_reg)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,Reg,1,0,1) :- \n   def_used_for_address(EA,Reg,_),\n   value_reg_unsupported(EA,Reg).\nin file value_analysis.dl [249:1-251:35]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [249:1-251:35];value_reg(EA,Reg,EA,Reg,1,0,1) :- \\n   def_used_for_address(EA,Reg,_),\\n   value_reg_unsupported(EA,Reg).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_def_used_for_address)) (NOT (ISEMPTY value_reg_unsupported)))
          (FOR_IN t0 @delta_def_used_for_address            (IF (AND (AND (EXISTS value_reg_unsupported ((TUPLE t0 0) (TUPLE t0 1))) (NOT (EXISTS @delta_value_reg_unsupported ((TUPLE t0 0) (TUPLE t0 1))))) (NOT (EXISTS value_reg ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (TUPLE t0 1) (NUMBER 1) (NUMBER 0) (UNSIGNED 1)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (TUPLE t0 1) (NUMBER 1) (NUMBER 0) (UNSIGNED 1)) @new_value_reg)
           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,Reg,1,0,1) :- \n   def_used_for_address(EA,Reg,_),\n   value_reg_unsupported(EA,Reg).\nin file value_analysis.dl [249:1-251:35]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;1;value_analysis.dl [249:1-251:35];value_reg(EA,Reg,EA,Reg,1,0,1) :- \\n   def_used_for_address(EA,Reg,_),\\n   value_reg_unsupported(EA,Reg).;"
(QUERY
         (IF (AND (NOT (ISEMPTY def_used_for_address)) (NOT (ISEMPTY @delta_value_reg_unsupported)))
          (FOR_IN t0 def_used_for_address            (IF (AND (EXISTS @delta_value_reg_unsupported ((TUPLE t0 0) (TUPLE t0 1))) (NOT (EXISTS value_reg ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (TUPLE t0 1) (NUMBER 1) (NUMBER 0) (UNSIGNED 1)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (TUPLE t0 1) (NUMBER 1) (NUMBER 0) (UNSIGNED 1)) @new_value_reg)
           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,Reg,1,0,1) :- \n   arch.stack_pointer(Reg),\n   value_reg_edge(_,Reg,EA,Reg,1,_).\nin file value_analysis.dl [253:1-255:38]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [253:1-255:38];value_reg(EA,Reg,EA,Reg,1,0,1) :- \\n   arch.stack_pointer(Reg),\\n   value_reg_edge(_,Reg,EA,Reg,1,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY arch.stack_pointer)) (NOT (ISEMPTY @delta_value_reg_edge)))
          (FOR_IN t0 arch.stack_pointer            (FOR t1 @delta_value_reg_edge (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 0)) (= (TUPLE t1 4) (NUMBER 1)))
            (IF (NOT (EXISTS value_reg ((TUPLE t1 2) (TUPLE t0 0) (TUPLE t1 2) (TUPLE t0 0) (NUMBER 1) (NUMBER 0) (UNSIGNED 1))))
             (INSERT ((TUPLE t1 2) (TUPLE t0 0) (TUPLE t1 2) (TUPLE t0 0) (NUMBER 1) (NUMBER 0) (UNSIGNED 1)) @new_value_reg)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA_from,\"Unknown\",Immediate,Base,(Steps+1)) :- \n   step_limit(StepLimit),\n   value_reg(EA,Reg,EA_from,\"NONE\",0,Base,Steps),\n   Steps <= (StepLimit-2),\n   value_reg_edge(EA,Reg,EA,Reg,1,Immediate),\n   Immediate != 0.\nin file value_analysis.dl [258:1-263:20]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [258:1-263:20];value_reg(EA,Reg,EA_from,\\\"Unknown\\\",Immediate,Base,(Steps+1)) :- \\n   step_limit(StepLimit),\\n   value_reg(EA,Reg,EA_from,\\\"NONE\\\",0,Base,Steps),\\n   Steps <= (StepLimit-2),\\n   value_reg_edge(EA,Reg,EA,Reg,1,Immediate),\\n   Immediate != 0.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY value_reg_edge)) (NOT (ISEMPTY step_limit))) (NOT (ISEMPTY @delta_value_reg)))
          (FOR_IN t0 step_limit            (FOR t1 @delta_value_reg (INDEX  (= (TUPLE t1 3) (STRING "NONE")) (= (TUPLE t1 4) (NUMBER 0)))
            (IF (CONSTRAINT <= (TUPLE t1 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 2)))
             (FOR t2 value_reg_edge (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 2) (TUPLE t1 0)) (= (TUPLE t2 3) (TUPLE t1 1)) (= (TUPLE t2 4) (NUMBER 1)))
              (IF (AND (AND (CONSTRAINT != (TUPLE t2 5)  (NUMBER 0)) (NOT (EXISTS @delta_value_reg_edge ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 0) (TUPLE t1 1) (NUMBER 1) (TUPLE t2 5))))) (NOT (EXISTS value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (STRING "Unknown") (TUPLE t2 5) (TUPLE t1 5) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 1))))))
               (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (STRING "Unknown") (TUPLE t2 5) (TUPLE t1 5) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 1))) @new_value_reg)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA_from,\"Unknown\",Immediate,Base,(Steps+1)) :- \n   step_limit(StepLimit),\n   value_reg(EA,Reg,EA_from,\"NONE\",0,Base,Steps),\n   Steps <= (StepLimit-2),\n   value_reg_edge(EA,Reg,EA,Reg,1,Immediate),\n   Immediate != 0.\nin file value_analysis.dl [258:1-263:20]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;1;value_analysis.dl [258:1-263:20];value_reg(EA,Reg,EA_from,\\\"Unknown\\\",Immediate,Base,(Steps+1)) :- \\n   step_limit(StepLimit),\\n   value_reg(EA,Reg,EA_from,\\\"NONE\\\",0,Base,Steps),\\n   Steps <= (StepLimit-2),\\n   value_reg_edge(EA,Reg,EA,Reg,1,Immediate),\\n   Immediate != 0.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_value_reg_edge)) (NOT (ISEMPTY step_limit))) (NOT (ISEMPTY value_reg)))
          (FOR_IN t0 step_limit            (FOR t1 value_reg (INDEX  (= (TUPLE t1 3) (STRING "NONE")) (= (TUPLE t1 4) (NUMBER 0)))
            (IF (CONSTRAINT <= (TUPLE t1 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 2)))
             (FOR t2 @delta_value_reg_edge (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 2) (TUPLE t1 0)) (= (TUPLE t2 3) (TUPLE t1 1)) (= (TUPLE t2 4) (NUMBER 1)))
              (IF (AND (CONSTRAINT != (TUPLE t2 5)  (NUMBER 0)) (NOT (EXISTS value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (STRING "Unknown") (TUPLE t2 5) (TUPLE t1 5) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 1))))))
               (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (STRING "Unknown") (TUPLE t2 5) (TUPLE t1 5) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 1))) @new_value_reg)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA1,Reg1,EA3,Reg3,(Multiplier*Multiplier2),((Offset2*Multiplier)+Offset),(Steps+1)) :- \n   step_limit(StepLimit),\n   value_reg(EA2,Reg2,EA3,Reg3,Multiplier2,Offset2,Steps),\n   Steps <= (StepLimit-2),\n   value_reg_edge(EA1,Reg1,EA2,Reg2,Multiplier,Offset),\n   EA1 > EA2.\nin file value_analysis.dl [321:1-326:15]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [321:1-326:15];value_reg(EA1,Reg1,EA3,Reg3,(Multiplier*Multiplier2),((Offset2*Multiplier)+Offset),(Steps+1)) :- \\n   step_limit(StepLimit),\\n   value_reg(EA2,Reg2,EA3,Reg3,Multiplier2,Offset2,Steps),\\n   Steps <= (StepLimit-2),\\n   value_reg_edge(EA1,Reg1,EA2,Reg2,Multiplier,Offset),\\n   EA1 > EA2.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY value_reg_edge)) (NOT (ISEMPTY step_limit))) (NOT (ISEMPTY @delta_value_reg)))
          (FOR_IN t0 step_limit            (FOR_IN t1 @delta_value_reg             (IF (CONSTRAINT <= (TUPLE t1 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 2)))
             (FOR t2 value_reg_edge (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)) (= (TUPLE t2 3) (TUPLE t1 1)))
              (IF (AND (AND (AND (CONSTRAINT >= (TUPLE t2 0)  (TUPLE t1 0)) (CONSTRAINT != (TUPLE t2 0)  (TUPLE t1 0))) (NOT (EXISTS @delta_value_reg_edge ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 4) (TUPLE t2 5))))) (NOT (EXISTS value_reg ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t1 2) (TUPLE t1 3) (INTRINSIC * (TUPLE t2 4) (TUPLE t1 4)) (INTRINSIC + (INTRINSIC * (TUPLE t1 5) (TUPLE t2 4)) (TUPLE t2 5)) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 1))))))
               (INSERT ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t1 2) (TUPLE t1 3) (INTRINSIC * (TUPLE t2 4) (TUPLE t1 4)) (INTRINSIC + (INTRINSIC * (TUPLE t1 5) (TUPLE t2 4)) (TUPLE t2 5)) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 1))) @new_value_reg)
              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA1,Reg1,EA3,Reg3,(Multiplier*Multiplier2),((Offset2*Multiplier)+Offset),(Steps+1)) :- \n   step_limit(StepLimit),\n   value_reg(EA2,Reg2,EA3,Reg3,Multiplier2,Offset2,Steps),\n   Steps <= (StepLimit-2),\n   value_reg_edge(EA1,Reg1,EA2,Reg2,Multiplier,Offset),\n   EA1 > EA2.\nin file value_analysis.dl [321:1-326:15]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;1;value_analysis.dl [321:1-326:15];value_reg(EA1,Reg1,EA3,Reg3,(Multiplier*Multiplier2),((Offset2*Multiplier)+Offset),(Steps+1)) :- \\n   step_limit(StepLimit),\\n   value_reg(EA2,Reg2,EA3,Reg3,Multiplier2,Offset2,Steps),\\n   Steps <= (StepLimit-2),\\n   value_reg_edge(EA1,Reg1,EA2,Reg2,Multiplier,Offset),\\n   EA1 > EA2.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_value_reg_edge)) (NOT (ISEMPTY step_limit))) (NOT (ISEMPTY value_reg)))
          (FOR_IN t0 step_limit            (FOR_IN t1 value_reg             (IF (CONSTRAINT <= (TUPLE t1 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 2)))
             (FOR t2 @delta_value_reg_edge (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)) (= (TUPLE t2 3) (TUPLE t1 1)))
              (IF (AND (AND (CONSTRAINT >= (TUPLE t2 0)  (TUPLE t1 0)) (CONSTRAINT != (TUPLE t2 0)  (TUPLE t1 0))) (NOT (EXISTS value_reg ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t1 2) (TUPLE t1 3) (INTRINSIC * (TUPLE t2 4) (TUPLE t1 4)) (INTRINSIC + (INTRINSIC * (TUPLE t1 5) (TUPLE t2 4)) (TUPLE t2 5)) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 1))))))
               (INSERT ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t1 2) (TUPLE t1 3) (INTRINSIC * (TUPLE t2 4) (TUPLE t1 4)) (INTRINSIC + (INTRINSIC * (TUPLE t1 5) (TUPLE t2 4)) (TUPLE t2 5)) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 1))) @new_value_reg)
              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA1,Reg1,EA3,Reg3,(Multiplier*Multiplier2),((Offset2*Multiplier)+Offset),(Steps+5)) :- \n   step_limit(StepLimit),\n   value_reg(EA2,Reg2,EA3,Reg3,Multiplier2,Offset2,Steps),\n   Steps <= (StepLimit-6),\n   value_reg_edge(EA1,Reg1,EA2,Reg2,Multiplier,Offset),\n   EA1 < EA2.\nin file value_analysis.dl [329:1-334:15]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [329:1-334:15];value_reg(EA1,Reg1,EA3,Reg3,(Multiplier*Multiplier2),((Offset2*Multiplier)+Offset),(Steps+5)) :- \\n   step_limit(StepLimit),\\n   value_reg(EA2,Reg2,EA3,Reg3,Multiplier2,Offset2,Steps),\\n   Steps <= (StepLimit-6),\\n   value_reg_edge(EA1,Reg1,EA2,Reg2,Multiplier,Offset),\\n   EA1 < EA2.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY value_reg_edge)) (NOT (ISEMPTY step_limit))) (NOT (ISEMPTY @delta_value_reg)))
          (FOR_IN t0 step_limit            (FOR_IN t1 @delta_value_reg             (IF (CONSTRAINT <= (TUPLE t1 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 6)))
             (FOR t2 value_reg_edge (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)) (= (TUPLE t2 3) (TUPLE t1 1)))
              (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t1 0)) (CONSTRAINT != (TUPLE t2 0)  (TUPLE t1 0))) (NOT (EXISTS @delta_value_reg_edge ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 4) (TUPLE t2 5))))) (NOT (EXISTS value_reg ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t1 2) (TUPLE t1 3) (INTRINSIC * (TUPLE t2 4) (TUPLE t1 4)) (INTRINSIC + (INTRINSIC * (TUPLE t1 5) (TUPLE t2 4)) (TUPLE t2 5)) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 5))))))
               (INSERT ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t1 2) (TUPLE t1 3) (INTRINSIC * (TUPLE t2 4) (TUPLE t1 4)) (INTRINSIC + (INTRINSIC * (TUPLE t1 5) (TUPLE t2 4)) (TUPLE t2 5)) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 5))) @new_value_reg)
              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA1,Reg1,EA3,Reg3,(Multiplier*Multiplier2),((Offset2*Multiplier)+Offset),(Steps+5)) :- \n   step_limit(StepLimit),\n   value_reg(EA2,Reg2,EA3,Reg3,Multiplier2,Offset2,Steps),\n   Steps <= (StepLimit-6),\n   value_reg_edge(EA1,Reg1,EA2,Reg2,Multiplier,Offset),\n   EA1 < EA2.\nin file value_analysis.dl [329:1-334:15]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;1;value_analysis.dl [329:1-334:15];value_reg(EA1,Reg1,EA3,Reg3,(Multiplier*Multiplier2),((Offset2*Multiplier)+Offset),(Steps+5)) :- \\n   step_limit(StepLimit),\\n   value_reg(EA2,Reg2,EA3,Reg3,Multiplier2,Offset2,Steps),\\n   Steps <= (StepLimit-6),\\n   value_reg_edge(EA1,Reg1,EA2,Reg2,Multiplier,Offset),\\n   EA1 < EA2.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_value_reg_edge)) (NOT (ISEMPTY step_limit))) (NOT (ISEMPTY value_reg)))
          (FOR_IN t0 step_limit            (FOR_IN t1 value_reg             (IF (CONSTRAINT <= (TUPLE t1 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 6)))
             (FOR t2 @delta_value_reg_edge (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)) (= (TUPLE t2 3) (TUPLE t1 1)))
              (IF (AND (AND (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t1 0)) (CONSTRAINT != (TUPLE t2 0)  (TUPLE t1 0))) (NOT (EXISTS value_reg ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t1 2) (TUPLE t1 3) (INTRINSIC * (TUPLE t2 4) (TUPLE t1 4)) (INTRINSIC + (INTRINSIC * (TUPLE t1 5) (TUPLE t2 4)) (TUPLE t2 5)) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 5))))))
               (INSERT ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t1 2) (TUPLE t1 3) (INTRINSIC * (TUPLE t2 4) (TUPLE t1 4)) (INTRINSIC + (INTRINSIC * (TUPLE t1 5) (TUPLE t2 4)) (TUPLE t2 5)) (INTRINSIC + (TUPLE t1 6) (UNSIGNED 5))) @new_value_reg)
              ))            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,\"NONE\",0,as(Address, number),1) :- \n   arch.return_reg(Reg),\n   tls_get_addr(_,EA,Address).\nin file tls.dl [633:1-639:32]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;tls.dl [633:1-639:32];value_reg(EA,Reg,EA,\\\"NONE\\\",0,as(Address, number),1) :- \\n   arch.return_reg(Reg),\\n   tls_get_addr(_,EA,Address).;"
(QUERY
         (IF (AND (NOT (ISEMPTY arch.return_reg)) (NOT (ISEMPTY @delta_tls_get_addr)))
          (FOR_IN t0 arch.return_reg            (FOR_IN t1 @delta_tls_get_addr             (IF (NOT (EXISTS value_reg ((TUPLE t1 1) (TUPLE t0 0) (TUPLE t1 1) (STRING "NONE") (NUMBER 0) (TUPLE t1 2) (UNSIGNED 1))))
             (INSERT ((TUPLE t1 1) (TUPLE t0 0) (TUPLE t1 1) (STRING "NONE") (NUMBER 0) (TUPLE t1 2) (UNSIGNED 1)) @new_value_reg)
            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,\"NONE\",0,as(Address, number),1) :- \n   arch.return_reg(Reg),\n   tls_desc_call(_,EA,Address).\nin file tls.dl [633:1-639:32]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;tls.dl [633:1-639:32];value_reg(EA,Reg,EA,\\\"NONE\\\",0,as(Address, number),1) :- \\n   arch.return_reg(Reg),\\n   tls_desc_call(_,EA,Address).;"
(QUERY
         (IF (AND (NOT (ISEMPTY arch.return_reg)) (NOT (ISEMPTY @delta_tls_desc_call)))
          (FOR_IN t0 arch.return_reg            (FOR_IN t1 @delta_tls_desc_call             (IF (NOT (EXISTS value_reg ((TUPLE t1 1) (TUPLE t0 0) (TUPLE t1 1) (STRING "NONE") (NUMBER 0) (TUPLE t1 2) (UNSIGNED 1))))
             (INSERT ((TUPLE t1 1) (TUPLE t0 0) (TUPLE t1 1) (STRING "NONE") (NUMBER 0) (TUPLE t1 2) (UNSIGNED 1)) @new_value_reg)
            ))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,\"NONE\",0,as(Address, number),1) :- \n   def_used_for_address(EA,Reg,_),\n   instruction_has_relocation(EA,EA_rel),\n   symbolic_expr_from_relocation(EA_rel,_,_,_,Address).\nin file value_analysis.dl [136:1-145:7]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [136:1-145:7];value_reg(EA,Reg,EA,\\\"NONE\\\",0,as(Address, number),1) :- \\n   def_used_for_address(EA,Reg,_),\\n   instruction_has_relocation(EA,EA_rel),\\n   symbolic_expr_from_relocation(EA_rel,_,_,_,Address).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY symbolic_expr_from_relocation)) (NOT (ISEMPTY @delta_def_used_for_address))) (NOT (ISEMPTY instruction_has_relocation)))
          (FOR_IN t0 @delta_def_used_for_address            (FOR t1 instruction_has_relocation (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 symbolic_expr_from_relocation (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
             (IF (NOT (EXISTS value_reg ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (TUPLE t2 4) (UNSIGNED 1))))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (TUPLE t2 4) (UNSIGNED 1)) @new_value_reg)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,\"NONE\",0,as(Offset, number),1) :- \n   binary_format(\"ELF\"),\n   got_relative_operand(EA,1,Offset),\n   instruction(EA,_,_,\"LEA\",_,Op2,0,0,_,_),\n   op_regdirect_contains_reg(Op2,Reg),\n   track_register(Reg).\nin file value_analysis.dl [228:1-234:33]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [228:1-234:33];value_reg(EA,Reg,EA,\\\"NONE\\\",0,as(Offset, number),1) :- \\n   binary_format(\\\"ELF\\\"),\\n   got_relative_operand(EA,1,Offset),\\n   instruction(EA,_,_,\\\"LEA\\\",_,Op2,0,0,_,_),\\n   op_regdirect_contains_reg(Op2,Reg),\\n   track_register(Reg).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY @delta_got_relative_operand)) (NOT (ISEMPTY track_register))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY op_regdirect_contains_reg))) (EXISTS binary_format ((STRING "ELF"))))
          (FOR t0 @delta_got_relative_operand (INDEX  (= (TUPLE t0 1) (UNSIGNED 1)))
           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 3) (STRING "LEA")) (= (TUPLE t1 6) (UNSIGNED 0)) (= (TUPLE t1 7) (UNSIGNED 0)))
            (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 5)))
             (IF (AND (EXISTS track_register ((TUPLE t2 1))) (NOT (EXISTS value_reg ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (TUPLE t0 2) (UNSIGNED 1)))))
              (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (TUPLE t0 2) (UNSIGNED 1)) @new_value_reg)
             ))))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg_def,EA_third,Reg3,(Mult1+(Mult*Mult2)),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \n   step_limit(StepLimit),\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\n   Steps1 <= (StepLimit-3),\n   EA != EA_third,\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\n   Steps2 <= (StepLimit-3).\nin file value_analysis.dl [286:1-294:35]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [286:1-294:35];value_reg(EA,Reg_def,EA_third,Reg3,(Mult1+(Mult*Mult2)),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \\n   step_limit(StepLimit),\\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\\n   Steps1 <= (StepLimit-3),\\n   EA != EA_third,\\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\\n   Steps2 <= (StepLimit-3).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_reg_reg_arithmetic_operation_defs)) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY step_limit)))
          (FOR_IN t0 step_limit            (FOR_IN t1 @delta_reg_reg_arithmetic_operation_defs             (FOR t2 value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)))
             (IF (AND (AND (CONSTRAINT <= (TUPLE t2 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t2 2))) (NOT (EXISTS @delta_value_reg ((TUPLE t1 2) (TUPLE t1 3) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t2 4) (TUPLE t2 5) (TUPLE t2 6)))))
              (FOR t3 value_reg (INDEX  (= (TUPLE t3 0) (TUPLE t1 4)) (= (TUPLE t3 1) (TUPLE t1 5)) (= (TUPLE t3 2) (TUPLE t2 2)) (= (TUPLE t3 3) (TUPLE t2 3)))
               (IF (AND (AND (CONSTRAINT <= (TUPLE t3 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (NOT (EXISTS @delta_value_reg ((TUPLE t1 4) (TUPLE t1 5) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t3 4) (TUPLE t3 5) (TUPLE t3 6))))) (NOT (EXISTS value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC + (TUPLE t2 4) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4))) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))))))
                (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC + (TUPLE t2 4) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4))) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))) @new_value_reg)
               ))             )))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg_def,EA_third,Reg3,(Mult1+(Mult*Mult2)),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \n   step_limit(StepLimit),\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\n   Steps1 <= (StepLimit-3),\n   EA != EA_third,\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\n   Steps2 <= (StepLimit-3).\nin file value_analysis.dl [286:1-294:35]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;1;value_analysis.dl [286:1-294:35];value_reg(EA,Reg_def,EA_third,Reg3,(Mult1+(Mult*Mult2)),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \\n   step_limit(StepLimit),\\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\\n   Steps1 <= (StepLimit-3),\\n   EA != EA_third,\\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\\n   Steps2 <= (StepLimit-3).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY step_limit)) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY @delta_value_reg))) (NOT (ISEMPTY reg_reg_arithmetic_operation_defs)))
          (FOR_IN t0 step_limit            (FOR_IN t1 reg_reg_arithmetic_operation_defs             (FOR t2 @delta_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)))
             (IF (AND (CONSTRAINT <= (TUPLE t2 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t2 2)))
              (FOR t3 value_reg (INDEX  (= (TUPLE t3 0) (TUPLE t1 4)) (= (TUPLE t3 1) (TUPLE t1 5)) (= (TUPLE t3 2) (TUPLE t2 2)) (= (TUPLE t3 3) (TUPLE t2 3)))
               (IF (AND (AND (CONSTRAINT <= (TUPLE t3 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (NOT (EXISTS @delta_value_reg ((TUPLE t1 4) (TUPLE t1 5) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t3 4) (TUPLE t3 5) (TUPLE t3 6))))) (NOT (EXISTS value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC + (TUPLE t2 4) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4))) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))))))
                (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC + (TUPLE t2 4) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4))) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))) @new_value_reg)
               ))             )))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg_def,EA_third,Reg3,(Mult1+(Mult*Mult2)),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \n   step_limit(StepLimit),\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\n   Steps1 <= (StepLimit-3),\n   EA != EA_third,\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\n   Steps2 <= (StepLimit-3).\nin file value_analysis.dl [286:1-294:35]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;2;value_analysis.dl [286:1-294:35];value_reg(EA,Reg_def,EA_third,Reg3,(Mult1+(Mult*Mult2)),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \\n   step_limit(StepLimit),\\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\\n   Steps1 <= (StepLimit-3),\\n   EA != EA_third,\\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\\n   Steps2 <= (StepLimit-3).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY step_limit)) (NOT (ISEMPTY @delta_value_reg))) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY reg_reg_arithmetic_operation_defs)))
          (FOR_IN t0 step_limit            (FOR_IN t1 reg_reg_arithmetic_operation_defs             (FOR t2 value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)))
             (IF (AND (CONSTRAINT <= (TUPLE t2 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t2 2)))
              (FOR t3 @delta_value_reg (INDEX  (= (TUPLE t3 0) (TUPLE t1 4)) (= (TUPLE t3 1) (TUPLE t1 5)) (= (TUPLE t3 2) (TUPLE t2 2)) (= (TUPLE t3 3) (TUPLE t2 3)))
               (IF (AND (CONSTRAINT <= (TUPLE t3 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (NOT (EXISTS value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC + (TUPLE t2 4) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4))) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))))))
                (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC + (TUPLE t2 4) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4))) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))) @new_value_reg)
               ))             )))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg_def,EA_third,Reg3,(Mult*Mult2),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \n   step_limit(StepLimit),\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\n   value_reg(EA_def1,Reg1,_,\"NONE\",_,Offset1,Steps1),\n   Steps1 <= (StepLimit-3),\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\n   Steps2 <= (StepLimit-3),\n   EA != EA_third,\n   Reg3 != \"NONE\".\nin file value_analysis.dl [297:1-306:35]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [297:1-306:35];value_reg(EA,Reg_def,EA_third,Reg3,(Mult*Mult2),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \\n   step_limit(StepLimit),\\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\\n   value_reg(EA_def1,Reg1,_,\\\"NONE\\\",_,Offset1,Steps1),\\n   Steps1 <= (StepLimit-3),\\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\\n   Steps2 <= (StepLimit-3),\\n   EA != EA_third,\\n   Reg3 != \\\"NONE\\\".;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_reg_reg_arithmetic_operation_defs)) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY step_limit)))
          (FOR_IN t0 step_limit            (FOR_IN t1 @delta_reg_reg_arithmetic_operation_defs             (FOR t2 value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 3) (STRING "NONE")))
             (IF (AND (CONSTRAINT <= (TUPLE t2 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (NOT (EXISTS @delta_value_reg ((TUPLE t1 2) (TUPLE t1 3) UNDEF (STRING "NONE") UNDEF (TUPLE t2 5) (TUPLE t2 6)))))
              (FOR t3 value_reg (INDEX  (= (TUPLE t3 0) (TUPLE t1 4)) (= (TUPLE t3 1) (TUPLE t1 5)))
               (IF (AND (AND (AND (AND (CONSTRAINT <= (TUPLE t3 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t3 2))) (CONSTRAINT != (TUPLE t3 3)  (STRING "NONE"))) (NOT (EXISTS @delta_value_reg ((TUPLE t1 4) (TUPLE t1 5) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (TUPLE t3 5) (TUPLE t3 6))))) (NOT (EXISTS value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4)) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))))))
                (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4)) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))) @new_value_reg)
               ))             )))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg_def,EA_third,Reg3,(Mult*Mult2),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \n   step_limit(StepLimit),\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\n   value_reg(EA_def1,Reg1,_,\"NONE\",_,Offset1,Steps1),\n   Steps1 <= (StepLimit-3),\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\n   Steps2 <= (StepLimit-3),\n   EA != EA_third,\n   Reg3 != \"NONE\".\nin file value_analysis.dl [297:1-306:35]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;1;value_analysis.dl [297:1-306:35];value_reg(EA,Reg_def,EA_third,Reg3,(Mult*Mult2),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \\n   step_limit(StepLimit),\\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\\n   value_reg(EA_def1,Reg1,_,\\\"NONE\\\",_,Offset1,Steps1),\\n   Steps1 <= (StepLimit-3),\\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\\n   Steps2 <= (StepLimit-3),\\n   EA != EA_third,\\n   Reg3 != \\\"NONE\\\".;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY step_limit)) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY @delta_value_reg))) (NOT (ISEMPTY reg_reg_arithmetic_operation_defs)))
          (FOR_IN t0 step_limit            (FOR_IN t1 reg_reg_arithmetic_operation_defs             (FOR t2 @delta_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 3) (STRING "NONE")))
             (IF (CONSTRAINT <= (TUPLE t2 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3)))
              (FOR t3 value_reg (INDEX  (= (TUPLE t3 0) (TUPLE t1 4)) (= (TUPLE t3 1) (TUPLE t1 5)))
               (IF (AND (AND (AND (AND (CONSTRAINT <= (TUPLE t3 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t3 2))) (CONSTRAINT != (TUPLE t3 3)  (STRING "NONE"))) (NOT (EXISTS @delta_value_reg ((TUPLE t1 4) (TUPLE t1 5) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (TUPLE t3 5) (TUPLE t3 6))))) (NOT (EXISTS value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4)) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))))))
                (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4)) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))) @new_value_reg)
               ))             )))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg_def,EA_third,Reg3,(Mult*Mult2),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \n   step_limit(StepLimit),\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\n   value_reg(EA_def1,Reg1,_,\"NONE\",_,Offset1,Steps1),\n   Steps1 <= (StepLimit-3),\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\n   Steps2 <= (StepLimit-3),\n   EA != EA_third,\n   Reg3 != \"NONE\".\nin file value_analysis.dl [297:1-306:35]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;2;value_analysis.dl [297:1-306:35];value_reg(EA,Reg_def,EA_third,Reg3,(Mult*Mult2),((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \\n   step_limit(StepLimit),\\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\\n   value_reg(EA_def1,Reg1,_,\\\"NONE\\\",_,Offset1,Steps1),\\n   Steps1 <= (StepLimit-3),\\n   value_reg(EA_def2,Reg2,EA_third,Reg3,Mult2,Offset2,Steps2),\\n   Steps2 <= (StepLimit-3),\\n   EA != EA_third,\\n   Reg3 != \\\"NONE\\\".;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY step_limit)) (NOT (ISEMPTY @delta_value_reg))) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY reg_reg_arithmetic_operation_defs)))
          (FOR_IN t0 step_limit            (FOR_IN t1 reg_reg_arithmetic_operation_defs             (FOR t2 value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 3) (STRING "NONE")))
             (IF (CONSTRAINT <= (TUPLE t2 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3)))
              (FOR t3 @delta_value_reg (INDEX  (= (TUPLE t3 0) (TUPLE t1 4)) (= (TUPLE t3 1) (TUPLE t1 5)))
               (IF (AND (AND (AND (CONSTRAINT != (TUPLE t1 0)  (TUPLE t3 2)) (CONSTRAINT != (TUPLE t3 3)  (STRING "NONE"))) (CONSTRAINT <= (TUPLE t3 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3)))) (NOT (EXISTS value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4)) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))))))
                (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (INTRINSIC * (TUPLE t1 6) (TUPLE t3 4)) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t2 5)) (INTRINSIC * (TUPLE t3 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t2 6) (TUPLE t3 6)) (UNSIGNED 2))) @new_value_reg)
               ))             )))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg_def,EA_third,Reg3,Mult1,((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \n   step_limit(StepLimit),\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\n   value_reg(EA_def2,Reg2,_,\"NONE\",_,Offset2,Steps2),\n   Steps2 <= (StepLimit-3),\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\n   Steps1 <= (StepLimit-3),\n   Reg3 != \"NONE\",\n   EA != EA_third.\nin file value_analysis.dl [309:1-318:35]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [309:1-318:35];value_reg(EA,Reg_def,EA_third,Reg3,Mult1,((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \\n   step_limit(StepLimit),\\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\\n   value_reg(EA_def2,Reg2,_,\\\"NONE\\\",_,Offset2,Steps2),\\n   Steps2 <= (StepLimit-3),\\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\\n   Steps1 <= (StepLimit-3),\\n   Reg3 != \\\"NONE\\\",\\n   EA != EA_third.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_reg_reg_arithmetic_operation_defs)) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY step_limit)))
          (FOR_IN t0 step_limit            (FOR_IN t1 @delta_reg_reg_arithmetic_operation_defs             (FOR t2 value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 4)) (= (TUPLE t2 1) (TUPLE t1 5)) (= (TUPLE t2 3) (STRING "NONE")))
             (IF (AND (CONSTRAINT <= (TUPLE t2 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (NOT (EXISTS @delta_value_reg ((TUPLE t1 4) (TUPLE t1 5) UNDEF (STRING "NONE") UNDEF (TUPLE t2 5) (TUPLE t2 6)))))
              (FOR t3 value_reg (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)) (= (TUPLE t3 1) (TUPLE t1 3)))
               (IF (AND (AND (AND (AND (CONSTRAINT <= (TUPLE t3 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (CONSTRAINT != (TUPLE t3 3)  (STRING "NONE"))) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t3 2))) (NOT (EXISTS @delta_value_reg ((TUPLE t1 2) (TUPLE t1 3) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (TUPLE t3 5) (TUPLE t3 6))))) (NOT (EXISTS value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t3 5)) (INTRINSIC * (TUPLE t2 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t3 6) (TUPLE t2 6)) (UNSIGNED 2))))))
                (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t3 5)) (INTRINSIC * (TUPLE t2 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t3 6) (TUPLE t2 6)) (UNSIGNED 2))) @new_value_reg)
               ))             )))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg_def,EA_third,Reg3,Mult1,((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \n   step_limit(StepLimit),\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\n   value_reg(EA_def2,Reg2,_,\"NONE\",_,Offset2,Steps2),\n   Steps2 <= (StepLimit-3),\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\n   Steps1 <= (StepLimit-3),\n   Reg3 != \"NONE\",\n   EA != EA_third.\nin file value_analysis.dl [309:1-318:35]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;1;value_analysis.dl [309:1-318:35];value_reg(EA,Reg_def,EA_third,Reg3,Mult1,((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \\n   step_limit(StepLimit),\\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\\n   value_reg(EA_def2,Reg2,_,\\\"NONE\\\",_,Offset2,Steps2),\\n   Steps2 <= (StepLimit-3),\\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\\n   Steps1 <= (StepLimit-3),\\n   Reg3 != \\\"NONE\\\",\\n   EA != EA_third.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY step_limit)) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY @delta_value_reg))) (NOT (ISEMPTY reg_reg_arithmetic_operation_defs)))
          (FOR_IN t0 step_limit            (FOR_IN t1 reg_reg_arithmetic_operation_defs             (FOR t2 @delta_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 4)) (= (TUPLE t2 1) (TUPLE t1 5)) (= (TUPLE t2 3) (STRING "NONE")))
             (IF (CONSTRAINT <= (TUPLE t2 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3)))
              (FOR t3 value_reg (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)) (= (TUPLE t3 1) (TUPLE t1 3)))
               (IF (AND (AND (AND (AND (CONSTRAINT <= (TUPLE t3 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3))) (CONSTRAINT != (TUPLE t3 3)  (STRING "NONE"))) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t3 2))) (NOT (EXISTS @delta_value_reg ((TUPLE t1 2) (TUPLE t1 3) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (TUPLE t3 5) (TUPLE t3 6))))) (NOT (EXISTS value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t3 5)) (INTRINSIC * (TUPLE t2 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t3 6) (TUPLE t2 6)) (UNSIGNED 2))))))
                (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t3 5)) (INTRINSIC * (TUPLE t2 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t3 6) (TUPLE t2 6)) (UNSIGNED 2))) @new_value_reg)
               ))             )))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg_def,EA_third,Reg3,Mult1,((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \n   step_limit(StepLimit),\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\n   value_reg(EA_def2,Reg2,_,\"NONE\",_,Offset2,Steps2),\n   Steps2 <= (StepLimit-3),\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\n   Steps1 <= (StepLimit-3),\n   Reg3 != \"NONE\",\n   EA != EA_third.\nin file value_analysis.dl [309:1-318:35]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;2;value_analysis.dl [309:1-318:35];value_reg(EA,Reg_def,EA_third,Reg3,Mult1,((Offset+Offset1)+(Offset2*Mult)),(max(Steps1,Steps2)+2)) :- \\n   step_limit(StepLimit),\\n   reg_reg_arithmetic_operation_defs(EA,Reg_def,EA_def1,Reg1,EA_def2,Reg2,Mult,Offset),\\n   value_reg(EA_def2,Reg2,_,\\\"NONE\\\",_,Offset2,Steps2),\\n   Steps2 <= (StepLimit-3),\\n   value_reg(EA_def1,Reg1,EA_third,Reg3,Mult1,Offset1,Steps1),\\n   Steps1 <= (StepLimit-3),\\n   Reg3 != \\\"NONE\\\",\\n   EA != EA_third.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY step_limit)) (NOT (ISEMPTY @delta_value_reg))) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY reg_reg_arithmetic_operation_defs)))
          (FOR_IN t0 step_limit            (FOR_IN t1 reg_reg_arithmetic_operation_defs             (FOR t2 value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 4)) (= (TUPLE t2 1) (TUPLE t1 5)) (= (TUPLE t2 3) (STRING "NONE")))
             (IF (CONSTRAINT <= (TUPLE t2 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3)))
              (FOR t3 @delta_value_reg (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)) (= (TUPLE t3 1) (TUPLE t1 3)))
               (IF (AND (AND (AND (CONSTRAINT != (TUPLE t3 3)  (STRING "NONE")) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t3 2))) (CONSTRAINT <= (TUPLE t3 6)  (INTRINSIC - (TUPLE t0 0) (UNSIGNED 3)))) (NOT (EXISTS value_reg ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t3 5)) (INTRINSIC * (TUPLE t2 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t3 6) (TUPLE t2 6)) (UNSIGNED 2))))))
                (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t3 4) (INTRINSIC + (INTRINSIC + (TUPLE t1 7) (TUPLE t3 5)) (INTRINSIC * (TUPLE t2 5) (TUPLE t1 6))) (INTRINSIC + (INTRINSIC max (TUPLE t3 6) (TUPLE t2 6)) (UNSIGNED 2))) @new_value_reg)
               ))             )))
)
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,\"NONE\",0,as(TargetAddr, number),1) :- \n   def_used_for_address(EA,Reg,_),\n   arch.memory_access(\"LOAD\",EA,SrcOp,_,Reg,_,_,_,_),\n   simple_data_access_pattern(MemAddr,SrcOp,Size,EA),\n   4 <= Size,\n   Size <= 8,\n   symbolic_expr_from_relocation(MemAddr,Size,Symbol,_,TargetAddr),\n   defined_symbol(_,_,_,_,_,_,_,_,Symbol),\n   as(TargetAddr, number) >= 0.\nin file value_analysis.dl [172:1-185:14]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [172:1-185:14];value_reg(EA,Reg,EA,\\\"NONE\\\",0,as(TargetAddr, number),1) :- \\n   def_used_for_address(EA,Reg,_),\\n   arch.memory_access(\\\"LOAD\\\",EA,SrcOp,_,Reg,_,_,_,_),\\n   simple_data_access_pattern(MemAddr,SrcOp,Size,EA),\\n   4 <= Size,\\n   Size <= 8,\\n   symbolic_expr_from_relocation(MemAddr,Size,Symbol,_,TargetAddr),\\n   defined_symbol(_,_,_,_,_,_,_,_,Symbol),\\n   as(TargetAddr, number) >= 0.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY @delta_def_used_for_address))) (NOT (ISEMPTY simple_data_access_pattern))) (NOT (ISEMPTY symbolic_expr_from_relocation))) (NOT (ISEMPTY arch.memory_access)))
          (FOR_IN t0 @delta_def_used_for_address            (FOR t1 arch.memory_access (INDEX  (= (TUPLE t1 0) (STRING "LOAD")) (= (TUPLE t1 1) (TUPLE t0 0)) (= (TUPLE t1 4) (TUPLE t0 1)))
            (FOR t2 simple_data_access_pattern (INDEX  (= (TUPLE t2 1) (TUPLE t1 2)) (= (TUPLE t2 3) (TUPLE t0 0)))
             (IF (AND (CONSTRAINT <= (UNSIGNED 4)  (TUPLE t2 2)) (CONSTRAINT <= (TUPLE t2 2)  (UNSIGNED 8)))
              (FOR t3 symbolic_expr_from_relocation (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)) (= (TUPLE t3 1) (TUPLE t2 2)) (<= (NUMBER 0) (TUPLE t3 4) ))
               (IF (AND (EXISTS defined_symbol (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (TUPLE t3 2))) (NOT (EXISTS value_reg ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (TUPLE t3 4) (UNSIGNED 1)))))
                (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (TUPLE t3 4) (UNSIGNED 1)) @new_value_reg)
               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA,\"NONE\",0,@functor_data_signed(MemAddr,Size),1) :- \n   def_used_for_address(EA,Reg,_),\n   arch.memory_access(\"LOAD\",EA,SrcOp,_,Reg,_,_,_,_),\n   simple_data_access_pattern(MemAddr,SrcOp,Size,EA),\n   4 <= Size,\n   Size <= 8,\n   @functor_data_valid(MemAddr,Size) = 1,\n   !symbolic_expr_from_relocation(MemAddr,_,_,_,_),\n   @functor_data_signed(MemAddr,Size) >= 0.\nin file value_analysis.dl [172:1-185:14]" 
       (TIMER_ON @new_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [172:1-185:14];value_reg(EA,Reg,EA,\\\"NONE\\\",0,@functor_data_signed(MemAddr,Size),1) :- \\n   def_used_for_address(EA,Reg,_),\\n   arch.memory_access(\\\"LOAD\\\",EA,SrcOp,_,Reg,_,_,_,_),\\n   simple_data_access_pattern(MemAddr,SrcOp,Size,EA),\\n   4 <= Size,\\n   Size <= 8,\\n   @functor_data_valid(MemAddr,Size) = 1,\\n   !symbolic_expr_from_relocation(MemAddr,_,_,_,_),\\n   @functor_data_signed(MemAddr,Size) >= 0.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY simple_data_access_pattern)) (NOT (ISEMPTY @delta_def_used_for_address))) (NOT (ISEMPTY arch.memory_access)))
          (FOR_IN t0 @delta_def_used_for_address            (FOR t1 arch.memory_access (INDEX  (= (TUPLE t1 0) (STRING "LOAD")) (= (TUPLE t1 1) (TUPLE t0 0)) (= (TUPLE t1 4) (TUPLE t0 1)))
            (FOR t2 simple_data_access_pattern (INDEX  (= (TUPLE t2 1) (TUPLE t1 2)) (= (TUPLE t2 3) (TUPLE t0 0)))
             (IF (AND (AND (AND (AND (AND (CONSTRAINT <= (TUPLE t2 2)  (UNSIGNED 8)) (CONSTRAINT <= (UNSIGNED 4)  (TUPLE t2 2))) (NOT (EXISTS value_reg ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t2 0) (TUPLE t2 2))) (UNSIGNED 1))))) (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t2 0) UNDEF UNDEF UNDEF UNDEF)))) (CONSTRAINT >= (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t2 0) (TUPLE t2 2)))  (NUMBER 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t2 0) (TUPLE t2 2)))  (UNSIGNED 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (STRING "NONE") (NUMBER 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t2 0) (TUPLE t2 2))) (UNSIGNED 1)) @new_value_reg)
             ))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_value_reg_edge "@t-recursive-relation;value_reg_edge;value_analysis.dl [61:7-61:21];"
(STMTS (STMTS (STMTS       (DEBUG 
 "value_reg_edge(EA,Reg,EA_prev,Reg_origin,1,0) :- \n   def_used_for_address(EA_prev,Reg_origin,_),\n   reg_def_use.def_used(EA_prev,Reg_origin,EA,_),\n   arch.move_reg_reg(EA,Reg,Reg_origin),\n   track_register(Reg),\n   EA != EA_prev.\nin file value_analysis.dl [87:1-92:19]" 
       (TIMER_ON @new_value_reg_edge "@t-recursive-rule;value_reg_edge;0;value_analysis.dl [87:1-92:19];value_reg_edge(EA,Reg,EA_prev,Reg_origin,1,0) :- \\n   def_used_for_address(EA_prev,Reg_origin,_),\\n   reg_def_use.def_used(EA_prev,Reg_origin,EA,_),\\n   arch.move_reg_reg(EA,Reg,Reg_origin),\\n   track_register(Reg),\\n   EA != EA_prev.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_def_used_for_address)) (NOT (ISEMPTY track_register))) (NOT (ISEMPTY arch.move_reg_reg))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 @delta_def_used_for_address            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (AND (CONSTRAINT != (TUPLE t1 2)  (TUPLE t0 0)) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF))))
             (FOR t2 arch.move_reg_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)))
              (IF (AND (EXISTS track_register ((TUPLE t2 1))) (NOT (EXISTS value_reg_edge ((TUPLE t1 2) (TUPLE t2 1) (TUPLE t0 0) (TUPLE t0 1) (NUMBER 1) (NUMBER 0)))))
               (INSERT ((TUPLE t1 2) (TUPLE t2 1) (TUPLE t0 0) (TUPLE t0 1) (NUMBER 1) (NUMBER 0)) @new_value_reg_edge)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_edge(EA,Reg,EA_prev,Reg_origin,1,0) :- \n   def_used_for_address(EA_prev,Reg_origin,_),\n   reg_def_use.def_used(EA_prev,Reg_origin,EA,_),\n   arch.move_reg_reg(EA,Reg,Reg_origin),\n   track_register(Reg),\n   EA != EA_prev.\nin file value_analysis.dl [87:1-92:19]" 
       (TIMER_ON @new_value_reg_edge "@t-recursive-rule;value_reg_edge;1;value_analysis.dl [87:1-92:19];value_reg_edge(EA,Reg,EA_prev,Reg_origin,1,0) :- \\n   def_used_for_address(EA_prev,Reg_origin,_),\\n   reg_def_use.def_used(EA_prev,Reg_origin,EA,_),\\n   arch.move_reg_reg(EA,Reg,Reg_origin),\\n   track_register(Reg),\\n   EA != EA_prev.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY def_used_for_address)) (NOT (ISEMPTY track_register))) (NOT (ISEMPTY arch.move_reg_reg))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 def_used_for_address            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (CONSTRAINT != (TUPLE t1 2)  (TUPLE t0 0))
             (FOR t2 arch.move_reg_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)))
              (IF (AND (EXISTS track_register ((TUPLE t2 1))) (NOT (EXISTS value_reg_edge ((TUPLE t1 2) (TUPLE t2 1) (TUPLE t0 0) (TUPLE t0 1) (NUMBER 1) (NUMBER 0)))))
               (INSERT ((TUPLE t1 2) (TUPLE t2 1) (TUPLE t0 0) (TUPLE t0 1) (NUMBER 1) (NUMBER 0)) @new_value_reg_edge)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_edge(EA,Dst,EA_prev,Src,Mult,Immediate) :- \n   def_used_for_address(EA_prev,Src,_),\n   reg_def_use.def_used(EA_prev,Src,EA,_),\n   arch.reg_arithmetic_operation(EA,Dst,Src,Mult,Immediate),\n   track_register(Dst).\nin file value_analysis.dl [95:1-99:25]" 
       (TIMER_ON @new_value_reg_edge "@t-recursive-rule;value_reg_edge;0;value_analysis.dl [95:1-99:25];value_reg_edge(EA,Dst,EA_prev,Src,Mult,Immediate) :- \\n   def_used_for_address(EA_prev,Src,_),\\n   reg_def_use.def_used(EA_prev,Src,EA,_),\\n   arch.reg_arithmetic_operation(EA,Dst,Src,Mult,Immediate),\\n   track_register(Dst).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_def_used_for_address)) (NOT (ISEMPTY track_register))) (NOT (ISEMPTY arch.reg_arithmetic_operation))) (NOT (ISEMPTY reg_def_use.def_used)))
          (FOR_IN t0 @delta_def_used_for_address            (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF)))
             (FOR t2 arch.reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)))
              (IF (AND (EXISTS track_register ((TUPLE t2 1))) (NOT (EXISTS value_reg_edge ((TUPLE t1 2) (TUPLE t2 1) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 3) (TUPLE t2 4)))))
               (INSERT ((TUPLE t1 2) (TUPLE t2 1) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 3) (TUPLE t2 4)) @new_value_reg_edge)
              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_edge(EA,Dst,EA_prev,Src,Mult,Immediate) :- \n   def_used_for_address(EA_prev,Src,_),\n   reg_def_use.def_used(EA_prev,Src,EA,_),\n   arch.reg_arithmetic_operation(EA,Dst,Src,Mult,Immediate),\n   track_register(Dst).\nin file value_analysis.dl [95:1-99:25]" 
       (TIMER_ON @new_value_reg_edge "@t-recursive-rule;value_reg_edge;1;value_analysis.dl [95:1-99:25];value_reg_edge(EA,Dst,EA_prev,Src,Mult,Immediate) :- \\n   def_used_for_address(EA_prev,Src,_),\\n   reg_def_use.def_used(EA_prev,Src,EA,_),\\n   arch.reg_arithmetic_operation(EA,Dst,Src,Mult,Immediate),\\n   track_register(Dst).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY def_used_for_address)) (NOT (ISEMPTY track_register))) (NOT (ISEMPTY arch.reg_arithmetic_operation))) (NOT (ISEMPTY @delta_reg_def_use.def_used)))
          (FOR_IN t0 def_used_for_address            (FOR t1 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 arch.reg_arithmetic_operation (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t0 1)))
             (IF (AND (EXISTS track_register ((TUPLE t2 1))) (NOT (EXISTS value_reg_edge ((TUPLE t1 2) (TUPLE t2 1) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 3) (TUPLE t2 4)))))
              (INSERT ((TUPLE t1 2) (TUPLE t2 1) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 3) (TUPLE t2 4)) @new_value_reg_edge)
             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_edge(EALoad,Reg2,EAPrev,Reg1,1,0) :- \n   stack_def_use.def_used(EAStore,[RegBaseStore,StackPosStore],EALoad,[RegBaseLoad,StackPosLoad],_),\n   arch.memory_access(\"STORE\",EAStore,_,_,Reg1,RegBaseStore,<inlined_IndexReg_458>,_,StackPosStore),\n   <inlined_IndexReg_458> = \"NONE\",\n   arch.memory_access(\"LOAD\",EALoad,_,_,Reg2,RegBaseLoad,<inlined_IndexReg_861>,_,StackPosLoad),\n   <inlined_IndexReg_861> = \"NONE\",\n   reg_def_use.def_used(EAPrev,Reg1,EAStore,_).\nin file value_analysis.dl [80:1-84:49]" 
       (TIMER_ON @new_value_reg_edge "@t-recursive-rule;value_reg_edge;0;value_analysis.dl [80:1-84:49];value_reg_edge(EALoad,Reg2,EAPrev,Reg1,1,0) :- \\n   stack_def_use.def_used(EAStore,[RegBaseStore,StackPosStore],EALoad,[RegBaseLoad,StackPosLoad],_),\\n   arch.memory_access(\\\"STORE\\\",EAStore,_,_,Reg1,RegBaseStore,<inlined_IndexReg_458>,_,StackPosStore),\\n   <inlined_IndexReg_458> = \\\"NONE\\\",\\n   arch.memory_access(\\\"LOAD\\\",EALoad,_,_,Reg2,RegBaseLoad,<inlined_IndexReg_861>,_,StackPosLoad),\\n   <inlined_IndexReg_861> = \\\"NONE\\\",\\n   reg_def_use.def_used(EAPrev,Reg1,EAStore,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_stack_def_use.def_used)) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY arch.memory_access)))
          (FOR_IN t0 @delta_stack_def_use.def_used            (UNPACK t1 2 ((TUPLE t0 1))
            (UNPACK t2 2 ((TUPLE t0 3))
             (FOR t3 arch.memory_access (INDEX  (= (TUPLE t3 0) (STRING "STORE")) (= (TUPLE t3 1) (TUPLE t0 0)) (= (TUPLE t3 5) (TUPLE t1 0)) (= (TUPLE t3 6) (STRING "NONE")) (= (TUPLE t3 8) (TUPLE t1 1)))
              (FOR t4 arch.memory_access (INDEX  (= (TUPLE t4 0) (STRING "LOAD")) (= (TUPLE t4 1) (TUPLE t0 2)) (= (TUPLE t4 5) (TUPLE t2 0)) (= (TUPLE t4 6) (STRING "NONE")) (= (TUPLE t4 8) (TUPLE t2 1)))
               (FOR t5 reg_def_use.def_used (INDEX  (= (TUPLE t5 1) (TUPLE t3 4)) (= (TUPLE t5 2) (TUPLE t0 0)))
                (IF (AND (NOT (EXISTS value_reg_edge ((TUPLE t0 2) (TUPLE t4 4) (TUPLE t5 0) (TUPLE t3 4) (NUMBER 1) (NUMBER 0)))) (NOT (EXISTS @delta_reg_def_use.def_used ((TUPLE t5 0) (TUPLE t3 4) (TUPLE t0 0) UNDEF))))
                 (INSERT ((TUPLE t0 2) (TUPLE t4 4) (TUPLE t5 0) (TUPLE t3 4) (NUMBER 1) (NUMBER 0)) @new_value_reg_edge)
                )))))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_edge(EALoad,Reg2,EAPrev,Reg1,1,0) :- \n   stack_def_use.def_used(EAStore,[RegBaseStore,StackPosStore],EALoad,[RegBaseLoad,StackPosLoad],_),\n   arch.memory_access(\"STORE\",EAStore,_,_,Reg1,RegBaseStore,<inlined_IndexReg_458>,_,StackPosStore),\n   <inlined_IndexReg_458> = \"NONE\",\n   arch.memory_access(\"LOAD\",EALoad,_,_,Reg2,RegBaseLoad,<inlined_IndexReg_861>,_,StackPosLoad),\n   <inlined_IndexReg_861> = \"NONE\",\n   reg_def_use.def_used(EAPrev,Reg1,EAStore,_).\nin file value_analysis.dl [80:1-84:49]" 
       (TIMER_ON @new_value_reg_edge "@t-recursive-rule;value_reg_edge;1;value_analysis.dl [80:1-84:49];value_reg_edge(EALoad,Reg2,EAPrev,Reg1,1,0) :- \\n   stack_def_use.def_used(EAStore,[RegBaseStore,StackPosStore],EALoad,[RegBaseLoad,StackPosLoad],_),\\n   arch.memory_access(\\\"STORE\\\",EAStore,_,_,Reg1,RegBaseStore,<inlined_IndexReg_458>,_,StackPosStore),\\n   <inlined_IndexReg_458> = \\\"NONE\\\",\\n   arch.memory_access(\\\"LOAD\\\",EALoad,_,_,Reg2,RegBaseLoad,<inlined_IndexReg_861>,_,StackPosLoad),\\n   <inlined_IndexReg_861> = \\\"NONE\\\",\\n   reg_def_use.def_used(EAPrev,Reg1,EAStore,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY stack_def_use.def_used)) (NOT (ISEMPTY @delta_reg_def_use.def_used))) (NOT (ISEMPTY arch.memory_access)))
          (FOR_IN t0 stack_def_use.def_used            (UNPACK t1 2 ((TUPLE t0 1))
            (UNPACK t2 2 ((TUPLE t0 3))
             (FOR t3 arch.memory_access (INDEX  (= (TUPLE t3 0) (STRING "STORE")) (= (TUPLE t3 1) (TUPLE t0 0)) (= (TUPLE t3 5) (TUPLE t1 0)) (= (TUPLE t3 6) (STRING "NONE")) (= (TUPLE t3 8) (TUPLE t1 1)))
              (FOR t4 arch.memory_access (INDEX  (= (TUPLE t4 0) (STRING "LOAD")) (= (TUPLE t4 1) (TUPLE t0 2)) (= (TUPLE t4 5) (TUPLE t2 0)) (= (TUPLE t4 6) (STRING "NONE")) (= (TUPLE t4 8) (TUPLE t2 1)))
               (FOR t5 @delta_reg_def_use.def_used (INDEX  (= (TUPLE t5 1) (TUPLE t3 4)) (= (TUPLE t5 2) (TUPLE t0 0)))
                (IF (NOT (EXISTS value_reg_edge ((TUPLE t0 2) (TUPLE t4 4) (TUPLE t5 0) (TUPLE t3 4) (NUMBER 1) (NUMBER 0))))
                 (INSERT ((TUPLE t0 2) (TUPLE t4 4) (TUPLE t5 0) (TUPLE t3 4) (NUMBER 1) (NUMBER 0)) @new_value_reg_edge)
                )))))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_value_reg_limit "@t-recursive-relation;value_reg_limit;boundary_value_analysis.dl [141:7-141:22];"
(STMTS (STMTS (STMTS       (DEBUG 
 "value_reg_limit(EA_jmp,EA_branch,Reg,(Immediate+BranchOffset),BranchLT) :- \n   compare_and_jump_immediate(_,EA_jmp,CC,Reg,Immediate),\n   track_register(Reg),\n   limit_type_map(CC,BranchLT,_,BranchOffset,_),\n   direct_jump(EA_jmp,EA_branch),\n   may_fallthrough(EA_jmp,_).\nin file boundary_value_analysis.dl [145:1-153:54]" 
       (TIMER_ON @new_value_reg_limit "@t-recursive-rule;value_reg_limit;0;boundary_value_analysis.dl [145:1-153:54];value_reg_limit(EA_jmp,EA_branch,Reg,(Immediate+BranchOffset),BranchLT) :- \\n   compare_and_jump_immediate(_,EA_jmp,CC,Reg,Immediate),\\n   track_register(Reg),\\n   limit_type_map(CC,BranchLT,_,BranchOffset,_),\\n   direct_jump(EA_jmp,EA_branch),\\n   may_fallthrough(EA_jmp,_).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY may_fallthrough)) (NOT (ISEMPTY @delta_compare_and_jump_immediate))) (NOT (ISEMPTY limit_type_map))) (NOT (ISEMPTY direct_jump))) (NOT (ISEMPTY track_register)))
          (FOR_IN t0 @delta_compare_and_jump_immediate            (IF (AND (EXISTS track_register ((TUPLE t0 3))) (EXISTS may_fallthrough ((TUPLE t0 1) UNDEF)))
            (FOR t1 limit_type_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
             (FOR t2 direct_jump (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
              (IF (NOT (EXISTS value_reg_limit ((TUPLE t0 1) (TUPLE t2 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 4) (TUPLE t1 3)) (TUPLE t1 1))))
               (INSERT ((TUPLE t0 1) (TUPLE t2 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 4) (TUPLE t1 3)) (TUPLE t1 1)) @new_value_reg_limit)
              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_limit(EA_jmp,EA_fallthrough,Reg,(Immediate+FallthroughOffset),FallthroughLT) :- \n   compare_and_jump_immediate(_,EA_jmp,CC,Reg,Immediate),\n   track_register(Reg),\n   limit_type_map(CC,_,FallthroughLT,_,FallthroughOffset),\n   direct_jump(EA_jmp,_),\n   may_fallthrough(EA_jmp,EA_fallthrough).\nin file boundary_value_analysis.dl [145:1-153:54]" 
       (TIMER_ON @new_value_reg_limit "@t-recursive-rule;value_reg_limit;0;boundary_value_analysis.dl [145:1-153:54];value_reg_limit(EA_jmp,EA_fallthrough,Reg,(Immediate+FallthroughOffset),FallthroughLT) :- \\n   compare_and_jump_immediate(_,EA_jmp,CC,Reg,Immediate),\\n   track_register(Reg),\\n   limit_type_map(CC,_,FallthroughLT,_,FallthroughOffset),\\n   direct_jump(EA_jmp,_),\\n   may_fallthrough(EA_jmp,EA_fallthrough).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY may_fallthrough)) (NOT (ISEMPTY @delta_compare_and_jump_immediate))) (NOT (ISEMPTY limit_type_map))) (NOT (ISEMPTY direct_jump))) (NOT (ISEMPTY track_register)))
          (FOR_IN t0 @delta_compare_and_jump_immediate            (IF (AND (EXISTS track_register ((TUPLE t0 3))) (EXISTS direct_jump ((TUPLE t0 1) UNDEF)))
            (FOR t1 limit_type_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
             (FOR t2 may_fallthrough (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
              (IF (NOT (EXISTS value_reg_limit ((TUPLE t0 1) (TUPLE t2 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 4) (TUPLE t1 4)) (TUPLE t1 2))))
               (INSERT ((TUPLE t0 1) (TUPLE t2 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 4) (TUPLE t1 4)) (TUPLE t1 2)) @new_value_reg_limit)
              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_limit(EA_jmp,EA_branch,Reg2,(Immediate+Offset1),LT1) :- \n   compare_and_jump_register(EA_cmp,EA_jmp,CC,Reg1,Reg2),\n   limit_type_map(CC,LT1,_,Offset1,_),\n   reg_def_use.block_last_def(EA_cmp,EA_regdef,Reg1),\n   arch.move_reg_imm(EA_regdef,Reg1,Immediate,_),\n   track_register(Reg2),\n   direct_jump(EA_jmp,EA_branch),\n   may_fallthrough(EA_jmp,_).\nin file boundary_value_analysis.dl [156:1-182:54]" 
       (TIMER_ON @new_value_reg_limit "@t-recursive-rule;value_reg_limit;0;boundary_value_analysis.dl [156:1-182:54];value_reg_limit(EA_jmp,EA_branch,Reg2,(Immediate+Offset1),LT1) :- \\n   compare_and_jump_register(EA_cmp,EA_jmp,CC,Reg1,Reg2),\\n   limit_type_map(CC,LT1,_,Offset1,_),\\n   reg_def_use.block_last_def(EA_cmp,EA_regdef,Reg1),\\n   arch.move_reg_imm(EA_regdef,Reg1,Immediate,_),\\n   track_register(Reg2),\\n   direct_jump(EA_jmp,EA_branch),\\n   may_fallthrough(EA_jmp,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY may_fallthrough)) (NOT (ISEMPTY @delta_compare_and_jump_register))) (NOT (ISEMPTY reg_def_use.block_last_def))) (NOT (ISEMPTY arch.move_reg_imm))) (NOT (ISEMPTY limit_type_map))) (NOT (ISEMPTY direct_jump))) (NOT (ISEMPTY track_register)))
          (FOR_IN t0 @delta_compare_and_jump_register            (IF (AND (EXISTS track_register ((TUPLE t0 4))) (EXISTS may_fallthrough ((TUPLE t0 1) UNDEF)))
            (FOR t1 limit_type_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
             (FOR t2 reg_def_use.block_last_def (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 2) (TUPLE t0 3)))
              (FOR t3 arch.move_reg_imm (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (= (TUPLE t3 1) (TUPLE t0 3)))
               (FOR t4 direct_jump (INDEX  (= (TUPLE t4 0) (TUPLE t0 1)))
                (IF (NOT (EXISTS value_reg_limit ((TUPLE t0 1) (TUPLE t4 1) (TUPLE t0 4) (INTRINSIC + (TUPLE t3 2) (TUPLE t1 3)) (TUPLE t1 1))))
                 (INSERT ((TUPLE t0 1) (TUPLE t4 1) (TUPLE t0 4) (INTRINSIC + (TUPLE t3 2) (TUPLE t1 3)) (TUPLE t1 1)) @new_value_reg_limit)
                )))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_limit(EA_jmp,EA_branch,Reg1,(Immediate+Offset2),LT2) :- \n   compare_and_jump_register(EA_cmp,EA_jmp,CC,Reg1,Reg2),\n   limit_type_map(CC,_,LT2,_,Offset2),\n   reg_def_use.block_last_def(EA_cmp,EA_regdef,Reg2),\n   arch.move_reg_imm(EA_regdef,Reg2,Immediate,_),\n   track_register(Reg1),\n   direct_jump(EA_jmp,EA_branch),\n   may_fallthrough(EA_jmp,_).\nin file boundary_value_analysis.dl [156:1-182:54]" 
       (TIMER_ON @new_value_reg_limit "@t-recursive-rule;value_reg_limit;0;boundary_value_analysis.dl [156:1-182:54];value_reg_limit(EA_jmp,EA_branch,Reg1,(Immediate+Offset2),LT2) :- \\n   compare_and_jump_register(EA_cmp,EA_jmp,CC,Reg1,Reg2),\\n   limit_type_map(CC,_,LT2,_,Offset2),\\n   reg_def_use.block_last_def(EA_cmp,EA_regdef,Reg2),\\n   arch.move_reg_imm(EA_regdef,Reg2,Immediate,_),\\n   track_register(Reg1),\\n   direct_jump(EA_jmp,EA_branch),\\n   may_fallthrough(EA_jmp,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY may_fallthrough)) (NOT (ISEMPTY @delta_compare_and_jump_register))) (NOT (ISEMPTY reg_def_use.block_last_def))) (NOT (ISEMPTY arch.move_reg_imm))) (NOT (ISEMPTY limit_type_map))) (NOT (ISEMPTY direct_jump))) (NOT (ISEMPTY track_register)))
          (FOR_IN t0 @delta_compare_and_jump_register            (IF (AND (EXISTS track_register ((TUPLE t0 3))) (EXISTS may_fallthrough ((TUPLE t0 1) UNDEF)))
            (FOR t1 limit_type_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
             (FOR t2 reg_def_use.block_last_def (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 2) (TUPLE t0 4)))
              (FOR t3 arch.move_reg_imm (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (= (TUPLE t3 1) (TUPLE t0 4)))
               (FOR t4 direct_jump (INDEX  (= (TUPLE t4 0) (TUPLE t0 1)))
                (IF (NOT (EXISTS value_reg_limit ((TUPLE t0 1) (TUPLE t4 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t3 2) (TUPLE t1 4)) (TUPLE t1 2))))
                 (INSERT ((TUPLE t0 1) (TUPLE t4 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t3 2) (TUPLE t1 4)) (TUPLE t1 2)) @new_value_reg_limit)
                )))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_limit(EA_jmp,EA_fallthrough,Reg2,(Immediate+Offset2),LT2) :- \n   compare_and_jump_register(EA_cmp,EA_jmp,CC,Reg1,Reg2),\n   limit_type_map(CC,_,LT2,_,Offset2),\n   reg_def_use.block_last_def(EA_cmp,EA_regdef,Reg1),\n   arch.move_reg_imm(EA_regdef,Reg1,Immediate,_),\n   track_register(Reg2),\n   direct_jump(EA_jmp,_),\n   may_fallthrough(EA_jmp,EA_fallthrough).\nin file boundary_value_analysis.dl [156:1-182:54]" 
       (TIMER_ON @new_value_reg_limit "@t-recursive-rule;value_reg_limit;0;boundary_value_analysis.dl [156:1-182:54];value_reg_limit(EA_jmp,EA_fallthrough,Reg2,(Immediate+Offset2),LT2) :- \\n   compare_and_jump_register(EA_cmp,EA_jmp,CC,Reg1,Reg2),\\n   limit_type_map(CC,_,LT2,_,Offset2),\\n   reg_def_use.block_last_def(EA_cmp,EA_regdef,Reg1),\\n   arch.move_reg_imm(EA_regdef,Reg1,Immediate,_),\\n   track_register(Reg2),\\n   direct_jump(EA_jmp,_),\\n   may_fallthrough(EA_jmp,EA_fallthrough).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY may_fallthrough)) (NOT (ISEMPTY @delta_compare_and_jump_register))) (NOT (ISEMPTY reg_def_use.block_last_def))) (NOT (ISEMPTY arch.move_reg_imm))) (NOT (ISEMPTY limit_type_map))) (NOT (ISEMPTY direct_jump))) (NOT (ISEMPTY track_register)))
          (FOR_IN t0 @delta_compare_and_jump_register            (IF (AND (EXISTS track_register ((TUPLE t0 4))) (EXISTS direct_jump ((TUPLE t0 1) UNDEF)))
            (FOR t1 limit_type_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
             (FOR t2 reg_def_use.block_last_def (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 2) (TUPLE t0 3)))
              (FOR t3 arch.move_reg_imm (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (= (TUPLE t3 1) (TUPLE t0 3)))
               (FOR t4 may_fallthrough (INDEX  (= (TUPLE t4 0) (TUPLE t0 1)))
                (IF (NOT (EXISTS value_reg_limit ((TUPLE t0 1) (TUPLE t4 1) (TUPLE t0 4) (INTRINSIC + (TUPLE t3 2) (TUPLE t1 4)) (TUPLE t1 2))))
                 (INSERT ((TUPLE t0 1) (TUPLE t4 1) (TUPLE t0 4) (INTRINSIC + (TUPLE t3 2) (TUPLE t1 4)) (TUPLE t1 2)) @new_value_reg_limit)
                )))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_limit(EA_jmp,EA_fallthrough,Reg1,(Immediate+Offset1),LT1) :- \n   compare_and_jump_register(EA_cmp,EA_jmp,CC,Reg1,Reg2),\n   limit_type_map(CC,LT1,_,Offset1,_),\n   reg_def_use.block_last_def(EA_cmp,EA_regdef,Reg2),\n   arch.move_reg_imm(EA_regdef,Reg2,Immediate,_),\n   track_register(Reg1),\n   direct_jump(EA_jmp,_),\n   may_fallthrough(EA_jmp,EA_fallthrough).\nin file boundary_value_analysis.dl [156:1-182:54]" 
       (TIMER_ON @new_value_reg_limit "@t-recursive-rule;value_reg_limit;0;boundary_value_analysis.dl [156:1-182:54];value_reg_limit(EA_jmp,EA_fallthrough,Reg1,(Immediate+Offset1),LT1) :- \\n   compare_and_jump_register(EA_cmp,EA_jmp,CC,Reg1,Reg2),\\n   limit_type_map(CC,LT1,_,Offset1,_),\\n   reg_def_use.block_last_def(EA_cmp,EA_regdef,Reg2),\\n   arch.move_reg_imm(EA_regdef,Reg2,Immediate,_),\\n   track_register(Reg1),\\n   direct_jump(EA_jmp,_),\\n   may_fallthrough(EA_jmp,EA_fallthrough).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY may_fallthrough)) (NOT (ISEMPTY @delta_compare_and_jump_register))) (NOT (ISEMPTY reg_def_use.block_last_def))) (NOT (ISEMPTY arch.move_reg_imm))) (NOT (ISEMPTY limit_type_map))) (NOT (ISEMPTY direct_jump))) (NOT (ISEMPTY track_register)))
          (FOR_IN t0 @delta_compare_and_jump_register            (IF (AND (EXISTS track_register ((TUPLE t0 3))) (EXISTS direct_jump ((TUPLE t0 1) UNDEF)))
            (FOR t1 limit_type_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
             (FOR t2 reg_def_use.block_last_def (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 2) (TUPLE t0 4)))
              (FOR t3 arch.move_reg_imm (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (= (TUPLE t3 1) (TUPLE t0 4)))
               (FOR t4 may_fallthrough (INDEX  (= (TUPLE t4 0) (TUPLE t0 1)))
                (IF (NOT (EXISTS value_reg_limit ((TUPLE t0 1) (TUPLE t4 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t3 2) (TUPLE t1 3)) (TUPLE t1 1))))
                 (INSERT ((TUPLE t0 1) (TUPLE t4 1) (TUPLE t0 3) (INTRINSIC + (TUPLE t3 2) (TUPLE t1 3)) (TUPLE t1 1)) @new_value_reg_limit)
                )))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_limit(EA_target,EA_limited,Reg,(Immediate+BranchOffset),BranchLT) :- \n   compare_and_jump_indirect(EA_cmp,EA_jmp,CC,IndirectOp,Immediate),\n   limit_type_map(CC,BranchLT,_,BranchOffset,_),\n   next(EA_cmp,EA_jmp),\n   direct_jump(EA_jmp,EA_target),\n   arch.memory_access(\"LOAD\",EA_target,_,_,Reg,_,_,_,_),\n   track_register(Reg),\n   instruction_get_op(EA_target,_,IndirectOp),\n   code_in_block(EA_target,<inlined_Block_862>),\n   may_fallthrough(EA_target,EA_limited),\n   code_in_block(EA_limited,<inlined_Block_862>).\nin file boundary_value_analysis.dl [187:1-207:38]" 
       (TIMER_ON @new_value_reg_limit "@t-recursive-rule;value_reg_limit;0;boundary_value_analysis.dl [187:1-207:38];value_reg_limit(EA_target,EA_limited,Reg,(Immediate+BranchOffset),BranchLT) :- \\n   compare_and_jump_indirect(EA_cmp,EA_jmp,CC,IndirectOp,Immediate),\\n   limit_type_map(CC,BranchLT,_,BranchOffset,_),\\n   next(EA_cmp,EA_jmp),\\n   direct_jump(EA_jmp,EA_target),\\n   arch.memory_access(\\\"LOAD\\\",EA_target,_,_,Reg,_,_,_,_),\\n   track_register(Reg),\\n   instruction_get_op(EA_target,_,IndirectOp),\\n   code_in_block(EA_target,<inlined_Block_862>),\\n   may_fallthrough(EA_target,EA_limited),\\n   code_in_block(EA_limited,<inlined_Block_862>).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY next)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY direct_jump))) (NOT (ISEMPTY track_register))) (NOT (ISEMPTY limit_type_map))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY @delta_compare_and_jump_indirect))) (NOT (ISEMPTY may_fallthrough)))
          (FOR_IN t0 @delta_compare_and_jump_indirect            (IF (EXISTS next ((TUPLE t0 0) (TUPLE t0 1)))
            (FOR t1 limit_type_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
             (FOR t2 direct_jump (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
              (IF (EXISTS instruction_get_op ((TUPLE t2 1) UNDEF (TUPLE t0 3)))
               (FOR t3 arch.memory_access (INDEX  (= (TUPLE t3 0) (STRING "LOAD")) (= (TUPLE t3 1) (TUPLE t2 1)))
                (IF (EXISTS track_register ((TUPLE t3 4)))
                 (FOR t4 code_in_block (INDEX  (= (TUPLE t4 0) (TUPLE t2 1)))
                  (FOR t5 may_fallthrough (INDEX  (= (TUPLE t5 0) (TUPLE t2 1)))
                   (IF (AND (EXISTS code_in_block ((TUPLE t5 1) (TUPLE t4 1))) (NOT (EXISTS value_reg_limit ((TUPLE t2 1) (TUPLE t5 1) (TUPLE t3 4) (INTRINSIC + (TUPLE t0 4) (TUPLE t1 3)) (TUPLE t1 1)))))
                    (INSERT ((TUPLE t2 1) (TUPLE t5 1) (TUPLE t3 4) (INTRINSIC + (TUPLE t0 4) (TUPLE t1 3)) (TUPLE t1 1)) @new_value_reg_limit)
                   )))                ))              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_limit(EA_target,EA_limited,Reg,(Immediate+FallthroughOffset),FallthroughLT) :- \n   compare_and_jump_indirect(EA_cmp,EA_jmp,CC,IndirectOp,Immediate),\n   limit_type_map(CC,_,FallthroughLT,_,FallthroughOffset),\n   next(EA_cmp,EA_jmp),\n   may_fallthrough(EA_jmp,EA_target),\n   arch.memory_access(\"LOAD\",EA_target,_,_,Reg,_,_,_,_),\n   track_register(Reg),\n   instruction_get_op(EA_target,_,IndirectOp),\n   code_in_block(EA_target,<inlined_Block_863>),\n   may_fallthrough(EA_target,EA_limited),\n   code_in_block(EA_limited,<inlined_Block_863>).\nin file boundary_value_analysis.dl [187:1-207:38]" 
       (TIMER_ON @new_value_reg_limit "@t-recursive-rule;value_reg_limit;0;boundary_value_analysis.dl [187:1-207:38];value_reg_limit(EA_target,EA_limited,Reg,(Immediate+FallthroughOffset),FallthroughLT) :- \\n   compare_and_jump_indirect(EA_cmp,EA_jmp,CC,IndirectOp,Immediate),\\n   limit_type_map(CC,_,FallthroughLT,_,FallthroughOffset),\\n   next(EA_cmp,EA_jmp),\\n   may_fallthrough(EA_jmp,EA_target),\\n   arch.memory_access(\\\"LOAD\\\",EA_target,_,_,Reg,_,_,_,_),\\n   track_register(Reg),\\n   instruction_get_op(EA_target,_,IndirectOp),\\n   code_in_block(EA_target,<inlined_Block_863>),\\n   may_fallthrough(EA_target,EA_limited),\\n   code_in_block(EA_limited,<inlined_Block_863>).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY track_register))) (NOT (ISEMPTY limit_type_map))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY @delta_compare_and_jump_indirect))) (NOT (ISEMPTY may_fallthrough)))
          (FOR_IN t0 @delta_compare_and_jump_indirect            (IF (EXISTS next ((TUPLE t0 0) (TUPLE t0 1)))
            (FOR t1 limit_type_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
             (FOR t2 may_fallthrough (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
              (IF (EXISTS instruction_get_op ((TUPLE t2 1) UNDEF (TUPLE t0 3)))
               (FOR t3 arch.memory_access (INDEX  (= (TUPLE t3 0) (STRING "LOAD")) (= (TUPLE t3 1) (TUPLE t2 1)))
                (IF (EXISTS track_register ((TUPLE t3 4)))
                 (FOR t4 code_in_block (INDEX  (= (TUPLE t4 0) (TUPLE t2 1)))
                  (FOR t5 may_fallthrough (INDEX  (= (TUPLE t5 0) (TUPLE t2 1)))
                   (IF (AND (EXISTS code_in_block ((TUPLE t5 1) (TUPLE t4 1))) (NOT (EXISTS value_reg_limit ((TUPLE t2 1) (TUPLE t5 1) (TUPLE t3 4) (INTRINSIC + (TUPLE t0 4) (TUPLE t1 4)) (TUPLE t1 2)))))
                    (INSERT ((TUPLE t2 1) (TUPLE t5 1) (TUPLE t3 4) (INTRINSIC + (TUPLE t0 4) (TUPLE t1 4)) (TUPLE t1 2)) @new_value_reg_limit)
                   )))                ))              )))           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_value_reg_unsupported "@t-recursive-relation;value_reg_unsupported;value_analysis.dl [104:7-104:28];"
(STMTS (STMTS (STMTS       (DEBUG 
 "value_reg_unsupported(EA,Reg) :- \n   def_used_for_address(EA,Reg,_),\n   arch.move_reg_reg(EA,Dst,Src),\n   track_register(Dst),\n   !track_register(Src).\nin file value_analysis.dl [119:1-123:26]" 
       (TIMER_ON @new_value_reg_unsupported "@t-recursive-rule;value_reg_unsupported;0;value_analysis.dl [119:1-123:26];value_reg_unsupported(EA,Reg) :- \\n   def_used_for_address(EA,Reg,_),\\n   arch.move_reg_reg(EA,Dst,Src),\\n   track_register(Dst),\\n   !track_register(Src).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY track_register)) (NOT (ISEMPTY @delta_def_used_for_address))) (NOT (ISEMPTY arch.move_reg_reg)))
          (FOR_IN t0 @delta_def_used_for_address            (IF (NOT (EXISTS value_reg_unsupported ((TUPLE t0 0) (TUPLE t0 1))))
            (FOR t1 arch.move_reg_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (AND (EXISTS track_register ((TUPLE t1 1))) (NOT (EXISTS track_register ((TUPLE t1 2)))))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @new_value_reg_unsupported)
             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_unsupported(EA,Reg) :- \n   def_used_for_address(EA,Reg,_),\n   arch.call(EA,_).\nin file value_analysis.dl [126:1-128:21]" 
       (TIMER_ON @new_value_reg_unsupported "@t-recursive-rule;value_reg_unsupported;0;value_analysis.dl [126:1-128:21];value_reg_unsupported(EA,Reg) :- \\n   def_used_for_address(EA,Reg,_),\\n   arch.call(EA,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_def_used_for_address)) (NOT (ISEMPTY arch.call)))
          (FOR_IN t0 @delta_def_used_for_address            (IF (AND (EXISTS arch.call ((TUPLE t0 0) UNDEF)) (NOT (EXISTS value_reg_unsupported ((TUPLE t0 0) (TUPLE t0 1)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @new_value_reg_unsupported)
           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_unsupported(EA,Reg) :- \n   def_used_for_address(EA,Reg,_),\n   arch.memory_access(\"LOAD\",EA,_,_,Reg,RegBase,_,_,_),\n   RegBase != \"NONE\".\nin file value_analysis.dl [107:1-116:7]" 
       (TIMER_ON @new_value_reg_unsupported "@t-recursive-rule;value_reg_unsupported;0;value_analysis.dl [107:1-116:7];value_reg_unsupported(EA,Reg) :- \\n   def_used_for_address(EA,Reg,_),\\n   arch.memory_access(\\\"LOAD\\\",EA,_,_,Reg,RegBase,_,_,_),\\n   RegBase != \\\"NONE\\\".;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_def_used_for_address)) (NOT (ISEMPTY arch.memory_access)))
          (FOR_IN t0 @delta_def_used_for_address            (IF (NOT (EXISTS value_reg_unsupported ((TUPLE t0 0) (TUPLE t0 1))))
            (INDEXED_IF_EXISTS t1 arch.memory_access (INDEX  (= (TUPLE t1 0) (STRING "LOAD")) (= (TUPLE t1 1) (TUPLE t0 0)) (= (TUPLE t1 4) (TUPLE t0 1))) (CONSTRAINT != (TUPLE t1 5)  (STRING "NONE"))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @new_value_reg_unsupported)
)           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg_unsupported(EA,Reg) :- \n   def_used_for_address(EA,Reg,_),\n   arch.memory_access(\"LOAD\",EA,_,_,Reg,_,RegIndex,_,_),\n   RegIndex != \"NONE\".\nin file value_analysis.dl [107:1-116:7]" 
       (TIMER_ON @new_value_reg_unsupported "@t-recursive-rule;value_reg_unsupported;0;value_analysis.dl [107:1-116:7];value_reg_unsupported(EA,Reg) :- \\n   def_used_for_address(EA,Reg,_),\\n   arch.memory_access(\\\"LOAD\\\",EA,_,_,Reg,_,RegIndex,_,_),\\n   RegIndex != \\\"NONE\\\".;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_def_used_for_address)) (NOT (ISEMPTY arch.memory_access)))
          (FOR_IN t0 @delta_def_used_for_address            (IF (NOT (EXISTS value_reg_unsupported ((TUPLE t0 0) (TUPLE t0 1))))
            (INDEXED_IF_EXISTS t1 arch.memory_access (INDEX  (= (TUPLE t1 0) (STRING "LOAD")) (= (TUPLE t1 1) (TUPLE t0 0)) (= (TUPLE t1 4) (TUPLE t0 1))) (CONSTRAINT != (TUPLE t1 6)  (STRING "NONE"))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @new_value_reg_unsupported)
)           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_base_relative_jump "@t-recursive-relation;base_relative_jump;binary/pe/symbolization.dl [174:7-174:25];"
     )
 ) (STMTS      (TIMER_ON @new_base_relative_operand "@t-recursive-relation;base_relative_operand;binary/pe/symbolization.dl [85:7-85:28];"
     )
 ) (STMTS      (TIMER_ON @new_base_relative_operation "@t-recursive-relation;base_relative_operation;binary/pe/symbolization.dl [163:7-163:30];"
     )
 ) (STMTS      (TIMER_ON @new_block_next "@t-recursive-relation;block_next;use_def_analysis.dl [70:7-70:17];"
     )
 ) (STMTS      (TIMER_ON @new_cmp_defines "@t-recursive-relation;cmp_defines;boundary_value_analysis.dl [212:7-212:18];"
     )
 ) (STMTS      (TIMER_ON @new_compare_and_jump_immediate "@t-recursive-relation;compare_and_jump_immediate;boundary_value_analysis.dl [58:7-58:33];"
     )
 ) (STMTS      (TIMER_ON @new_compare_and_jump_indirect "@t-recursive-relation;compare_and_jump_indirect;boundary_value_analysis.dl [105:7-105:32];"
     )
 ) (STMTS      (TIMER_ON @new_compare_and_jump_register "@t-recursive-relation;compare_and_jump_register;boundary_value_analysis.dl [88:7-88:32];"
     )
 ) (STMTS      (TIMER_ON @new_const_value_reg_used "@t-recursive-relation;const_value_reg_used;value_analysis.dl [369:7-369:27];"
     )
 ) (STMTS      (TIMER_ON @new_def_used_for_address "@t-recursive-relation;def_used_for_address;use_def_analysis.dl [569:7-569:27];"
     )
 ) (STMTS      (TIMER_ON @new_flags_and_jump_pair "@t-recursive-relation;flags_and_jump_pair;boundary_value_analysis.dl [46:7-46:26];"
     )
 ) (STMTS      (TIMER_ON @new_got_relative_operand "@t-recursive-relation;got_relative_operand;binary/elf/symbolization.dl [88:7-88:27];"
     )
 ) (STMTS      (TIMER_ON @new_jump_table_element_access "@t-recursive-relation;jump_table_element_access;relative_jump_tables.dl [98:7-98:32];"
     )
 ) (STMTS      (TIMER_ON @new_jump_table_max "@t-recursive-relation;jump_table_max;relative_jump_tables.dl [211:7-211:21];"
     )
 ) (STMTS      (TIMER_ON @new_jump_table_signed "@t-recursive-relation;jump_table_signed;relative_jump_tables.dl [172:7-172:24];"
     )
 ) (STMTS      (TIMER_ON @new_jump_table_start "@t-recursive-relation;jump_table_start;relative_jump_tables.dl [259:7-259:23];"
     )
 ) (STMTS      (TIMER_ON @new_jump_table_target "@t-recursive-relation;jump_table_target;jump_tables.dl [100:7-100:24];"
     )
 ) (STMTS      (TIMER_ON @new_last_value_reg_limit "@t-recursive-relation;last_value_reg_limit;boundary_value_analysis.dl [281:7-281:27];"
     )
 ) (STMTS      (TIMER_ON @new_no_value_reg_limit "@t-recursive-relation;no_value_reg_limit;boundary_value_analysis.dl [225:7-225:25];"
     )
 ) (STMTS      (TIMER_ON @new_reg_def_use.def_used "@t-recursive-relation;reg_def_use.def_used;use_def_analysis.dl [361:11-361:19];"
     )
 ) (STMTS      (TIMER_ON @new_reg_def_use.live_var_at_block_end "@t-recursive-relation;reg_def_use.live_var_at_block_end;use_def_analysis.dl [253:11-253:32];"
     )
 ) (STMTS      (TIMER_ON @new_reg_def_use.live_var_at_prior_used "@t-recursive-relation;reg_def_use.live_var_at_prior_used;use_def_analysis.dl [280:11-280:33];"
     )
 ) (STMTS      (TIMER_ON @new_reg_def_use.live_var_used "@t-recursive-relation;reg_def_use.live_var_used;use_def_analysis.dl [229:11-229:24];"
     )
 ) (STMTS      (TIMER_ON @new_reg_def_use.return_val_used "@t-recursive-relation;reg_def_use.return_val_used;use_def_analysis.dl [327:11-327:26];"
     )
 ) (STMTS      (TIMER_ON @new_reg_has_base_image "@t-recursive-relation;reg_has_base_image;binary/pe/symbolization.dl [46:7-46:25];"
     )
 ) (STMTS      (TIMER_ON @new_reg_has_got "@t-recursive-relation;reg_has_got;binary/elf/symbolization.dl [37:7-37:18];"
     )
 ) (STMTS      (TIMER_ON @new_reg_reg_arithmetic_operation_defs "@t-recursive-relation;reg_reg_arithmetic_operation_defs;value_analysis.dl [272:7-272:40];"
     )
 ) (STMTS      (TIMER_ON @new_relative_jump_table_entry_candidate "@t-recursive-relation;relative_jump_table_entry_candidate;relative_jump_tables.dl [354:7-354:42];"
     )
 ) (STMTS      (TIMER_ON @new_stack_def_use.def_used "@t-recursive-relation;stack_def_use.def_used;use_def_analysis.dl [466:11-466:19];"
     )
 ) (STMTS      (TIMER_ON @new_stack_def_use.live_var_at_block_end "@t-recursive-relation;stack_def_use.live_var_at_block_end;use_def_analysis.dl [253:11-253:32];"
     )
 ) (STMTS      (TIMER_ON @new_stack_def_use.live_var_at_prior_used "@t-recursive-relation;stack_def_use.live_var_at_prior_used;use_def_analysis.dl [280:11-280:33];"
     )
 ) (STMTS      (TIMER_ON @new_stack_def_use.live_var_used "@t-recursive-relation;stack_def_use.live_var_used;use_def_analysis.dl [229:11-229:24];"
     )
 ) (STMTS      (TIMER_ON @new_stack_def_use.live_var_used_in_block "@t-recursive-relation;stack_def_use.live_var_used_in_block;use_def_analysis.dl [498:11-498:33];"
     )
 ) (STMTS      (TIMER_ON @new_tls_desc_call "@t-recursive-relation;tls_desc_call;tls.dl [286:7-286:20];"
     )
 ) (STMTS      (TIMER_ON @new_tls_get_addr "@t-recursive-relation;tls_get_addr;tls.dl [262:7-262:19];"
     )
 ) (STMTS      (TIMER_ON @new_value_reg "@t-recursive-relation;value_reg;value_analysis.dl [63:7-63:16];"
(STMTS (STMTS       (CLEAR @delta_value_reg)
 (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps1) <= value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps2) :- \n   Steps2 <= Steps1.\nin file value_analysis.dl [246:1-247:22]" 
       (TIMER_ON @reject_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [246:1-247:22];value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps1) <= value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps2) :- \\n   Steps2 <= Steps1.;"
(QUERY
         (IF (NOT (ISEMPTY @new_value_reg))
          (FOR_IN t0 @new_value_reg            (INDEXED_IF_EXISTS t1 @new_value_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)) (= (TUPLE t1 3) (TUPLE t0 3)) (= (TUPLE t1 4) (TUPLE t0 4)) (= (TUPLE t1 5) (TUPLE t0 5))) (AND (NOT (CONSTRAINT = (TUPLE t0 6)  (TUPLE t1 6))) (CONSTRAINT <= (TUPLE t1 6)  (TUPLE t0 6)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @reject_value_reg)
))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps1) <= value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps2) :- \n   Steps2 <= Steps1.\nin file value_analysis.dl [246:1-247:22]" 
       (TIMER_ON @reject_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [246:1-247:22];value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps1) <= value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps2) :- \\n   Steps2 <= Steps1.;"
(QUERY
         (IF (AND (NOT (ISEMPTY @new_value_reg)) (NOT (ISEMPTY value_reg)))
          (FOR_IN t0 @new_value_reg            (INDEXED_IF_EXISTS t1 value_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)) (= (TUPLE t1 3) (TUPLE t0 3)) (= (TUPLE t1 4) (TUPLE t0 4)) (= (TUPLE t1 5) (TUPLE t0 5))) (CONSTRAINT <= (TUPLE t1 6)  (TUPLE t0 6))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @reject_value_reg)
))
         )        )
       )
      )
 ) (QUERY
       (FOR_IN t0 @new_value_reg         (IF (NOT (EXISTS @reject_value_reg ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6))))
         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @delta_value_reg)
        ))
      )
       (CLEAR @reject_value_reg)
       (CLEAR @new_value_reg)
 (STMTS       (DEBUG 
 "value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps1) <= value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps2) :- \n   Steps2 <= Steps1.\nin file value_analysis.dl [246:1-247:22]" 
       (TIMER_ON @delete_value_reg "@t-recursive-rule;value_reg;0;value_analysis.dl [246:1-247:22];value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps1) <= value_reg(EA,Reg,EA_reg1,Reg1,Multiplier,Offset,Steps2) :- \\n   Steps2 <= Steps1.;"
(QUERY
         (IF (AND (NOT (ISEMPTY value_reg)) (NOT (ISEMPTY @delta_value_reg)))
          (FOR_IN t0 value_reg            (INDEXED_IF_EXISTS t1 @delta_value_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)) (= (TUPLE t1 3) (TUPLE t0 3)) (= (TUPLE t1 4) (TUPLE t0 4)) (= (TUPLE t1 5) (TUPLE t0 5))) (CONSTRAINT <= (TUPLE t1 6)  (TUPLE t0 6))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @delete_value_reg)
))
         )        )
       )
      )
 ) (QUERY
       (FOR_IN t0 @delete_value_reg         (ERASE ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) value_reg)
)
      )
       (CLEAR @delete_value_reg)
 ) )     )
 ) (STMTS      (TIMER_ON @new_value_reg_edge "@t-recursive-relation;value_reg_edge;value_analysis.dl [61:7-61:21];"
     )
 ) (STMTS      (TIMER_ON @new_value_reg_limit "@t-recursive-relation;value_reg_limit;boundary_value_analysis.dl [141:7-141:22];"
     )
 ) (STMTS      (TIMER_ON @new_value_reg_unsupported "@t-recursive-relation;value_reg_unsupported;value_analysis.dl [104:7-104:28];"
     )
 ) )  (STMTS      (EXIT (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (ISEMPTY @new_base_relative_jump) (ISEMPTY @new_base_relative_operand)) (ISEMPTY @new_base_relative_operation)) (ISEMPTY @new_block_next)) (ISEMPTY @new_cmp_defines)) (ISEMPTY @new_compare_and_jump_immediate)) (ISEMPTY @new_compare_and_jump_indirect)) (ISEMPTY @new_compare_and_jump_register)) (ISEMPTY @new_const_value_reg_used)) (ISEMPTY @new_def_used_for_address)) (ISEMPTY @new_flags_and_jump_pair)) (ISEMPTY @new_got_relative_operand)) (ISEMPTY @new_jump_table_element_access)) (ISEMPTY @new_jump_table_max)) (ISEMPTY @new_jump_table_signed)) (ISEMPTY @new_jump_table_start)) (ISEMPTY @new_jump_table_target)) (ISEMPTY @new_last_value_reg_limit)) (ISEMPTY @new_no_value_reg_limit)) (ISEMPTY @new_reg_def_use.def_used)) (ISEMPTY @new_reg_def_use.live_var_at_block_end)) (ISEMPTY @new_reg_def_use.live_var_at_prior_used)) (ISEMPTY @new_reg_def_use.live_var_used)) (ISEMPTY @new_reg_def_use.return_val_used)) (ISEMPTY @new_reg_has_base_image)) (ISEMPTY @new_reg_has_got)) (ISEMPTY @new_reg_reg_arithmetic_operation_defs)) (ISEMPTY @new_relative_jump_table_entry_candidate)) (ISEMPTY @new_stack_def_use.def_used)) (ISEMPTY @new_stack_def_use.live_var_at_block_end)) (ISEMPTY @new_stack_def_use.live_var_at_prior_used)) (ISEMPTY @new_stack_def_use.live_var_used)) (ISEMPTY @new_stack_def_use.live_var_used_in_block)) (ISEMPTY @new_tls_desc_call)) (ISEMPTY @new_tls_get_addr)) (ISEMPTY @delta_value_reg)) (ISEMPTY @new_value_reg_edge)) (ISEMPTY @new_value_reg_limit)) (ISEMPTY @new_value_reg_unsupported)))
 ) (STMTS      (TIMER_ON @new_base_relative_jump "@c-recursive-relation;base_relative_jump;binary/pe/symbolization.dl [174:7-174:25];"
(STMTS (QUERY
       (FOR_IN t0 @new_base_relative_jump         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) base_relative_jump)
)
      )
       (SWAP @delta_base_relative_jump @new_base_relative_jump)
       (CLEAR @new_base_relative_jump)
 )     )
      (TIMER_ON @new_base_relative_operand "@c-recursive-relation;base_relative_operand;binary/pe/symbolization.dl [85:7-85:28];"
(STMTS (QUERY
       (FOR_IN t0 @new_base_relative_operand         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) base_relative_operand)
)
      )
       (SWAP @delta_base_relative_operand @new_base_relative_operand)
       (CLEAR @new_base_relative_operand)
 )     )
      (TIMER_ON @new_base_relative_operation "@c-recursive-relation;base_relative_operation;binary/pe/symbolization.dl [163:7-163:30];"
(STMTS (QUERY
       (FOR_IN t0 @new_base_relative_operation         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) base_relative_operation)
)
      )
       (SWAP @delta_base_relative_operation @new_base_relative_operation)
       (CLEAR @new_base_relative_operation)
 )     )
      (TIMER_ON @new_block_next "@c-recursive-relation;block_next;use_def_analysis.dl [70:7-70:17];"
(STMTS (QUERY
       (FOR_IN t0 @new_block_next         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) block_next)
)
      )
       (SWAP @delta_block_next @new_block_next)
       (CLEAR @new_block_next)
 )     )
      (TIMER_ON @new_cmp_defines "@c-recursive-relation;cmp_defines;boundary_value_analysis.dl [212:7-212:18];"
(STMTS (QUERY
       (FOR_IN t0 @new_cmp_defines         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) cmp_defines)
)
      )
       (SWAP @delta_cmp_defines @new_cmp_defines)
       (CLEAR @new_cmp_defines)
 )     )
      (TIMER_ON @new_compare_and_jump_immediate "@c-recursive-relation;compare_and_jump_immediate;boundary_value_analysis.dl [58:7-58:33];"
(STMTS (QUERY
       (FOR_IN t0 @new_compare_and_jump_immediate         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) compare_and_jump_immediate)
)
      )
       (SWAP @delta_compare_and_jump_immediate @new_compare_and_jump_immediate)
       (CLEAR @new_compare_and_jump_immediate)
 )     )
      (TIMER_ON @new_compare_and_jump_indirect "@c-recursive-relation;compare_and_jump_indirect;boundary_value_analysis.dl [105:7-105:32];"
(STMTS (QUERY
       (FOR_IN t0 @new_compare_and_jump_indirect         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) compare_and_jump_indirect)
)
      )
       (SWAP @delta_compare_and_jump_indirect @new_compare_and_jump_indirect)
       (CLEAR @new_compare_and_jump_indirect)
 )     )
      (TIMER_ON @new_compare_and_jump_register "@c-recursive-relation;compare_and_jump_register;boundary_value_analysis.dl [88:7-88:32];"
(STMTS (QUERY
       (FOR_IN t0 @new_compare_and_jump_register         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) compare_and_jump_register)
)
      )
       (SWAP @delta_compare_and_jump_register @new_compare_and_jump_register)
       (CLEAR @new_compare_and_jump_register)
 )     )
      (TIMER_ON @new_const_value_reg_used "@c-recursive-relation;const_value_reg_used;value_analysis.dl [369:7-369:27];"
(STMTS (QUERY
       (FOR_IN t0 @new_const_value_reg_used         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) const_value_reg_used)
)
      )
       (SWAP @delta_const_value_reg_used @new_const_value_reg_used)
       (CLEAR @new_const_value_reg_used)
 )     )
      (TIMER_ON @new_def_used_for_address "@c-recursive-relation;def_used_for_address;use_def_analysis.dl [569:7-569:27];"
(STMTS (QUERY
       (FOR_IN t0 @new_def_used_for_address         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) def_used_for_address)
)
      )
       (SWAP @delta_def_used_for_address @new_def_used_for_address)
       (CLEAR @new_def_used_for_address)
 )     )
      (TIMER_ON @new_flags_and_jump_pair "@c-recursive-relation;flags_and_jump_pair;boundary_value_analysis.dl [46:7-46:26];"
(STMTS (QUERY
       (FOR_IN t0 @new_flags_and_jump_pair         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) flags_and_jump_pair)
)
      )
       (SWAP @delta_flags_and_jump_pair @new_flags_and_jump_pair)
       (CLEAR @new_flags_and_jump_pair)
 )     )
      (TIMER_ON @new_got_relative_operand "@c-recursive-relation;got_relative_operand;binary/elf/symbolization.dl [88:7-88:27];"
(STMTS (QUERY
       (FOR_IN t0 @new_got_relative_operand         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) got_relative_operand)
)
      )
       (SWAP @delta_got_relative_operand @new_got_relative_operand)
       (CLEAR @new_got_relative_operand)
 )     )
      (TIMER_ON @new_jump_table_element_access "@c-recursive-relation;jump_table_element_access;relative_jump_tables.dl [98:7-98:32];"
(STMTS (QUERY
       (FOR_IN t0 @new_jump_table_element_access         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) jump_table_element_access)
)
      )
       (SWAP @delta_jump_table_element_access @new_jump_table_element_access)
       (CLEAR @new_jump_table_element_access)
 )     )
      (TIMER_ON @new_jump_table_max "@c-recursive-relation;jump_table_max;relative_jump_tables.dl [211:7-211:21];"
(STMTS (QUERY
       (FOR_IN t0 @new_jump_table_max         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) jump_table_max)
)
      )
       (SWAP @delta_jump_table_max @new_jump_table_max)
       (CLEAR @new_jump_table_max)
 )     )
      (TIMER_ON @new_jump_table_signed "@c-recursive-relation;jump_table_signed;relative_jump_tables.dl [172:7-172:24];"
(STMTS (QUERY
       (FOR_IN t0 @new_jump_table_signed         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) jump_table_signed)
)
      )
       (SWAP @delta_jump_table_signed @new_jump_table_signed)
       (CLEAR @new_jump_table_signed)
 )     )
      (TIMER_ON @new_jump_table_start "@c-recursive-relation;jump_table_start;relative_jump_tables.dl [259:7-259:23];"
(STMTS (QUERY
       (FOR_IN t0 @new_jump_table_start         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) jump_table_start)
)
      )
       (SWAP @delta_jump_table_start @new_jump_table_start)
       (CLEAR @new_jump_table_start)
 )     )
      (TIMER_ON @new_jump_table_target "@c-recursive-relation;jump_table_target;jump_tables.dl [100:7-100:24];"
(STMTS (QUERY
       (FOR_IN t0 @new_jump_table_target         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) jump_table_target)
)
      )
       (SWAP @delta_jump_table_target @new_jump_table_target)
       (CLEAR @new_jump_table_target)
 )     )
      (TIMER_ON @new_last_value_reg_limit "@c-recursive-relation;last_value_reg_limit;boundary_value_analysis.dl [281:7-281:27];"
(STMTS (QUERY
       (FOR_IN t0 @new_last_value_reg_limit         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) last_value_reg_limit)
)
      )
       (SWAP @delta_last_value_reg_limit @new_last_value_reg_limit)
       (CLEAR @new_last_value_reg_limit)
 )     )
      (TIMER_ON @new_no_value_reg_limit "@c-recursive-relation;no_value_reg_limit;boundary_value_analysis.dl [225:7-225:25];"
(STMTS (QUERY
       (FOR_IN t0 @new_no_value_reg_limit         (INSERT ((TUPLE t0 0)) no_value_reg_limit)
)
      )
       (SWAP @delta_no_value_reg_limit @new_no_value_reg_limit)
       (CLEAR @new_no_value_reg_limit)
 )     )
      (TIMER_ON @new_reg_def_use.def_used "@c-recursive-relation;reg_def_use.def_used;use_def_analysis.dl [361:11-361:19];"
(STMTS (QUERY
       (FOR_IN t0 @new_reg_def_use.def_used         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) reg_def_use.def_used)
)
      )
       (SWAP @delta_reg_def_use.def_used @new_reg_def_use.def_used)
       (CLEAR @new_reg_def_use.def_used)
 )     )
      (TIMER_ON @new_reg_def_use.live_var_at_block_end "@c-recursive-relation;reg_def_use.live_var_at_block_end;use_def_analysis.dl [253:11-253:32];"
(STMTS (QUERY
       (FOR_IN t0 @new_reg_def_use.live_var_at_block_end         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) reg_def_use.live_var_at_block_end)
)
      )
       (SWAP @delta_reg_def_use.live_var_at_block_end @new_reg_def_use.live_var_at_block_end)
       (CLEAR @new_reg_def_use.live_var_at_block_end)
 )     )
      (TIMER_ON @new_reg_def_use.live_var_at_prior_used "@c-recursive-relation;reg_def_use.live_var_at_prior_used;use_def_analysis.dl [280:11-280:33];"
(STMTS (QUERY
       (FOR_IN t0 @new_reg_def_use.live_var_at_prior_used         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) reg_def_use.live_var_at_prior_used)
)
      )
       (SWAP @delta_reg_def_use.live_var_at_prior_used @new_reg_def_use.live_var_at_prior_used)
       (CLEAR @new_reg_def_use.live_var_at_prior_used)
 )     )
      (TIMER_ON @new_reg_def_use.live_var_used "@c-recursive-relation;reg_def_use.live_var_used;use_def_analysis.dl [229:11-229:24];"
(STMTS (QUERY
       (FOR_IN t0 @new_reg_def_use.live_var_used         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) reg_def_use.live_var_used)
)
      )
       (SWAP @delta_reg_def_use.live_var_used @new_reg_def_use.live_var_used)
       (CLEAR @new_reg_def_use.live_var_used)
 )     )
      (TIMER_ON @new_reg_def_use.return_val_used "@c-recursive-relation;reg_def_use.return_val_used;use_def_analysis.dl [327:11-327:26];"
(STMTS (QUERY
       (FOR_IN t0 @new_reg_def_use.return_val_used         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) reg_def_use.return_val_used)
)
      )
       (SWAP @delta_reg_def_use.return_val_used @new_reg_def_use.return_val_used)
       (CLEAR @new_reg_def_use.return_val_used)
 )     )
      (TIMER_ON @new_reg_has_base_image "@c-recursive-relation;reg_has_base_image;binary/pe/symbolization.dl [46:7-46:25];"
(STMTS (QUERY
       (FOR_IN t0 @new_reg_has_base_image         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) reg_has_base_image)
)
      )
       (SWAP @delta_reg_has_base_image @new_reg_has_base_image)
       (CLEAR @new_reg_has_base_image)
 )     )
      (TIMER_ON @new_reg_has_got "@c-recursive-relation;reg_has_got;binary/elf/symbolization.dl [37:7-37:18];"
(STMTS (QUERY
       (FOR_IN t0 @new_reg_has_got         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) reg_has_got)
)
      )
       (SWAP @delta_reg_has_got @new_reg_has_got)
       (CLEAR @new_reg_has_got)
 )     )
      (TIMER_ON @new_reg_reg_arithmetic_operation_defs "@c-recursive-relation;reg_reg_arithmetic_operation_defs;value_analysis.dl [272:7-272:40];"
(STMTS (QUERY
       (FOR_IN t0 @new_reg_reg_arithmetic_operation_defs         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6) (TUPLE t0 7)) reg_reg_arithmetic_operation_defs)
)
      )
       (SWAP @delta_reg_reg_arithmetic_operation_defs @new_reg_reg_arithmetic_operation_defs)
       (CLEAR @new_reg_reg_arithmetic_operation_defs)
 )     )
      (TIMER_ON @new_relative_jump_table_entry_candidate "@c-recursive-relation;relative_jump_table_entry_candidate;relative_jump_tables.dl [354:7-354:42];"
(STMTS (QUERY
       (FOR_IN t0 @new_relative_jump_table_entry_candidate         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) relative_jump_table_entry_candidate)
)
      )
       (SWAP @delta_relative_jump_table_entry_candidate @new_relative_jump_table_entry_candidate)
       (CLEAR @new_relative_jump_table_entry_candidate)
 )     )
      (TIMER_ON @new_stack_def_use.def_used "@c-recursive-relation;stack_def_use.def_used;use_def_analysis.dl [466:11-466:19];"
(STMTS (QUERY
       (FOR_IN t0 @new_stack_def_use.def_used         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) stack_def_use.def_used)
)
      )
       (SWAP @delta_stack_def_use.def_used @new_stack_def_use.def_used)
       (CLEAR @new_stack_def_use.def_used)
 )     )
      (TIMER_ON @new_stack_def_use.live_var_at_block_end "@c-recursive-relation;stack_def_use.live_var_at_block_end;use_def_analysis.dl [253:11-253:32];"
(STMTS (QUERY
       (FOR_IN t0 @new_stack_def_use.live_var_at_block_end         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) stack_def_use.live_var_at_block_end)
)
      )
       (SWAP @delta_stack_def_use.live_var_at_block_end @new_stack_def_use.live_var_at_block_end)
       (CLEAR @new_stack_def_use.live_var_at_block_end)
 )     )
      (TIMER_ON @new_stack_def_use.live_var_at_prior_used "@c-recursive-relation;stack_def_use.live_var_at_prior_used;use_def_analysis.dl [280:11-280:33];"
(STMTS (QUERY
       (FOR_IN t0 @new_stack_def_use.live_var_at_prior_used         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) stack_def_use.live_var_at_prior_used)
)
      )
       (SWAP @delta_stack_def_use.live_var_at_prior_used @new_stack_def_use.live_var_at_prior_used)
       (CLEAR @new_stack_def_use.live_var_at_prior_used)
 )     )
      (TIMER_ON @new_stack_def_use.live_var_used "@c-recursive-relation;stack_def_use.live_var_used;use_def_analysis.dl [229:11-229:24];"
(STMTS (QUERY
       (FOR_IN t0 @new_stack_def_use.live_var_used         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) stack_def_use.live_var_used)
)
      )
       (SWAP @delta_stack_def_use.live_var_used @new_stack_def_use.live_var_used)
       (CLEAR @new_stack_def_use.live_var_used)
 )     )
      (TIMER_ON @new_stack_def_use.live_var_used_in_block "@c-recursive-relation;stack_def_use.live_var_used_in_block;use_def_analysis.dl [498:11-498:33];"
(STMTS (QUERY
       (FOR_IN t0 @new_stack_def_use.live_var_used_in_block         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) stack_def_use.live_var_used_in_block)
)
      )
       (SWAP @delta_stack_def_use.live_var_used_in_block @new_stack_def_use.live_var_used_in_block)
       (CLEAR @new_stack_def_use.live_var_used_in_block)
 )     )
      (TIMER_ON @new_tls_desc_call "@c-recursive-relation;tls_desc_call;tls.dl [286:7-286:20];"
(STMTS (QUERY
       (FOR_IN t0 @new_tls_desc_call         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) tls_desc_call)
)
      )
       (SWAP @delta_tls_desc_call @new_tls_desc_call)
       (CLEAR @new_tls_desc_call)
 )     )
      (TIMER_ON @new_tls_get_addr "@c-recursive-relation;tls_get_addr;tls.dl [262:7-262:19];"
(STMTS (QUERY
       (FOR_IN t0 @new_tls_get_addr         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) tls_get_addr)
)
      )
       (SWAP @delta_tls_get_addr @new_tls_get_addr)
       (CLEAR @new_tls_get_addr)
 )     )
      (TIMER_ON @new_value_reg "@c-recursive-relation;value_reg;value_analysis.dl [63:7-63:16];"
(QUERY
       (FOR_IN t0 @delta_value_reg         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) value_reg)
)
      )
     )
      (TIMER_ON @new_value_reg_edge "@c-recursive-relation;value_reg_edge;value_analysis.dl [61:7-61:21];"
(STMTS (QUERY
       (FOR_IN t0 @new_value_reg_edge         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) value_reg_edge)
)
      )
       (SWAP @delta_value_reg_edge @new_value_reg_edge)
       (CLEAR @new_value_reg_edge)
 )     )
      (TIMER_ON @new_value_reg_limit "@c-recursive-relation;value_reg_limit;boundary_value_analysis.dl [141:7-141:22];"
(STMTS (QUERY
       (FOR_IN t0 @new_value_reg_limit         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) value_reg_limit)
)
      )
       (SWAP @delta_value_reg_limit @new_value_reg_limit)
       (CLEAR @new_value_reg_limit)
 )     )
      (TIMER_ON @new_value_reg_unsupported "@c-recursive-relation;value_reg_unsupported;value_analysis.dl [104:7-104:28];"
(STMTS (QUERY
       (FOR_IN t0 @new_value_reg_unsupported         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) value_reg_unsupported)
)
      )
       (SWAP @delta_value_reg_unsupported @new_value_reg_unsupported)
       (CLEAR @new_value_reg_unsupported)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_base_relative_jump)
     (CLEAR @new_base_relative_jump)
     (CLEAR @delta_base_relative_operand)
     (CLEAR @new_base_relative_operand)
     (CLEAR @delta_base_relative_operation)
     (CLEAR @new_base_relative_operation)
     (CLEAR @delta_block_next)
     (CLEAR @new_block_next)
     (CLEAR @delta_cmp_defines)
     (CLEAR @new_cmp_defines)
     (CLEAR @delta_compare_and_jump_immediate)
     (CLEAR @new_compare_and_jump_immediate)
     (CLEAR @delta_compare_and_jump_indirect)
     (CLEAR @new_compare_and_jump_indirect)
     (CLEAR @delta_compare_and_jump_register)
     (CLEAR @new_compare_and_jump_register)
     (CLEAR @delta_const_value_reg_used)
     (CLEAR @new_const_value_reg_used)
     (CLEAR @delta_def_used_for_address)
     (CLEAR @new_def_used_for_address)
     (CLEAR @delta_flags_and_jump_pair)
     (CLEAR @new_flags_and_jump_pair)
     (CLEAR @delta_got_relative_operand)
     (CLEAR @new_got_relative_operand)
     (CLEAR @delta_jump_table_element_access)
     (CLEAR @new_jump_table_element_access)
     (CLEAR @delta_jump_table_max)
     (CLEAR @new_jump_table_max)
     (CLEAR @delta_jump_table_signed)
     (CLEAR @new_jump_table_signed)
     (CLEAR @delta_jump_table_start)
     (CLEAR @new_jump_table_start)
     (CLEAR @delta_jump_table_target)
     (CLEAR @new_jump_table_target)
     (CLEAR @delta_last_value_reg_limit)
     (CLEAR @new_last_value_reg_limit)
     (CLEAR @delta_no_value_reg_limit)
     (CLEAR @new_no_value_reg_limit)
     (CLEAR @delta_reg_def_use.def_used)
     (CLEAR @new_reg_def_use.def_used)
     (CLEAR @delta_reg_def_use.live_var_at_block_end)
     (CLEAR @new_reg_def_use.live_var_at_block_end)
     (CLEAR @delta_reg_def_use.live_var_at_prior_used)
     (CLEAR @new_reg_def_use.live_var_at_prior_used)
     (CLEAR @delta_reg_def_use.live_var_used)
     (CLEAR @new_reg_def_use.live_var_used)
     (CLEAR @delta_reg_def_use.return_val_used)
     (CLEAR @new_reg_def_use.return_val_used)
     (CLEAR @delta_reg_has_base_image)
     (CLEAR @new_reg_has_base_image)
     (CLEAR @delta_reg_has_got)
     (CLEAR @new_reg_has_got)
     (CLEAR @delta_reg_reg_arithmetic_operation_defs)
     (CLEAR @new_reg_reg_arithmetic_operation_defs)
     (CLEAR @delta_relative_jump_table_entry_candidate)
     (CLEAR @new_relative_jump_table_entry_candidate)
     (CLEAR @delta_stack_def_use.def_used)
     (CLEAR @new_stack_def_use.def_used)
     (CLEAR @delta_stack_def_use.live_var_at_block_end)
     (CLEAR @new_stack_def_use.live_var_at_block_end)
     (CLEAR @delta_stack_def_use.live_var_at_prior_used)
     (CLEAR @new_stack_def_use.live_var_at_prior_used)
     (CLEAR @delta_stack_def_use.live_var_used)
     (CLEAR @new_stack_def_use.live_var_used)
     (CLEAR @delta_stack_def_use.live_var_used_in_block)
     (CLEAR @new_stack_def_use.live_var_used_in_block)
     (CLEAR @delta_tls_desc_call)
     (CLEAR @new_tls_desc_call)
     (CLEAR @delta_tls_get_addr)
     (CLEAR @new_tls_get_addr)
     (CLEAR @delta_value_reg)
     (CLEAR @new_value_reg)
     (CLEAR @delta_value_reg_edge)
     (CLEAR @new_value_reg_edge)
     (CLEAR @delta_value_reg_limit)
     (CLEAR @new_value_reg_limit)
     (CLEAR @delta_value_reg_unsupported)
     (CLEAR @new_value_reg_unsupported)
 ) )  ) (STMTS     (CLEAR adjusts_stack_in_block)
     (CLEAR arch.cmp_operation)
     (CLEAR arch.cmp_zero_operation)
     (CLEAR arch.condition_flags_reg)
     (CLEAR arch.extend_load)
     (CLEAR arch.extend_reg)
     (CLEAR arch.move_reg_reg)
     (CLEAR arch.pc_relative_addr)
     (CLEAR arch.reg_arithmetic_operation)
     (CLEAR arch.register_size_bits)
     (CLEAR arch.return_reg)
     (CLEAR arch.stack_pointer)
     (CLEAR base_relative_jump)
     (CLEAR base_relative_operation)
     (CLEAR block_instruction_next)
     (CLEAR block_last_instruction)
     (CLEAR block_next)
     (CLEAR call_tls_get_addr)
     (CLEAR cmp_defines)
     (CLEAR compare_and_jump_immediate)
     (CLEAR compare_and_jump_indirect)
     (CLEAR compare_and_jump_register)
     (CLEAR flags_and_jump_pair)
     (CLEAR got_section)
     (CLEAR instruction_get_src_op)
     (CLEAR inter_procedural_edge)
     (CLEAR jump_table_element_access)
     (CLEAR jump_table_target)
     (CLEAR last_value_reg_limit)
     (CLEAR limit_reg_op)
     (CLEAR limit_type_map)
     (CLEAR lsda_callsite_addresses)
     (CLEAR no_value_reg_limit)
     (CLEAR op_regdirect)
     (CLEAR possible_rva_operand)
     (CLEAR reg_def_use.block_last_def)
     (CLEAR reg_def_use.defined_in_block)
     (CLEAR reg_def_use.flow_def)
     (CLEAR reg_def_use.live_var_at_block_end)
     (CLEAR reg_def_use.live_var_at_prior_used)
     (CLEAR reg_def_use.live_var_def)
     (CLEAR reg_def_use.live_var_used)
     (CLEAR reg_def_use.ref_in_block)
     (CLEAR reg_def_use.return_block_end)
     (CLEAR reg_def_use.return_val_used)
     (CLEAR reg_def_use.used)
     (CLEAR reg_def_use.used_in_block)
     (CLEAR reg_has_base_image)
     (CLEAR reg_has_got)
     (CLEAR reg_map)
     (CLEAR reg_reg_arithmetic_operation_defs)
     (CLEAR reg_used_for)
     (CLEAR register_access)
     (CLEAR relative_address)
     (CLEAR relative_address_start)
     (CLEAR relocation_adjustment_total)
     (CLEAR stack_base_reg_move)
     (CLEAR stack_def_use.block_last_def)
     (CLEAR stack_def_use.def)
     (CLEAR stack_def_use.def_used)
     (CLEAR stack_def_use.defined_in_block)
     (CLEAR stack_def_use.live_var_at_block_end)
     (CLEAR stack_def_use.live_var_at_prior_used)
     (CLEAR stack_def_use.live_var_def)
     (CLEAR stack_def_use.live_var_used)
     (CLEAR stack_def_use.live_var_used_in_block)
     (CLEAR stack_def_use.ref_in_block)
     (CLEAR stack_def_use.used)
     (CLEAR stack_def_use.used_in_block)
     (CLEAR step_limit)
     (CLEAR step_limit_small)
     (CLEAR take_address)
     (CLEAR track_register)
     (CLEAR value_reg_edge)
     (CLEAR value_reg_limit)
     (CLEAR value_reg_unsupported)
 ) )  )
  (SUBROUTINE base_relative_symbolic_operand
(STMTS (STMTS     (TIMER_ON base_relative_symbolic_operand "@t-nonrecursive-relation;base_relative_symbolic_operand;binary/pe/symbolization.dl [138:7-138:37];"
(STMTS      (DEBUG 
 "base_relative_symbolic_operand(EA,Op_index,Value) :- \n   +disconnected0(),\n   base_relative_operand(EA,Op_index,Value),\n   !pc_relative_operand(EA,Op_index,_),\n   instruction_displacement_offset(EA,Op_index,_,_),\n   instruction_get_op(EA,Op_index,Op),\n   op_indirect(Op,_,_,_,_,_,_).\nin file symbolization.dl [140:1-147:29]" 
      (TIMER_ON base_relative_symbolic_operand "@t-nonrecursive-rule;base_relative_symbolic_operand;binary/pe/symbolization.dl [140:1-147:29];base_relative_symbolic_operand(EA,Op_index,Value) :- \\n   +disconnected0(),\\n   base_relative_operand(EA,Op_index,Value),\\n   !pc_relative_operand(EA,Op_index,_),\\n   instruction_displacement_offset(EA,Op_index,_,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   op_indirect(Op,_,_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY +disconnected0)) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY op_indirect))) (NOT (ISEMPTY base_relative_operand)))
         (FOR_IN t0 base_relative_operand           (IF (AND (EXISTS instruction_displacement_offset ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)) (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))))
           (INDEXED_IF_EXISTS t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1))) (EXISTS op_indirect ((TUPLE t1 2) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) base_relative_symbolic_operand)
)          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR +disconnected0)
 ) )  )
  (SUBROUTINE basic_reg_def_use.def
(STMTS     (TIMER_ON basic_reg_def_use.def "@t-nonrecursive-relation;basic_reg_def_use.def;basic_def_used.dl [45:11-45:14];"
(STMTS      (DEBUG 
 "basic_reg_def_use.def(EA,Reg) :- \n   arch.call(EA,_),\n   arch.return_reg(Reg).\nin file basic_def_used.dl [75:5-78:30]" 
      (TIMER_ON basic_reg_def_use.def "@t-nonrecursive-rule;basic_reg_def_use.def;basic_def_used.dl [75:5-78:30];basic_reg_def_use.def(EA,Reg) :- \\n   arch.call(EA,_),\\n   arch.return_reg(Reg).;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.call)) (NOT (ISEMPTY arch.return_reg)))
         (FOR_IN t0 arch.call           (FOR_IN t1 arch.return_reg            (INSERT ((TUPLE t0 0) (TUPLE t1 0)) basic_reg_def_use.def)
)
)
        )       )
      )
     )
      (DEBUG 
 "basic_reg_def_use.def(EA,Reg) :- \n   register_access(EA,RegIn,\"W\"),\n   reg_map(RegIn,Reg),\n   track_register(Reg).\nin file basic_def_used.dl [64:5-72:29]" 
      (TIMER_ON basic_reg_def_use.def "@t-nonrecursive-rule;basic_reg_def_use.def;basic_def_used.dl [64:5-72:29];basic_reg_def_use.def(EA,Reg) :- \\n   register_access(EA,RegIn,\\\"W\\\"),\\n   reg_map(RegIn,Reg),\\n   track_register(Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY track_register)) (NOT (ISEMPTY register_access))) (NOT (ISEMPTY reg_map)))
         (FOR t0 register_access (INDEX  (= (TUPLE t0 2) (STRING "W")))
          (FOR t1 reg_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (IF (EXISTS track_register ((TUPLE t1 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1)) basic_reg_def_use.def)
           )))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE basic_reg_def_use.used
(STMTS (STMTS     (TIMER_ON basic_reg_def_use.used "@t-nonrecursive-relation;basic_reg_def_use.used;basic_def_used.dl [50:11-50:15];"
(STMTS      (DEBUG 
 "basic_reg_def_use.used(EA,Reg,Index) :- \n   basic_reg_def_use.used_explicit(EA,Reg,Index).\nin file basic_def_used.dl [107:5-108:37]" 
      (TIMER_ON basic_reg_def_use.used "@t-nonrecursive-rule;basic_reg_def_use.used;basic_def_used.dl [107:5-108:37];basic_reg_def_use.used(EA,Reg,Index) :- \\n   basic_reg_def_use.used_explicit(EA,Reg,Index).;"
(QUERY
        (IF (NOT (ISEMPTY basic_reg_def_use.used_explicit))
         (FOR_IN t0 basic_reg_def_use.used_explicit           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) basic_reg_def_use.used)
)
        )       )
      )
     )
      (DEBUG 
 "basic_reg_def_use.used(EA,Reg,0) :- \n   register_access(EA,RegIn,\"R\"),\n   reg_map(RegIn,Reg),\n   track_register(Reg),\n   !basic_reg_def_use.used_explicit(EA,Reg,_),\n   !is_xor_reset(EA).\nin file basic_def_used.dl [111:5-121:27]" 
      (TIMER_ON basic_reg_def_use.used "@t-nonrecursive-rule;basic_reg_def_use.used;basic_def_used.dl [111:5-121:27];basic_reg_def_use.used(EA,Reg,0) :- \\n   register_access(EA,RegIn,\\\"R\\\"),\\n   reg_map(RegIn,Reg),\\n   track_register(Reg),\\n   !basic_reg_def_use.used_explicit(EA,Reg,_),\\n   !is_xor_reset(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY track_register)) (NOT (ISEMPTY register_access))) (NOT (ISEMPTY reg_map)))
         (FOR t0 register_access (INDEX  (= (TUPLE t0 2) (STRING "R")))
          (IF (NOT (EXISTS is_xor_reset ((TUPLE t0 0))))
           (FOR t1 reg_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (AND (EXISTS track_register ((TUPLE t1 1))) (NOT (EXISTS basic_reg_def_use.used_explicit ((TUPLE t0 0) (TUPLE t1 1) UNDEF))))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (UNSIGNED 0)) basic_reg_def_use.used)
            ))          ))        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR basic_reg_def_use.used_explicit)
 ) )  )
  (SUBROUTINE basic_reg_def_use.used_explicit
(STMTS     (TIMER_ON basic_reg_def_use.used_explicit "@t-nonrecursive-relation;basic_reg_def_use.used_explicit;basic_def_used.dl [94:11-94:24];"
(STMTS      (DEBUG 
 "basic_reg_def_use.used_explicit(EA,Reg,Index) :- \n   instruction_get_src_op(EA,Index,Op),\n   op_regdirect_contains_reg(Op,Reg),\n   track_register(Reg),\n   !is_xor_reset(EA).\nin file basic_def_used.dl [96:5-100:27]" 
      (TIMER_ON basic_reg_def_use.used_explicit "@t-nonrecursive-rule;basic_reg_def_use.used_explicit;basic_def_used.dl [96:5-100:27];basic_reg_def_use.used_explicit(EA,Reg,Index) :- \\n   instruction_get_src_op(EA,Index,Op),\\n   op_regdirect_contains_reg(Op,Reg),\\n   track_register(Reg),\\n   !is_xor_reset(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY track_register)) (NOT (ISEMPTY instruction_get_src_op))) (NOT (ISEMPTY op_regdirect_contains_reg)))
         (FOR_IN t0 instruction_get_src_op           (IF (NOT (EXISTS is_xor_reset ((TUPLE t0 0))))
           (FOR t1 op_regdirect_contains_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (IF (EXISTS track_register ((TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 1)) basic_reg_def_use.used_explicit)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "basic_reg_def_use.used_explicit(EA,Reg,Index) :- \n   instruction_get_op(EA,Index,Op),\n   op_indirect_contains_reg(Op,Reg),\n   track_register(Reg).\nin file basic_def_used.dl [102:5-105:29]" 
      (TIMER_ON basic_reg_def_use.used_explicit "@t-nonrecursive-rule;basic_reg_def_use.used_explicit;basic_def_used.dl [102:5-105:29];basic_reg_def_use.used_explicit(EA,Reg,Index) :- \\n   instruction_get_op(EA,Index,Op),\\n   op_indirect_contains_reg(Op,Reg),\\n   track_register(Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY track_register)) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY op_indirect_contains_reg)))
         (FOR_IN t0 instruction_get_op           (FOR t1 op_indirect_contains_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
           (IF (EXISTS track_register ((TUPLE t1 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 1)) basic_reg_def_use.used_explicit)
           )))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE basic_target
(STMTS     (TIMER_ON basic_target "@t-nonrecursive-relation;basic_target;code_inference.dl [282:7-282:19];"
(STMTS      (DEBUG 
 "basic_target(Val) :- \n   known_code(Val).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(Val) :- \\n   known_code(Val).;"
(QUERY
        (IF (NOT (ISEMPTY known_code))
         (FOR_IN t0 known_code           (INSERT ((TUPLE t0 0)) basic_target)
)
        )       )
      )
     )
      (DEBUG 
 "basic_target(Val) :- \n   relative_address(_,_,_,_,Val,_).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(Val) :- \\n   relative_address(_,_,_,_,Val,_).;"
(QUERY
        (IF (NOT (ISEMPTY relative_address))
         (FOR_IN t0 relative_address           (INSERT ((TUPLE t0 4)) basic_target)
)
        )       )
      )
     )
      (DEBUG 
 "basic_target(Val) :- \n   binary_type(\"DYN\"),\n   address_in_data(EA,Val),\n   relocation(EA,_,_,_,_,_,_).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(Val) :- \\n   binary_type(\\\"DYN\\\"),\\n   address_in_data(EA,Val),\\n   relocation(EA,_,_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY address_in_data)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "DYN"))))
         (FOR_IN t0 address_in_data           (IF (EXISTS relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 1)) basic_target)
          ))
        )       )
      )
     )
      (DEBUG 
 "basic_target(Val) :- \n   binary_type(\"REL\"),\n   address_in_data(EA,Val),\n   relocation(EA,_,_,_,_,_,_).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(Val) :- \\n   binary_type(\\\"REL\\\"),\\n   address_in_data(EA,Val),\\n   relocation(EA,_,_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY address_in_data)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "REL"))))
         (FOR_IN t0 address_in_data           (IF (EXISTS relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 1)) basic_target)
          ))
        )       )
      )
     )
      (DEBUG 
 "basic_target(Val) :- \n   binary_type(\"EXEC\"),\n   address_in_data(_,Val).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(Val) :- \\n   binary_type(\\\"EXEC\\\"),\\n   address_in_data(_,Val).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_type)) (NOT (ISEMPTY address_in_data))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 address_in_data           (INSERT ((TUPLE t0 1)) basic_target)
)
        )       )
      )
     )
      (DEBUG 
 "basic_target(Val) :- \n   entry_point(Val).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(Val) :- \\n   entry_point(Val).;"
(QUERY
        (IF (NOT (ISEMPTY entry_point))
         (FOR_IN t0 entry_point           (INSERT ((TUPLE t0 0)) basic_target)
)
        )       )
      )
     )
      (DEBUG 
 "basic_target(Val) :- \n   code_section(Name),\n   loaded_section(BegSect,EndSect,Name),\n   byte_interval(BegByteInterval,_),\n   BegSect <= BegByteInterval,\n   BegByteInterval < EndSect,\n   arch.instruction_at(BegByteInterval,Val).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(Val) :- \\n   code_section(Name),\\n   loaded_section(BegSect,EndSect,Name),\\n   byte_interval(BegByteInterval,_),\\n   BegSect <= BegByteInterval,\\n   BegByteInterval < EndSect,\\n   arch.instruction_at(BegByteInterval,Val).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_section)) (NOT (ISEMPTY arch.instruction_at))) (NOT (ISEMPTY byte_interval))) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 code_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR_IN t2 byte_interval             (IF (AND (CONSTRAINT < (TUPLE t2 0)  (TUPLE t1 1)) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t2 0)))
             (FOR t3 arch.instruction_at (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
              (INSERT ((TUPLE t3 1)) basic_target)
)            ))
))
        )       )
      )
     )
      (DEBUG 
 "basic_target(Val) :- \n   fde_addresses(Val,_),\n   !misaligned_fde_start(Val,_).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(Val) :- \\n   fde_addresses(Val,_),\\n   !misaligned_fde_start(Val,_).;"
(QUERY
        (IF (NOT (ISEMPTY fde_addresses))
         (FOR_IN t0 fde_addresses           (IF (NOT (EXISTS misaligned_fde_start ((TUPLE t0 0) UNDEF)))
           (INSERT ((TUPLE t0 0)) basic_target)
          ))
        )       )
      )
     )
      (DEBUG 
 "basic_target(Val) :- \n   lsda_callsite_addresses(Val,_,_).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(Val) :- \\n   lsda_callsite_addresses(Val,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY lsda_callsite_addresses))
         (FOR_IN t0 lsda_callsite_addresses           (INSERT ((TUPLE t0 0)) basic_target)
)
        )       )
      )
     )
      (DEBUG 
 "basic_target(Val) :- \n   lsda_callsite_addresses(_,_,Val).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(Val) :- \\n   lsda_callsite_addresses(_,_,Val).;"
(QUERY
        (IF (NOT (ISEMPTY lsda_callsite_addresses))
         (FOR_IN t0 lsda_callsite_addresses           (INSERT ((TUPLE t0 2)) basic_target)
)
        )       )
      )
     )
      (DEBUG 
 "basic_target(as(Addr, address)) :- \n   dynamic_entry(\"INIT\",Addr).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(as(Addr, address)) :- \\n   dynamic_entry(\\\"INIT\\\",Addr).;"
(QUERY
        (IF (NOT (ISEMPTY dynamic_entry))
         (FOR t0 dynamic_entry (INDEX  (= (TUPLE t0 0) (STRING "INIT")))
          (INSERT ((TUPLE t0 1)) basic_target)
)        )       )
      )
     )
      (DEBUG 
 "basic_target(as(Addr, address)) :- \n   dynamic_entry(\"FINI\",Addr).\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(as(Addr, address)) :- \\n   dynamic_entry(\\\"FINI\\\",Addr).;"
(QUERY
        (IF (NOT (ISEMPTY dynamic_entry))
         (FOR t0 dynamic_entry (INDEX  (= (TUPLE t0 0) (STRING "FINI")))
          (INSERT ((TUPLE t0 1)) basic_target)
)        )       )
      )
     )
      (DEBUG 
 "basic_target(Val) :- \n   defined_symbol(Val,_,Type,_,_,_,_,_,_),\n   Type != \"OBJECT\".\nin file code_inference.dl [284:1-329:7]" 
      (TIMER_ON basic_target "@t-nonrecursive-rule;basic_target;code_inference.dl [284:1-329:7];basic_target(Val) :- \\n   defined_symbol(Val,_,Type,_,_,_,_,_,_),\\n   Type != \\\"OBJECT\\\".;"
(QUERY
        (IF (NOT (ISEMPTY defined_symbol))
         (FOR_IN t0 defined_symbol           (IF (CONSTRAINT != (TUPLE t0 2)  (STRING "OBJECT"))
           (INSERT ((TUPLE t0 0)) basic_target)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE best_func_symbol
(STMTS     (TIMER_ON best_func_symbol "@t-nonrecursive-relation;best_func_symbol;symbols.dl [78:7-78:23];"
(STMTS      (DEBUG 
 "best_func_symbol(EA,SymbolName) :- \n   symbol_score(EA,SymbolName,\"FUNC\",\"Beg\",@generator_0),\n   @generator_0 = max S : { symbol_score(EA,+underscore_539,\"FUNC\",\"Beg\",S) }.\nin file symbols.dl [205:1-207:55]" 
      (TIMER_ON best_func_symbol "@t-nonrecursive-rule;best_func_symbol;symbols.dl [205:1-207:55];best_func_symbol(EA,SymbolName) :- \\n   symbol_score(EA,SymbolName,\\\"FUNC\\\",\\\"Beg\\\",@generator_0),\\n   @generator_0 = max S : { symbol_score(EA,+underscore_539,\\\"FUNC\\\",\\\"Beg\\\",S) }.;"
(QUERY
        (IF (NOT (ISEMPTY symbol_score))
         (FOR t0 symbol_score (INDEX  (= (TUPLE t0 2) (STRING "FUNC")) (= (TUPLE t0 3) (STRING "Beg")))
          (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MAX  (TUPLE t1 4) ))  t1 symbol_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (STRING "FUNC")) (= (TUPLE t1 3) (STRING "Beg"))) TRUE 
           (IF (CONSTRAINT = (TUPLE t0 4)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1)) best_func_symbol)
           )))        )       )
      )
     )
      (DEBUG 
 "best_func_symbol(EA,cat(\"FUN_\",@to_string_hex(EA))) :- \n   function_inference.function_entry(EA),\n   !symbol_score(EA,_,\"FUNC\",\"Beg\",_).\nin file symbols.dl [209:1-217:7]" 
      (TIMER_ON best_func_symbol "@t-nonrecursive-rule;best_func_symbol;symbols.dl [209:1-217:7];best_func_symbol(EA,cat(\\\"FUN_\\\",@to_string_hex(EA))) :- \\n   function_inference.function_entry(EA),\\n   !symbol_score(EA,_,\\\"FUNC\\\",\\\"Beg\\\",_).;"
(QUERY
        (IF (NOT (ISEMPTY function_inference.function_entry))
         (FOR_IN t0 function_inference.function_entry           (IF (NOT (EXISTS symbol_score ((TUPLE t0 0) UNDEF (STRING "FUNC") (STRING "Beg") UNDEF)))
           (INSERT ((TUPLE t0 0) (INTRINSIC cat (STRING "FUN_") (USER_FUNCTOR "to_string_hex_[TypeAttribute::Unsigned]_TypeAttribute::Symbol"  TRUE  ((TUPLE t0 0))))) best_func_symbol)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE best_ifunc_symbol
(STMTS (STMTS     (TIMER_ON best_ifunc_symbol "@t-nonrecursive-relation;best_ifunc_symbol;binary/elf/symbolization.dl [399:7-399:24];"
(STMTS      (DEBUG 
 "best_ifunc_symbol(as(Dest, address),cat(\"FUN_\",@to_string_hex(as(Dest, unsigned)))) :- \n   relocation(_,\"IRELATIVE\",\"\",Dest,_,_,_),\n   !symbol(as(Dest, address),_,\"GNU_IFUNC\",_,_,_,_,_,_).\nin file symbolization.dl [403:1-410:35]" 
      (TIMER_ON best_ifunc_symbol "@t-nonrecursive-rule;best_ifunc_symbol;binary/elf/symbolization.dl [403:1-410:35];best_ifunc_symbol(as(Dest, address),cat(\\\"FUN_\\\",@to_string_hex(as(Dest, unsigned)))) :- \\n   relocation(_,\\\"IRELATIVE\\\",\\\"\\\",Dest,_,_,_),\\n   !symbol(as(Dest, address),_,\\\"GNU_IFUNC\\\",_,_,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "IRELATIVE")) (= (TUPLE t0 2) (STRING "")))
          (IF (NOT (EXISTS symbol ((TUPLE t0 3) UNDEF (STRING "GNU_IFUNC") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
           (INSERT ((TUPLE t0 3) (INTRINSIC cat (STRING "FUN_") (USER_FUNCTOR "to_string_hex_[TypeAttribute::Unsigned]_TypeAttribute::Symbol"  TRUE  ((TUPLE t0 3))))) best_ifunc_symbol)
          ))        )       )
      )
     )
      (DEBUG 
 "best_ifunc_symbol(EA,SymbolName) :- \n   ifunc_symbol_score(EA,SymbolName,@generator_0),\n   @generator_0 = max S : { ifunc_symbol_score(EA,+underscore_544,S) }.\nin file symbolization.dl [455:1-457:48]" 
      (TIMER_ON best_ifunc_symbol "@t-nonrecursive-rule;best_ifunc_symbol;binary/elf/symbolization.dl [455:1-457:48];best_ifunc_symbol(EA,SymbolName) :- \\n   ifunc_symbol_score(EA,SymbolName,@generator_0),\\n   @generator_0 = max S : { ifunc_symbol_score(EA,+underscore_544,S) }.;"
(QUERY
        (IF (NOT (ISEMPTY ifunc_symbol_score))
         (FOR_IN t0 ifunc_symbol_score           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MAX  (TUPLE t1 2) ))  t1 ifunc_symbol_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) TRUE 
           (IF (CONSTRAINT = (TUPLE t0 2)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1)) best_ifunc_symbol)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR ifunc_symbol_score)
 ) )  )
  (SUBROUTINE best_symexpr_symbol
(STMTS     (TIMER_ON best_symexpr_symbol "@t-nonrecursive-relation;best_symexpr_symbol;symbols.dl [73:7-73:26];"
(STMTS      (DEBUG 
 "best_symexpr_symbol(EA,SymbolName,\"Beg\") :- \n   labeled_ea(EA),\n   !symbol_score(EA,_,_,\"Beg\",_),\n   best_func_symbol(EA,SymbolName).\nin file symbols.dl [228:1-231:37]" 
      (TIMER_ON best_symexpr_symbol "@t-nonrecursive-rule;best_symexpr_symbol;symbols.dl [228:1-231:37];best_symexpr_symbol(EA,SymbolName,\\\"Beg\\\") :- \\n   labeled_ea(EA),\\n   !symbol_score(EA,_,_,\\\"Beg\\\",_),\\n   best_func_symbol(EA,SymbolName).;"
(QUERY
        (IF (AND (NOT (ISEMPTY labeled_ea)) (NOT (ISEMPTY best_func_symbol)))
         (FOR_IN t0 labeled_ea           (IF (NOT (EXISTS symbol_score ((TUPLE t0 0) UNDEF UNDEF (STRING "Beg") UNDEF)))
           (FOR t1 best_func_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "Beg")) best_symexpr_symbol)
)          ))
        )       )
      )
     )
      (DEBUG 
 "best_symexpr_symbol(EA,SymbolName,Pos) :- \n   symbol_score(EA,SymbolName,_,Pos,@generator_0),\n   @generator_0 = max S : { symbol_score(EA,+underscore_546,+underscore_547,Pos,S) }.\nin file symbols.dl [224:1-226:49]" 
      (TIMER_ON best_symexpr_symbol "@t-nonrecursive-rule;best_symexpr_symbol;symbols.dl [224:1-226:49];best_symexpr_symbol(EA,SymbolName,Pos) :- \\n   symbol_score(EA,SymbolName,_,Pos,@generator_0),\\n   @generator_0 = max S : { symbol_score(EA,+underscore_546,+underscore_547,Pos,S) }.;"
(QUERY
        (IF (NOT (ISEMPTY symbol_score))
         (FOR_IN t0 symbol_score           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MAX  (TUPLE t1 4) ))  t1 symbol_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 3))) TRUE 
           (IF (CONSTRAINT = (TUPLE t0 4)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3)) best_symexpr_symbol)
           )))
        )       )
      )
     )
      (DEBUG 
 "best_symexpr_symbol(EA,cat(\".L_\",@to_string_hex(EA)),\"Beg\") :- \n   labeled_ea(EA),\n   !symbol_score(EA,_,_,\"Beg\",_),\n   !best_func_symbol(EA,_).\nin file symbols.dl [233:1-238:48]" 
      (TIMER_ON best_symexpr_symbol "@t-nonrecursive-rule;best_symexpr_symbol;symbols.dl [233:1-238:48];best_symexpr_symbol(EA,cat(\\\".L_\\\",@to_string_hex(EA)),\\\"Beg\\\") :- \\n   labeled_ea(EA),\\n   !symbol_score(EA,_,_,\\\"Beg\\\",_),\\n   !best_func_symbol(EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY labeled_ea))
         (FOR_IN t0 labeled_ea           (IF (AND (NOT (EXISTS best_func_symbol ((TUPLE t0 0) UNDEF))) (NOT (EXISTS symbol_score ((TUPLE t0 0) UNDEF UNDEF (STRING "Beg") UNDEF))))
           (INSERT ((TUPLE t0 0) (INTRINSIC cat (STRING ".L_") (USER_FUNCTOR "to_string_hex_[TypeAttribute::Unsigned]_TypeAttribute::Symbol"  TRUE  ((TUPLE t0 0)))) (STRING "Beg")) best_symexpr_symbol)
          ))
        )       )
      )
     )
      (DEBUG 
 "best_symexpr_symbol(EA,cat(cat(\".L_\",@to_string_hex(EA)),\"_END\"),\"End\") :- \n   labeled_ea(EA),\n   boundary_sym_expr(_,EA),\n   !symbol_score(EA,_,_,\"End\",_).\nin file symbols.dl [240:1-245:60]" 
      (TIMER_ON best_symexpr_symbol "@t-nonrecursive-rule;best_symexpr_symbol;symbols.dl [240:1-245:60];best_symexpr_symbol(EA,cat(cat(\\\".L_\\\",@to_string_hex(EA)),\\\"_END\\\"),\\\"End\\\") :- \\n   labeled_ea(EA),\\n   boundary_sym_expr(_,EA),\\n   !symbol_score(EA,_,_,\\\"End\\\",_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY labeled_ea)) (NOT (ISEMPTY boundary_sym_expr)))
         (FOR_IN t0 labeled_ea           (IF (AND (EXISTS boundary_sym_expr (UNDEF (TUPLE t0 0))) (NOT (EXISTS symbol_score ((TUPLE t0 0) UNDEF UNDEF (STRING "End") UNDEF))))
           (INSERT ((TUPLE t0 0) (INTRINSIC cat (INTRINSIC cat (STRING ".L_") (USER_FUNCTOR "to_string_hex_[TypeAttribute::Unsigned]_TypeAttribute::Symbol"  TRUE  ((TUPLE t0 0)))) (STRING "_END")) (STRING "End")) best_symexpr_symbol)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE best_value_reg
(STMTS (STMTS     (TIMER_ON best_value_reg "@t-nonrecursive-relation;best_value_reg;value_analysis.dl [66:7-66:21];"
(STMTS      (DEBUG 
 "best_value_reg(EA,Reg,EA_from,Multiplier,MinOffset,\"loop\") :- \n   value_reg(EA,Reg,EA_from,\"Unknown\",Multiplier,MinOffset,_),\n   MinOffset <= @generator_0,\n   @generator_0 = min Offset : { value_reg(EA,Reg,EA_from,\"Unknown\",Multiplier,Offset,+underscore_550) }.\nin file value_analysis.dl [337:1-339:87]" 
      (TIMER_ON best_value_reg "@t-nonrecursive-rule;best_value_reg;value_analysis.dl [337:1-339:87];best_value_reg(EA,Reg,EA_from,Multiplier,MinOffset,\\\"loop\\\") :- \\n   value_reg(EA,Reg,EA_from,\\\"Unknown\\\",Multiplier,MinOffset,_),\\n   MinOffset <= @generator_0,\\n   @generator_0 = min Offset : { value_reg(EA,Reg,EA_from,\\\"Unknown\\\",Multiplier,Offset,+underscore_550) }.;"
(QUERY
        (IF (NOT (ISEMPTY value_reg))
         (FOR t0 value_reg (INDEX  (= (TUPLE t0 3) (STRING "Unknown")))
          (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MIN  (TUPLE t1 5) ))  t1 value_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)) (= (TUPLE t1 3) (STRING "Unknown")) (= (TUPLE t1 4) (TUPLE t0 4))) TRUE 
           (IF (AND (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0)) (CONSTRAINT <= (TUPLE t0 5)  (TUPLE t1 0)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 4) (TUPLE t0 5) (STRING "loop")) best_value_reg)
           )))        )       )
      )
     )
      (DEBUG 
 "best_value_reg(EA,Reg,EA_from,Multiplier,MaxOffset,\"loop\") :- \n   value_reg(EA,Reg,EA_from,\"Unknown\",Multiplier,MaxOffset,_),\n   MaxOffset >= @generator_0,\n   @generator_0 = max Offset : { value_reg(EA,Reg,EA_from,\"Unknown\",Multiplier,Offset,+underscore_552) }.\nin file value_analysis.dl [341:1-343:87]" 
      (TIMER_ON best_value_reg "@t-nonrecursive-rule;best_value_reg;value_analysis.dl [341:1-343:87];best_value_reg(EA,Reg,EA_from,Multiplier,MaxOffset,\\\"loop\\\") :- \\n   value_reg(EA,Reg,EA_from,\\\"Unknown\\\",Multiplier,MaxOffset,_),\\n   MaxOffset >= @generator_0,\\n   @generator_0 = max Offset : { value_reg(EA,Reg,EA_from,\\\"Unknown\\\",Multiplier,Offset,+underscore_552) }.;"
(QUERY
        (IF (NOT (ISEMPTY value_reg))
         (FOR t0 value_reg (INDEX  (= (TUPLE t0 3) (STRING "Unknown")))
          (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MAX  (TUPLE t1 5) ))  t1 value_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)) (= (TUPLE t1 3) (STRING "Unknown")) (= (TUPLE t1 4) (TUPLE t0 4))) TRUE 
           (IF (AND (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0)) (CONSTRAINT >= (TUPLE t0 5)  (TUPLE t1 0)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 4) (TUPLE t0 5) (STRING "loop")) best_value_reg)
           )))        )       )
      )
     )
      (DEBUG 
 "best_value_reg(EA,Reg,EA_from,Multiplier,Offset,\"complete\") :- \n   value_reg(EA,Reg,EA_from,\"NONE\",Multiplier,Offset,_),\n   !value_reg(EA,Reg,_,\"Unknown\",_,_,_).\nin file value_analysis.dl [345:1-347:42]" 
      (TIMER_ON best_value_reg "@t-nonrecursive-rule;best_value_reg;value_analysis.dl [345:1-347:42];best_value_reg(EA,Reg,EA_from,Multiplier,Offset,\\\"complete\\\") :- \\n   value_reg(EA,Reg,EA_from,\\\"NONE\\\",Multiplier,Offset,_),\\n   !value_reg(EA,Reg,_,\\\"Unknown\\\",_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY value_reg))
         (FOR t0 value_reg (INDEX  (= (TUPLE t0 3) (STRING "NONE")))
          (IF (NOT (EXISTS value_reg ((TUPLE t0 0) (TUPLE t0 1) UNDEF (STRING "Unknown") UNDEF UNDEF UNDEF)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 4) (TUPLE t0 5) (STRING "complete")) best_value_reg)
          ))        )       )
      )
     )
      (DEBUG 
 "best_value_reg(EA,Reg,0,MaxMultiplier,Offset,\"incomplete\") :- \n   value_reg_max_mult(EA,Reg,MaxMultiplier),\n   value_reg(EA,Reg,_,OtherReg,MaxMultiplier,Offset,_),\n   OtherReg != \"NONE\".\nin file value_analysis.dl [356:1-359:24]" 
      (TIMER_ON best_value_reg "@t-nonrecursive-rule;best_value_reg;value_analysis.dl [356:1-359:24];best_value_reg(EA,Reg,0,MaxMultiplier,Offset,\\\"incomplete\\\") :- \\n   value_reg_max_mult(EA,Reg,MaxMultiplier),\\n   value_reg(EA,Reg,_,OtherReg,MaxMultiplier,Offset,_),\\n   OtherReg != \\\"NONE\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY value_reg_max_mult)) (NOT (ISEMPTY value_reg)))
         (FOR_IN t0 value_reg_max_mult           (FOR t1 value_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 4) (TUPLE t0 2)))
           (IF (CONSTRAINT != (TUPLE t1 3)  (STRING "NONE"))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (UNSIGNED 0) (TUPLE t0 2) (TUPLE t1 5) (STRING "incomplete")) best_value_reg)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR value_reg_max_mult)
 ) )  )
  (SUBROUTINE binary_format
(STMTS (STMTS (STMTS     (TIMER_ON binary_format "@t-relation-loadtime;binary_format;/usr/local/src/ddisasm/src/datalog/main.dl [194:7-194:20];loadtime;"
     (IO binary_format ((= IO "file") (= attributeNames "Format") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "binary_format") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"Format\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:symbol\"]}}")))
    )
 ) (STMTS     (LOGSIZE binary_format "@n-nonrecursive-relation;binary_format;/usr/local/src/ddisasm/src/datalog/main.dl [194:7-194:20];")
 )   )  )  )
  (SUBROUTINE binary_type
(STMTS (STMTS (STMTS     (TIMER_ON binary_type "@t-relation-loadtime;binary_type;/usr/local/src/ddisasm/src/datalog/main.dl [191:7-191:18];loadtime;"
     (IO binary_type ((= IO "file") (= attributeNames "Type") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "binary_type") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"Type\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:symbol\"]}}")))
    )
 ) (STMTS     (LOGSIZE binary_type "@n-nonrecursive-relation;binary_type;/usr/local/src/ddisasm/src/datalog/main.dl [191:7-191:18];")
 )   )  )  )
  (SUBROUTINE block
(STMTS     (TIMER_ON block "@t-nonrecursive-relation;block;code_inference.dl [70:7-70:12];"
(STMTS      (DEBUG 
 "block(Block) :- \n   code_in_block(_,Block),\n   block_candidate_boundaries(Block,\"code\",_,_).\nin file code_inference.dl [1525:1-1528:62]" 
      (TIMER_ON block "@t-nonrecursive-rule;block;code_inference.dl [1525:1-1528:62];block(Block) :- \\n   code_in_block(_,Block),\\n   block_candidate_boundaries(Block,\\\"code\\\",_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY block_candidate_boundaries)))
         (FOR_IN t0 code_in_block           (IF (EXISTS block_candidate_boundaries ((TUPLE t0 1) (STRING "code") UNDEF UNDEF))
           (INSERT ((TUPLE t0 1)) block)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE block_boundaries
(STMTS (STMTS     (TIMER_ON block_boundaries "@t-nonrecursive-relation;block_boundaries;code_inference.dl [86:7-86:23];"
(STMTS      (DEBUG 
 "block_boundaries(Block,BegAddr,EndAddr) :- \n   code_in_block(_,Block),\n   block_candidate_boundaries(Block,\"code\",BegAddr,EndAddr).\nin file code_inference.dl [1525:1-1528:62]" 
      (TIMER_ON block_boundaries "@t-nonrecursive-rule;block_boundaries;code_inference.dl [1525:1-1528:62];block_boundaries(Block,BegAddr,EndAddr) :- \\n   code_in_block(_,Block),\\n   block_candidate_boundaries(Block,\\\"code\\\",BegAddr,EndAddr).;"
(QUERY
        (IF (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY block_candidate_boundaries)))
         (FOR_IN t0 code_in_block           (FOR t1 block_candidate_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (STRING "code")))
           (INSERT ((TUPLE t0 1) (TUPLE t1 2) (TUPLE t1 3)) block_boundaries)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR block_candidate_boundaries)
 ) )  )
  (SUBROUTINE block_candidate_boundaries
(STMTS (STMTS     (TIMER_ON block_candidate_boundaries "@t-nonrecursive-relation;block_candidate_boundaries;code_inference.dl [587:7-587:33];"
(STMTS      (DEBUG 
 "block_candidate_boundaries(Block,\"data\",Block,(Block+Size)) :- \n   data_block_candidate(Block,Size).\nin file code_inference.dl [603:1-604:38]" 
      (TIMER_ON block_candidate_boundaries "@t-nonrecursive-rule;block_candidate_boundaries;code_inference.dl [603:1-604:38];block_candidate_boundaries(Block,\\\"data\\\",Block,(Block+Size)) :- \\n   data_block_candidate(Block,Size).;"
(QUERY
        (IF (NOT (ISEMPTY data_block_candidate))
         (FOR_IN t0 data_block_candidate           (INSERT ((TUPLE t0 0) (STRING "data") (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))) block_candidate_boundaries)
)
        )       )
      )
     )
      (DEBUG 
 "block_candidate_boundaries(Block,\"padding\",Start,(Start+Size)) :- \n   padding_block_candidate(Block,Size),\n   arch.instruction_at(Start,Block).\nin file code_inference.dl [606:1-608:38]" 
      (TIMER_ON block_candidate_boundaries "@t-nonrecursive-rule;block_candidate_boundaries;code_inference.dl [606:1-608:38];block_candidate_boundaries(Block,\\\"padding\\\",Start,(Start+Size)) :- \\n   padding_block_candidate(Block,Size),\\n   arch.instruction_at(Start,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY padding_block_candidate)) (NOT (ISEMPTY arch.instruction_at)))
         (FOR_IN t0 padding_block_candidate           (FOR t1 arch.instruction_at (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (INSERT ((TUPLE t0 0) (STRING "padding") (TUPLE t1 0) (INTRINSIC + (TUPLE t1 0) (TUPLE t0 1))) block_candidate_boundaries)
))
        )       )
      )
     )
      (DEBUG 
 "block_candidate_boundaries(Block,\"code\",Block,Next) :- \n   code_in_block_candidate_refined(EA,Block),\n   next(EA,Next),\n   !code_in_block_candidate_refined(Next,Block).\nin file code_inference.dl [589:1-593:50]" 
      (TIMER_ON block_candidate_boundaries "@t-nonrecursive-rule;block_candidate_boundaries;code_inference.dl [589:1-593:50];block_candidate_boundaries(Block,\\\"code\\\",Block,Next) :- \\n   code_in_block_candidate_refined(EA,Block),\\n   next(EA,Next),\\n   !code_in_block_candidate_refined(Next,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY code_in_block_candidate_refined)) (NOT (ISEMPTY next)))
         (FOR_IN t0 code_in_block_candidate_refined           (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (NOT (EXISTS code_in_block_candidate_refined ((TUPLE t1 1) (TUPLE t0 1))))
            (INSERT ((TUPLE t0 1) (STRING "code") (TUPLE t0 1) (TUPLE t1 1)) block_candidate_boundaries)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR padding_block_candidate)
 ) )  )
  (SUBROUTINE block_candidate_dependency_edge
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON block_candidate_dependency_edge "@t-nonrecursive-relation;block_candidate_dependency_edge;code_inference.dl [646:7-646:38];"
(STMTS      (DEBUG 
 "block_candidate_dependency_edge(BlockA,\"code\",(EndAddrA-BegAddrA),BlockB,\"code\",(EndAddrB-BegAddrB)) :- \n   code_in_block_candidate_refined(EA,BlockA),\n   must_fallthrough(EA,BlockB),\n   block_candidate_boundaries(BlockA,\"code\",BegAddrA,EndAddrA),\n   block_candidate_boundaries(BlockB,\"code\",BegAddrB,EndAddrB),\n   BlockA != BlockB.\nin file code_inference.dl [648:1-657:22]" 
      (TIMER_ON block_candidate_dependency_edge "@t-nonrecursive-rule;block_candidate_dependency_edge;code_inference.dl [648:1-657:22];block_candidate_dependency_edge(BlockA,\\\"code\\\",(EndAddrA-BegAddrA),BlockB,\\\"code\\\",(EndAddrB-BegAddrB)) :- \\n   code_in_block_candidate_refined(EA,BlockA),\\n   must_fallthrough(EA,BlockB),\\n   block_candidate_boundaries(BlockA,\\\"code\\\",BegAddrA,EndAddrA),\\n   block_candidate_boundaries(BlockB,\\\"code\\\",BegAddrB,EndAddrB),\\n   BlockA != BlockB.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY must_fallthrough)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR_IN t0 code_in_block_candidate_refined           (FOR t1 must_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (CONSTRAINT != (TUPLE t0 1)  (TUPLE t1 1))
            (FOR t2 block_candidate_boundaries (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (STRING "code")))
             (FOR t3 block_candidate_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t1 1)) (= (TUPLE t3 1) (STRING "code")))
              (INSERT ((TUPLE t0 1) (STRING "code") (INTRINSIC - (TUPLE t2 3) (TUPLE t2 2)) (TUPLE t1 1) (STRING "code") (INTRINSIC - (TUPLE t3 3) (TUPLE t3 2))) block_candidate_dependency_edge)
))           )))
        )       )
      )
     )
      (DEBUG 
 "block_candidate_dependency_edge(BlockA,\"code\",(EndAddrA-BegAddrA),BlockB,\"code\",(EndAddrB-BegAddrB)) :- \n   code_in_block_candidate_refined(EA,BlockA),\n   direct_jump(EA,BlockB),\n   block_candidate_boundaries(BlockA,\"code\",BegAddrA,EndAddrA),\n   block_candidate_boundaries(BlockB,\"code\",BegAddrB,EndAddrB),\n   BlockA != BlockB.\nin file code_inference.dl [648:1-657:22]" 
      (TIMER_ON block_candidate_dependency_edge "@t-nonrecursive-rule;block_candidate_dependency_edge;code_inference.dl [648:1-657:22];block_candidate_dependency_edge(BlockA,\\\"code\\\",(EndAddrA-BegAddrA),BlockB,\\\"code\\\",(EndAddrB-BegAddrB)) :- \\n   code_in_block_candidate_refined(EA,BlockA),\\n   direct_jump(EA,BlockB),\\n   block_candidate_boundaries(BlockA,\\\"code\\\",BegAddrA,EndAddrA),\\n   block_candidate_boundaries(BlockB,\\\"code\\\",BegAddrB,EndAddrB),\\n   BlockA != BlockB.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY direct_jump)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR_IN t0 code_in_block_candidate_refined           (FOR t1 direct_jump (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (CONSTRAINT != (TUPLE t0 1)  (TUPLE t1 1))
            (FOR t2 block_candidate_boundaries (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (STRING "code")))
             (FOR t3 block_candidate_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t1 1)) (= (TUPLE t3 1) (STRING "code")))
              (INSERT ((TUPLE t0 1) (STRING "code") (INTRINSIC - (TUPLE t2 3) (TUPLE t2 2)) (TUPLE t1 1) (STRING "code") (INTRINSIC - (TUPLE t3 3) (TUPLE t3 2))) block_candidate_dependency_edge)
))           )))
        )       )
      )
     )
      (DEBUG 
 "block_candidate_dependency_edge(BlockA,\"code\",(EndAddrA-BegAddrA),BlockB,\"code\",(EndAddrB-BegAddrB)) :- \n   code_in_block_candidate_refined(EA,BlockA),\n   direct_call(EA,BlockB),\n   block_candidate_boundaries(BlockA,\"code\",BegAddrA,EndAddrA),\n   block_candidate_boundaries(BlockB,\"code\",BegAddrB,EndAddrB),\n   BlockA != BlockB.\nin file code_inference.dl [648:1-657:22]" 
      (TIMER_ON block_candidate_dependency_edge "@t-nonrecursive-rule;block_candidate_dependency_edge;code_inference.dl [648:1-657:22];block_candidate_dependency_edge(BlockA,\\\"code\\\",(EndAddrA-BegAddrA),BlockB,\\\"code\\\",(EndAddrB-BegAddrB)) :- \\n   code_in_block_candidate_refined(EA,BlockA),\\n   direct_call(EA,BlockB),\\n   block_candidate_boundaries(BlockA,\\\"code\\\",BegAddrA,EndAddrA),\\n   block_candidate_boundaries(BlockB,\\\"code\\\",BegAddrB,EndAddrB),\\n   BlockA != BlockB.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY direct_call)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR_IN t0 code_in_block_candidate_refined           (FOR t1 direct_call (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (CONSTRAINT != (TUPLE t0 1)  (TUPLE t1 1))
            (FOR t2 block_candidate_boundaries (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (STRING "code")))
             (FOR t3 block_candidate_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t1 1)) (= (TUPLE t3 1) (STRING "code")))
              (INSERT ((TUPLE t0 1) (STRING "code") (INTRINSIC - (TUPLE t2 3) (TUPLE t2 2)) (TUPLE t1 1) (STRING "code") (INTRINSIC - (TUPLE t3 3) (TUPLE t3 2))) block_candidate_dependency_edge)
))           )))
        )       )
      )
     )
      (DEBUG 
 "block_candidate_dependency_edge(BlockA,\"code\",(EndAddrA-BegAddrA),BlockB,\"data\",SizeB) :- \n   arch.simple_data_load(EA,BlockB,SizeB),\n   code_in_block_candidate_refined(EA,BlockA),\n   data_block_candidate(BlockB,SizeB),\n   block_candidate_boundaries(BlockA,\"code\",BegAddrA,EndAddrA).\nin file code_inference.dl [659:1-663:65]" 
      (TIMER_ON block_candidate_dependency_edge "@t-nonrecursive-rule;block_candidate_dependency_edge;code_inference.dl [659:1-663:65];block_candidate_dependency_edge(BlockA,\\\"code\\\",(EndAddrA-BegAddrA),BlockB,\\\"data\\\",SizeB) :- \\n   arch.simple_data_load(EA,BlockB,SizeB),\\n   code_in_block_candidate_refined(EA,BlockA),\\n   data_block_candidate(BlockB,SizeB),\\n   block_candidate_boundaries(BlockA,\\\"code\\\",BegAddrA,EndAddrA).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY arch.simple_data_load)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY data_block_candidate)))
         (FOR_IN t0 arch.simple_data_load           (IF (EXISTS data_block_candidate ((TUPLE t0 1) (TUPLE t0 2)))
           (FOR t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 block_candidate_boundaries (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)) (= (TUPLE t2 1) (STRING "code")))
             (INSERT ((TUPLE t1 1) (STRING "code") (INTRINSIC - (TUPLE t2 3) (TUPLE t2 2)) (TUPLE t0 1) (STRING "data") (TUPLE t0 2)) block_candidate_dependency_edge)
))          ))
        )       )
      )
     )
      (DEBUG 
 "block_candidate_dependency_edge(BlockA,\"code\",(EndAddrA-BegAddrA),BlockB,\"data\",SizeB) :- \n   composite_data_access(EA,EA_load,BlockB,SizeB),\n   code_in_block_candidate_refined(EA,BlockA),\n   code_in_block_candidate_refined(EA_load,BlockA),\n   data_block_candidate(BlockB,SizeB),\n   block_candidate_boundaries(BlockA,\"code\",BegAddrA,EndAddrA).\nin file code_inference.dl [666:1-671:65]" 
      (TIMER_ON block_candidate_dependency_edge "@t-nonrecursive-rule;block_candidate_dependency_edge;code_inference.dl [666:1-671:65];block_candidate_dependency_edge(BlockA,\\\"code\\\",(EndAddrA-BegAddrA),BlockB,\\\"data\\\",SizeB) :- \\n   composite_data_access(EA,EA_load,BlockB,SizeB),\\n   code_in_block_candidate_refined(EA,BlockA),\\n   code_in_block_candidate_refined(EA_load,BlockA),\\n   data_block_candidate(BlockB,SizeB),\\n   block_candidate_boundaries(BlockA,\\\"code\\\",BegAddrA,EndAddrA).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY block_candidate_boundaries)) (NOT (ISEMPTY data_block_candidate))) (NOT (ISEMPTY composite_data_access))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR_IN t0 composite_data_access           (IF (EXISTS data_block_candidate ((TUPLE t0 2) (TUPLE t0 3)))
           (FOR t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (EXISTS code_in_block_candidate_refined ((TUPLE t0 1) (TUPLE t1 1)))
             (FOR t2 block_candidate_boundaries (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)) (= (TUPLE t2 1) (STRING "code")))
              (INSERT ((TUPLE t1 1) (STRING "code") (INTRINSIC - (TUPLE t2 3) (TUPLE t2 2)) (TUPLE t0 2) (STRING "data") (TUPLE t0 3)) block_candidate_dependency_edge)
)            ))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE block_implies_block "@n-nonrecursive-relation;block_implies_block;code_inference.dl [686:7-686:26];")
 )  (QUERY
     (FOR_IN t0 block_candidate_dependency_edge       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @delta_block_candidate_dependency_edge)
)
    )
 (QUERY
     (FOR_IN t0 block_implies_block       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @delta_block_implies_block)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_block_candidate_dependency_edge "@t-recursive-relation;block_candidate_dependency_edge;code_inference.dl [646:7-646:38];"
(STMTS       (DEBUG 
 "block_candidate_dependency_edge(BlockA,\"code\",(EndAddrA-BegAddrA),BlockC,\"data\",SizeC) :- \n   composite_data_access(EA,EA_load,BlockC,SizeC),\n   code_in_block_candidate_refined(EA,BlockA),\n   code_in_block_candidate_refined(EA_load,BlockB),\n   block_implies_block(BlockA,\"code\",_,BlockB,\"code\",_),\n   data_block_candidate(BlockC,SizeC),\n   block_candidate_boundaries(BlockA,\"code\",BegAddrA,EndAddrA).\nin file code_inference.dl [675:1-681:65]" 
       (TIMER_ON @new_block_candidate_dependency_edge "@t-recursive-rule;block_candidate_dependency_edge;0;code_inference.dl [675:1-681:65];block_candidate_dependency_edge(BlockA,\\\"code\\\",(EndAddrA-BegAddrA),BlockC,\\\"data\\\",SizeC) :- \\n   composite_data_access(EA,EA_load,BlockC,SizeC),\\n   code_in_block_candidate_refined(EA,BlockA),\\n   code_in_block_candidate_refined(EA_load,BlockB),\\n   block_implies_block(BlockA,\\\"code\\\",_,BlockB,\\\"code\\\",_),\\n   data_block_candidate(BlockC,SizeC),\\n   block_candidate_boundaries(BlockA,\\\"code\\\",BegAddrA,EndAddrA).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY data_block_candidate)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY composite_data_access))) (NOT (ISEMPTY @delta_block_implies_block)))
          (FOR_IN t0 composite_data_access            (IF (EXISTS data_block_candidate ((TUPLE t0 2) (TUPLE t0 3)))
            (FOR t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (INDEXED_IF_EXISTS t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t0 1))) (EXISTS @delta_block_implies_block ((TUPLE t1 1) (STRING "code") UNDEF (TUPLE t2 1) (STRING "code") UNDEF))
              (FOR t3 block_candidate_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t1 1)) (= (TUPLE t3 1) (STRING "code")))
               (IF (NOT (EXISTS block_candidate_dependency_edge ((TUPLE t1 1) (STRING "code") (INTRINSIC - (TUPLE t3 3) (TUPLE t3 2)) (TUPLE t0 2) (STRING "data") (TUPLE t0 3))))
                (INSERT ((TUPLE t1 1) (STRING "code") (INTRINSIC - (TUPLE t3 3) (TUPLE t3 2)) (TUPLE t0 2) (STRING "data") (TUPLE t0 3)) @new_block_candidate_dependency_edge)
               ))))           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_block_implies_block "@t-recursive-relation;block_implies_block;code_inference.dl [686:7-686:26];"
(STMTS (STMTS (STMTS       (DEBUG 
 "block_implies_block(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB) :- \n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   BlockA != BlockB,\n   !overlapping_instruction(BlockB,BlockA),\n   !overlapping_instruction(BlockA,BlockB).\nin file code_inference.dl [688:1-698:46]" 
       (TIMER_ON @new_block_implies_block "@t-recursive-rule;block_implies_block;0;code_inference.dl [688:1-698:46];block_implies_block(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB) :- \\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   BlockA != BlockB,\\n   !overlapping_instruction(BlockB,BlockA),\\n   !overlapping_instruction(BlockA,BlockB).;"
(QUERY
         (IF (NOT (ISEMPTY @delta_block_candidate_dependency_edge))
          (FOR_IN t0 @delta_block_candidate_dependency_edge            (IF (AND (AND (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t0 3)) (NOT (EXISTS block_implies_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5))))) (NOT (EXISTS overlapping_instruction ((TUPLE t0 3) (TUPLE t0 0))))) (NOT (EXISTS overlapping_instruction ((TUPLE t0 0) (TUPLE t0 3)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @new_block_implies_block)
           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "block_implies_block(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB) :- \n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   TypeA != TypeB,\n   !overlapping_instruction(BlockB,BlockA),\n   !overlapping_instruction(BlockA,BlockB).\nin file code_inference.dl [688:1-698:46]" 
       (TIMER_ON @new_block_implies_block "@t-recursive-rule;block_implies_block;0;code_inference.dl [688:1-698:46];block_implies_block(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB) :- \\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   TypeA != TypeB,\\n   !overlapping_instruction(BlockB,BlockA),\\n   !overlapping_instruction(BlockA,BlockB).;"
(QUERY
         (IF (NOT (ISEMPTY @delta_block_candidate_dependency_edge))
          (FOR_IN t0 @delta_block_candidate_dependency_edge            (IF (AND (AND (AND (CONSTRAINT != (TUPLE t0 1)  (TUPLE t0 4)) (NOT (EXISTS block_implies_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5))))) (NOT (EXISTS overlapping_instruction ((TUPLE t0 3) (TUPLE t0 0))))) (NOT (EXISTS overlapping_instruction ((TUPLE t0 0) (TUPLE t0 3)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @new_block_implies_block)
           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC) :- \n   block_implies_block(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   BlockA != BlockC,\n   !overlapping_instruction(BlockC,BlockA),\n   !overlapping_instruction(BlockA,BlockC).\nin file code_inference.dl [700:1-708:46]" 
       (TIMER_ON @new_block_implies_block "@t-recursive-rule;block_implies_block;0;code_inference.dl [700:1-708:46];block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC) :- \\n   block_implies_block(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   BlockA != BlockC,\\n   !overlapping_instruction(BlockC,BlockA),\\n   !overlapping_instruction(BlockA,BlockC).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_block_implies_block)) (NOT (ISEMPTY block_candidate_dependency_edge)))
          (FOR_IN t0 @delta_block_implies_block            (FOR t1 block_candidate_dependency_edge (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)) (= (TUPLE t1 4) (TUPLE t0 1)) (= (TUPLE t1 5) (TUPLE t0 2)))
            (IF (AND (AND (AND (AND (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 3)) (NOT (EXISTS block_implies_block ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5))))) (NOT (EXISTS overlapping_instruction ((TUPLE t1 0) (TUPLE t0 3))))) (NOT (EXISTS @delta_block_candidate_dependency_edge ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2))))) (NOT (EXISTS overlapping_instruction ((TUPLE t0 3) (TUPLE t1 0)))))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @new_block_implies_block)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC) :- \n   block_implies_block(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   BlockA != BlockC,\n   !overlapping_instruction(BlockC,BlockA),\n   !overlapping_instruction(BlockA,BlockC).\nin file code_inference.dl [700:1-708:46]" 
       (TIMER_ON @new_block_implies_block "@t-recursive-rule;block_implies_block;1;code_inference.dl [700:1-708:46];block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC) :- \\n   block_implies_block(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   BlockA != BlockC,\\n   !overlapping_instruction(BlockC,BlockA),\\n   !overlapping_instruction(BlockA,BlockC).;"
(QUERY
         (IF (AND (NOT (ISEMPTY block_implies_block)) (NOT (ISEMPTY @delta_block_candidate_dependency_edge)))
          (FOR_IN t0 block_implies_block            (FOR t1 @delta_block_candidate_dependency_edge (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)) (= (TUPLE t1 4) (TUPLE t0 1)) (= (TUPLE t1 5) (TUPLE t0 2)))
            (IF (AND (AND (AND (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 3)) (NOT (EXISTS overlapping_instruction ((TUPLE t1 0) (TUPLE t0 3))))) (NOT (EXISTS block_implies_block ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5))))) (NOT (EXISTS overlapping_instruction ((TUPLE t0 3) (TUPLE t1 0)))))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @new_block_implies_block)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC) :- \n   block_implies_block(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   TypeA != TypeC,\n   !overlapping_instruction(BlockC,BlockA),\n   !overlapping_instruction(BlockA,BlockC).\nin file code_inference.dl [700:1-708:46]" 
       (TIMER_ON @new_block_implies_block "@t-recursive-rule;block_implies_block;0;code_inference.dl [700:1-708:46];block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC) :- \\n   block_implies_block(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   TypeA != TypeC,\\n   !overlapping_instruction(BlockC,BlockA),\\n   !overlapping_instruction(BlockA,BlockC).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_block_implies_block)) (NOT (ISEMPTY block_candidate_dependency_edge)))
          (FOR_IN t0 @delta_block_implies_block            (FOR t1 block_candidate_dependency_edge (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)) (= (TUPLE t1 4) (TUPLE t0 1)) (= (TUPLE t1 5) (TUPLE t0 2)))
            (IF (AND (AND (AND (AND (CONSTRAINT != (TUPLE t1 1)  (TUPLE t0 4)) (NOT (EXISTS block_implies_block ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5))))) (NOT (EXISTS overlapping_instruction ((TUPLE t1 0) (TUPLE t0 3))))) (NOT (EXISTS @delta_block_candidate_dependency_edge ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2))))) (NOT (EXISTS overlapping_instruction ((TUPLE t0 3) (TUPLE t1 0)))))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @new_block_implies_block)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC) :- \n   block_implies_block(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   TypeA != TypeC,\n   !overlapping_instruction(BlockC,BlockA),\n   !overlapping_instruction(BlockA,BlockC).\nin file code_inference.dl [700:1-708:46]" 
       (TIMER_ON @new_block_implies_block "@t-recursive-rule;block_implies_block;1;code_inference.dl [700:1-708:46];block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC) :- \\n   block_implies_block(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   TypeA != TypeC,\\n   !overlapping_instruction(BlockC,BlockA),\\n   !overlapping_instruction(BlockA,BlockC).;"
(QUERY
         (IF (AND (NOT (ISEMPTY block_implies_block)) (NOT (ISEMPTY @delta_block_candidate_dependency_edge)))
          (FOR_IN t0 block_implies_block            (FOR t1 @delta_block_candidate_dependency_edge (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)) (= (TUPLE t1 4) (TUPLE t0 1)) (= (TUPLE t1 5) (TUPLE t0 2)))
            (IF (AND (AND (AND (CONSTRAINT != (TUPLE t1 1)  (TUPLE t0 4)) (NOT (EXISTS overlapping_instruction ((TUPLE t1 0) (TUPLE t0 3))))) (NOT (EXISTS block_implies_block ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5))))) (NOT (EXISTS overlapping_instruction ((TUPLE t0 3) (TUPLE t1 0)))))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @new_block_implies_block)
            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_block_candidate_dependency_edge "@t-recursive-relation;block_candidate_dependency_edge;code_inference.dl [646:7-646:38];"
     )
 ) (STMTS      (TIMER_ON @new_block_implies_block "@t-recursive-relation;block_implies_block;code_inference.dl [686:7-686:26];"
     )
 ) )  (STMTS      (EXIT (AND (ISEMPTY @new_block_candidate_dependency_edge) (ISEMPTY @new_block_implies_block)))
 ) (STMTS      (TIMER_ON @new_block_candidate_dependency_edge "@c-recursive-relation;block_candidate_dependency_edge;code_inference.dl [646:7-646:38];"
(STMTS (QUERY
       (FOR_IN t0 @new_block_candidate_dependency_edge         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) block_candidate_dependency_edge)
)
      )
       (SWAP @delta_block_candidate_dependency_edge @new_block_candidate_dependency_edge)
       (CLEAR @new_block_candidate_dependency_edge)
 )     )
      (TIMER_ON @new_block_implies_block "@c-recursive-relation;block_implies_block;code_inference.dl [686:7-686:26];"
(STMTS (QUERY
       (FOR_IN t0 @new_block_implies_block         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) block_implies_block)
)
      )
       (SWAP @delta_block_implies_block @new_block_implies_block)
       (CLEAR @new_block_implies_block)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_block_candidate_dependency_edge)
     (CLEAR @new_block_candidate_dependency_edge)
     (CLEAR @delta_block_implies_block)
     (CLEAR @new_block_implies_block)
 ) )  )  )  )
  (SUBROUTINE block_has_non_nop
(STMTS (STMTS     (TIMER_ON block_has_non_nop "@t-nonrecursive-relation;block_has_non_nop;code_inference_postprocess.dl [194:7-194:24];"
(STMTS      (DEBUG 
 "block_has_non_nop(Block) :- \n   code_in_refined_block(EA,Block),\n   !arch.is_nop(EA).\nin file code_inference_postprocess.dl [196:1-198:22]" 
      (TIMER_ON block_has_non_nop "@t-nonrecursive-rule;block_has_non_nop;code_inference_postprocess.dl [196:1-198:22];block_has_non_nop(Block) :- \\n   code_in_refined_block(EA,Block),\\n   !arch.is_nop(EA).;"
(QUERY
        (IF (NOT (ISEMPTY code_in_refined_block))
         (FOR_IN t0 code_in_refined_block           (IF (NOT (EXISTS arch.is_nop ((TUPLE t0 0))))
           (INSERT ((TUPLE t0 1)) block_has_non_nop)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.is_nop)
 ) )  )
  (SUBROUTINE block_information
(STMTS (STMTS (STMTS     (TIMER_ON block_information "@t-nonrecursive-relation;block_information;code_inference_postprocess.dl [38:7-38:24];"
(STMTS      (DEBUG 
 "block_information(Block,((LastInst+InsnSize)-Block),FirstEA,(FirstEA+((LastInst+InsnSize)-Block))) :- \n   refined_block_last_instruction(Block,LastInst),\n   arch.instruction_at(FirstEA,Block),\n   instruction(LastInst,InsnSize,_,_,_,_,_,_,_,_).\nin file code_inference_postprocess.dl [151:1-155:45]" 
      (TIMER_ON block_information "@t-nonrecursive-rule;block_information;code_inference_postprocess.dl [151:1-155:45];block_information(Block,((LastInst+InsnSize)-Block),FirstEA,(FirstEA+((LastInst+InsnSize)-Block))) :- \\n   refined_block_last_instruction(Block,LastInst),\\n   arch.instruction_at(FirstEA,Block),\\n   instruction(LastInst,InsnSize,_,_,_,_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY arch.instruction_at)))
         (FOR_IN t0 refined_block_last_instruction           (FOR t1 arch.instruction_at (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (FOR t2 instruction (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
            (INSERT ((TUPLE t0 0) (INTRINSIC - (INTRINSIC + (TUPLE t0 1) (TUPLE t2 1)) (TUPLE t0 0)) (TUPLE t1 0) (INTRINSIC + (TUPLE t1 0) (INTRINSIC - (INTRINSIC + (TUPLE t0 1) (TUPLE t2 1)) (TUPLE t0 0)))) block_information)
)))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON block_information "@t-relation-savetime;block_information;code_inference_postprocess.dl [38:7-38:24];savetime;"
     (IO block_information ((= IO "file") (= attributeNames "Block\tSize\tStartAddress\tEndAddress") (= auxArity "0") (= name "block_information") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"Block\", \"Size\", \"StartAddress\", \"EndAddress\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"u:address\", \"u:unsigned\", \"u:address\", \"u:address\"]}}")))
    )
 ) ) (STMTS     (CLEAR arch.instruction_at)
 ) )  )
  (SUBROUTINE block_instruction_next
(STMTS     (TIMER_ON block_instruction_next "@t-nonrecursive-relation;block_instruction_next;use_def_analysis.dl [49:7-49:29];"
(STMTS      (DEBUG 
 "block_instruction_next(Block,Before,After) :- \n   code_in_block(Before,Block),\n   next(Before,After).\nin file use_def_analysis.dl [51:1-53:24]" 
      (TIMER_ON block_instruction_next "@t-nonrecursive-rule;block_instruction_next;use_def_analysis.dl [51:1-53:24];block_instruction_next(Block,Before,After) :- \\n   code_in_block(Before,Block),\\n   next(Before,After).;"
(QUERY
        (IF (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY next)))
         (FOR_IN t0 code_in_block           (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INSERT ((TUPLE t0 1) (TUPLE t0 0) (TUPLE t1 1)) block_instruction_next)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE block_last_instruction
(STMTS     (TIMER_ON block_last_instruction "@t-nonrecursive-relation;block_last_instruction;code_inference.dl [79:7-79:29];"
(STMTS      (DEBUG 
 "block_last_instruction(Block,EA) :- \n   code_in_block(EA,Block),\n   next(EA,Next),\n   !code_in_block(Next,Block).\nin file code_inference.dl [1520:1-1523:32]" 
      (TIMER_ON block_last_instruction "@t-nonrecursive-rule;block_last_instruction;code_inference.dl [1520:1-1523:32];block_last_instruction(Block,EA) :- \\n   code_in_block(EA,Block),\\n   next(EA,Next),\\n   !code_in_block(Next,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY next)))
         (FOR_IN t0 code_in_block           (INDEXED_IF_EXISTS t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (NOT (EXISTS code_in_block ((TUPLE t1 1) (TUPLE t0 1))))
           (INSERT ((TUPLE t0 1) (TUPLE t0 0)) block_last_instruction)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE block_limit
(STMTS     (TIMER_ON block_limit "@t-nonrecursive-relation;block_limit;code_inference.dl [331:7-331:18];"
(STMTS      (DEBUG 
 "block_limit(as(EA, address)) :- \n   op_immediate(_,EA).\nin file code_inference.dl [333:1-342:7]" 
      (TIMER_ON block_limit "@t-nonrecursive-rule;block_limit;code_inference.dl [333:1-342:7];block_limit(as(EA, address)) :- \\n   op_immediate(_,EA).;"
(QUERY
        (IF (NOT (ISEMPTY op_immediate))
         (FOR_IN t0 op_immediate           (INSERT ((TUPLE t0 1)) block_limit)
)
        )       )
      )
     )
      (DEBUG 
 "block_limit(as(EA, address)) :- \n   pc_relative_operand(_,_,EA).\nin file code_inference.dl [333:1-342:7]" 
      (TIMER_ON block_limit "@t-nonrecursive-rule;block_limit;code_inference.dl [333:1-342:7];block_limit(as(EA, address)) :- \\n   pc_relative_operand(_,_,EA).;"
(QUERY
        (IF (NOT (ISEMPTY pc_relative_operand))
         (FOR_IN t0 pc_relative_operand           (INSERT ((TUPLE t0 2)) block_limit)
)
        )       )
      )
     )
      (DEBUG 
 "block_limit(as(EA, address)) :- \n   arch.pc_relative_addr(_,_,EA).\nin file code_inference.dl [333:1-342:7]" 
      (TIMER_ON block_limit "@t-nonrecursive-rule;block_limit;code_inference.dl [333:1-342:7];block_limit(as(EA, address)) :- \\n   arch.pc_relative_addr(_,_,EA).;"
(QUERY
        (IF (NOT (ISEMPTY arch.pc_relative_addr))
         (FOR_IN t0 arch.pc_relative_addr           (INSERT ((TUPLE t0 2)) block_limit)
)
        )       )
      )
     )
      (DEBUG 
 "block_limit(as(EA, address)) :- \n   basic_target(EA).\nin file code_inference.dl [333:1-342:7]" 
      (TIMER_ON block_limit "@t-nonrecursive-rule;block_limit;code_inference.dl [333:1-342:7];block_limit(as(EA, address)) :- \\n   basic_target(EA).;"
(QUERY
        (IF (NOT (ISEMPTY basic_target))
         (FOR_IN t0 basic_target           (INSERT ((TUPLE t0 0)) block_limit)
)
        )       )
      )
     )
      (DEBUG 
 "block_limit(as(EA, address)) :- \n   instruction_has_loop_prefix(EA).\nin file code_inference.dl [333:1-342:7]" 
      (TIMER_ON block_limit "@t-nonrecursive-rule;block_limit;code_inference.dl [333:1-342:7];block_limit(as(EA, address)) :- \\n   instruction_has_loop_prefix(EA).;"
(QUERY
        (IF (NOT (ISEMPTY instruction_has_loop_prefix))
         (FOR_IN t0 instruction_has_loop_prefix           (INSERT ((TUPLE t0 0)) block_limit)
)
        )       )
      )
     )
      (DEBUG 
 "block_limit(as(EA, address)) :- \n   fde_addresses(_,EA).\nin file code_inference.dl [333:1-342:7]" 
      (TIMER_ON block_limit "@t-nonrecursive-rule;block_limit;code_inference.dl [333:1-342:7];block_limit(as(EA, address)) :- \\n   fde_addresses(_,EA).;"
(QUERY
        (IF (NOT (ISEMPTY fde_addresses))
         (FOR_IN t0 fde_addresses           (INSERT ((TUPLE t0 1)) block_limit)
)
        )       )
      )
     )
      (DEBUG 
 "block_limit(as(EA, address)) :- \n   lsda_callsite_addresses(_,EA,_).\nin file code_inference.dl [333:1-342:7]" 
      (TIMER_ON block_limit "@t-nonrecursive-rule;block_limit;code_inference.dl [333:1-342:7];block_limit(as(EA, address)) :- \\n   lsda_callsite_addresses(_,EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY lsda_callsite_addresses))
         (FOR_IN t0 lsda_callsite_addresses           (INSERT ((TUPLE t0 1)) block_limit)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE block_needs_merging
(STMTS (STMTS     (TIMER_ON block_needs_merging "@t-nonrecursive-relation;block_needs_merging;code_inference_postprocess.dl [97:7-97:26];"
(STMTS      (DEBUG 
 "block_needs_merging(Block) :- \n   split_block(Block),\n   must_fallthrough(Code,Block),\n   code_in_block(Code,_),\n   !symbolic_operand(_,_,Block,_),\n   !code_pointer_in_data(_,Block),\n   !symbol_minus_symbol(_,_,_,Block,_,_),\n   !symbol_minus_symbol(_,_,Block,_,_,_),\n   !moved_data_label(_,_,_,Block),\n   !moved_label(_,_,_,Block),\n   !function_symbol(Block,_),\n   !defined_symbol(Block,_,_,_,_,_,_,_,_),\n   !entry_point(Block),\n   !dynamic_entry(\"INIT\",Block),\n   !dynamic_entry(\"FINI\",Block),\n   !instruction_has_loop_prefix(Block),\n   !fde_addresses(Block,_),\n   !fde_addresses(_,Block),\n   !block_needs_splitting_at(Block),\n   !loaded_section(_,Block,_).\nin file code_inference_postprocess.dl [99:1-119:32]" 
      (TIMER_ON block_needs_merging "@t-nonrecursive-rule;block_needs_merging;code_inference_postprocess.dl [99:1-119:32];block_needs_merging(Block) :- \\n   split_block(Block),\\n   must_fallthrough(Code,Block),\\n   code_in_block(Code,_),\\n   !symbolic_operand(_,_,Block,_),\\n   !code_pointer_in_data(_,Block),\\n   !symbol_minus_symbol(_,_,_,Block,_,_),\\n   !symbol_minus_symbol(_,_,Block,_,_,_),\\n   !moved_data_label(_,_,_,Block),\\n   !moved_label(_,_,_,Block),\\n   !function_symbol(Block,_),\\n   !defined_symbol(Block,_,_,_,_,_,_,_,_),\\n   !entry_point(Block),\\n   !dynamic_entry(\\\"INIT\\\",Block),\\n   !dynamic_entry(\\\"FINI\\\",Block),\\n   !instruction_has_loop_prefix(Block),\\n   !fde_addresses(Block,_),\\n   !fde_addresses(_,Block),\\n   !block_needs_splitting_at(Block),\\n   !loaded_section(_,Block,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY split_block))) (NOT (ISEMPTY must_fallthrough)))
         (FOR_IN t0 split_block           (IF (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (NOT (EXISTS loaded_section (UNDEF (TUPLE t0 0) UNDEF))) (NOT (EXISTS symbolic_operand (UNDEF UNDEF (TUPLE t0 0) UNDEF)))) (NOT (EXISTS defined_symbol ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS entry_point ((TUPLE t0 0))))) (NOT (EXISTS function_symbol ((TUPLE t0 0) UNDEF)))) (NOT (EXISTS dynamic_entry ((STRING "INIT") (TUPLE t0 0))))) (NOT (EXISTS moved_label (UNDEF UNDEF UNDEF (TUPLE t0 0))))) (NOT (EXISTS dynamic_entry ((STRING "FINI") (TUPLE t0 0))))) (NOT (EXISTS moved_data_label (UNDEF UNDEF UNDEF (TUPLE t0 0))))) (NOT (EXISTS instruction_has_loop_prefix ((TUPLE t0 0))))) (NOT (EXISTS symbol_minus_symbol (UNDEF UNDEF (TUPLE t0 0) UNDEF UNDEF UNDEF)))) (NOT (EXISTS fde_addresses ((TUPLE t0 0) UNDEF)))) (NOT (EXISTS symbol_minus_symbol (UNDEF UNDEF UNDEF (TUPLE t0 0) UNDEF UNDEF)))) (NOT (EXISTS fde_addresses (UNDEF (TUPLE t0 0))))) (NOT (EXISTS code_pointer_in_data (UNDEF (TUPLE t0 0))))) (NOT (EXISTS block_needs_splitting_at ((TUPLE t0 0)))))
           (INDEXED_IF_EXISTS t1 must_fallthrough (INDEX  (= (TUPLE t1 1) (TUPLE t0 0))) (EXISTS code_in_block ((TUPLE t1 0) UNDEF))
            (INSERT ((TUPLE t0 0)) block_needs_merging)
)          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR block_needs_splitting_at)
     (CLEAR dynamic_entry)
     (CLEAR instruction_has_loop_prefix)
 ) )  )
  (SUBROUTINE block_needs_splitting_at
(STMTS     (TIMER_ON block_needs_splitting_at "@t-nonrecursive-relation;block_needs_splitting_at;code_inference_postprocess.dl [53:7-53:31];"
(STMTS      (DEBUG 
 "block_needs_splitting_at(EA) :- \n   symbol_minus_symbol(_,_,_,EA,_,_),\n   code_in_block(EA,Block),\n   EA != Block.\nin file code_inference_postprocess.dl [57:1-66:17]" 
      (TIMER_ON block_needs_splitting_at "@t-nonrecursive-rule;block_needs_splitting_at;code_inference_postprocess.dl [57:1-66:17];block_needs_splitting_at(EA) :- \\n   symbol_minus_symbol(_,_,_,EA,_,_),\\n   code_in_block(EA,Block),\\n   EA != Block.;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbol_minus_symbol)) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 symbol_minus_symbol           (INDEXED_IF_EXISTS t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 3))) (CONSTRAINT != (TUPLE t0 3)  (TUPLE t1 1))
           (INSERT ((TUPLE t0 3)) block_needs_splitting_at)
))
        )       )
      )
     )
      (DEBUG 
 "block_needs_splitting_at(EA) :- \n   symbol_minus_symbol(_,_,EA,_,_,_),\n   code_in_block(EA,Block),\n   EA != Block.\nin file code_inference_postprocess.dl [57:1-66:17]" 
      (TIMER_ON block_needs_splitting_at "@t-nonrecursive-rule;block_needs_splitting_at;code_inference_postprocess.dl [57:1-66:17];block_needs_splitting_at(EA) :- \\n   symbol_minus_symbol(_,_,EA,_,_,_),\\n   code_in_block(EA,Block),\\n   EA != Block.;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbol_minus_symbol)) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 symbol_minus_symbol           (INDEXED_IF_EXISTS t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 2))) (CONSTRAINT != (TUPLE t0 2)  (TUPLE t1 1))
           (INSERT ((TUPLE t0 2)) block_needs_splitting_at)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE block_overlap
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON block_overlap "@t-nonrecursive-relation;block_overlap;code_inference.dl [623:7-623:20];"
(STMTS      (DEBUG 
 "block_overlap(Block1,Type1,(EndAddr1-BegAddr1),Block2,Type2,(EndAddr2-BegAddr2)) :- \n   block_candidate_boundaries(Block1,Type1,BegAddr1,EndAddr1),\n   block_candidate_boundaries(Block2,Type2,BegAddr2,EndAddr2),\n   Block1 != Block2,\n   BegAddr1 <= BegAddr2,\n   BegAddr2 < EndAddr1.\nin file code_inference.dl [625:1-638:25]" 
      (TIMER_ON block_overlap "@t-nonrecursive-rule;block_overlap;code_inference.dl [625:1-638:25];block_overlap(Block1,Type1,(EndAddr1-BegAddr1),Block2,Type2,(EndAddr2-BegAddr2)) :- \\n   block_candidate_boundaries(Block1,Type1,BegAddr1,EndAddr1),\\n   block_candidate_boundaries(Block2,Type2,BegAddr2,EndAddr2),\\n   Block1 != Block2,\\n   BegAddr1 <= BegAddr2,\\n   BegAddr2 < EndAddr1.;"
(QUERY
        (IF (NOT (ISEMPTY block_candidate_boundaries))
         (FOR_IN t0 block_candidate_boundaries           (FOR_IN t1 block_candidate_boundaries            (IF (AND (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t1 0)) (CONSTRAINT < (TUPLE t1 2)  (TUPLE t0 3))) (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t1 2)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (INTRINSIC - (TUPLE t0 3) (TUPLE t0 2)) (TUPLE t1 0) (TUPLE t1 1) (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2))) block_overlap)
           ))
)
        )       )
      )
     )
      (DEBUG 
 "block_overlap(Block1,Type1,(EndAddr1-BegAddr1),Block2,Type2,(EndAddr2-BegAddr2)) :- \n   block_candidate_boundaries(Block1,Type1,BegAddr1,EndAddr1),\n   block_candidate_boundaries(Block2,Type2,BegAddr2,EndAddr2),\n   Type1 != Type2,\n   BegAddr1 <= BegAddr2,\n   BegAddr2 < EndAddr1.\nin file code_inference.dl [625:1-638:25]" 
      (TIMER_ON block_overlap "@t-nonrecursive-rule;block_overlap;code_inference.dl [625:1-638:25];block_overlap(Block1,Type1,(EndAddr1-BegAddr1),Block2,Type2,(EndAddr2-BegAddr2)) :- \\n   block_candidate_boundaries(Block1,Type1,BegAddr1,EndAddr1),\\n   block_candidate_boundaries(Block2,Type2,BegAddr2,EndAddr2),\\n   Type1 != Type2,\\n   BegAddr1 <= BegAddr2,\\n   BegAddr2 < EndAddr1.;"
(QUERY
        (IF (NOT (ISEMPTY block_candidate_boundaries))
         (FOR_IN t0 block_candidate_boundaries           (FOR_IN t1 block_candidate_boundaries            (IF (AND (AND (CONSTRAINT != (TUPLE t0 1)  (TUPLE t1 1)) (CONSTRAINT < (TUPLE t1 2)  (TUPLE t0 3))) (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t1 2)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (INTRINSIC - (TUPLE t0 3) (TUPLE t0 2)) (TUPLE t1 0) (TUPLE t1 1) (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2))) block_overlap)
           ))
)
        )       )
      )
     )
      (DEBUG 
 "block_overlap(Block1,Type1,(EndAddr1-BegAddr1),Block2,Type2,(EndAddr2-BegAddr2)) :- \n   block_candidate_boundaries(Block1,Type1,BegAddr1,EndAddr1),\n   block_candidate_boundaries(Block2,Type2,BegAddr2,EndAddr2),\n   (EndAddr1-BegAddr1) != (EndAddr2-BegAddr2),\n   BegAddr1 <= BegAddr2,\n   BegAddr2 < EndAddr1.\nin file code_inference.dl [625:1-638:25]" 
      (TIMER_ON block_overlap "@t-nonrecursive-rule;block_overlap;code_inference.dl [625:1-638:25];block_overlap(Block1,Type1,(EndAddr1-BegAddr1),Block2,Type2,(EndAddr2-BegAddr2)) :- \\n   block_candidate_boundaries(Block1,Type1,BegAddr1,EndAddr1),\\n   block_candidate_boundaries(Block2,Type2,BegAddr2,EndAddr2),\\n   (EndAddr1-BegAddr1) != (EndAddr2-BegAddr2),\\n   BegAddr1 <= BegAddr2,\\n   BegAddr2 < EndAddr1.;"
(QUERY
        (IF (NOT (ISEMPTY block_candidate_boundaries))
         (FOR_IN t0 block_candidate_boundaries           (FOR_IN t1 block_candidate_boundaries            (IF (AND (AND (CONSTRAINT != (INTRINSIC - (TUPLE t0 3) (TUPLE t0 2))  (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2))) (CONSTRAINT < (TUPLE t1 2)  (TUPLE t0 3))) (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t1 2)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (INTRINSIC - (TUPLE t0 3) (TUPLE t0 2)) (TUPLE t1 0) (TUPLE t1 1) (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2))) block_overlap)
           ))
)
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 block_overlap       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @delta_block_overlap)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_block_overlap "@t-recursive-relation;block_overlap;code_inference.dl [623:7-623:20];"
(STMTS       (DEBUG 
 "block_overlap(Block2,Type2,Size2,Block1,Type1,Size1) :- \n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2).\nin file code_inference.dl [640:1-641:58]" 
       (TIMER_ON @new_block_overlap "@t-recursive-rule;block_overlap;0;code_inference.dl [640:1-641:58];block_overlap(Block2,Type2,Size2,Block1,Type1,Size1) :- \\n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2).;"
(QUERY
         (IF (NOT (ISEMPTY @delta_block_overlap))
          (FOR_IN t0 @delta_block_overlap            (IF (NOT (EXISTS block_overlap ((TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2))))
            (INSERT ((TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @new_block_overlap)
           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_block_overlap "@t-recursive-relation;block_overlap;code_inference.dl [623:7-623:20];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_block_overlap))
 ) (STMTS      (TIMER_ON @new_block_overlap "@c-recursive-relation;block_overlap;code_inference.dl [623:7-623:20];"
(STMTS (QUERY
       (FOR_IN t0 @new_block_overlap         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) block_overlap)
)
      )
       (SWAP @delta_block_overlap @new_block_overlap)
       (CLEAR @new_block_overlap)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_block_overlap)
     (CLEAR @new_block_overlap)
 ) )  )  )  )
  (SUBROUTINE block_points
(STMTS (STMTS     (TIMER_ON block_points "@t-nonrecursive-relation;block_points;code_inference.dl [1177:7-1177:19];"
(STMTS      (DEBUG 
 "block_points(Block,Type,Size,Predecessor,Importance,HeuristicName) :- \n   negative_block_points(Block,Type,Size,Predecessor,Importance,HeuristicName).\nin file code_inference.dl [1187:1-1188:81]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1187:1-1188:81];block_points(Block,Type,Size,Predecessor,Importance,HeuristicName) :- \\n   negative_block_points(Block,Type,Size,Predecessor,Importance,HeuristicName).;"
(QUERY
        (IF (NOT (ISEMPTY negative_block_points))
         (FOR_IN t0 negative_block_points           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) block_points)
)
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"data\",Size,0,6,\"relative-jump-table\") :- \n   data_block_candidate(Block,Size),\n   relative_address(Block,Size,_,_,_,_).\nin file code_inference.dl [1193:1-1195:42]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1193:1-1195:42];block_points(Block,\\\"data\\\",Size,0,6,\\\"relative-jump-table\\\") :- \\n   data_block_candidate(Block,Size),\\n   relative_address(Block,Size,_,_,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_block_candidate)) (NOT (ISEMPTY relative_address)))
         (FOR_IN t0 data_block_candidate           (IF (EXISTS relative_address ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (STRING "data") (TUPLE t0 1) (UNSIGNED 0) (NUMBER 6) (STRING "relative-jump-table")) block_points)
          ))
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"data\",Size,0,3,\"relative-jump-table-start\") :- \n   data_block_candidate(Block,Size),\n   relative_address_start(Block,_,_,_,_).\nin file code_inference.dl [1198:1-1200:43]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1198:1-1200:43];block_points(Block,\\\"data\\\",Size,0,3,\\\"relative-jump-table-start\\\") :- \\n   data_block_candidate(Block,Size),\\n   relative_address_start(Block,_,_,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_block_candidate)) (NOT (ISEMPTY relative_address_start)))
         (FOR_IN t0 data_block_candidate           (IF (EXISTS relative_address_start ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (STRING "data") (TUPLE t0 1) (UNSIGNED 0) (NUMBER 3) (STRING "relative-jump-table-start")) block_points)
          ))
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,Type,Size,0,0,\"basic point\") :- \n   unresolved_block(Block,Type,Size).\nin file code_inference.dl [1227:1-1228:39]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1227:1-1228:39];block_points(Block,Type,Size,0,0,\\\"basic point\\\") :- \\n   unresolved_block(Block,Type,Size).;"
(QUERY
        (IF (NOT (ISEMPTY unresolved_block))
         (FOR_IN t0 unresolved_block           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (UNSIGNED 0) (NUMBER 0) (STRING "basic point")) block_points)
)
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"code section start\") :- \n   unresolved_block(Block,\"code\",Size),\n   code_section(Section),\n   loaded_section(Block,_,Section).\nin file code_inference.dl [1230:1-1233:37]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1230:1-1233:37];block_points(Block,\\\"code\\\",Size,0,1,\\\"code section start\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   code_section(Section),\\n   loaded_section(Block,_,Section).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY code_section)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (IF_EXISTS t1 code_section (EXISTS loaded_section ((TUPLE t0 0) UNDEF (TUPLE t1 0))) 
           (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "code section start")) block_points)
))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,2,\"unresolved-may-fallthrough\") :- \n   unresolved_block(Block,\"code\",Size),\n   may_fallthrough(EA,Block),\n   code_in_block_candidate_refined(EA,BlockPred),\n   !candidate_block_is_padding(BlockPred),\n   unresolved_block(BlockPred,\"code\",_).\nin file code_inference.dl [1278:1-1283:42]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1278:1-1283:42];block_points(Block,\\\"code\\\",Size,0,2,\\\"unresolved-may-fallthrough\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   may_fallthrough(EA,Block),\\n   code_in_block_candidate_refined(EA,BlockPred),\\n   !candidate_block_is_padding(BlockPred),\\n   unresolved_block(BlockPred,\\\"code\\\",_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY may_fallthrough)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (FOR t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
            (IF (AND (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF)) (NOT (EXISTS candidate_block_is_padding ((TUPLE t2 1)))))
             (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 2) (STRING "unresolved-may-fallthrough")) block_points)
            ))))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,3,\"incremental linking target\") :- \n   incremental_linking(First,Last),\n   direct_jump(EA,Block),\n   EA >= First,\n   EA <= Last,\n   unresolved_block(Block,\"code\",Size).\nin file code_inference.dl [1285:1-1289:41]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1285:1-1289:41];block_points(Block,\\\"code\\\",Size,0,3,\\\"incremental linking target\\\") :- \\n   incremental_linking(First,Last),\\n   direct_jump(EA,Block),\\n   EA >= First,\\n   EA <= Last,\\n   unresolved_block(Block,\\\"code\\\",Size).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY incremental_linking))) (NOT (ISEMPTY direct_jump)))
         (FOR_IN t0 incremental_linking           (FOR_IN t1 direct_jump            (IF (AND (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t0 1)) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t0 0)))
            (FOR t2 unresolved_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)) (= (TUPLE t2 1) (STRING "code")))
             (INSERT ((TUPLE t1 1) (STRING "code") (TUPLE t2 2) (UNSIGNED 0) (NUMBER 3) (STRING "incremental linking target")) block_points)
)           ))
)
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,Points,\"resolved-reaches\") :- \n   resolved_reaches(Block,Size,Points).\nin file code_inference.dl [1333:1-1334:41]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1333:1-1334:41];block_points(Block,\\\"code\\\",Size,0,Points,\\\"resolved-reaches\\\") :- \\n   resolved_reaches(Block,Size,Points).;"
(QUERY
        (IF (NOT (ISEMPTY resolved_reaches))
         (FOR_IN t0 resolved_reaches           (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 1) (UNSIGNED 0) (TUPLE t0 2) (STRING "resolved-reaches")) block_points)
)
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,Block_succ,1,\"fallthrough_to\") :- \n   unresolved_block(Block,\"code\",Size),\n   code_in_block_candidate_refined(EA,Block),\n   may_fallthrough(EA,Block_succ),\n   code_in_block_candidate_refined(_,Block_succ),\n   !unresolved_block(Block_succ,\"code\",_),\n   !impossible_block(Block_succ,\"code\",_,_),\n   !is_padding(Block_succ).\nin file code_inference.dl [1362:1-1369:29]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1362:1-1369:29];block_points(Block,\\\"code\\\",Size,Block_succ,1,\\\"fallthrough_to\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   code_in_block_candidate_refined(EA,Block),\\n   may_fallthrough(EA,Block_succ),\\n   code_in_block_candidate_refined(_,Block_succ),\\n   !unresolved_block(Block_succ,\\\"code\\\",_),\\n   !impossible_block(Block_succ,\\\"code\\\",_,_),\\n   !is_padding(Block_succ).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY may_fallthrough)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (FOR t2 may_fallthrough (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
            (IF (AND (AND (AND (NOT (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF))) (EXISTS code_in_block_candidate_refined (UNDEF (TUPLE t2 1)))) (NOT (EXISTS is_padding ((TUPLE t2 1))))) (NOT (EXISTS impossible_block ((TUPLE t2 1) (STRING "code") UNDEF UNDEF))))
             (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (TUPLE t2 1) (NUMBER 1) (STRING "fallthrough_to")) block_points)
            ))))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"has well-defined jump\") :- \n   unresolved_block(Block,\"code\",Size),\n   code_in_block_candidate_refined(EA,Block),\n   direct_jump(EA,BlockDest),\n   !unresolved_block(BlockDest,\"code\",_).\nin file code_inference.dl [1371:1-1375:43]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1371:1-1375:43];block_points(Block,\\\"code\\\",Size,0,1,\\\"has well-defined jump\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   code_in_block_candidate_refined(EA,Block),\\n   direct_jump(EA,BlockDest),\\n   !unresolved_block(BlockDest,\\\"code\\\",_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY direct_jump)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 direct_jump (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (NOT (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF)))
            (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "has well-defined jump")) block_points)
)))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"has well-defined call\") :- \n   unresolved_block(Block,\"code\",Size),\n   code_in_block_candidate_refined(EA,Block),\n   direct_call(EA,BlockDest),\n   !unresolved_block(BlockDest,\"code\",_).\nin file code_inference.dl [1377:1-1381:43]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1377:1-1381:43];block_points(Block,\\\"code\\\",Size,0,1,\\\"has well-defined call\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   code_in_block_candidate_refined(EA,Block),\\n   direct_call(EA,BlockDest),\\n   !unresolved_block(BlockDest,\\\"code\\\",_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY direct_call)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 direct_call (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (NOT (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF)))
            (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "has well-defined call")) block_points)
)))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,3,\"has well-defined call to a function symbol\") :- \n   unresolved_block(Block,\"code\",Size),\n   code_in_block_candidate_refined(EA,Block),\n   direct_call(EA,BlockDest),\n   function_symbol(BlockDest,_).\nin file code_inference.dl [1383:1-1387:34]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1383:1-1387:34];block_points(Block,\\\"code\\\",Size,0,3,\\\"has well-defined call to a function symbol\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   code_in_block_candidate_refined(EA,Block),\\n   direct_call(EA,BlockDest),\\n   function_symbol(BlockDest,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY function_symbol))) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 direct_call (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (EXISTS function_symbol ((TUPLE t2 1) UNDEF))
            (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 3) (STRING "has well-defined call to a function symbol")) block_points)
)))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"plt call\") :- \n   unresolved_block(Block,\"code\",Size),\n   code_in_block_candidate_refined(EA,Block),\n   direct_call(EA,BlockDest),\n   plt_entry(BlockDest,_).\nin file code_inference.dl [1389:1-1393:28]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1389:1-1393:28];block_points(Block,\\\"code\\\",Size,0,1,\\\"plt call\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   code_in_block_candidate_refined(EA,Block),\\n   direct_call(EA,BlockDest),\\n   plt_entry(BlockDest,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY plt_entry))) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 direct_call (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (EXISTS plt_entry ((TUPLE t2 1) UNDEF))
            (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "plt call")) block_points)
)))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,2,\"padding nop block\") :- \n   unresolved_block(Block,\"code\",Size),\n   fde_addresses(_,Block),\n   arch.is_nop(Block).\nin file code_inference.dl [1395:1-1398:24]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1395:1-1398:24];block_points(Block,\\\"code\\\",Size,0,2,\\\"padding nop block\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   fde_addresses(_,Block),\\n   arch.is_nop(Block).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY fde_addresses)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY arch.is_nop)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (IF (AND (EXISTS fde_addresses (UNDEF (TUPLE t0 0))) (EXISTS arch.is_nop ((TUPLE t0 0))))
           (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 2) (STRING "padding nop block")) block_points)
          ))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"data\",Size,0,10,\"repeated byte\") :- \n   unresolved_block(Block,\"data\",Size),\n   repeated_byte(Block,_,Count),\n   Count >= 8,\n   !is_padding(Block).\nin file code_inference.dl [1400:1-1403:24]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1400:1-1403:24];block_points(Block,\\\"data\\\",Size,0,10,\\\"repeated byte\\\") :- \\n   unresolved_block(Block,\\\"data\\\",Size),\\n   repeated_byte(Block,_,Count),\\n   Count >= 8,\\n   !is_padding(Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY repeated_byte)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "data")))
          (IF (NOT (EXISTS is_padding ((TUPLE t0 0))))
           (INDEXED_IF_EXISTS t1 repeated_byte (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (CONSTRAINT >= (TUPLE t1 2)  (UNSIGNED 8))
            (INSERT ((TUPLE t0 0) (STRING "data") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 10) (STRING "repeated byte")) block_points)
)          ))        )       )
      )
     )
      (DEBUG 
 "block_points(Block2,\"code\",BlockSize2,0,-1,\"dangling block with enclosed instr\") :- \n   unresolved_block_overlap(Block,\"code\",_,Block2,\"code\",BlockSize2),\n   Block < Block2,\n   instruction(Block,Size,_,_,_,_,_,_,_,_),\n   instruction(Block2,Size2,_,_,_,_,_,_,_,_),\n   (Block+Size) = (Block2+Size2),\n   block_candidate_boundaries(Block2,\"code\",Beg2,_),\n   !block_candidate_boundaries(_,\"code\",_,Beg2).\nin file code_inference.dl [1409:1-1421:50]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1409:1-1421:50];block_points(Block2,\\\"code\\\",BlockSize2,0,-1,\\\"dangling block with enclosed instr\\\") :- \\n   unresolved_block_overlap(Block,\\\"code\\\",_,Block2,\\\"code\\\",BlockSize2),\\n   Block < Block2,\\n   instruction(Block,Size,_,_,_,_,_,_,_,_),\\n   instruction(Block2,Size2,_,_,_,_,_,_,_,_),\\n   (Block+Size) = (Block2+Size2),\\n   block_candidate_boundaries(Block2,\\\"code\\\",Beg2,_),\\n   !block_candidate_boundaries(_,\\\"code\\\",_,Beg2).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY unresolved_block_overlap)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY instruction)))
         (FOR t0 unresolved_block_overlap (INDEX  (= (TUPLE t0 1) (STRING "code")) (= (TUPLE t0 4) (STRING "code")))
          (IF (CONSTRAINT < (TUPLE t0 0)  (TUPLE t0 3))
           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (INDEXED_IF_EXISTS t2 instruction (INDEX  (= (TUPLE t2 0) (TUPLE t0 3))) (CONSTRAINT = (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1))  (INTRINSIC + (TUPLE t0 3) (TUPLE t2 1)))
             (INDEXED_IF_EXISTS t3 block_candidate_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t0 3)) (= (TUPLE t3 1) (STRING "code"))) (NOT (EXISTS block_candidate_boundaries (UNDEF (STRING "code") UNDEF (TUPLE t3 2))))
              (INSERT ((TUPLE t0 3) (STRING "code") (TUPLE t0 5) (UNSIGNED 0) (NUMBER -1) (STRING "dangling block with enclosed instr")) block_points)
)))          ))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,3,\"exc-region\") :- \n   unresolved_block(Block,\"code\",Size),\n   lsda_callsite_addresses(Block,_,_).\nin file code_inference.dl [1423:1-1425:42]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1423:1-1425:42];block_points(Block,\\\"code\\\",Size,0,3,\\\"exc-region\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   lsda_callsite_addresses(Block,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY lsda_callsite_addresses)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (IF (EXISTS lsda_callsite_addresses ((TUPLE t0 0) UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 3) (STRING "exc-region")) block_points)
          ))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,10,\"landing-pad\") :- \n   unresolved_block(Block,\"code\",Size),\n   lsda_callsite_addresses(_,_,Block).\nin file code_inference.dl [1427:1-1429:43]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1427:1-1429:43];block_points(Block,\\\"code\\\",Size,0,10,\\\"landing-pad\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   lsda_callsite_addresses(_,_,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY lsda_callsite_addresses)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (IF (EXISTS lsda_callsite_addresses (UNDEF UNDEF (TUPLE t0 0)))
           (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 10) (STRING "landing-pad")) block_points)
          ))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,BlockPred,2,\"unresolved-direct-jump\") :- \n   unresolved_block(Block,\"code\",Size),\n   direct_jump(EA,Block),\n   code_in_block_candidate_refined(EA,BlockPred),\n   BlockPred != Block,\n   unresolved_block(BlockPred,\"code\",_).\nin file code_inference.dl [1261:1-1267:16]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1261:1-1267:16];block_points(Block,\\\"code\\\",Size,BlockPred,2,\\\"unresolved-direct-jump\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   direct_jump(EA,Block),\\n   code_in_block_candidate_refined(EA,BlockPred),\\n   BlockPred != Block,\\n   unresolved_block(BlockPred,\\\"code\\\",_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY direct_jump)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 direct_jump (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (FOR t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
            (IF (AND (CONSTRAINT != (TUPLE t2 1)  (TUPLE t0 0)) (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF)))
             (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (TUPLE t2 1) (NUMBER 2) (STRING "unresolved-direct-jump")) block_points)
            ))))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,BlockPred,2,\"unresolved-direct-call\") :- \n   unresolved_block(Block,\"code\",Size),\n   direct_call(EA,Block),\n   code_in_block_candidate_refined(EA,BlockPred),\n   BlockPred != Block,\n   unresolved_block(BlockPred,\"code\",_).\nin file code_inference.dl [1270:1-1276:16]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1270:1-1276:16];block_points(Block,\\\"code\\\",Size,BlockPred,2,\\\"unresolved-direct-call\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   direct_call(EA,Block),\\n   code_in_block_candidate_refined(EA,BlockPred),\\n   BlockPred != Block,\\n   unresolved_block(BlockPred,\\\"code\\\",_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY direct_call)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 direct_call (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (FOR t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
            (IF (AND (CONSTRAINT != (TUPLE t2 1)  (TUPLE t0 0)) (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF)))
             (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (TUPLE t2 1) (NUMBER 2) (STRING "unresolved-direct-call")) block_points)
            ))))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,3,\"relative jump table target\") :- \n   unresolved_block(Block,\"code\",Size),\n   relative_address(EA,_,_,_,Block,_),\n   !relative_address(Block,_,_,_,_,_),\n   !address_in_data(EA,_),\n   1 = count : { relative_address(EA,+underscore_635,+underscore_636,+underscore_637,+underscore_638,+underscore_639) }.\nin file code_inference.dl [1348:1-1359:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1348:1-1359:7];block_points(Block,\\\"code\\\",Size,0,3,\\\"relative jump table target\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   relative_address(EA,_,_,_,Block,_),\\n   !relative_address(Block,_,_,_,_,_),\\n   !address_in_data(EA,_),\\n   1 = count : { relative_address(EA,+underscore_635,+underscore_636,+underscore_637,+underscore_638,+underscore_639) }.;"
(QUERY
        (IF (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY relative_address)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (IF (NOT (EXISTS relative_address ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF)))
           (FOR t1 relative_address (INDEX  (= (TUPLE t1 4) (TUPLE t0 0)))
            (IF (NOT (EXISTS address_in_data ((TUPLE t1 0) UNDEF)))
             (INDEX_AGGREGATE (= (TUPLE t2 0) (AGGREGATE_FUNCTION COUNT  UNDEF ))  t2 relative_address (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) TRUE 
              (IF (CONSTRAINT = (NUMBER 1)  (TUPLE t2 0))
               (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 3) (STRING "relative jump table target")) block_points)
              ))            ))          ))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"relative jump table target\") :- \n   unresolved_block(Block,\"code\",Size),\n   relative_address(EA,_,_,_,Block,_),\n   !relative_address(Block,_,_,_,_,_),\n   address_in_data(EA,_),\n   1 = count : { relative_address(EA,+underscore_645,+underscore_646,+underscore_647,+underscore_648,+underscore_649) }.\nin file code_inference.dl [1348:1-1359:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1348:1-1359:7];block_points(Block,\\\"code\\\",Size,0,1,\\\"relative jump table target\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   relative_address(EA,_,_,_,Block,_),\\n   !relative_address(Block,_,_,_,_,_),\\n   address_in_data(EA,_),\\n   1 = count : { relative_address(EA,+underscore_645,+underscore_646,+underscore_647,+underscore_648,+underscore_649) }.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY address_in_data)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY relative_address)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (IF (NOT (EXISTS relative_address ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF)))
           (FOR t1 relative_address (INDEX  (= (TUPLE t1 4) (TUPLE t0 0)))
            (IF (EXISTS address_in_data ((TUPLE t1 0) UNDEF))
             (INDEX_AGGREGATE (= (TUPLE t2 0) (AGGREGATE_FUNCTION COUNT  UNDEF ))  t2 relative_address (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) TRUE 
              (IF (CONSTRAINT = (NUMBER 1)  (TUPLE t2 0))
               (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "relative jump table target")) block_points)
              ))            ))          ))        )       )
      )
     )
      (DEBUG 
 "block_points(Block2,\"code\",BlockSize2,0,-1,\"dangling block with enclosed instr\") :- \n   unresolved_block_overlap(Block,\"code\",_,Block2,\"code\",BlockSize2),\n   Block < Block2,\n   instruction(Block,Size,_,_,_,_,_,_,_,_),\n   instruction(Block2,Size2,_,_,_,_,_,_,_,_),\n   instruction( _tmp_34,Size3,_,_,_,_,_,_,_,_),\n   code_in_block_candidate_refined( _tmp_34,Block2),\n   (Block+Size) = ((Block2+Size2)+Size3),\n   block_candidate_boundaries(Block2,\"code\",Beg2,_),\n   !block_candidate_boundaries(_,\"code\",_,Beg2),\n    _tmp_34 = (Block2+Size2).\nin file code_inference.dl [1409:1-1421:50]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1409:1-1421:50];block_points(Block2,\\\"code\\\",BlockSize2,0,-1,\\\"dangling block with enclosed instr\\\") :- \\n   unresolved_block_overlap(Block,\\\"code\\\",_,Block2,\\\"code\\\",BlockSize2),\\n   Block < Block2,\\n   instruction(Block,Size,_,_,_,_,_,_,_,_),\\n   instruction(Block2,Size2,_,_,_,_,_,_,_,_),\\n   instruction( _tmp_34,Size3,_,_,_,_,_,_,_,_),\\n   code_in_block_candidate_refined( _tmp_34,Block2),\\n   (Block+Size) = ((Block2+Size2)+Size3),\\n   block_candidate_boundaries(Block2,\\\"code\\\",Beg2,_),\\n   !block_candidate_boundaries(_,\\\"code\\\",_,Beg2),\\n    _tmp_34 = (Block2+Size2).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY block_candidate_boundaries)) (NOT (ISEMPTY unresolved_block_overlap))) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY instruction)))
         (FOR t0 unresolved_block_overlap (INDEX  (= (TUPLE t0 1) (STRING "code")) (= (TUPLE t0 4) (STRING "code")))
          (IF (CONSTRAINT < (TUPLE t0 0)  (TUPLE t0 3))
           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 instruction (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)))
             (FOR t3 code_in_block_candidate_refined (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t0 3) (TUPLE t2 1))) (= (TUPLE t3 1) (TUPLE t0 3)))
              (INDEXED_IF_EXISTS t4 instruction (INDEX  (= (TUPLE t4 0) (TUPLE t3 0))) (CONSTRAINT = (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1))  (INTRINSIC + (INTRINSIC + (TUPLE t0 3) (TUPLE t2 1)) (TUPLE t4 1)))
               (INDEXED_IF_EXISTS t5 block_candidate_boundaries (INDEX  (= (TUPLE t5 0) (TUPLE t0 3)) (= (TUPLE t5 1) (STRING "code"))) (NOT (EXISTS block_candidate_boundaries (UNDEF (STRING "code") UNDEF (TUPLE t5 2))))
                (INSERT ((TUPLE t0 3) (STRING "code") (TUPLE t0 5) (UNSIGNED 0) (NUMBER -1) (STRING "dangling block with enclosed instr")) block_points)
)))))          ))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",(End-Start),0,-3,\"overlaps with relocation\") :- \n   code_in_block_candidate_refined(EA,Block),\n   relocation_size(Type,Size),\n   relocation(Target,Type,_,_,_,_,_),\n   EA >= Target,\n   EA < (Target+(Size/8)),\n   block_candidate_boundaries(Block,\"code\",Start,End).\nin file code_inference.dl [1205:1-1225:29]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1205:1-1225:29];block_points(Block,\\\"code\\\",(End-Start),0,-3,\\\"overlaps with relocation\\\") :- \\n   code_in_block_candidate_refined(EA,Block),\\n   relocation_size(Type,Size),\\n   relocation(Target,Type,_,_,_,_,_),\\n   EA >= Target,\\n   EA < (Target+(Size/8)),\\n   block_candidate_boundaries(Block,\\\"code\\\",Start,End).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_in_block_candidate_refined)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY relocation_size)))
         (FOR_IN t0 code_in_block_candidate_refined           (FOR_IN t1 relocation_size            (INDEXED_IF_EXISTS t2 relocation (INDEX  (= (TUPLE t2 1) (TUPLE t1 0))) (AND (CONSTRAINT < (TUPLE t0 0)  (INTRINSIC + (TUPLE t2 0) (INTRINSIC / (TUPLE t1 1) (UNSIGNED 8)))) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t2 0)))
            (FOR t3 block_candidate_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t0 1)) (= (TUPLE t3 1) (STRING "code")))
             (INSERT ((TUPLE t0 1) (STRING "code") (INTRINSIC - (TUPLE t3 3) (TUPLE t3 2)) (UNSIGNED 0) (NUMBER -3) (STRING "overlaps with relocation")) block_points)
)))
)
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",(End-Start),0,-3,\"overlaps with relocation\") :- \n   code_in_block_candidate_refined(EA,Block),\n   instruction(EA,Size,_,_,_,_,_,_,_,_),\n   relocation(Target,_,_,_,_,_,_),\n   Target > EA,\n   Target < (EA+(Size/8)),\n   !instruction_immediate_offset(EA,_,(Target-EA),_),\n   !instruction_displacement_offset(EA,_,(Target-EA),_),\n   block_candidate_boundaries(Block,\"code\",Start,End).\nin file code_inference.dl [1205:1-1225:29]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1205:1-1225:29];block_points(Block,\\\"code\\\",(End-Start),0,-3,\\\"overlaps with relocation\\\") :- \\n   code_in_block_candidate_refined(EA,Block),\\n   instruction(EA,Size,_,_,_,_,_,_,_,_),\\n   relocation(Target,_,_,_,_,_,_),\\n   Target > EA,\\n   Target < (EA+(Size/8)),\\n   !instruction_immediate_offset(EA,_,(Target-EA),_),\\n   !instruction_displacement_offset(EA,_,(Target-EA),_),\\n   block_candidate_boundaries(Block,\\\"code\\\",Start,End).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_in_block_candidate_refined)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 code_in_block_candidate_refined           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF_EXISTS t2 relocation (AND (AND (AND (CONSTRAINT > (TUPLE t2 0)  (TUPLE t0 0)) (CONSTRAINT < (TUPLE t2 0)  (INTRINSIC + (TUPLE t0 0) (INTRINSIC / (TUPLE t1 1) (UNSIGNED 8))))) (NOT (EXISTS instruction_immediate_offset ((TUPLE t0 0) UNDEF (INTRINSIC - (TUPLE t2 0) (TUPLE t0 0)) UNDEF)))) (NOT (EXISTS instruction_displacement_offset ((TUPLE t0 0) UNDEF (INTRINSIC - (TUPLE t2 0) (TUPLE t0 0)) UNDEF)))) 
            (FOR t3 block_candidate_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t0 1)) (= (TUPLE t3 1) (STRING "code")))
             (INSERT ((TUPLE t0 1) (STRING "code") (INTRINSIC - (TUPLE t3 3) (TUPLE t3 2)) (UNSIGNED 0) (NUMBER -3) (STRING "overlaps with relocation")) block_points)
))))
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,-1,\"debug block\") :- \n   unresolved_block(Block,\"code\",Size),\n   block_candidate_boundaries(Block,\"code\",_,End),\n   next(EA,End),\n   code_in_block_candidate_refined(EA,Block),\n   instruction(EA,_,_,<inlined_Operation_878>,_,_,_,_,_,_),\n   <inlined_Operation_878> = \"INT3\".\nin file code_inference.dl [1498:1-1507:42]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1498:1-1507:42];block_points(Block,\\\"code\\\",Size,0,-1,\\\"debug block\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   block_candidate_boundaries(Block,\\\"code\\\",_,End),\\n   next(EA,End),\\n   code_in_block_candidate_refined(EA,Block),\\n   instruction(EA,_,_,<inlined_Operation_878>,_,_,_,_,_,_),\\n   <inlined_Operation_878> = \\\"INT3\\\".;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY next))) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY block_candidate_boundaries)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 block_candidate_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (STRING "code")))
           (FOR t2 next (INDEX  (= (TUPLE t2 1) (TUPLE t1 3)))
            (IF (AND (EXISTS instruction ((TUPLE t2 0) UNDEF UNDEF (STRING "INT3") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (EXISTS code_in_block_candidate_refined ((TUPLE t2 0) (TUPLE t0 0))))
             (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER -1) (STRING "debug block")) block_points)
            ))))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"data\",AccessSize,0,4,\"data access\") :- \n   arch.simple_data_load(EA,Block,AccessSize),\n   unresolved_block(Block,\"data\",AccessSize),\n   code_in_block_candidate_refined(EA,Block0),\n   !unresolved_block(Block0,\"code\",_),\n   !impossible_block(Block0,\"code\",_,_).\nin file code_inference.dl [1460:1-1468:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1460:1-1468:7];block_points(Block,\\\"data\\\",AccessSize,0,4,\\\"data access\\\") :- \\n   arch.simple_data_load(EA,Block,AccessSize),\\n   unresolved_block(Block,\\\"data\\\",AccessSize),\\n   code_in_block_candidate_refined(EA,Block0),\\n   !unresolved_block(Block0,\\\"code\\\",_),\\n   !impossible_block(Block0,\\\"code\\\",_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_block_candidate_refined)) (NOT (ISEMPTY arch.simple_data_load))) (NOT (ISEMPTY unresolved_block)))
         (FOR_IN t0 arch.simple_data_load           (IF (EXISTS unresolved_block ((TUPLE t0 1) (STRING "data") (TUPLE t0 2)))
           (INDEXED_IF_EXISTS t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (AND (NOT (EXISTS impossible_block ((TUPLE t1 1) (STRING "code") UNDEF UNDEF))) (NOT (EXISTS unresolved_block ((TUPLE t1 1) (STRING "code") UNDEF))))
            (INSERT ((TUPLE t0 1) (STRING "data") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 4) (STRING "data access")) block_points)
)          ))
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"data\",AccessSize,0,2,\"data access\") :- \n   arch.simple_data_load(EA,Block,AccessSize),\n   unresolved_block(Block,\"data\",AccessSize),\n   code_in_block_candidate_refined(EA,Block0),\n   unresolved_block(Block0,\"code\",_).\nin file code_inference.dl [1460:1-1468:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1460:1-1468:7];block_points(Block,\\\"data\\\",AccessSize,0,2,\\\"data access\\\") :- \\n   arch.simple_data_load(EA,Block,AccessSize),\\n   unresolved_block(Block,\\\"data\\\",AccessSize),\\n   code_in_block_candidate_refined(EA,Block0),\\n   unresolved_block(Block0,\\\"code\\\",_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY arch.simple_data_load)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR_IN t0 arch.simple_data_load           (IF (EXISTS unresolved_block ((TUPLE t0 1) (STRING "data") (TUPLE t0 2)))
           (INDEXED_IF_EXISTS t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS unresolved_block ((TUPLE t1 1) (STRING "code") UNDEF))
            (INSERT ((TUPLE t0 1) (STRING "data") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 2) (STRING "data access")) block_points)
)          ))
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"data\",AccessSize,0,4,\"composite data access\") :- \n   composite_data_access(EA,EA_load,Block,AccessSize),\n   unresolved_block(Block,\"data\",AccessSize),\n   code_in_block_candidate_refined(EA,CodeBlock1),\n   code_in_block_candidate_refined(EA_load,CodeBlock2),\n   !unresolved_block(CodeBlock1,\"code\",_),\n   !impossible_block(CodeBlock1,\"code\",_,_),\n   !unresolved_block(CodeBlock2,\"code\",_),\n   !impossible_block(CodeBlock2,\"code\",_,_).\nin file code_inference.dl [1470:1-1496:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1470:1-1496:7];block_points(Block,\\\"data\\\",AccessSize,0,4,\\\"composite data access\\\") :- \\n   composite_data_access(EA,EA_load,Block,AccessSize),\\n   unresolved_block(Block,\\\"data\\\",AccessSize),\\n   code_in_block_candidate_refined(EA,CodeBlock1),\\n   code_in_block_candidate_refined(EA_load,CodeBlock2),\\n   !unresolved_block(CodeBlock1,\\\"code\\\",_),\\n   !impossible_block(CodeBlock1,\\\"code\\\",_,_),\\n   !unresolved_block(CodeBlock2,\\\"code\\\",_),\\n   !impossible_block(CodeBlock2,\\\"code\\\",_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY composite_data_access)))
         (FOR_IN t0 composite_data_access           (IF (EXISTS unresolved_block ((TUPLE t0 2) (STRING "data") (TUPLE t0 3)))
           (INDEXED_IF_EXISTS t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (AND (NOT (EXISTS impossible_block ((TUPLE t1 1) (STRING "code") UNDEF UNDEF))) (NOT (EXISTS unresolved_block ((TUPLE t1 1) (STRING "code") UNDEF))))
            (INDEXED_IF_EXISTS t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t0 1))) (AND (NOT (EXISTS impossible_block ((TUPLE t2 1) (STRING "code") UNDEF UNDEF))) (NOT (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF))))
             (INSERT ((TUPLE t0 2) (STRING "data") (TUPLE t0 3) (UNSIGNED 0) (NUMBER 4) (STRING "composite data access")) block_points)
))          ))
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"data\",AccessSize,0,3,\"composite data access\") :- \n   composite_data_access(EA,EA_load,Block,AccessSize),\n   unresolved_block(Block,\"data\",AccessSize),\n   code_in_block_candidate_refined(EA,CodeBlock1),\n   code_in_block_candidate_refined(EA_load,CodeBlock2),\n   unresolved_block(CodeBlock1,\"code\",_),\n   !unresolved_block(CodeBlock2,\"code\",_),\n   !impossible_block(CodeBlock2,\"code\",_,_).\nin file code_inference.dl [1470:1-1496:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1470:1-1496:7];block_points(Block,\\\"data\\\",AccessSize,0,3,\\\"composite data access\\\") :- \\n   composite_data_access(EA,EA_load,Block,AccessSize),\\n   unresolved_block(Block,\\\"data\\\",AccessSize),\\n   code_in_block_candidate_refined(EA,CodeBlock1),\\n   code_in_block_candidate_refined(EA_load,CodeBlock2),\\n   unresolved_block(CodeBlock1,\\\"code\\\",_),\\n   !unresolved_block(CodeBlock2,\\\"code\\\",_),\\n   !impossible_block(CodeBlock2,\\\"code\\\",_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY composite_data_access)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR_IN t0 composite_data_access           (IF (EXISTS unresolved_block ((TUPLE t0 2) (STRING "data") (TUPLE t0 3)))
           (FOR t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (EXISTS unresolved_block ((TUPLE t1 1) (STRING "code") UNDEF))
             (INDEXED_IF_EXISTS t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t0 1))) (AND (NOT (EXISTS impossible_block ((TUPLE t2 1) (STRING "code") UNDEF UNDEF))) (NOT (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF))))
              (INSERT ((TUPLE t0 2) (STRING "data") (TUPLE t0 3) (UNSIGNED 0) (NUMBER 3) (STRING "composite data access")) block_points)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"data\",AccessSize,0,3,\"composite data access\") :- \n   composite_data_access(EA,EA_load,Block,AccessSize),\n   unresolved_block(Block,\"data\",AccessSize),\n   code_in_block_candidate_refined(EA,CodeBlock1),\n   code_in_block_candidate_refined(EA_load,CodeBlock2),\n   !unresolved_block(CodeBlock1,\"code\",_),\n   !impossible_block(CodeBlock1,\"code\",_,_),\n   unresolved_block(CodeBlock2,\"code\",_).\nin file code_inference.dl [1470:1-1496:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1470:1-1496:7];block_points(Block,\\\"data\\\",AccessSize,0,3,\\\"composite data access\\\") :- \\n   composite_data_access(EA,EA_load,Block,AccessSize),\\n   unresolved_block(Block,\\\"data\\\",AccessSize),\\n   code_in_block_candidate_refined(EA,CodeBlock1),\\n   code_in_block_candidate_refined(EA_load,CodeBlock2),\\n   !unresolved_block(CodeBlock1,\\\"code\\\",_),\\n   !impossible_block(CodeBlock1,\\\"code\\\",_,_),\\n   unresolved_block(CodeBlock2,\\\"code\\\",_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY composite_data_access)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR_IN t0 composite_data_access           (IF (EXISTS unresolved_block ((TUPLE t0 2) (STRING "data") (TUPLE t0 3)))
           (INDEXED_IF_EXISTS t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (AND (NOT (EXISTS impossible_block ((TUPLE t1 1) (STRING "code") UNDEF UNDEF))) (NOT (EXISTS unresolved_block ((TUPLE t1 1) (STRING "code") UNDEF))))
            (INDEXED_IF_EXISTS t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t0 1))) (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF))
             (INSERT ((TUPLE t0 2) (STRING "data") (TUPLE t0 3) (UNSIGNED 0) (NUMBER 3) (STRING "composite data access")) block_points)
))          ))
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"data\",AccessSize,0,2,\"composite data access\") :- \n   composite_data_access(EA,EA_load,Block,AccessSize),\n   unresolved_block(Block,\"data\",AccessSize),\n   code_in_block_candidate_refined(EA,CodeBlock1),\n   code_in_block_candidate_refined(EA_load,CodeBlock2),\n   unresolved_block(CodeBlock1,\"code\",_),\n   unresolved_block(CodeBlock2,\"code\",_).\nin file code_inference.dl [1470:1-1496:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1470:1-1496:7];block_points(Block,\\\"data\\\",AccessSize,0,2,\\\"composite data access\\\") :- \\n   composite_data_access(EA,EA_load,Block,AccessSize),\\n   unresolved_block(Block,\\\"data\\\",AccessSize),\\n   code_in_block_candidate_refined(EA,CodeBlock1),\\n   code_in_block_candidate_refined(EA_load,CodeBlock2),\\n   unresolved_block(CodeBlock1,\\\"code\\\",_),\\n   unresolved_block(CodeBlock2,\\\"code\\\",_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY composite_data_access)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY code_in_block_candidate_refined)))
         (FOR_IN t0 composite_data_access           (IF (EXISTS unresolved_block ((TUPLE t0 2) (STRING "data") (TUPLE t0 3)))
           (FOR t1 code_in_block_candidate_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (EXISTS unresolved_block ((TUPLE t1 1) (STRING "code") UNDEF))
             (FOR t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
              (IF (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF))
               (INSERT ((TUPLE t0 2) (STRING "data") (TUPLE t0 3) (UNSIGNED 0) (NUMBER 2) (STRING "composite data access")) block_points)
              ))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"address in data array\") :- \n   unresolved_block(Block,\"code\",Size),\n   address_in_data(Address,Block),\n   binary_format(\"PE\"),\n   address_in_data( _tmp_22,_),\n   address_in_data( _tmp_23,_),\n    _tmp_22 = (Address+8),\n    _tmp_23 = (Address+(8*2)).\nin file code_inference.dl [1241:1-1259:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1241:1-1259:7];block_points(Block,\\\"code\\\",Size,0,1,\\\"address in data array\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   address_in_data(Address,Block),\\n   binary_format(\\\"PE\\\"),\\n   address_in_data( _tmp_22,_),\\n   address_in_data( _tmp_23,_),\\n    _tmp_22 = (Address+8),\\n    _tmp_23 = (Address+(8*2)).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY address_in_data)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 address_in_data (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (IF (AND (EXISTS address_in_data ((INTRINSIC + (TUPLE t1 0) (INTRINSIC * (UNSIGNED 8) (UNSIGNED 2))) UNDEF)) (EXISTS address_in_data ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 8)) UNDEF)))
            (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "address in data array")) block_points)
           )))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"address in data array\") :- \n   unresolved_block(Block,\"code\",Size),\n   address_in_data(Address,Block),\n   binary_format(\"PE\"),\n   address_in_data( _tmp_24,_),\n   address_in_data( _tmp_25,_),\n    _tmp_24 = (Address-8),\n    _tmp_25 = (Address-(8*2)).\nin file code_inference.dl [1241:1-1259:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1241:1-1259:7];block_points(Block,\\\"code\\\",Size,0,1,\\\"address in data array\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   address_in_data(Address,Block),\\n   binary_format(\\\"PE\\\"),\\n   address_in_data( _tmp_24,_),\\n   address_in_data( _tmp_25,_),\\n    _tmp_24 = (Address-8),\\n    _tmp_25 = (Address-(8*2)).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY address_in_data)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 address_in_data (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (IF (AND (EXISTS address_in_data ((INTRINSIC - (TUPLE t1 0) (INTRINSIC * (UNSIGNED 8) (UNSIGNED 2))) UNDEF)) (EXISTS address_in_data ((INTRINSIC - (TUPLE t1 0) (UNSIGNED 8)) UNDEF)))
            (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "address in data array")) block_points)
           )))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"address in data array\") :- \n   unresolved_block(Block,\"code\",Size),\n   address_in_data(Address,Block),\n   binary_format(\"PE\"),\n   address_in_data( _tmp_26,_),\n   address_in_data( _tmp_27,_),\n    _tmp_26 = (Address+8),\n    _tmp_27 = (Address-8).\nin file code_inference.dl [1241:1-1259:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1241:1-1259:7];block_points(Block,\\\"code\\\",Size,0,1,\\\"address in data array\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   address_in_data(Address,Block),\\n   binary_format(\\\"PE\\\"),\\n   address_in_data( _tmp_26,_),\\n   address_in_data( _tmp_27,_),\\n    _tmp_26 = (Address+8),\\n    _tmp_27 = (Address-8).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY address_in_data)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 address_in_data (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (IF (AND (EXISTS address_in_data ((INTRINSIC - (TUPLE t1 0) (UNSIGNED 8)) UNDEF)) (EXISTS address_in_data ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 8)) UNDEF)))
            (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "address in data array")) block_points)
           )))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"address in data array\") :- \n   unresolved_block(Block,\"code\",Size),\n   address_in_data(Address,Block),\n   (Address%8) = 0,\n   address_in_data( _tmp_28,_),\n   address_in_data( _tmp_29,_),\n    _tmp_28 = (Address+8),\n    _tmp_29 = (Address+(8*2)).\nin file code_inference.dl [1241:1-1259:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1241:1-1259:7];block_points(Block,\\\"code\\\",Size,0,1,\\\"address in data array\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   address_in_data(Address,Block),\\n   (Address%8) = 0,\\n   address_in_data( _tmp_28,_),\\n   address_in_data( _tmp_29,_),\\n    _tmp_28 = (Address+8),\\n    _tmp_29 = (Address+(8*2)).;"
(QUERY
        (IF (AND (NOT (ISEMPTY address_in_data)) (NOT (ISEMPTY unresolved_block)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 address_in_data (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (IF (AND (AND (CONSTRAINT = (INTRINSIC % (TUPLE t1 0) (UNSIGNED 8))  (UNSIGNED 0)) (EXISTS address_in_data ((INTRINSIC + (TUPLE t1 0) (INTRINSIC * (UNSIGNED 8) (UNSIGNED 2))) UNDEF))) (EXISTS address_in_data ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 8)) UNDEF)))
            (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "address in data array")) block_points)
           )))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"address in data array\") :- \n   unresolved_block(Block,\"code\",Size),\n   address_in_data(Address,Block),\n   (Address%8) = 0,\n   address_in_data( _tmp_30,_),\n   address_in_data( _tmp_31,_),\n    _tmp_30 = (Address-8),\n    _tmp_31 = (Address-(8*2)).\nin file code_inference.dl [1241:1-1259:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1241:1-1259:7];block_points(Block,\\\"code\\\",Size,0,1,\\\"address in data array\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   address_in_data(Address,Block),\\n   (Address%8) = 0,\\n   address_in_data( _tmp_30,_),\\n   address_in_data( _tmp_31,_),\\n    _tmp_30 = (Address-8),\\n    _tmp_31 = (Address-(8*2)).;"
(QUERY
        (IF (AND (NOT (ISEMPTY address_in_data)) (NOT (ISEMPTY unresolved_block)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 address_in_data (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (IF (AND (AND (CONSTRAINT = (INTRINSIC % (TUPLE t1 0) (UNSIGNED 8))  (UNSIGNED 0)) (EXISTS address_in_data ((INTRINSIC - (TUPLE t1 0) (INTRINSIC * (UNSIGNED 8) (UNSIGNED 2))) UNDEF))) (EXISTS address_in_data ((INTRINSIC - (TUPLE t1 0) (UNSIGNED 8)) UNDEF)))
            (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "address in data array")) block_points)
           )))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"address in data array\") :- \n   unresolved_block(Block,\"code\",Size),\n   address_in_data(Address,Block),\n   (Address%8) = 0,\n   address_in_data( _tmp_32,_),\n   address_in_data( _tmp_33,_),\n    _tmp_32 = (Address+8),\n    _tmp_33 = (Address-8).\nin file code_inference.dl [1241:1-1259:7]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1241:1-1259:7];block_points(Block,\\\"code\\\",Size,0,1,\\\"address in data array\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   address_in_data(Address,Block),\\n   (Address%8) = 0,\\n   address_in_data( _tmp_32,_),\\n   address_in_data( _tmp_33,_),\\n    _tmp_32 = (Address+8),\\n    _tmp_33 = (Address-8).;"
(QUERY
        (IF (AND (NOT (ISEMPTY address_in_data)) (NOT (ISEMPTY unresolved_block)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 address_in_data (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (IF (AND (AND (CONSTRAINT = (INTRINSIC % (TUPLE t1 0) (UNSIGNED 8))  (UNSIGNED 0)) (EXISTS address_in_data ((INTRINSIC - (TUPLE t1 0) (UNSIGNED 8)) UNDEF))) (EXISTS address_in_data ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 8)) UNDEF)))
            (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "address in data array")) block_points)
           )))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,1,\"aligned address in data\") :- \n   unresolved_block(Block,\"code\",Size),\n   aligned_address_in_data(_,Block).\nin file code_inference.dl [1235:1-1239:38]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1235:1-1239:38];block_points(Block,\\\"code\\\",Size,0,1,\\\"aligned address in data\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   aligned_address_in_data(_,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY aligned_address_in_data)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (IF (EXISTS aligned_address_in_data (UNDEF (TUPLE t0 0)))
           (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 1) (STRING "aligned address in data")) block_points)
          ))        )       )
      )
     )
      (DEBUG 
 "block_points(Block,\"code\",Size,0,3,\"appears\") :- \n   unresolved_block(Block,\"code\",Size),\n   possible_target_from(Block,EA),\n   !direct_jump(EA,Block),\n   !direct_call(EA,Block),\n   code_in_block_candidate_refined(EA,BlockPred),\n   BlockPred != Block,\n   !unresolved_block(BlockPred,\"code\",_),\n   !impossible_block(BlockPred,\"code\",_,_).\nin file code_inference.dl [1337:1-1346:45]" 
      (TIMER_ON block_points "@t-nonrecursive-rule;block_points;code_inference.dl [1337:1-1346:45];block_points(Block,\\\"code\\\",Size,0,3,\\\"appears\\\") :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   possible_target_from(Block,EA),\\n   !direct_jump(EA,Block),\\n   !direct_call(EA,Block),\\n   code_in_block_candidate_refined(EA,BlockPred),\\n   BlockPred != Block,\\n   !unresolved_block(BlockPred,\\\"code\\\",_),\\n   !impossible_block(BlockPred,\\\"code\\\",_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_block_candidate_refined)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY possible_target_from)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 possible_target_from (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (NOT (EXISTS direct_jump ((TUPLE t1 1) (TUPLE t0 0)))) (NOT (EXISTS direct_call ((TUPLE t1 1) (TUPLE t0 0)))))
            (INDEXED_IF_EXISTS t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 1))) (AND (AND (CONSTRAINT != (TUPLE t2 1)  (TUPLE t0 0)) (NOT (EXISTS impossible_block ((TUPLE t2 1) (STRING "code") UNDEF UNDEF)))) (NOT (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF))))
             (INSERT ((TUPLE t0 0) (STRING "code") (TUPLE t0 2) (UNSIGNED 0) (NUMBER 3) (STRING "appears")) block_points)
)           )))        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.simple_data_load)
     (CLEAR composite_data_access)
     (CLEAR data_block_candidate)
     (CLEAR negative_block_points)
     (CLEAR possible_target_from)
     (CLEAR resolved_reaches)
 ) )  )
  (SUBROUTINE block_still_overlap
(STMTS (STMTS (STMTS     (TIMER_ON block_still_overlap "@t-nonrecursive-relation;block_still_overlap;code_inference.dl [108:7-108:26];"
(STMTS      (DEBUG 
 "block_still_overlap(Block1,Type1,Size1,Block2,Type2,Size2) :- \n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2),\n   !discarded_block(Block1,Type1,Size1,_,_),\n   !discarded_block(Block2,Type2,Size2,_,_),\n   Type1 = \"code\",\n   Block1 < Block2.\nin file code_inference.dl [1533:1-1552:7]" 
      (TIMER_ON block_still_overlap "@t-nonrecursive-rule;block_still_overlap;code_inference.dl [1533:1-1552:7];block_still_overlap(Block1,Type1,Size1,Block2,Type2,Size2) :- \\n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2),\\n   !discarded_block(Block1,Type1,Size1,_,_),\\n   !discarded_block(Block2,Type2,Size2,_,_),\\n   Type1 = \\\"code\\\",\\n   Block1 < Block2.;"
(QUERY
        (IF (NOT (ISEMPTY block_overlap))
         (FOR t0 block_overlap (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (IF (AND (AND (CONSTRAINT < (TUPLE t0 0)  (TUPLE t0 3)) (NOT (EXISTS discarded_block ((TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) UNDEF UNDEF)))) (NOT (EXISTS discarded_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF UNDEF))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) block_still_overlap)
          ))        )       )
      )
     )
      (DEBUG 
 "block_still_overlap(Block1,Type1,Size1,Block2,Type2,Size2) :- \n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2),\n   !discarded_block(Block1,Type1,Size1,_,_),\n   !discarded_block(Block2,Type2,Size2,_,_),\n   Type2 = \"code\",\n   Block1 < Block2.\nin file code_inference.dl [1533:1-1552:7]" 
      (TIMER_ON block_still_overlap "@t-nonrecursive-rule;block_still_overlap;code_inference.dl [1533:1-1552:7];block_still_overlap(Block1,Type1,Size1,Block2,Type2,Size2) :- \\n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2),\\n   !discarded_block(Block1,Type1,Size1,_,_),\\n   !discarded_block(Block2,Type2,Size2,_,_),\\n   Type2 = \\\"code\\\",\\n   Block1 < Block2.;"
(QUERY
        (IF (NOT (ISEMPTY block_overlap))
         (FOR t0 block_overlap (INDEX  (= (TUPLE t0 4) (STRING "code")))
          (IF (AND (AND (CONSTRAINT < (TUPLE t0 0)  (TUPLE t0 3)) (NOT (EXISTS discarded_block ((TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) UNDEF UNDEF)))) (NOT (EXISTS discarded_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF UNDEF))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) block_still_overlap)
          ))        )       )
      )
     )
      (DEBUG 
 "block_still_overlap(Block2,Type1,Size1,Block2,Type2,Size2) :- \n   block_overlap(Block2,Type1,Size1,Block2,Type2,Size2),\n   !discarded_block(Block2,Type1,Size1,_,_),\n   !discarded_block(Block2,Type2,Size2,_,_),\n   Type1 = \"code\",\n   Size1 < Size2.\nin file code_inference.dl [1533:1-1552:7]" 
      (TIMER_ON block_still_overlap "@t-nonrecursive-rule;block_still_overlap;code_inference.dl [1533:1-1552:7];block_still_overlap(Block2,Type1,Size1,Block2,Type2,Size2) :- \\n   block_overlap(Block2,Type1,Size1,Block2,Type2,Size2),\\n   !discarded_block(Block2,Type1,Size1,_,_),\\n   !discarded_block(Block2,Type2,Size2,_,_),\\n   Type1 = \\\"code\\\",\\n   Size1 < Size2.;"
(QUERY
        (IF (NOT (ISEMPTY block_overlap))
         (FOR t0 block_overlap (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (IF (AND (AND (AND (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 3)) (CONSTRAINT < (TUPLE t0 2)  (TUPLE t0 5))) (NOT (EXISTS discarded_block ((TUPLE t0 0) (TUPLE t0 4) (TUPLE t0 5) UNDEF UNDEF)))) (NOT (EXISTS discarded_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF UNDEF))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 0) (TUPLE t0 4) (TUPLE t0 5)) block_still_overlap)
          ))        )       )
      )
     )
      (DEBUG 
 "block_still_overlap(Block2,Type1,Size2,Block2,Type2,Size2) :- \n   block_overlap(Block2,Type1,Size2,Block2,Type2,Size2),\n   !discarded_block(Block2,Type1,Size2,_,_),\n   !discarded_block(Block2,Type2,Size2,_,_),\n   Type1 = \"code\",\n   block_type_priority(Type1,Priority1),\n   block_type_priority(Type2,Priority2),\n   Priority1 < Priority2.\nin file code_inference.dl [1533:1-1552:7]" 
      (TIMER_ON block_still_overlap "@t-nonrecursive-rule;block_still_overlap;code_inference.dl [1533:1-1552:7];block_still_overlap(Block2,Type1,Size2,Block2,Type2,Size2) :- \\n   block_overlap(Block2,Type1,Size2,Block2,Type2,Size2),\\n   !discarded_block(Block2,Type1,Size2,_,_),\\n   !discarded_block(Block2,Type2,Size2,_,_),\\n   Type1 = \\\"code\\\",\\n   block_type_priority(Type1,Priority1),\\n   block_type_priority(Type2,Priority2),\\n   Priority1 < Priority2.;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_type_priority)) (NOT (ISEMPTY block_overlap)))
         (FOR t0 block_overlap (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (IF (AND (AND (AND (CONSTRAINT = (TUPLE t0 2)  (TUPLE t0 5)) (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 3))) (NOT (EXISTS discarded_block ((TUPLE t0 0) (TUPLE t0 4) (TUPLE t0 2) UNDEF UNDEF)))) (NOT (EXISTS discarded_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF UNDEF))))
           (FOR t1 block_type_priority (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (INDEXED_IF_EXISTS t2 block_type_priority (INDEX  (= (TUPLE t2 0) (TUPLE t0 4))) (AND (CONSTRAINT != (TUPLE t1 1)  (TUPLE t2 1)) (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t2 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 0) (TUPLE t0 4) (TUPLE t0 2)) block_still_overlap)
))          ))        )       )
      )
     )
      (DEBUG 
 "block_still_overlap(Block2,Type1,Size1,Block2,Type2,Size2) :- \n   block_overlap(Block2,Type1,Size1,Block2,Type2,Size2),\n   !discarded_block(Block2,Type1,Size1,_,_),\n   !discarded_block(Block2,Type2,Size2,_,_),\n   Type2 = \"code\",\n   Size1 < Size2.\nin file code_inference.dl [1533:1-1552:7]" 
      (TIMER_ON block_still_overlap "@t-nonrecursive-rule;block_still_overlap;code_inference.dl [1533:1-1552:7];block_still_overlap(Block2,Type1,Size1,Block2,Type2,Size2) :- \\n   block_overlap(Block2,Type1,Size1,Block2,Type2,Size2),\\n   !discarded_block(Block2,Type1,Size1,_,_),\\n   !discarded_block(Block2,Type2,Size2,_,_),\\n   Type2 = \\\"code\\\",\\n   Size1 < Size2.;"
(QUERY
        (IF (NOT (ISEMPTY block_overlap))
         (FOR t0 block_overlap (INDEX  (= (TUPLE t0 4) (STRING "code")))
          (IF (AND (AND (AND (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 3)) (CONSTRAINT < (TUPLE t0 2)  (TUPLE t0 5))) (NOT (EXISTS discarded_block ((TUPLE t0 0) (TUPLE t0 4) (TUPLE t0 5) UNDEF UNDEF)))) (NOT (EXISTS discarded_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF UNDEF))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 0) (TUPLE t0 4) (TUPLE t0 5)) block_still_overlap)
          ))        )       )
      )
     )
      (DEBUG 
 "block_still_overlap(Block2,Type1,Size2,Block2,Type2,Size2) :- \n   block_overlap(Block2,Type1,Size2,Block2,Type2,Size2),\n   !discarded_block(Block2,Type1,Size2,_,_),\n   !discarded_block(Block2,Type2,Size2,_,_),\n   Type2 = \"code\",\n   block_type_priority(Type1,Priority1),\n   block_type_priority(Type2,Priority2),\n   Priority1 < Priority2.\nin file code_inference.dl [1533:1-1552:7]" 
      (TIMER_ON block_still_overlap "@t-nonrecursive-rule;block_still_overlap;code_inference.dl [1533:1-1552:7];block_still_overlap(Block2,Type1,Size2,Block2,Type2,Size2) :- \\n   block_overlap(Block2,Type1,Size2,Block2,Type2,Size2),\\n   !discarded_block(Block2,Type1,Size2,_,_),\\n   !discarded_block(Block2,Type2,Size2,_,_),\\n   Type2 = \\\"code\\\",\\n   block_type_priority(Type1,Priority1),\\n   block_type_priority(Type2,Priority2),\\n   Priority1 < Priority2.;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_type_priority)) (NOT (ISEMPTY block_overlap)))
         (FOR t0 block_overlap (INDEX  (= (TUPLE t0 4) (STRING "code")))
          (IF (AND (AND (AND (CONSTRAINT = (TUPLE t0 2)  (TUPLE t0 5)) (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 3))) (NOT (EXISTS discarded_block ((TUPLE t0 0) (TUPLE t0 4) (TUPLE t0 2) UNDEF UNDEF)))) (NOT (EXISTS discarded_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF UNDEF))))
           (FOR t1 block_type_priority (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (INDEXED_IF_EXISTS t2 block_type_priority (INDEX  (= (TUPLE t2 0) (TUPLE t0 4))) (AND (CONSTRAINT != (TUPLE t1 1)  (TUPLE t2 1)) (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t2 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 0) (TUPLE t0 4) (TUPLE t0 2)) block_still_overlap)
))          ))        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON block_still_overlap "@t-relation-savetime;block_still_overlap;code_inference.dl [108:7-108:26];savetime;"
     (IO block_still_overlap ((= IO "file") (= attributeNames "Block1\tType1\tSize1\tBlock2\tType2\tSize2") (= auxArity "0") (= name "block_still_overlap") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"Block1\", \"Type1\", \"Size1\", \"Block2\", \"Type2\", \"Size2\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"u:address\", \"s:block_type\", \"u:unsigned\", \"u:address\", \"s:block_type\", \"u:unsigned\"]}}")))
    )
 ) ) (STMTS     (CLEAR block_overlap)
     (CLEAR block_type_priority)
 ) )  )
  (SUBROUTINE block_total_points
(STMTS (STMTS     (TIMER_ON block_total_points "@t-nonrecursive-relation;block_total_points;code_inference.dl [1068:7-1068:25];"
(STMTS      (DEBUG 
 "block_total_points(Block,Type,Size,@generator_0) :- \n   unresolved_block(Block,Type,Size),\n   @generator_0 = sum X : { block_points(Block,Type,Size,+underscore_722,X,+underscore_723) }.\nin file code_inference.dl [1070:1-1072:58]" 
      (TIMER_ON block_total_points "@t-nonrecursive-rule;block_total_points;code_inference.dl [1070:1-1072:58];block_total_points(Block,Type,Size,@generator_0) :- \\n   unresolved_block(Block,Type,Size),\\n   @generator_0 = sum X : { block_points(Block,Type,Size,+underscore_722,X,+underscore_723) }.;"
(QUERY
        (IF (NOT (ISEMPTY unresolved_block))
         (FOR_IN t0 unresolved_block           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION SUM  (TUPLE t1 4) ))  t1 block_points (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2))) TRUE 
           (IF (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0)) block_total_points)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR block_points)
 ) )  )
  (SUBROUTINE block_type_priority
(STMTS     (TIMER_ON block_type_priority "@t-nonrecursive-relation;block_type_priority;code_inference.dl [920:7-920:26];"
(STMTS      (DEBUG 
 "block_type_priority(\"code\",2).\nin file code_inference.dl [922:1-922:31]" 
      (TIMER_ON block_type_priority "@t-nonrecursive-rule;block_type_priority;code_inference.dl [922:1-922:31];block_type_priority(\\\"code\\\",2).;"
(QUERY
        (INSERT ((STRING "code") (UNSIGNED 2)) block_type_priority)
       )
      )
     )
      (DEBUG 
 "block_type_priority(\"data\",1).\nin file code_inference.dl [923:1-923:31]" 
      (TIMER_ON block_type_priority "@t-nonrecursive-rule;block_type_priority;code_inference.dl [923:1-923:31];block_type_priority(\\\"data\\\",1).;"
(QUERY
        (INSERT ((STRING "data") (UNSIGNED 1)) block_type_priority)
       )
      )
     )
      (DEBUG 
 "block_type_priority(\"padding\",0).\nin file code_inference.dl [924:1-924:34]" 
      (TIMER_ON block_type_priority "@t-nonrecursive-rule;block_type_priority;code_inference.dl [924:1-924:34];block_type_priority(\\\"padding\\\",0).;"
(QUERY
        (INSERT ((STRING "padding") (UNSIGNED 0)) block_type_priority)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE boundary_sym_expr
(STMTS (STMTS     (TIMER_ON boundary_sym_expr "@t-nonrecursive-relation;boundary_sym_expr;pointer_reattribution.dl [84:7-84:24];"
(STMTS      (DEBUG 
 "boundary_sym_expr((EA+InstrOffset),Dest) :- \n   symbolic_operand(EA,Index,Dest,\"data\"),\n   pc_relative_operand(EA,Index,_),\n   instruction_displacement_offset(EA,Index,InstrOffset,_),\n   value_reg(_,_,EA,\"Unknown\",Mult,_,_),\n   Mult < 0,\n   loaded_section(Dest,_,_),\n   loaded_section(_,Dest,_).\nin file pointer_reattribution.dl [582:1-594:30]" 
      (TIMER_ON boundary_sym_expr "@t-nonrecursive-rule;boundary_sym_expr;pointer_reattribution.dl [582:1-594:30];boundary_sym_expr((EA+InstrOffset),Dest) :- \\n   symbolic_operand(EA,Index,Dest,\\\"data\\\"),\\n   pc_relative_operand(EA,Index,_),\\n   instruction_displacement_offset(EA,Index,InstrOffset,_),\\n   value_reg(_,_,EA,\\\"Unknown\\\",Mult,_,_),\\n   Mult < 0,\\n   loaded_section(Dest,_,_),\\n   loaded_section(_,Dest,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY pc_relative_operand)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY value_reg)))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (AND (EXISTS loaded_section ((TUPLE t0 2) UNDEF UNDEF)) (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))) (EXISTS loaded_section (UNDEF (TUPLE t0 2) UNDEF)))
           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (INDEXED_IF_EXISTS t2 value_reg (INDEX  (= (TUPLE t2 2) (TUPLE t0 0)) (= (TUPLE t2 3) (STRING "Unknown")) (<= (TUPLE t2 4) (NUMBER 0))) (CONSTRAINT != (TUPLE t2 4)  (NUMBER 0))
             (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t0 2)) boundary_sym_expr)
))          ))        )       )
      )
     )
      (DEBUG 
 "boundary_sym_expr((EA+InstrOffset),Dest) :- \n   symbolic_operand(EA,Index,Dest,\"data\"),\n   loaded_section(Dest,_,_),\n   loaded_section(Beg,Dest,_),\n   reg_def_use.def_used(EA,Reg1,EA_cmp,_),\n   cmp_reg_to_reg(EA_cmp,Reg1,Reg2),\n   reg_def_use.def_used(EA_beg,Reg2,EA_cmp,_),\n   symbolic_operand(EA_beg,_,Dest2,\"data\"),\n   Dest2 >= Beg,\n   Dest2 < Dest,\n   instruction_displacement_offset(EA,Index,InstrOffset,_).\nin file pointer_reattribution.dl [602:1-618:7]" 
      (TIMER_ON boundary_sym_expr "@t-nonrecursive-rule;boundary_sym_expr;pointer_reattribution.dl [602:1-618:7];boundary_sym_expr((EA+InstrOffset),Dest) :- \\n   symbolic_operand(EA,Index,Dest,\\\"data\\\"),\\n   loaded_section(Dest,_,_),\\n   loaded_section(Beg,Dest,_),\\n   reg_def_use.def_used(EA,Reg1,EA_cmp,_),\\n   cmp_reg_to_reg(EA_cmp,Reg1,Reg2),\\n   reg_def_use.def_used(EA_beg,Reg2,EA_cmp,_),\\n   symbolic_operand(EA_beg,_,Dest2,\\\"data\\\"),\\n   Dest2 >= Beg,\\n   Dest2 < Dest,\\n   instruction_displacement_offset(EA,Index,InstrOffset,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY cmp_reg_to_reg))) (NOT (ISEMPTY symbolic_operand)))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (EXISTS loaded_section ((TUPLE t0 2) UNDEF UNDEF))
           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 1) (TUPLE t0 2)))
            (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (FOR t3 cmp_reg_to_reg (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 1) (TUPLE t2 1)))
              (FOR t4 reg_def_use.def_used (INDEX  (= (TUPLE t4 1) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t2 2)))
               (INDEXED_IF_EXISTS t5 symbolic_operand (INDEX  (= (TUPLE t5 0) (TUPLE t4 0)) (= (TUPLE t5 3) (STRING "data"))) (AND (AND (CONSTRAINT != (TUPLE t5 2)  (TUPLE t0 2)) (CONSTRAINT <= (TUPLE t5 2)  (TUPLE t0 2))) (CONSTRAINT >= (TUPLE t5 2)  (TUPLE t1 0)))
                (FOR t6 instruction_displacement_offset (INDEX  (= (TUPLE t6 0) (TUPLE t0 0)) (= (TUPLE t6 1) (TUPLE t0 1)))
                 (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t6 2)) (TUPLE t0 2)) boundary_sym_expr)
))))))          ))        )       )
      )
     )
      (DEBUG 
 "boundary_sym_expr((EA+InstrOffset),Dest) :- \n   symbolic_operand(EA,Index,Dest,\"data\"),\n   loaded_section(Dest,_,_),\n   loaded_section(Beg,Dest,_),\n   reg_def_use.def_used(EA,Reg1,EA_cmp,_),\n   cmp_reg_to_reg(EA_cmp,Reg1,Reg2),\n   reg_def_use.def_used(EA_beg,Reg2,EA_cmp,_),\n   symbolic_operand(EA_beg,_,Dest2,\"data\"),\n   Dest2 >= Beg,\n   Dest2 < Dest,\n   instruction_immediate_offset(EA,Index,InstrOffset,_).\nin file pointer_reattribution.dl [602:1-618:7]" 
      (TIMER_ON boundary_sym_expr "@t-nonrecursive-rule;boundary_sym_expr;pointer_reattribution.dl [602:1-618:7];boundary_sym_expr((EA+InstrOffset),Dest) :- \\n   symbolic_operand(EA,Index,Dest,\\\"data\\\"),\\n   loaded_section(Dest,_,_),\\n   loaded_section(Beg,Dest,_),\\n   reg_def_use.def_used(EA,Reg1,EA_cmp,_),\\n   cmp_reg_to_reg(EA_cmp,Reg1,Reg2),\\n   reg_def_use.def_used(EA_beg,Reg2,EA_cmp,_),\\n   symbolic_operand(EA_beg,_,Dest2,\\\"data\\\"),\\n   Dest2 >= Beg,\\n   Dest2 < Dest,\\n   instruction_immediate_offset(EA,Index,InstrOffset,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY cmp_reg_to_reg))) (NOT (ISEMPTY symbolic_operand)))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (EXISTS loaded_section ((TUPLE t0 2) UNDEF UNDEF))
           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 1) (TUPLE t0 2)))
            (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (FOR t3 cmp_reg_to_reg (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 1) (TUPLE t2 1)))
              (FOR t4 reg_def_use.def_used (INDEX  (= (TUPLE t4 1) (TUPLE t3 2)) (= (TUPLE t4 2) (TUPLE t2 2)))
               (INDEXED_IF_EXISTS t5 symbolic_operand (INDEX  (= (TUPLE t5 0) (TUPLE t4 0)) (= (TUPLE t5 3) (STRING "data"))) (AND (AND (CONSTRAINT != (TUPLE t5 2)  (TUPLE t0 2)) (CONSTRAINT <= (TUPLE t5 2)  (TUPLE t0 2))) (CONSTRAINT >= (TUPLE t5 2)  (TUPLE t1 0)))
                (FOR t6 instruction_immediate_offset (INDEX  (= (TUPLE t6 0) (TUPLE t0 0)) (= (TUPLE t6 1) (TUPLE t0 1)))
                 (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t6 2)) (TUPLE t0 2)) boundary_sym_expr)
))))))          ))        )       )
      )
     )
      (DEBUG 
 "boundary_sym_expr((EA+InstrOffset),Dest) :- \n   symbolic_operand(EA,Index,Dest,\"data\"),\n   !loaded_section(Dest,_,_),\n   loaded_section(_,Dest,_),\n   instruction_immediate_offset(EA,Index,InstrOffset,_).\nin file pointer_reattribution.dl [647:1-655:7]" 
      (TIMER_ON boundary_sym_expr "@t-nonrecursive-rule;boundary_sym_expr;pointer_reattribution.dl [647:1-655:7];boundary_sym_expr((EA+InstrOffset),Dest) :- \\n   symbolic_operand(EA,Index,Dest,\\\"data\\\"),\\n   !loaded_section(Dest,_,_),\\n   loaded_section(_,Dest,_),\\n   instruction_immediate_offset(EA,Index,InstrOffset,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_immediate_offset)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY loaded_section)))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (EXISTS loaded_section (UNDEF (TUPLE t0 2) UNDEF)) (NOT (EXISTS loaded_section ((TUPLE t0 2) UNDEF UNDEF))))
           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t0 2)) boundary_sym_expr)
)          ))        )       )
      )
     )
      (DEBUG 
 "boundary_sym_expr((EA+InstrOffset),Dest) :- \n   symbolic_operand(EA,Index,Dest,\"data\"),\n   !loaded_section(Dest,_,_),\n   loaded_section(_,Dest,_),\n   instruction_displacement_offset(EA,Index,InstrOffset,_).\nin file pointer_reattribution.dl [647:1-655:7]" 
      (TIMER_ON boundary_sym_expr "@t-nonrecursive-rule;boundary_sym_expr;pointer_reattribution.dl [647:1-655:7];boundary_sym_expr((EA+InstrOffset),Dest) :- \\n   symbolic_operand(EA,Index,Dest,\\\"data\\\"),\\n   !loaded_section(Dest,_,_),\\n   loaded_section(_,Dest,_),\\n   instruction_displacement_offset(EA,Index,InstrOffset,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_displacement_offset)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY loaded_section)))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (EXISTS loaded_section (UNDEF (TUPLE t0 2) UNDEF)) (NOT (EXISTS loaded_section ((TUPLE t0 2) UNDEF UNDEF))))
           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t0 2)) boundary_sym_expr)
)          ))        )       )
      )
     )
      (DEBUG 
 "boundary_sym_expr(EA_end,EndRegion) :- \n   lsda_callsite(_,_,_,EA_end,EndRegion,EA_landingPad,_,_),\n   (EA_landingPad-EA_end) > 0,\n   block_boundaries(_,_,EndRegion).\nin file exceptions.dl [212:1-218:37]" 
      (TIMER_ON boundary_sym_expr "@t-nonrecursive-rule;boundary_sym_expr;exceptions.dl [212:1-218:37];boundary_sym_expr(EA_end,EndRegion) :- \\n   lsda_callsite(_,_,_,EA_end,EndRegion,EA_landingPad,_,_),\\n   (EA_landingPad-EA_end) > 0,\\n   block_boundaries(_,_,EndRegion).;"
(QUERY
        (IF (AND (NOT (ISEMPTY lsda_callsite)) (NOT (ISEMPTY block_boundaries)))
         (FOR_IN t0 lsda_callsite           (IF (AND (CONSTRAINT > (INTRINSIC - (TUPLE t0 5) (TUPLE t0 3))  (UNSIGNED 0)) (EXISTS block_boundaries (UNDEF UNDEF (TUPLE t0 4))))
           (INSERT ((TUPLE t0 3) (TUPLE t0 4)) boundary_sym_expr)
          ))
        )       )
      )
     )
      (DEBUG 
 "boundary_sym_expr((EA+InstrOffset),Dest) :- \n   symbolic_operand(EA,Index,Dest,\"data\"),\n   arch.move_reg_imm(EA,_, _tmp_35,Index),\n   instruction_immediate_offset(EA,Index,InstrOffset,_),\n   value_reg(_,_,EA,\"Unknown\",Mult,_,_),\n   Mult < 0,\n   loaded_section(Dest,_,_),\n   loaded_section(_,Dest,_),\n    _tmp_35 = as(Dest, number).\nin file pointer_reattribution.dl [582:1-594:30]" 
      (TIMER_ON boundary_sym_expr "@t-nonrecursive-rule;boundary_sym_expr;pointer_reattribution.dl [582:1-594:30];boundary_sym_expr((EA+InstrOffset),Dest) :- \\n   symbolic_operand(EA,Index,Dest,\\\"data\\\"),\\n   arch.move_reg_imm(EA,_, _tmp_35,Index),\\n   instruction_immediate_offset(EA,Index,InstrOffset,_),\\n   value_reg(_,_,EA,\\\"Unknown\\\",Mult,_,_),\\n   Mult < 0,\\n   loaded_section(Dest,_,_),\\n   loaded_section(_,Dest,_),\\n    _tmp_35 = as(Dest, number).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY arch.move_reg_imm)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY value_reg)))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (AND (EXISTS loaded_section ((TUPLE t0 2) UNDEF UNDEF)) (EXISTS arch.move_reg_imm ((TUPLE t0 0) UNDEF (TUPLE t0 2) (TUPLE t0 1)))) (EXISTS loaded_section (UNDEF (TUPLE t0 2) UNDEF)))
           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (INDEXED_IF_EXISTS t2 value_reg (INDEX  (= (TUPLE t2 2) (TUPLE t0 0)) (= (TUPLE t2 3) (STRING "Unknown")) (<= (TUPLE t2 4) (NUMBER 0))) (CONSTRAINT != (TUPLE t2 4)  (NUMBER 0))
             (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t0 2)) boundary_sym_expr)
))          ))        )       )
      )
     )
      (DEBUG 
 "boundary_sym_expr((EA+InstrOffset),EndSection) :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Index,EndSection,\"data\"),\n   cmp_immediate_to_reg(EA,Reg,Index,_),\n   instruction_immediate_offset(EA,Index,InstrOffset,_),\n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   dest_enlarged_data_section(EA_def,Reg,_,_,_,_,EndSection).\nin file pointer_reattribution.dl [621:1-628:32]" 
      (TIMER_ON boundary_sym_expr "@t-nonrecursive-rule;boundary_sym_expr;pointer_reattribution.dl [621:1-628:32];boundary_sym_expr((EA+InstrOffset),EndSection) :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Index,EndSection,\\\"data\\\"),\\n   cmp_immediate_to_reg(EA,Reg,Index,_),\\n   instruction_immediate_offset(EA,Index,InstrOffset,_),\\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   dest_enlarged_data_section(EA_def,Reg,_,_,_,_,EndSection).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY dest_enlarged_data_section)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY cmp_immediate_to_reg))) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY reg_def_use.def_used))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (FOR t1 cmp_immediate_to_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 1)))
           (FOR t2 instruction_immediate_offset (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (INDEXED_IF_EXISTS t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t1 1)) (= (TUPLE t3 2) (TUPLE t0 0))) (EXISTS dest_enlarged_data_section ((TUPLE t3 0) (TUPLE t1 1) UNDEF UNDEF UNDEF UNDEF (TUPLE t0 2)))
             (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t2 2)) (TUPLE t0 2)) boundary_sym_expr)
))))        )       )
      )
     )
      (DEBUG 
 "boundary_sym_expr(EA,ArrayEnd) :- \n   binary_type(\"EXEC\"),\n   aligned_address_in_data(EA,ArrayEnd),\n   loaded_section(_,ArrayEnd,_),\n   loaded_section(ArrayEnd,_,Name),\n   special_data_section(Name),\n   address_array( _tmp_36,_,ArrayStart),\n   !address_array(ArrayEnd,_,ArrayStart),\n    _tmp_36 = (ArrayEnd-8).\nin file pointer_reattribution.dl [632:1-640:43]" 
      (TIMER_ON boundary_sym_expr "@t-nonrecursive-rule;boundary_sym_expr;pointer_reattribution.dl [632:1-640:43];boundary_sym_expr(EA,ArrayEnd) :- \\n   binary_type(\\\"EXEC\\\"),\\n   aligned_address_in_data(EA,ArrayEnd),\\n   loaded_section(_,ArrayEnd,_),\\n   loaded_section(ArrayEnd,_,Name),\\n   special_data_section(Name),\\n   address_array( _tmp_36,_,ArrayStart),\\n   !address_array(ArrayEnd,_,ArrayStart),\\n    _tmp_36 = (ArrayEnd-8).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY address_array)) (NOT (ISEMPTY aligned_address_in_data))) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY special_data_section))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 aligned_address_in_data           (IF (EXISTS loaded_section (UNDEF (TUPLE t0 1) UNDEF))
           (INDEXED_IF_EXISTS t1 loaded_section (INDEX  (= (TUPLE t1 0) (TUPLE t0 1))) (EXISTS special_data_section ((TUPLE t1 2)))
            (INDEXED_IF_EXISTS t2 address_array (INDEX  (= (TUPLE t2 0) (INTRINSIC - (TUPLE t0 1) (UNSIGNED 8)))) (NOT (EXISTS address_array ((TUPLE t0 1) UNDEF (TUPLE t2 2))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1)) boundary_sym_expr)
))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR aligned_address_in_data)
 ) )  )
  (SUBROUTINE bss_data
(STMTS (STMTS (STMTS     (TIMER_ON bss_data "@t-nonrecursive-relation;bss_data;symbolization.dl [174:7-174:15];"
(STMTS      (DEBUG 
 "bss_data(Base) :- \n   bss_section(SectionName),\n   loaded_section(Base,_,SectionName).\nin file symbolization.dl [905:1-908:42]" 
      (TIMER_ON bss_data "@t-nonrecursive-rule;bss_data;symbolization.dl [905:1-908:42];bss_data(Base) :- \\n   bss_section(SectionName),\\n   loaded_section(Base,_,SectionName).;"
(QUERY
        (IF (AND (NOT (ISEMPTY bss_section)) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 bss_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 0)) bss_data)
))
        )       )
      )
     )
      (DEBUG 
 "bss_data(End) :- \n   bss_section(SectionName),\n   loaded_section(_,End,SectionName).\nin file symbolization.dl [905:1-908:42]" 
      (TIMER_ON bss_data "@t-nonrecursive-rule;bss_data;symbolization.dl [905:1-908:42];bss_data(End) :- \\n   bss_section(SectionName),\\n   loaded_section(_,End,SectionName).;"
(QUERY
        (IF (AND (NOT (ISEMPTY bss_section)) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 bss_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 1)) bss_data)
))
        )       )
      )
     )
      (DEBUG 
 "bss_data(EA) :- \n   labeled_ea(EA),\n   bss_section(SectionName),\n   loaded_section(Base,End,SectionName),\n   EA >= Base,\n   EA < End.\nin file symbolization.dl [910:1-915:14]" 
      (TIMER_ON bss_data "@t-nonrecursive-rule;bss_data;symbolization.dl [910:1-915:14];bss_data(EA) :- \\n   labeled_ea(EA),\\n   bss_section(SectionName),\\n   loaded_section(Base,End,SectionName),\\n   EA >= Base,\\n   EA < End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY labeled_ea))) (NOT (ISEMPTY bss_section)))
         (FOR_IN t0 labeled_ea           (FOR_IN t1 bss_section            (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0))) (AND (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 1)) (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t2 1))) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t2 0)))
            (INSERT ((TUPLE t0 0)) bss_data)
))
)
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON bss_data "@t-relation-savetime;bss_data;symbolization.dl [174:7-174:15];savetime;"
     (IO bss_data ((= IO "file") (= attributeNames "ea") (= auxArity "0") (= name "bss_data") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"ea\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) ) (STMTS     (CLEAR bss_section)
 ) )  )
  (SUBROUTINE bss_section
(STMTS (STMTS (STMTS     (TIMER_ON bss_section "@t-nonrecursive-relation;bss_section;/usr/local/src/ddisasm/src/datalog/main.dl [822:7-822:18];"
(STMTS      (DEBUG 
 "bss_section(Name) :- \n   binary_format(\"ELF\"),\n   section_property(Name,\"Loaded\"),\n   !section_property(Name,\"Initialized\").\nin file elf_binaries.dl [110:1-113:43]" 
      (TIMER_ON bss_section "@t-nonrecursive-rule;bss_section;binary/elf/elf_binaries.dl [110:1-113:43];bss_section(Name) :- \\n   binary_format(\\\"ELF\\\"),\\n   section_property(Name,\\\"Loaded\\\"),\\n   !section_property(Name,\\\"Initialized\\\").;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY section_property))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Initialized"))))
           (INSERT ((TUPLE t0 0)) bss_section)
          ))        )       )
      )
     )
      (DEBUG 
 "bss_section(Section) :- \n   binary_format(\"PE\"),\n   section_property(Section,\"Loaded\"),\n   !section_property(Section,\"Initialized\"),\n   !section_property(Section,\"Executable\").\nin file pe_binaries.dl [92:1-97:45]" 
      (TIMER_ON bss_section "@t-nonrecursive-rule;bss_section;binary/pe/pe_binaries.dl [92:1-97:45];bss_section(Section) :- \\n   binary_format(\\\"PE\\\"),\\n   section_property(Section,\\\"Loaded\\\"),\\n   !section_property(Section,\\\"Initialized\\\"),\\n   !section_property(Section,\\\"Executable\\\").;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY section_property))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (AND (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Initialized")))) (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Executable")))))
           (INSERT ((TUPLE t0 0)) bss_section)
          ))        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON bss_section "@t-relation-savetime;bss_section;/usr/local/src/ddisasm/src/datalog/main.dl [822:7-822:18];savetime;"
     (IO bss_section ((= IO "file") (= attributeNames "name") (= auxArity "0") (= name "bss_section") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"name\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:symbol\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE bss_section_limits
(STMTS (STMTS     (TIMER_ON bss_section_limits "@t-nonrecursive-relation;bss_section_limits;/usr/local/src/ddisasm/src/datalog/main.dl [843:7-843:25];"
(STMTS      (DEBUG 
 "bss_section_limits(0,0) :- \n   !bss_section(_).\nin file main.dl [845:1-846:21]" 
      (TIMER_ON bss_section_limits "@t-nonrecursive-rule;bss_section_limits;/usr/local/src/ddisasm/src/datalog/main.dl [845:1-846:21];bss_section_limits(0,0) :- \\n   !bss_section(_).;"
(QUERY
        (IF (NOT (EXISTS bss_section (UNDEF)))
         (INSERT ((UNSIGNED 0) (UNSIGNED 0)) bss_section_limits)
        )       )
      )
     )
      (DEBUG 
 "bss_section_limits(z,z0) :- \n   __agg_single7(z),\n   __agg_single8(z0).\nin file main.dl [848:1-850:63]" 
      (TIMER_ON bss_section_limits "@t-nonrecursive-rule;bss_section_limits;/usr/local/src/ddisasm/src/datalog/main.dl [848:1-850:63];bss_section_limits(z,z0) :- \\n   __agg_single7(z),\\n   __agg_single8(z0).;"
(QUERY
        (IF (AND (NOT (ISEMPTY __agg_single7)) (NOT (ISEMPTY __agg_single8)))
         (FOR_IN t0 __agg_single7           (FOR_IN t1 __agg_single8            (INSERT ((TUPLE t0 0) (TUPLE t1 0)) bss_section_limits)
)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR __agg_single7)
     (CLEAR __agg_single8)
 ) )  )
  (SUBROUTINE byte_interval
(STMTS (STMTS (STMTS     (TIMER_ON byte_interval "@t-relation-loadtime;byte_interval;/usr/local/src/ddisasm/src/datalog/main.dl [166:7-166:20];loadtime;"
     (IO byte_interval ((= IO "file") (= attributeNames "BegAddr\tEndAddr") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "byte_interval") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"BegAddr\", \"EndAddr\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE byte_interval "@n-nonrecursive-relation;byte_interval;/usr/local/src/ddisasm/src/datalog/main.dl [166:7-166:20];")
 )   )  )  )
  (SUBROUTINE call_tls_get_addr
(STMTS     (TIMER_ON call_tls_get_addr "@t-nonrecursive-relation;call_tls_get_addr;tls.dl [229:7-229:24];"
(STMTS      (DEBUG 
 "call_tls_get_addr(Call,\"RDI\") :- \n   binary_format(\"ELF\"),\n   direct_call(Call,Dest),\n   plt_block(Dest,Name),\n   substr(Name,0,strlen(\"__tls_get_addr\")) = \"__tls_get_addr\".\nin file tls.dl [231:1-247:44]" 
      (TIMER_ON call_tls_get_addr "@t-nonrecursive-rule;call_tls_get_addr;tls.dl [231:1-247:44];call_tls_get_addr(Call,\\\"RDI\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   direct_call(Call,Dest),\\n   plt_block(Dest,Name),\\n   substr(Name,0,strlen(\\\"__tls_get_addr\\\")) = \\\"__tls_get_addr\\\".;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY direct_call)) (NOT (ISEMPTY plt_block))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 direct_call           (INDEXED_IF_EXISTS t1 plt_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 1))) (CONSTRAINT = (INTRINSIC substr (TUPLE t1 1) (NUMBER 0) (INTRINSIC strlen (STRING "__tls_get_addr")))  (STRING "__tls_get_addr"))
           (INSERT ((TUPLE t0 0) (STRING "RDI")) call_tls_get_addr)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE candidate_block_is_not_padding
(STMTS     (TIMER_ON candidate_block_is_not_padding "@t-nonrecursive-relation;candidate_block_is_not_padding;code_inference.dl [1150:7-1150:37];"
(STMTS      (DEBUG 
 "candidate_block_is_not_padding(Block) :- \n   code_in_block_candidate_refined(EA,Block),\n   !is_padding(EA).\nin file code_inference.dl [1152:1-1154:21]" 
      (TIMER_ON candidate_block_is_not_padding "@t-nonrecursive-rule;candidate_block_is_not_padding;code_inference.dl [1152:1-1154:21];candidate_block_is_not_padding(Block) :- \\n   code_in_block_candidate_refined(EA,Block),\\n   !is_padding(EA).;"
(QUERY
        (IF (NOT (ISEMPTY code_in_block_candidate_refined))
         (FOR_IN t0 code_in_block_candidate_refined           (IF (NOT (EXISTS is_padding ((TUPLE t0 0))))
           (INSERT ((TUPLE t0 1)) candidate_block_is_not_padding)
          ))
        )       )
      )
     )
      (DEBUG 
 "candidate_block_is_not_padding(Block) :- \n   code_in_block_candidate_refined(Block,Block),\n   direct_call(From,Block),\n   code_in_block_candidate_refined(From,FromBlock),\n   !unresolved_block(FromBlock,\"code\",_),\n   !impossible_block(FromBlock,\"code\",_,_).\nin file code_inference.dl [1158:1-1163:45]" 
      (TIMER_ON candidate_block_is_not_padding "@t-nonrecursive-rule;candidate_block_is_not_padding;code_inference.dl [1158:1-1163:45];candidate_block_is_not_padding(Block) :- \\n   code_in_block_candidate_refined(Block,Block),\\n   direct_call(From,Block),\\n   code_in_block_candidate_refined(From,FromBlock),\\n   !unresolved_block(FromBlock,\\\"code\\\",_),\\n   !impossible_block(FromBlock,\\\"code\\\",_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY code_in_block_candidate_refined)) (NOT (ISEMPTY direct_call)))
         (FOR_IN t0 code_in_block_candidate_refined           (IF (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 1))
           (FOR t1 direct_call (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (INDEXED_IF_EXISTS t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (AND (NOT (EXISTS impossible_block ((TUPLE t2 1) (STRING "code") UNDEF UNDEF))) (NOT (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF))))
             (INSERT ((TUPLE t0 0)) candidate_block_is_not_padding)
))          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE candidate_block_is_padding
(STMTS (STMTS     (TIMER_ON candidate_block_is_padding "@t-nonrecursive-relation;candidate_block_is_padding;code_inference.dl [1165:7-1165:33];"
(STMTS      (DEBUG 
 "candidate_block_is_padding(Block) :- \n   code_in_block_candidate_refined(_,Block),\n   !candidate_block_is_not_padding(Block).\nin file code_inference.dl [1167:1-1169:44]" 
      (TIMER_ON candidate_block_is_padding "@t-nonrecursive-rule;candidate_block_is_padding;code_inference.dl [1167:1-1169:44];candidate_block_is_padding(Block) :- \\n   code_in_block_candidate_refined(_,Block),\\n   !candidate_block_is_not_padding(Block).;"
(QUERY
        (IF (NOT (ISEMPTY code_in_block_candidate_refined))
         (FOR_IN t0 code_in_block_candidate_refined           (IF (NOT (EXISTS candidate_block_is_not_padding ((TUPLE t0 1))))
           (INSERT ((TUPLE t0 1)) candidate_block_is_padding)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR candidate_block_is_not_padding)
 ) )  )
  (SUBROUTINE cfg_edge
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON cfg_edge "@t-nonrecursive-relation;cfg_edge;cfg.dl [30:7-30:15];"
(STMTS      (DEBUG 
 "cfg_edge(Src,Dest,\"false\",\"false\",\"fallthrough\") :- \n   refined_block_last_instruction(Src,EA),\n   may_fallthrough(EA,Dest),\n   !no_return_call_propagated(EA),\n   !nop_block(Src),\n   code_in_refined_block(Dest,Dest),\n   block_information(Src,_,_,End),\n   !loaded_section(_,End,_),\n   !plt_block(Src,_),\n   !arch.conditional(EA,_).\nin file cfg.dl [237:1-259:7]" 
      (TIMER_ON cfg_edge "@t-nonrecursive-rule;cfg_edge;cfg.dl [237:1-259:7];cfg_edge(Src,Dest,\\\"false\\\",\\\"false\\\",\\\"fallthrough\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   may_fallthrough(EA,Dest),\\n   !no_return_call_propagated(EA),\\n   !nop_block(Src),\\n   code_in_refined_block(Dest,Dest),\\n   block_information(Src,_,_,End),\\n   !loaded_section(_,End,_),\\n   !plt_block(Src,_),\\n   !arch.conditional(EA,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY block_information))) (NOT (ISEMPTY code_in_refined_block))) (NOT (ISEMPTY may_fallthrough)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (AND (AND (NOT (EXISTS arch.conditional ((TUPLE t0 1) UNDEF))) (NOT (EXISTS no_return_call_propagated ((TUPLE t0 1))))) (NOT (EXISTS nop_block ((TUPLE t0 0))))) (NOT (EXISTS plt_block ((TUPLE t0 0) UNDEF))))
           (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (EXISTS code_in_refined_block ((TUPLE t1 1) (TUPLE t1 1)))
             (INDEXED_IF_EXISTS t2 block_information (INDEX  (= (TUPLE t2 0) (TUPLE t0 0))) (NOT (EXISTS loaded_section (UNDEF (TUPLE t2 3) UNDEF)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "false") (STRING "false") (STRING "fallthrough")) cfg_edge)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge(Src,Dest,\"false\",\"false\",\"fallthrough\") :- \n   refined_block_last_instruction(Src,EA),\n   may_fallthrough(EA,Dest),\n   !no_return_call_propagated(EA),\n   !nop_block(Src),\n   code_in_refined_block(Dest,Dest),\n   block_information(Src,_,_,End),\n   !loaded_section(_,End,_),\n   !plt_block(Src,_),\n   arch.conditional(EA,_),\n   !arch.jump(EA).\nin file cfg.dl [237:1-259:7]" 
      (TIMER_ON cfg_edge "@t-nonrecursive-rule;cfg_edge;cfg.dl [237:1-259:7];cfg_edge(Src,Dest,\\\"false\\\",\\\"false\\\",\\\"fallthrough\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   may_fallthrough(EA,Dest),\\n   !no_return_call_propagated(EA),\\n   !nop_block(Src),\\n   code_in_refined_block(Dest,Dest),\\n   block_information(Src,_,_,End),\\n   !loaded_section(_,End,_),\\n   !plt_block(Src,_),\\n   arch.conditional(EA,_),\\n   !arch.jump(EA).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY arch.conditional)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY code_in_refined_block))) (NOT (ISEMPTY block_information))) (NOT (ISEMPTY may_fallthrough)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (AND (AND (AND (EXISTS arch.conditional ((TUPLE t0 1) UNDEF)) (NOT (EXISTS arch.jump ((TUPLE t0 1))))) (NOT (EXISTS nop_block ((TUPLE t0 0))))) (NOT (EXISTS no_return_call_propagated ((TUPLE t0 1))))) (NOT (EXISTS plt_block ((TUPLE t0 0) UNDEF))))
           (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (EXISTS code_in_refined_block ((TUPLE t1 1) (TUPLE t1 1)))
             (INDEXED_IF_EXISTS t2 block_information (INDEX  (= (TUPLE t2 0) (TUPLE t0 0))) (NOT (EXISTS loaded_section (UNDEF (TUPLE t2 3) UNDEF)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "false") (STRING "false") (STRING "fallthrough")) cfg_edge)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge(Src,Dest,\"true\",\"false\",\"fallthrough\") :- \n   refined_block_last_instruction(Src,EA),\n   may_fallthrough(EA,Dest),\n   !no_return_call_propagated(EA),\n   !nop_block(Src),\n   code_in_refined_block(Dest,Dest),\n   block_information(Src,_,_,End),\n   !loaded_section(_,End,_),\n   !plt_block(Src,_),\n   arch.jump(EA),\n   arch.conditional(EA,_).\nin file cfg.dl [237:1-259:7]" 
      (TIMER_ON cfg_edge "@t-nonrecursive-rule;cfg_edge;cfg.dl [237:1-259:7];cfg_edge(Src,Dest,\\\"true\\\",\\\"false\\\",\\\"fallthrough\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   may_fallthrough(EA,Dest),\\n   !no_return_call_propagated(EA),\\n   !nop_block(Src),\\n   code_in_refined_block(Dest,Dest),\\n   block_information(Src,_,_,End),\\n   !loaded_section(_,End,_),\\n   !plt_block(Src,_),\\n   arch.jump(EA),\\n   arch.conditional(EA,_).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY code_in_refined_block))) (NOT (ISEMPTY may_fallthrough))) (NOT (ISEMPTY block_information))) (NOT (ISEMPTY arch.jump)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (AND (AND (AND (EXISTS arch.conditional ((TUPLE t0 1) UNDEF)) (NOT (EXISTS plt_block ((TUPLE t0 0) UNDEF)))) (NOT (EXISTS no_return_call_propagated ((TUPLE t0 1))))) (EXISTS arch.jump ((TUPLE t0 1)))) (NOT (EXISTS nop_block ((TUPLE t0 0)))))
           (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (EXISTS code_in_refined_block ((TUPLE t1 1) (TUPLE t1 1)))
             (INDEXED_IF_EXISTS t2 block_information (INDEX  (= (TUPLE t2 0) (TUPLE t0 0))) (NOT (EXISTS loaded_section (UNDEF (TUPLE t2 3) UNDEF)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "true") (STRING "false") (STRING "fallthrough")) cfg_edge)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge(Src,Dest,\"false\",\"false\",\"branch\") :- \n   refined_block_last_instruction(Src,EA),\n   direct_jump(EA,Dest),\n   refined_block(Dest),\n   !arch.conditional(EA,_).\nin file cfg.dl [272:1-290:7]" 
      (TIMER_ON cfg_edge "@t-nonrecursive-rule;cfg_edge;cfg.dl [272:1-290:7];cfg_edge(Src,Dest,\\\"false\\\",\\\"false\\\",\\\"branch\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   direct_jump(EA,Dest),\\n   refined_block(Dest),\\n   !arch.conditional(EA,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY refined_block)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY direct_jump)))
         (FOR_IN t0 refined_block_last_instruction           (IF (NOT (EXISTS arch.conditional ((TUPLE t0 1) UNDEF)))
           (FOR t1 direct_jump (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (EXISTS refined_block ((TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "false") (STRING "false") (STRING "branch")) cfg_edge)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge(Src,Dest,\"true\",\"false\",\"branch\") :- \n   refined_block_last_instruction(Src,EA),\n   direct_jump(EA,Dest),\n   refined_block(Dest),\n   arch.conditional(EA,_).\nin file cfg.dl [272:1-290:7]" 
      (TIMER_ON cfg_edge "@t-nonrecursive-rule;cfg_edge;cfg.dl [272:1-290:7];cfg_edge(Src,Dest,\\\"true\\\",\\\"false\\\",\\\"branch\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   direct_jump(EA,Dest),\\n   refined_block(Dest),\\n   arch.conditional(EA,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY refined_block))) (NOT (ISEMPTY direct_jump)))
         (FOR_IN t0 refined_block_last_instruction           (IF (EXISTS arch.conditional ((TUPLE t0 1) UNDEF))
           (FOR t1 direct_jump (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (EXISTS refined_block ((TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "true") (STRING "false") (STRING "branch")) cfg_edge)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge(Src,Dest,\"false\",\"false\",\"call\") :- \n   refined_block_last_instruction(Src,EA),\n   direct_call(EA,Dest),\n   !pc_load_call(EA,_),\n   refined_block(Dest),\n   !arch.conditional(EA,_).\nin file cfg.dl [272:1-290:7]" 
      (TIMER_ON cfg_edge "@t-nonrecursive-rule;cfg_edge;cfg.dl [272:1-290:7];cfg_edge(Src,Dest,\\\"false\\\",\\\"false\\\",\\\"call\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   direct_call(EA,Dest),\\n   !pc_load_call(EA,_),\\n   refined_block(Dest),\\n   !arch.conditional(EA,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY refined_block)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY direct_call)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (NOT (EXISTS arch.conditional ((TUPLE t0 1) UNDEF))) (NOT (EXISTS pc_load_call ((TUPLE t0 1) UNDEF))))
           (FOR t1 direct_call (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (EXISTS refined_block ((TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "false") (STRING "false") (STRING "call")) cfg_edge)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge(Src,Dest,\"true\",\"false\",\"call\") :- \n   refined_block_last_instruction(Src,EA),\n   direct_call(EA,Dest),\n   !pc_load_call(EA,_),\n   refined_block(Dest),\n   arch.conditional(EA,_).\nin file cfg.dl [272:1-290:7]" 
      (TIMER_ON cfg_edge "@t-nonrecursive-rule;cfg_edge;cfg.dl [272:1-290:7];cfg_edge(Src,Dest,\\\"true\\\",\\\"false\\\",\\\"call\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   direct_call(EA,Dest),\\n   !pc_load_call(EA,_),\\n   refined_block(Dest),\\n   arch.conditional(EA,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY refined_block))) (NOT (ISEMPTY direct_call)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (NOT (EXISTS pc_load_call ((TUPLE t0 1) UNDEF))) (EXISTS arch.conditional ((TUPLE t0 1) UNDEF)))
           (FOR t1 direct_call (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (EXISTS refined_block ((TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "true") (STRING "false") (STRING "call")) cfg_edge)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge(Src,Dest,\"false\",\"true\",Type) :- \n   refined_block_last_instruction(Src,EA),\n   resolved_transfer(EA,Dest,Type),\n   refined_block(Dest),\n   !arch.conditional(EA,_).\nin file cfg.dl [272:1-290:7]" 
      (TIMER_ON cfg_edge "@t-nonrecursive-rule;cfg_edge;cfg.dl [272:1-290:7];cfg_edge(Src,Dest,\\\"false\\\",\\\"true\\\",Type) :- \\n   refined_block_last_instruction(Src,EA),\\n   resolved_transfer(EA,Dest,Type),\\n   refined_block(Dest),\\n   !arch.conditional(EA,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY refined_block)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY resolved_transfer)))
         (FOR_IN t0 refined_block_last_instruction           (IF (NOT (EXISTS arch.conditional ((TUPLE t0 1) UNDEF)))
           (FOR t1 resolved_transfer (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (EXISTS refined_block ((TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "false") (STRING "true") (TUPLE t1 2)) cfg_edge)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge(Src,Dest,\"true\",\"true\",Type) :- \n   refined_block_last_instruction(Src,EA),\n   resolved_transfer(EA,Dest,Type),\n   refined_block(Dest),\n   arch.conditional(EA,_).\nin file cfg.dl [272:1-290:7]" 
      (TIMER_ON cfg_edge "@t-nonrecursive-rule;cfg_edge;cfg.dl [272:1-290:7];cfg_edge(Src,Dest,\\\"true\\\",\\\"true\\\",Type) :- \\n   refined_block_last_instruction(Src,EA),\\n   resolved_transfer(EA,Dest,Type),\\n   refined_block(Dest),\\n   arch.conditional(EA,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY refined_block))) (NOT (ISEMPTY resolved_transfer)))
         (FOR_IN t0 refined_block_last_instruction           (IF (EXISTS arch.conditional ((TUPLE t0 1) UNDEF))
           (FOR t1 resolved_transfer (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (EXISTS refined_block ((TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "true") (STRING "true") (TUPLE t1 2)) cfg_edge)
            ))          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 cfg_edge       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @delta_cfg_edge)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_cfg_edge "@t-recursive-relation;cfg_edge;cfg.dl [30:7-30:15];"
(STMTS (STMTS (STMTS       (DEBUG 
 "cfg_edge(Src,Dest,\"false\",\"false\",\"fallthrough\") :- \n   cfg_edge(_,Src,_,_,_),\n   nop_block(Src),\n   refined_block_last_instruction(Src,EA),\n   may_fallthrough(EA,Dest),\n   code_in_refined_block(Dest,Dest),\n   block_information(Src,_,_,End),\n   !loaded_section(_,End,_).\nin file cfg.dl [261:1-269:30]" 
       (TIMER_ON @new_cfg_edge "@t-recursive-rule;cfg_edge;0;cfg.dl [261:1-269:30];cfg_edge(Src,Dest,\\\"false\\\",\\\"false\\\",\\\"fallthrough\\\") :- \\n   cfg_edge(_,Src,_,_,_),\\n   nop_block(Src),\\n   refined_block_last_instruction(Src,EA),\\n   may_fallthrough(EA,Dest),\\n   code_in_refined_block(Dest,Dest),\\n   block_information(Src,_,_,End),\\n   !loaded_section(_,End,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY @delta_cfg_edge)) (NOT (ISEMPTY block_information))) (NOT (ISEMPTY may_fallthrough))) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY code_in_refined_block))) (NOT (ISEMPTY nop_block)))
          (FOR_IN t0 @delta_cfg_edge            (IF (EXISTS nop_block ((TUPLE t0 1)))
            (FOR t1 refined_block_last_instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
             (FOR t2 may_fallthrough (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (AND (EXISTS code_in_refined_block ((TUPLE t2 1) (TUPLE t2 1))) (NOT (EXISTS cfg_edge ((TUPLE t0 1) (TUPLE t2 1) (STRING "false") (STRING "false") (STRING "fallthrough")))))
               (INDEXED_IF_EXISTS t3 block_information (INDEX  (= (TUPLE t3 0) (TUPLE t0 1))) (NOT (EXISTS loaded_section (UNDEF (TUPLE t3 3) UNDEF)))
                (INSERT ((TUPLE t0 1) (TUPLE t2 1) (STRING "false") (STRING "false") (STRING "fallthrough")) @new_cfg_edge)
)              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "cfg_edge(ReturnBlock,NextBlock,\"false\",\"false\",\"return\") :- \n   cfg_edge(Caller,Block,_,_,\"call\"),\n   cfg_edge(Caller,NextBlock,_,_,\"fallthrough\"),\n   function_inference.in_function(Block,FunctionEntry),\n   function_inference.in_function(ReturnBlock,FunctionEntry),\n   refined_block_last_instruction(ReturnBlock,Insn),\n   unconditional_return(Insn).\nin file cfg.dl [292:1-301:7]" 
       (TIMER_ON @new_cfg_edge "@t-recursive-rule;cfg_edge;0;cfg.dl [292:1-301:7];cfg_edge(ReturnBlock,NextBlock,\\\"false\\\",\\\"false\\\",\\\"return\\\") :- \\n   cfg_edge(Caller,Block,_,_,\\\"call\\\"),\\n   cfg_edge(Caller,NextBlock,_,_,\\\"fallthrough\\\"),\\n   function_inference.in_function(Block,FunctionEntry),\\n   function_inference.in_function(ReturnBlock,FunctionEntry),\\n   refined_block_last_instruction(ReturnBlock,Insn),\\n   unconditional_return(Insn).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY cfg_edge)) (NOT (ISEMPTY unconditional_return))) (NOT (ISEMPTY function_inference.in_function))) (NOT (ISEMPTY @delta_cfg_edge))) (NOT (ISEMPTY refined_block_last_instruction)))
          (FOR t0 @delta_cfg_edge (INDEX  (= (TUPLE t0 4) (STRING "call")))
           (FOR t1 cfg_edge (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 4) (STRING "fallthrough")))
            (IF (NOT (EXISTS @delta_cfg_edge ((TUPLE t0 0) (TUPLE t1 1) UNDEF UNDEF (STRING "fallthrough"))))
             (FOR t2 function_inference.in_function (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
              (FOR t3 function_inference.in_function (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)))
               (IF (NOT (EXISTS cfg_edge ((TUPLE t3 0) (TUPLE t1 1) (STRING "false") (STRING "false") (STRING "return"))))
                (INDEXED_IF_EXISTS t4 refined_block_last_instruction (INDEX  (= (TUPLE t4 0) (TUPLE t3 0))) (EXISTS unconditional_return ((TUPLE t4 1)))
                 (INSERT ((TUPLE t3 0) (TUPLE t1 1) (STRING "false") (STRING "false") (STRING "return")) @new_cfg_edge)
)               )))            )))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "cfg_edge(ReturnBlock,NextBlock,\"false\",\"false\",\"return\") :- \n   cfg_edge(Caller,Block,_,_,\"call\"),\n   cfg_edge(Caller,NextBlock,_,_,\"fallthrough\"),\n   function_inference.in_function(Block,FunctionEntry),\n   function_inference.in_function(ReturnBlock,FunctionEntry),\n   refined_block_last_instruction(ReturnBlock,Insn),\n   unconditional_return(Insn).\nin file cfg.dl [292:1-301:7]" 
       (TIMER_ON @new_cfg_edge "@t-recursive-rule;cfg_edge;1;cfg.dl [292:1-301:7];cfg_edge(ReturnBlock,NextBlock,\\\"false\\\",\\\"false\\\",\\\"return\\\") :- \\n   cfg_edge(Caller,Block,_,_,\\\"call\\\"),\\n   cfg_edge(Caller,NextBlock,_,_,\\\"fallthrough\\\"),\\n   function_inference.in_function(Block,FunctionEntry),\\n   function_inference.in_function(ReturnBlock,FunctionEntry),\\n   refined_block_last_instruction(ReturnBlock,Insn),\\n   unconditional_return(Insn).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_cfg_edge)) (NOT (ISEMPTY unconditional_return))) (NOT (ISEMPTY function_inference.in_function))) (NOT (ISEMPTY cfg_edge))) (NOT (ISEMPTY refined_block_last_instruction)))
          (FOR t0 cfg_edge (INDEX  (= (TUPLE t0 4) (STRING "call")))
           (FOR t1 @delta_cfg_edge (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 4) (STRING "fallthrough")))
            (FOR t2 function_inference.in_function (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
             (FOR t3 function_inference.in_function (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)))
              (IF (NOT (EXISTS cfg_edge ((TUPLE t3 0) (TUPLE t1 1) (STRING "false") (STRING "false") (STRING "return"))))
               (INDEXED_IF_EXISTS t4 refined_block_last_instruction (INDEX  (= (TUPLE t4 0) (TUPLE t3 0))) (EXISTS unconditional_return ((TUPLE t4 1)))
                (INSERT ((TUPLE t3 0) (TUPLE t1 1) (STRING "false") (STRING "false") (STRING "return")) @new_cfg_edge)
)              )))))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "cfg_edge(ReturnBlock,NextBlock,\"true\",\"false\",\"return\") :- \n   cfg_edge(Caller,Block,_,_,\"call\"),\n   cfg_edge(Caller,NextBlock,_,_,\"fallthrough\"),\n   function_inference.in_function(Block,FunctionEntry),\n   function_inference.in_function(ReturnBlock,FunctionEntry),\n   refined_block_last_instruction(ReturnBlock,Insn),\n   conditional_return(Insn).\nin file cfg.dl [292:1-301:7]" 
       (TIMER_ON @new_cfg_edge "@t-recursive-rule;cfg_edge;0;cfg.dl [292:1-301:7];cfg_edge(ReturnBlock,NextBlock,\\\"true\\\",\\\"false\\\",\\\"return\\\") :- \\n   cfg_edge(Caller,Block,_,_,\\\"call\\\"),\\n   cfg_edge(Caller,NextBlock,_,_,\\\"fallthrough\\\"),\\n   function_inference.in_function(Block,FunctionEntry),\\n   function_inference.in_function(ReturnBlock,FunctionEntry),\\n   refined_block_last_instruction(ReturnBlock,Insn),\\n   conditional_return(Insn).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY cfg_edge)) (NOT (ISEMPTY conditional_return))) (NOT (ISEMPTY function_inference.in_function))) (NOT (ISEMPTY @delta_cfg_edge))) (NOT (ISEMPTY refined_block_last_instruction)))
          (FOR t0 @delta_cfg_edge (INDEX  (= (TUPLE t0 4) (STRING "call")))
           (FOR t1 cfg_edge (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 4) (STRING "fallthrough")))
            (IF (NOT (EXISTS @delta_cfg_edge ((TUPLE t0 0) (TUPLE t1 1) UNDEF UNDEF (STRING "fallthrough"))))
             (FOR t2 function_inference.in_function (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
              (FOR t3 function_inference.in_function (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)))
               (IF (NOT (EXISTS cfg_edge ((TUPLE t3 0) (TUPLE t1 1) (STRING "true") (STRING "false") (STRING "return"))))
                (INDEXED_IF_EXISTS t4 refined_block_last_instruction (INDEX  (= (TUPLE t4 0) (TUPLE t3 0))) (EXISTS conditional_return ((TUPLE t4 1)))
                 (INSERT ((TUPLE t3 0) (TUPLE t1 1) (STRING "true") (STRING "false") (STRING "return")) @new_cfg_edge)
)               )))            )))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "cfg_edge(ReturnBlock,NextBlock,\"true\",\"false\",\"return\") :- \n   cfg_edge(Caller,Block,_,_,\"call\"),\n   cfg_edge(Caller,NextBlock,_,_,\"fallthrough\"),\n   function_inference.in_function(Block,FunctionEntry),\n   function_inference.in_function(ReturnBlock,FunctionEntry),\n   refined_block_last_instruction(ReturnBlock,Insn),\n   conditional_return(Insn).\nin file cfg.dl [292:1-301:7]" 
       (TIMER_ON @new_cfg_edge "@t-recursive-rule;cfg_edge;1;cfg.dl [292:1-301:7];cfg_edge(ReturnBlock,NextBlock,\\\"true\\\",\\\"false\\\",\\\"return\\\") :- \\n   cfg_edge(Caller,Block,_,_,\\\"call\\\"),\\n   cfg_edge(Caller,NextBlock,_,_,\\\"fallthrough\\\"),\\n   function_inference.in_function(Block,FunctionEntry),\\n   function_inference.in_function(ReturnBlock,FunctionEntry),\\n   refined_block_last_instruction(ReturnBlock,Insn),\\n   conditional_return(Insn).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_cfg_edge)) (NOT (ISEMPTY conditional_return))) (NOT (ISEMPTY function_inference.in_function))) (NOT (ISEMPTY cfg_edge))) (NOT (ISEMPTY refined_block_last_instruction)))
          (FOR t0 cfg_edge (INDEX  (= (TUPLE t0 4) (STRING "call")))
           (FOR t1 @delta_cfg_edge (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 4) (STRING "fallthrough")))
            (FOR t2 function_inference.in_function (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
             (FOR t3 function_inference.in_function (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)))
              (IF (NOT (EXISTS cfg_edge ((TUPLE t3 0) (TUPLE t1 1) (STRING "true") (STRING "false") (STRING "return"))))
               (INDEXED_IF_EXISTS t4 refined_block_last_instruction (INDEX  (= (TUPLE t4 0) (TUPLE t3 0))) (EXISTS conditional_return ((TUPLE t4 1)))
                (INSERT ((TUPLE t3 0) (TUPLE t1 1) (STRING "true") (STRING "false") (STRING "return")) @new_cfg_edge)
)              )))))         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_cfg_edge "@t-recursive-relation;cfg_edge;cfg.dl [30:7-30:15];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_cfg_edge))
 ) (STMTS      (TIMER_ON @new_cfg_edge "@c-recursive-relation;cfg_edge;cfg.dl [30:7-30:15];"
(STMTS (QUERY
       (FOR_IN t0 @new_cfg_edge         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) cfg_edge)
)
      )
       (SWAP @delta_cfg_edge @new_cfg_edge)
       (CLEAR @new_cfg_edge)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_cfg_edge)
     (CLEAR @new_cfg_edge)
 ) )  (STMTS     (TIMER_ON cfg_edge "@t-relation-savetime;cfg_edge;cfg.dl [30:7-30:15];savetime;"
     (IO cfg_edge ((= IO "file") (= attributeNames "src\tdest\tconditional\tindirect\ttype") (= auxArity "0") (= name "cfg_edge") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"src\", \"dest\", \"conditional\", \"indirect\", \"type\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"u:address\", \"u:address\", \"s:symbol\", \"s:symbol\", \"s:symbol\"]}}")))
    )
 ) ) (STMTS     (CLEAR code_in_refined_block)
     (CLEAR function_inference.in_function)
     (CLEAR may_fallthrough)
     (CLEAR no_return_call_propagated)
     (CLEAR nop_block)
     (CLEAR pc_load_call)
     (CLEAR refined_block)
 ) )  )
  (SUBROUTINE cfg_edge_to_symbol
(STMTS (STMTS (STMTS     (TIMER_ON cfg_edge_to_symbol "@t-nonrecursive-relation;cfg_edge_to_symbol;cfg.dl [45:7-45:25];"
(STMTS      (DEBUG 
 "cfg_edge_to_symbol(Src,Symbol,\"false\",\"false\",\"branch\") :- \n   refined_block_last_instruction(Src,EA),\n   arch.jump(EA),\n   instruction_immediate_offset(EA,_,Offset,_),\n   !arch.conditional(EA,_),\n   Rel = (EA+Offset),\n   pointer_to_external_symbol(Rel,Symbol).\nin file cfg.dl [305:1-321:44]" 
      (TIMER_ON cfg_edge_to_symbol "@t-nonrecursive-rule;cfg_edge_to_symbol;cfg.dl [305:1-321:44];cfg_edge_to_symbol(Src,Symbol,\\\"false\\\",\\\"false\\\",\\\"branch\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   arch.jump(EA),\\n   instruction_immediate_offset(EA,_,Offset,_),\\n   !arch.conditional(EA,_),\\n   Rel = (EA+Offset),\\n   pointer_to_external_symbol(Rel,Symbol).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY pointer_to_external_symbol))) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY arch.jump)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (EXISTS arch.jump ((TUPLE t0 1))) (NOT (EXISTS arch.conditional ((TUPLE t0 1) UNDEF))))
           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (FOR t2 pointer_to_external_symbol (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 1) (TUPLE t1 2))))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1) (STRING "false") (STRING "false") (STRING "branch")) cfg_edge_to_symbol)
))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_symbol(Src,Symbol,\"true\",\"false\",\"branch\") :- \n   refined_block_last_instruction(Src,EA),\n   arch.jump(EA),\n   instruction_immediate_offset(EA,_,Offset,_),\n   arch.conditional(EA,_),\n   Rel = (EA+Offset),\n   pointer_to_external_symbol(Rel,Symbol).\nin file cfg.dl [305:1-321:44]" 
      (TIMER_ON cfg_edge_to_symbol "@t-nonrecursive-rule;cfg_edge_to_symbol;cfg.dl [305:1-321:44];cfg_edge_to_symbol(Src,Symbol,\\\"true\\\",\\\"false\\\",\\\"branch\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   arch.jump(EA),\\n   instruction_immediate_offset(EA,_,Offset,_),\\n   arch.conditional(EA,_),\\n   Rel = (EA+Offset),\\n   pointer_to_external_symbol(Rel,Symbol).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY pointer_to_external_symbol)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY arch.jump)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (EXISTS arch.jump ((TUPLE t0 1))) (EXISTS arch.conditional ((TUPLE t0 1) UNDEF)))
           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (FOR t2 pointer_to_external_symbol (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 1) (TUPLE t1 2))))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1) (STRING "true") (STRING "false") (STRING "branch")) cfg_edge_to_symbol)
))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_symbol(Src,Symbol,\"false\",\"false\",\"call\") :- \n   refined_block_last_instruction(Src,EA),\n   arch.call(EA,_),\n   instruction_immediate_offset(EA,_,Offset,_),\n   !arch.conditional(EA,_),\n   Rel = (EA+Offset),\n   pointer_to_external_symbol(Rel,Symbol).\nin file cfg.dl [305:1-321:44]" 
      (TIMER_ON cfg_edge_to_symbol "@t-nonrecursive-rule;cfg_edge_to_symbol;cfg.dl [305:1-321:44];cfg_edge_to_symbol(Src,Symbol,\\\"false\\\",\\\"false\\\",\\\"call\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   arch.call(EA,_),\\n   instruction_immediate_offset(EA,_,Offset,_),\\n   !arch.conditional(EA,_),\\n   Rel = (EA+Offset),\\n   pointer_to_external_symbol(Rel,Symbol).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY pointer_to_external_symbol))) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY arch.call)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (EXISTS arch.call ((TUPLE t0 1) UNDEF)) (NOT (EXISTS arch.conditional ((TUPLE t0 1) UNDEF))))
           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (FOR t2 pointer_to_external_symbol (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 1) (TUPLE t1 2))))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1) (STRING "false") (STRING "false") (STRING "call")) cfg_edge_to_symbol)
))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_symbol(Src,Symbol,\"true\",\"false\",\"call\") :- \n   refined_block_last_instruction(Src,EA),\n   arch.call(EA,_),\n   instruction_immediate_offset(EA,_,Offset,_),\n   arch.conditional(EA,_),\n   Rel = (EA+Offset),\n   pointer_to_external_symbol(Rel,Symbol).\nin file cfg.dl [305:1-321:44]" 
      (TIMER_ON cfg_edge_to_symbol "@t-nonrecursive-rule;cfg_edge_to_symbol;cfg.dl [305:1-321:44];cfg_edge_to_symbol(Src,Symbol,\\\"true\\\",\\\"false\\\",\\\"call\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   arch.call(EA,_),\\n   instruction_immediate_offset(EA,_,Offset,_),\\n   arch.conditional(EA,_),\\n   Rel = (EA+Offset),\\n   pointer_to_external_symbol(Rel,Symbol).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY pointer_to_external_symbol)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY arch.call)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (EXISTS arch.call ((TUPLE t0 1) UNDEF)) (EXISTS arch.conditional ((TUPLE t0 1) UNDEF)))
           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (FOR t2 pointer_to_external_symbol (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 1) (TUPLE t1 2))))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1) (STRING "true") (STRING "false") (STRING "call")) cfg_edge_to_symbol)
))          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_symbol(Src,Symbol,\"false\",\"true\",EdgeType) :- \n   refined_block_last_instruction(Src,EA),\n   resolved_transfer_to_symbol(EA,Symbol,EdgeType),\n   !arch.conditional(EA,_).\nin file cfg.dl [325:1-331:7]" 
      (TIMER_ON cfg_edge_to_symbol "@t-nonrecursive-rule;cfg_edge_to_symbol;cfg.dl [325:1-331:7];cfg_edge_to_symbol(Src,Symbol,\\\"false\\\",\\\"true\\\",EdgeType) :- \\n   refined_block_last_instruction(Src,EA),\\n   resolved_transfer_to_symbol(EA,Symbol,EdgeType),\\n   !arch.conditional(EA,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY resolved_transfer_to_symbol)))
         (FOR_IN t0 refined_block_last_instruction           (IF (NOT (EXISTS arch.conditional ((TUPLE t0 1) UNDEF)))
           (FOR t1 resolved_transfer_to_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "false") (STRING "true") (TUPLE t1 2)) cfg_edge_to_symbol)
)          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_symbol(Src,Symbol,\"true\",\"true\",EdgeType) :- \n   refined_block_last_instruction(Src,EA),\n   resolved_transfer_to_symbol(EA,Symbol,EdgeType),\n   arch.conditional(EA,_).\nin file cfg.dl [325:1-331:7]" 
      (TIMER_ON cfg_edge_to_symbol "@t-nonrecursive-rule;cfg_edge_to_symbol;cfg.dl [325:1-331:7];cfg_edge_to_symbol(Src,Symbol,\\\"true\\\",\\\"true\\\",EdgeType) :- \\n   refined_block_last_instruction(Src,EA),\\n   resolved_transfer_to_symbol(EA,Symbol,EdgeType),\\n   arch.conditional(EA,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY arch.conditional)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY resolved_transfer_to_symbol)))
         (FOR_IN t0 refined_block_last_instruction           (IF (EXISTS arch.conditional ((TUPLE t0 1) UNDEF))
           (FOR t1 resolved_transfer_to_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "true") (STRING "true") (TUPLE t1 2)) cfg_edge_to_symbol)
)          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON cfg_edge_to_symbol "@t-relation-savetime;cfg_edge_to_symbol;cfg.dl [45:7-45:25];savetime;"
     (IO cfg_edge_to_symbol ((= IO "file") (= attributeNames "src\tSymbol\tconditional\tindirect\ttype") (= auxArity "0") (= name "cfg_edge_to_symbol") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"src\", \"Symbol\", \"conditional\", \"indirect\", \"type\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"u:address\", \"s:symbol\", \"s:symbol\", \"s:symbol\", \"s:symbol\"]}}")))
    )
 ) ) (STMTS     (CLEAR arch.call)
     (CLEAR arch.conditional)
     (CLEAR arch.jump)
     (CLEAR pointer_to_external_symbol)
 ) )  )
  (SUBROUTINE cfg_edge_to_top
(STMTS (STMTS (STMTS     (TIMER_ON cfg_edge_to_top "@t-nonrecursive-relation;cfg_edge_to_top;cfg.dl [39:7-39:22];"
(STMTS      (DEBUG 
 "cfg_edge_to_top(Src,\"false\",\"call\") :- \n   refined_block_last_instruction(Src,EA),\n   reg_call(EA,_),\n   !resolved_transfer(EA,_,\"call\"),\n   !resolved_transfer_to_symbol(EA,_,\"call\").\nin file cfg.dl [348:1-355:47]" 
      (TIMER_ON cfg_edge_to_top "@t-nonrecursive-rule;cfg_edge_to_top;cfg.dl [348:1-355:47];cfg_edge_to_top(Src,\\\"false\\\",\\\"call\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   reg_call(EA,_),\\n   !resolved_transfer(EA,_,\\\"call\\\"),\\n   !resolved_transfer_to_symbol(EA,_,\\\"call\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY reg_call)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (AND (EXISTS reg_call ((TUPLE t0 1) UNDEF)) (NOT (EXISTS resolved_transfer_to_symbol ((TUPLE t0 1) UNDEF (STRING "call"))))) (NOT (EXISTS resolved_transfer ((TUPLE t0 1) UNDEF (STRING "call")))))
           (INSERT ((TUPLE t0 0) (STRING "false") (STRING "call")) cfg_edge_to_top)
          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_top(Src,\"false\",\"call\") :- \n   refined_block_last_instruction(Src,EA),\n   indirect_call(EA),\n   !resolved_transfer(EA,_,\"call\"),\n   !resolved_transfer_to_symbol(EA,_,\"call\").\nin file cfg.dl [348:1-355:47]" 
      (TIMER_ON cfg_edge_to_top "@t-nonrecursive-rule;cfg_edge_to_top;cfg.dl [348:1-355:47];cfg_edge_to_top(Src,\\\"false\\\",\\\"call\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   indirect_call(EA),\\n   !resolved_transfer(EA,_,\\\"call\\\"),\\n   !resolved_transfer_to_symbol(EA,_,\\\"call\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY indirect_call)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (AND (EXISTS indirect_call ((TUPLE t0 1))) (NOT (EXISTS resolved_transfer_to_symbol ((TUPLE t0 1) UNDEF (STRING "call"))))) (NOT (EXISTS resolved_transfer ((TUPLE t0 1) UNDEF (STRING "call")))))
           (INSERT ((TUPLE t0 0) (STRING "false") (STRING "call")) cfg_edge_to_top)
          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_top(Src,\"false\",\"branch\") :- \n   refined_block_last_instruction(Src,EA),\n   reg_jump(EA,_),\n   !resolved_transfer(EA,_,\"branch\"),\n   !resolved_transfer_to_symbol(EA,_,\"branch\"),\n   unconditional_jump(EA).\nin file cfg.dl [335:1-346:7]" 
      (TIMER_ON cfg_edge_to_top "@t-nonrecursive-rule;cfg_edge_to_top;cfg.dl [335:1-346:7];cfg_edge_to_top(Src,\\\"false\\\",\\\"branch\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   reg_jump(EA,_),\\n   !resolved_transfer(EA,_,\\\"branch\\\"),\\n   !resolved_transfer_to_symbol(EA,_,\\\"branch\\\"),\\n   unconditional_jump(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY unconditional_jump)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (AND (AND (NOT (EXISTS resolved_transfer_to_symbol ((TUPLE t0 1) UNDEF (STRING "branch")))) (EXISTS reg_jump ((TUPLE t0 1) UNDEF))) (EXISTS unconditional_jump ((TUPLE t0 1)))) (NOT (EXISTS resolved_transfer ((TUPLE t0 1) UNDEF (STRING "branch")))))
           (INSERT ((TUPLE t0 0) (STRING "false") (STRING "branch")) cfg_edge_to_top)
          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_top(Src,\"true\",\"branch\") :- \n   refined_block_last_instruction(Src,EA),\n   reg_jump(EA,_),\n   !resolved_transfer(EA,_,\"branch\"),\n   !resolved_transfer_to_symbol(EA,_,\"branch\"),\n   conditional_jump(EA).\nin file cfg.dl [335:1-346:7]" 
      (TIMER_ON cfg_edge_to_top "@t-nonrecursive-rule;cfg_edge_to_top;cfg.dl [335:1-346:7];cfg_edge_to_top(Src,\\\"true\\\",\\\"branch\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   reg_jump(EA,_),\\n   !resolved_transfer(EA,_,\\\"branch\\\"),\\n   !resolved_transfer_to_symbol(EA,_,\\\"branch\\\"),\\n   conditional_jump(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY conditional_jump)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (AND (AND (NOT (EXISTS resolved_transfer_to_symbol ((TUPLE t0 1) UNDEF (STRING "branch")))) (EXISTS reg_jump ((TUPLE t0 1) UNDEF))) (EXISTS conditional_jump ((TUPLE t0 1)))) (NOT (EXISTS resolved_transfer ((TUPLE t0 1) UNDEF (STRING "branch")))))
           (INSERT ((TUPLE t0 0) (STRING "true") (STRING "branch")) cfg_edge_to_top)
          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_top(Src,\"false\",\"branch\") :- \n   refined_block_last_instruction(Src,EA),\n   indirect_jump(EA),\n   !resolved_transfer(EA,_,\"branch\"),\n   !resolved_transfer_to_symbol(EA,_,\"branch\"),\n   unconditional_jump(EA).\nin file cfg.dl [335:1-346:7]" 
      (TIMER_ON cfg_edge_to_top "@t-nonrecursive-rule;cfg_edge_to_top;cfg.dl [335:1-346:7];cfg_edge_to_top(Src,\\\"false\\\",\\\"branch\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   indirect_jump(EA),\\n   !resolved_transfer(EA,_,\\\"branch\\\"),\\n   !resolved_transfer_to_symbol(EA,_,\\\"branch\\\"),\\n   unconditional_jump(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY unconditional_jump)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY indirect_jump)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (AND (AND (NOT (EXISTS resolved_transfer_to_symbol ((TUPLE t0 1) UNDEF (STRING "branch")))) (EXISTS unconditional_jump ((TUPLE t0 1)))) (EXISTS indirect_jump ((TUPLE t0 1)))) (NOT (EXISTS resolved_transfer ((TUPLE t0 1) UNDEF (STRING "branch")))))
           (INSERT ((TUPLE t0 0) (STRING "false") (STRING "branch")) cfg_edge_to_top)
          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_top(Src,\"true\",\"branch\") :- \n   refined_block_last_instruction(Src,EA),\n   indirect_jump(EA),\n   !resolved_transfer(EA,_,\"branch\"),\n   !resolved_transfer_to_symbol(EA,_,\"branch\"),\n   conditional_jump(EA).\nin file cfg.dl [335:1-346:7]" 
      (TIMER_ON cfg_edge_to_top "@t-nonrecursive-rule;cfg_edge_to_top;cfg.dl [335:1-346:7];cfg_edge_to_top(Src,\\\"true\\\",\\\"branch\\\") :- \\n   refined_block_last_instruction(Src,EA),\\n   indirect_jump(EA),\\n   !resolved_transfer(EA,_,\\\"branch\\\"),\\n   !resolved_transfer_to_symbol(EA,_,\\\"branch\\\"),\\n   conditional_jump(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY conditional_jump)) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY indirect_jump)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (AND (AND (NOT (EXISTS resolved_transfer_to_symbol ((TUPLE t0 1) UNDEF (STRING "branch")))) (EXISTS conditional_jump ((TUPLE t0 1)))) (EXISTS indirect_jump ((TUPLE t0 1)))) (NOT (EXISTS resolved_transfer ((TUPLE t0 1) UNDEF (STRING "branch")))))
           (INSERT ((TUPLE t0 0) (STRING "true") (STRING "branch")) cfg_edge_to_top)
          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_top(Src,\"false\",\"return\") :- \n   refined_block_last_instruction(Src,Insn),\n   unconditional_return(Insn),\n   !cfg_edge(Src,_,_,_,\"return\").\nin file cfg.dl [358:1-364:35]" 
      (TIMER_ON cfg_edge_to_top "@t-nonrecursive-rule;cfg_edge_to_top;cfg.dl [358:1-364:35];cfg_edge_to_top(Src,\\\"false\\\",\\\"return\\\") :- \\n   refined_block_last_instruction(Src,Insn),\\n   unconditional_return(Insn),\\n   !cfg_edge(Src,_,_,_,\\\"return\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY unconditional_return)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (EXISTS unconditional_return ((TUPLE t0 1))) (NOT (EXISTS cfg_edge ((TUPLE t0 0) UNDEF UNDEF UNDEF (STRING "return")))))
           (INSERT ((TUPLE t0 0) (STRING "false") (STRING "return")) cfg_edge_to_top)
          ))
        )       )
      )
     )
      (DEBUG 
 "cfg_edge_to_top(Src,\"true\",\"return\") :- \n   refined_block_last_instruction(Src,Insn),\n   conditional_return(Insn),\n   !cfg_edge(Src,_,_,_,\"return\").\nin file cfg.dl [358:1-364:35]" 
      (TIMER_ON cfg_edge_to_top "@t-nonrecursive-rule;cfg_edge_to_top;cfg.dl [358:1-364:35];cfg_edge_to_top(Src,\\\"true\\\",\\\"return\\\") :- \\n   refined_block_last_instruction(Src,Insn),\\n   conditional_return(Insn),\\n   !cfg_edge(Src,_,_,_,\\\"return\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY refined_block_last_instruction)) (NOT (ISEMPTY conditional_return)))
         (FOR_IN t0 refined_block_last_instruction           (IF (AND (EXISTS conditional_return ((TUPLE t0 1))) (NOT (EXISTS cfg_edge ((TUPLE t0 0) UNDEF UNDEF UNDEF (STRING "return")))))
           (INSERT ((TUPLE t0 0) (STRING "true") (STRING "return")) cfg_edge_to_top)
          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON cfg_edge_to_top "@t-relation-savetime;cfg_edge_to_top;cfg.dl [39:7-39:22];savetime;"
     (IO cfg_edge_to_top ((= IO "file") (= attributeNames "src\tconditional\ttype") (= auxArity "0") (= name "cfg_edge_to_top") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"src\", \"conditional\", \"type\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:address\", \"s:symbol\", \"s:symbol\"]}}")))
    )
 ) ) (STMTS     (CLEAR cfg_edge)
     (CLEAR conditional_jump)
     (CLEAR conditional_return)
     (CLEAR indirect_call)
     (CLEAR refined_block_last_instruction)
     (CLEAR reg_call)
     (CLEAR reg_jump)
     (CLEAR resolved_transfer)
     (CLEAR resolved_transfer_to_symbol)
     (CLEAR unconditional_jump)
     (CLEAR unconditional_return)
 ) )  )
  (SUBROUTINE cfi_directive
(STMTS (STMTS (STMTS     (TIMER_ON cfi_directive "@t-nonrecursive-relation;cfi_directive;exceptions.dl [36:7-36:20];"
(STMTS      (DEBUG 
 "cfi_directive(StartFunction,0,0,\".cfi_startproc\",\"\",0,0,0) :- \n   !option(\"no-cfi-directives\"),\n   fde_block_addresses(FdeAddr,StartFunction,EndAddr),\n   block_information(_,_,_,EndAddr),\n   endproc_local_index(FdeAddr,_).\nin file exceptions.dl [370:1-375:49]" 
      (TIMER_ON cfi_directive "@t-nonrecursive-rule;cfi_directive;exceptions.dl [370:1-375:49];cfi_directive(StartFunction,0,0,\\\".cfi_startproc\\\",\\\"\\\",0,0,0) :- \\n   !option(\\\"no-cfi-directives\\\"),\\n   fde_block_addresses(FdeAddr,StartFunction,EndAddr),\\n   block_information(_,_,_,EndAddr),\\n   endproc_local_index(FdeAddr,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY block_information)) (NOT (ISEMPTY endproc_local_index))) (NOT (ISEMPTY fde_block_addresses))) (NOT (EXISTS option ((STRING "no-cfi-directives")))))
         (FOR_IN t0 fde_block_addresses           (IF (AND (EXISTS endproc_local_index ((TUPLE t0 0) UNDEF)) (EXISTS block_information (UNDEF UNDEF UNDEF (TUPLE t0 2))))
           (INSERT ((TUPLE t0 1) (UNSIGNED 0) (UNSIGNED 0) (STRING ".cfi_startproc") (STRING "") (UNSIGNED 0) (NUMBER 0) (NUMBER 0)) cfi_directive)
          ))
        )       )
      )
     )
      (DEBUG 
 "cfi_directive(Block,BlockSize,LastLocalIndex,\".cfi_endproc\",\"\",0,0,0) :- \n   !option(\"no-cfi-directives\"),\n   fde_block_addresses(FdeAddr,_,EndAddr),\n   block_information(Block,BlockSize,_,EndAddr),\n   endproc_local_index(FdeAddr,LastLocalIndex).\nin file exceptions.dl [370:1-375:49]" 
      (TIMER_ON cfi_directive "@t-nonrecursive-rule;cfi_directive;exceptions.dl [370:1-375:49];cfi_directive(Block,BlockSize,LastLocalIndex,\\\".cfi_endproc\\\",\\\"\\\",0,0,0) :- \\n   !option(\\\"no-cfi-directives\\\"),\\n   fde_block_addresses(FdeAddr,_,EndAddr),\\n   block_information(Block,BlockSize,_,EndAddr),\\n   endproc_local_index(FdeAddr,LastLocalIndex).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY block_information)) (NOT (ISEMPTY endproc_local_index))) (NOT (ISEMPTY fde_block_addresses))) (NOT (EXISTS option ((STRING "no-cfi-directives")))))
         (FOR_IN t0 fde_block_addresses           (FOR t1 block_information (INDEX  (= (TUPLE t1 3) (TUPLE t0 2)))
           (FOR t2 endproc_local_index (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
            (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t2 1) (STRING ".cfi_endproc") (STRING "") (UNSIGNED 0) (NUMBER 0) (NUMBER 0)) cfi_directive)
)))
        )       )
      )
     )
      (DEBUG 
 "cfi_directive(Block,Offset,LocalIndex,\".cfi_escape\",\"\",Size,as(InstructionBytesAddr, number),0) :- \n   !option(\"no-cfi-directives\"),\n   fde_instruction(FdeAddr,Index,Size,InstructionBytesAddr,\"unhandled_instruction\",_,_),\n   fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset).\nin file exceptions.dl [434:1-437:73]" 
      (TIMER_ON cfi_directive "@t-nonrecursive-rule;cfi_directive;exceptions.dl [434:1-437:73];cfi_directive(Block,Offset,LocalIndex,\\\".cfi_escape\\\",\\\"\\\",Size,as(InstructionBytesAddr, number),0) :- \\n   !option(\\\"no-cfi-directives\\\"),\\n   fde_instruction(FdeAddr,Index,Size,InstructionBytesAddr,\\\"unhandled_instruction\\\",_,_),\\n   fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY fde_instruction)) (NOT (ISEMPTY fde_instruction_block_offset))) (NOT (EXISTS option ((STRING "no-cfi-directives")))))
         (FOR t0 fde_instruction (INDEX  (= (TUPLE t0 4) (STRING "unhandled_instruction")))
          (FOR t1 fde_instruction_block_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (INSERT ((TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 2) (STRING ".cfi_escape") (STRING "") (TUPLE t0 2) (TUPLE t0 3) (NUMBER 0)) cfi_directive)
))        )       )
      )
     )
      (DEBUG 
 "cfi_directive(StartFunction,0,1,\".cfi_lsda\",LsdaSymbol,1,as(LsdaEncoding, number),0) :- \n   !option(\"no-cfi-directives\"),\n   fde_entry(FdeAddr,_,Cie,_,_,Lsda),\n   fde_block_addresses(FdeAddr,StartFunction,_),\n   cie_encoding(Cie,_,LsdaEncoding),\n   Lsda != 0,\n   best_symexpr_symbol(Lsda,LsdaSymbol,\"Beg\").\nin file exceptions.dl [379:1-391:7]" 
      (TIMER_ON cfi_directive "@t-nonrecursive-rule;cfi_directive;exceptions.dl [379:1-391:7];cfi_directive(StartFunction,0,1,\\\".cfi_lsda\\\",LsdaSymbol,1,as(LsdaEncoding, number),0) :- \\n   !option(\\\"no-cfi-directives\\\"),\\n   fde_entry(FdeAddr,_,Cie,_,_,Lsda),\\n   fde_block_addresses(FdeAddr,StartFunction,_),\\n   cie_encoding(Cie,_,LsdaEncoding),\\n   Lsda != 0,\\n   best_symexpr_symbol(Lsda,LsdaSymbol,\\\"Beg\\\").;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY best_symexpr_symbol)) (NOT (ISEMPTY fde_block_addresses))) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY cie_encoding))) (NOT (EXISTS option ((STRING "no-cfi-directives")))))
         (FOR_IN t0 fde_entry           (IF (CONSTRAINT != (TUPLE t0 5)  (UNSIGNED 0))
           (FOR t1 fde_block_addresses (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 cie_encoding (INDEX  (= (TUPLE t2 0) (TUPLE t0 2)))
             (FOR t3 best_symexpr_symbol (INDEX  (= (TUPLE t3 0) (TUPLE t0 5)) (= (TUPLE t3 2) (STRING "Beg")))
              (INSERT ((TUPLE t1 1) (UNSIGNED 0) (UNSIGNED 1) (STRING ".cfi_lsda") (TUPLE t3 1) (UNSIGNED 1) (TUPLE t2 2) (NUMBER 0)) cfi_directive)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "cfi_directive(StartFunction,0,1,\".cfi_lsda\",\"\",1,255,0) :- \n   !option(\"no-cfi-directives\"),\n   fde_entry(FdeAddr,_,Cie,_,_,Lsda),\n   fde_block_addresses(FdeAddr,StartFunction,_),\n   cie_encoding(Cie,_,_),\n   Lsda = 0.\nin file exceptions.dl [379:1-391:7]" 
      (TIMER_ON cfi_directive "@t-nonrecursive-rule;cfi_directive;exceptions.dl [379:1-391:7];cfi_directive(StartFunction,0,1,\\\".cfi_lsda\\\",\\\"\\\",1,255,0) :- \\n   !option(\\\"no-cfi-directives\\\"),\\n   fde_entry(FdeAddr,_,Cie,_,_,Lsda),\\n   fde_block_addresses(FdeAddr,StartFunction,_),\\n   cie_encoding(Cie,_,_),\\n   Lsda = 0.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY fde_block_addresses)) (NOT (ISEMPTY cie_encoding))) (NOT (ISEMPTY fde_entry))) (NOT (EXISTS option ((STRING "no-cfi-directives")))))
         (FOR t0 fde_entry (INDEX  (= (TUPLE t0 5) (UNSIGNED 0)))
          (IF (EXISTS cie_encoding ((TUPLE t0 2) UNDEF UNDEF))
           (FOR t1 fde_block_addresses (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (INSERT ((TUPLE t1 1) (UNSIGNED 0) (UNSIGNED 1) (STRING ".cfi_lsda") (STRING "") (UNSIGNED 1) (NUMBER 255) (NUMBER 0)) cfi_directive)
)          ))        )       )
      )
     )
      (DEBUG 
 "cfi_directive(StartFunction,0,2,\".cfi_personality\",PersonalitySymbol,1,as(PersonalityEncoding, number),0) :- \n   !option(\"no-cfi-directives\"),\n   fde_entry(FdeAddr,_,Cie,_,_,_),\n   fde_block_addresses(FdeAddr,StartFunction,_),\n   cie_personality(Cie,Personality,_,_,PersonalityEncoding),\n   Personality != 0,\n   best_symexpr_symbol(Personality,PersonalitySymbol,\"Beg\").\nin file exceptions.dl [393:1-406:7]" 
      (TIMER_ON cfi_directive "@t-nonrecursive-rule;cfi_directive;exceptions.dl [393:1-406:7];cfi_directive(StartFunction,0,2,\\\".cfi_personality\\\",PersonalitySymbol,1,as(PersonalityEncoding, number),0) :- \\n   !option(\\\"no-cfi-directives\\\"),\\n   fde_entry(FdeAddr,_,Cie,_,_,_),\\n   fde_block_addresses(FdeAddr,StartFunction,_),\\n   cie_personality(Cie,Personality,_,_,PersonalityEncoding),\\n   Personality != 0,\\n   best_symexpr_symbol(Personality,PersonalitySymbol,\\\"Beg\\\").;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY best_symexpr_symbol)) (NOT (ISEMPTY fde_block_addresses))) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY cie_personality))) (NOT (EXISTS option ((STRING "no-cfi-directives")))))
         (FOR_IN t0 fde_entry           (FOR t1 fde_block_addresses (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 cie_personality (INDEX  (= (TUPLE t2 0) (TUPLE t0 2)))
            (IF (CONSTRAINT != (TUPLE t2 1)  (UNSIGNED 0))
             (FOR t3 best_symexpr_symbol (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (= (TUPLE t3 2) (STRING "Beg")))
              (INSERT ((TUPLE t1 1) (UNSIGNED 0) (UNSIGNED 2) (STRING ".cfi_personality") (TUPLE t3 1) (UNSIGNED 1) (TUPLE t2 4) (NUMBER 0)) cfi_directive)
)            ))))
        )       )
      )
     )
      (DEBUG 
 "cfi_directive(StartFunction,0,2,\".cfi_personality\",\"\",1,255,0) :- \n   !option(\"no-cfi-directives\"),\n   fde_entry(FdeAddr,_,Cie,_,_,_),\n   fde_block_addresses(FdeAddr,StartFunction,_),\n   cie_personality(Cie,Personality,_,_,_),\n   Personality = 0.\nin file exceptions.dl [393:1-406:7]" 
      (TIMER_ON cfi_directive "@t-nonrecursive-rule;cfi_directive;exceptions.dl [393:1-406:7];cfi_directive(StartFunction,0,2,\\\".cfi_personality\\\",\\\"\\\",1,255,0) :- \\n   !option(\\\"no-cfi-directives\\\"),\\n   fde_entry(FdeAddr,_,Cie,_,_,_),\\n   fde_block_addresses(FdeAddr,StartFunction,_),\\n   cie_personality(Cie,Personality,_,_,_),\\n   Personality = 0.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY fde_block_addresses)) (NOT (ISEMPTY cie_personality))) (NOT (ISEMPTY fde_entry))) (NOT (EXISTS option ((STRING "no-cfi-directives")))))
         (FOR_IN t0 fde_entry           (IF (EXISTS cie_personality ((TUPLE t0 2) (UNSIGNED 0) UNDEF UNDEF UNDEF))
           (FOR t1 fde_block_addresses (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (INSERT ((TUPLE t1 1) (UNSIGNED 0) (UNSIGNED 2) (STRING ".cfi_personality") (STRING "") (UNSIGNED 1) (NUMBER 255) (NUMBER 0)) cfi_directive)
)          ))
        )       )
      )
     )
      (DEBUG 
 "cfi_directive(Block,Offset,LocalIndex,CfiInsn,\"\",NOperands,(Op1*DataAlignmentFactor),(Op2*DataAlignmentFactor)) :- \n   !option(\"no-cfi-directives\"),\n   fde_instruction(FdeAddr,Index,_,_,Insn,Op1,Op2),\n   fde_entry(FdeAddr,_,Cie,_,_,_),\n   dwarf_to_cfi(Insn,NOperands,CfiInsn),\n   cie_entry(Cie,_,_,DataAlignmentFactor),\n   !cfi_operand_is_register(Insn,1),\n   !cfi_operand_is_register(Insn,2),\n   fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset).\nin file exceptions.dl [409:1-429:73]" 
      (TIMER_ON cfi_directive "@t-nonrecursive-rule;cfi_directive;exceptions.dl [409:1-429:73];cfi_directive(Block,Offset,LocalIndex,CfiInsn,\\\"\\\",NOperands,(Op1*DataAlignmentFactor),(Op2*DataAlignmentFactor)) :- \\n   !option(\\\"no-cfi-directives\\\"),\\n   fde_instruction(FdeAddr,Index,_,_,Insn,Op1,Op2),\\n   fde_entry(FdeAddr,_,Cie,_,_,_),\\n   dwarf_to_cfi(Insn,NOperands,CfiInsn),\\n   cie_entry(Cie,_,_,DataAlignmentFactor),\\n   !cfi_operand_is_register(Insn,1),\\n   !cfi_operand_is_register(Insn,2),\\n   fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY fde_entry)) (NOT (ISEMPTY fde_instruction_block_offset))) (NOT (ISEMPTY dwarf_to_cfi))) (NOT (ISEMPTY fde_instruction))) (NOT (ISEMPTY cie_entry))) (NOT (EXISTS option ((STRING "no-cfi-directives")))))
         (FOR_IN t0 fde_instruction           (IF (AND (NOT (EXISTS cfi_operand_is_register ((TUPLE t0 4) (UNSIGNED 2)))) (NOT (EXISTS cfi_operand_is_register ((TUPLE t0 4) (UNSIGNED 1)))))
           (FOR t1 fde_entry (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 dwarf_to_cfi (INDEX  (= (TUPLE t2 0) (TUPLE t0 4)))
             (FOR t3 cie_entry (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)))
              (FOR t4 fde_instruction_block_offset (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)) (= (TUPLE t4 1) (TUPLE t0 1)))
               (INSERT ((TUPLE t4 3) (TUPLE t4 4) (TUPLE t4 2) (TUPLE t2 2) (STRING "") (TUPLE t2 1) (INTRINSIC * (TUPLE t0 5) (TUPLE t3 3)) (INTRINSIC * (TUPLE t0 6) (TUPLE t3 3))) cfi_directive)
))))          ))
        )       )
      )
     )
      (DEBUG 
 "cfi_directive(Block,Offset,LocalIndex,CfiInsn,\"\",NOperands,(Op1*DataAlignmentFactor),Op2) :- \n   !option(\"no-cfi-directives\"),\n   fde_instruction(FdeAddr,Index,_,_,Insn,Op1,Op2),\n   fde_entry(FdeAddr,_,Cie,_,_,_),\n   dwarf_to_cfi(Insn,NOperands,CfiInsn),\n   cie_entry(Cie,_,_,DataAlignmentFactor),\n   !cfi_operand_is_register(Insn,1),\n   cfi_operand_is_register(Insn,2),\n   fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset).\nin file exceptions.dl [409:1-429:73]" 
      (TIMER_ON cfi_directive "@t-nonrecursive-rule;cfi_directive;exceptions.dl [409:1-429:73];cfi_directive(Block,Offset,LocalIndex,CfiInsn,\\\"\\\",NOperands,(Op1*DataAlignmentFactor),Op2) :- \\n   !option(\\\"no-cfi-directives\\\"),\\n   fde_instruction(FdeAddr,Index,_,_,Insn,Op1,Op2),\\n   fde_entry(FdeAddr,_,Cie,_,_,_),\\n   dwarf_to_cfi(Insn,NOperands,CfiInsn),\\n   cie_entry(Cie,_,_,DataAlignmentFactor),\\n   !cfi_operand_is_register(Insn,1),\\n   cfi_operand_is_register(Insn,2),\\n   fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY fde_instruction_block_offset)) (NOT (ISEMPTY cfi_operand_is_register))) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY dwarf_to_cfi))) (NOT (ISEMPTY fde_instruction))) (NOT (ISEMPTY cie_entry))) (NOT (EXISTS option ((STRING "no-cfi-directives")))))
         (FOR_IN t0 fde_instruction           (IF (AND (EXISTS cfi_operand_is_register ((TUPLE t0 4) (UNSIGNED 2))) (NOT (EXISTS cfi_operand_is_register ((TUPLE t0 4) (UNSIGNED 1)))))
           (FOR t1 fde_entry (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 dwarf_to_cfi (INDEX  (= (TUPLE t2 0) (TUPLE t0 4)))
             (FOR t3 cie_entry (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)))
              (FOR t4 fde_instruction_block_offset (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)) (= (TUPLE t4 1) (TUPLE t0 1)))
               (INSERT ((TUPLE t4 3) (TUPLE t4 4) (TUPLE t4 2) (TUPLE t2 2) (STRING "") (TUPLE t2 1) (INTRINSIC * (TUPLE t0 5) (TUPLE t3 3)) (TUPLE t0 6)) cfi_directive)
))))          ))
        )       )
      )
     )
      (DEBUG 
 "cfi_directive(Block,Offset,LocalIndex,CfiInsn,\"\",NOperands,Op1,(Op2*DataAlignmentFactor)) :- \n   !option(\"no-cfi-directives\"),\n   fde_instruction(FdeAddr,Index,_,_,Insn,Op1,Op2),\n   fde_entry(FdeAddr,_,Cie,_,_,_),\n   dwarf_to_cfi(Insn,NOperands,CfiInsn),\n   cie_entry(Cie,_,_,DataAlignmentFactor),\n   cfi_operand_is_register(Insn,1),\n   !cfi_operand_is_register(Insn,2),\n   fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset).\nin file exceptions.dl [409:1-429:73]" 
      (TIMER_ON cfi_directive "@t-nonrecursive-rule;cfi_directive;exceptions.dl [409:1-429:73];cfi_directive(Block,Offset,LocalIndex,CfiInsn,\\\"\\\",NOperands,Op1,(Op2*DataAlignmentFactor)) :- \\n   !option(\\\"no-cfi-directives\\\"),\\n   fde_instruction(FdeAddr,Index,_,_,Insn,Op1,Op2),\\n   fde_entry(FdeAddr,_,Cie,_,_,_),\\n   dwarf_to_cfi(Insn,NOperands,CfiInsn),\\n   cie_entry(Cie,_,_,DataAlignmentFactor),\\n   cfi_operand_is_register(Insn,1),\\n   !cfi_operand_is_register(Insn,2),\\n   fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY fde_instruction_block_offset)) (NOT (ISEMPTY cfi_operand_is_register))) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY dwarf_to_cfi))) (NOT (ISEMPTY fde_instruction))) (NOT (ISEMPTY cie_entry))) (NOT (EXISTS option ((STRING "no-cfi-directives")))))
         (FOR_IN t0 fde_instruction           (IF (AND (EXISTS cfi_operand_is_register ((TUPLE t0 4) (UNSIGNED 1))) (NOT (EXISTS cfi_operand_is_register ((TUPLE t0 4) (UNSIGNED 2)))))
           (FOR t1 fde_entry (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 dwarf_to_cfi (INDEX  (= (TUPLE t2 0) (TUPLE t0 4)))
             (FOR t3 cie_entry (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)))
              (FOR t4 fde_instruction_block_offset (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)) (= (TUPLE t4 1) (TUPLE t0 1)))
               (INSERT ((TUPLE t4 3) (TUPLE t4 4) (TUPLE t4 2) (TUPLE t2 2) (STRING "") (TUPLE t2 1) (TUPLE t0 5) (INTRINSIC * (TUPLE t0 6) (TUPLE t3 3))) cfi_directive)
))))          ))
        )       )
      )
     )
      (DEBUG 
 "cfi_directive(Block,Offset,LocalIndex,CfiInsn,\"\",NOperands,Op1,Op2) :- \n   !option(\"no-cfi-directives\"),\n   fde_instruction(FdeAddr,Index,_,_,Insn,Op1,Op2),\n   fde_entry(FdeAddr,_,Cie,_,_,_),\n   dwarf_to_cfi(Insn,NOperands,CfiInsn),\n   cie_entry(Cie,_,_,_),\n   cfi_operand_is_register(Insn,1),\n   cfi_operand_is_register(Insn,2),\n   fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset).\nin file exceptions.dl [409:1-429:73]" 
      (TIMER_ON cfi_directive "@t-nonrecursive-rule;cfi_directive;exceptions.dl [409:1-429:73];cfi_directive(Block,Offset,LocalIndex,CfiInsn,\\\"\\\",NOperands,Op1,Op2) :- \\n   !option(\\\"no-cfi-directives\\\"),\\n   fde_instruction(FdeAddr,Index,_,_,Insn,Op1,Op2),\\n   fde_entry(FdeAddr,_,Cie,_,_,_),\\n   dwarf_to_cfi(Insn,NOperands,CfiInsn),\\n   cie_entry(Cie,_,_,_),\\n   cfi_operand_is_register(Insn,1),\\n   cfi_operand_is_register(Insn,2),\\n   fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY fde_instruction)) (NOT (ISEMPTY fde_instruction_block_offset))) (NOT (ISEMPTY dwarf_to_cfi))) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY cie_entry))) (NOT (ISEMPTY cfi_operand_is_register))) (NOT (EXISTS option ((STRING "no-cfi-directives")))))
         (FOR_IN t0 fde_instruction           (IF (AND (EXISTS cfi_operand_is_register ((TUPLE t0 4) (UNSIGNED 2))) (EXISTS cfi_operand_is_register ((TUPLE t0 4) (UNSIGNED 1))))
           (FOR t1 fde_entry (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (EXISTS cie_entry ((TUPLE t1 2) UNDEF UNDEF UNDEF))
             (FOR t2 dwarf_to_cfi (INDEX  (= (TUPLE t2 0) (TUPLE t0 4)))
              (FOR t3 fde_instruction_block_offset (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 1) (TUPLE t0 1)))
               (INSERT ((TUPLE t3 3) (TUPLE t3 4) (TUPLE t3 2) (TUPLE t2 2) (STRING "") (TUPLE t2 1) (TUPLE t0 5) (TUPLE t0 6)) cfi_directive)
))            ))          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON cfi_directive "@t-relation-savetime;cfi_directive;exceptions.dl [36:7-36:20];savetime;"
     (IO cfi_directive ((= IO "file") (= attributeNames "BlockAddress\tOffset\tLocalIndex\tdirective\tReferenceSym\tNargs\targ1\targ2") (= auxArity "0") (= name "cfi_directive") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 8, \"params\": [\"BlockAddress\", \"Offset\", \"LocalIndex\", \"directive\", \"ReferenceSym\", \"Nargs\", \"arg1\", \"arg2\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 8, \"types\": [\"u:address\", \"u:unsigned\", \"u:unsigned\", \"s:symbol\", \"s:symbol\", \"u:unsigned\", \"i:number\", \"i:number\"]}}")))
    )
 ) ) (STMTS     (CLEAR best_symexpr_symbol)
     (CLEAR block_information)
     (CLEAR cfi_operand_is_register)
     (CLEAR cie_entry)
     (CLEAR dwarf_to_cfi)
     (CLEAR endproc_local_index)
     (CLEAR fde_block_addresses)
     (CLEAR fde_instruction)
     (CLEAR fde_instruction_block_offset)
 ) )  )
  (SUBROUTINE cfi_operand_is_register
(STMTS     (TIMER_ON cfi_operand_is_register "@t-nonrecursive-relation;cfi_operand_is_register;exceptions.dl [442:7-442:30];"
(STMTS      (DEBUG 
 "cfi_operand_is_register(\"def_cfa\",1).\nin file exceptions.dl [444:1-444:38]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [444:1-444:38];cfi_operand_is_register(\\\"def_cfa\\\",1).;"
(QUERY
        (INSERT ((STRING "def_cfa") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"def_cfa\",2).\nin file exceptions.dl [445:1-445:38]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [445:1-445:38];cfi_operand_is_register(\\\"def_cfa\\\",2).;"
(QUERY
        (INSERT ((STRING "def_cfa") (UNSIGNED 2)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"def_cfa_sf\",1).\nin file exceptions.dl [446:1-446:41]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [446:1-446:41];cfi_operand_is_register(\\\"def_cfa_sf\\\",1).;"
(QUERY
        (INSERT ((STRING "def_cfa_sf") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"def_cfa_offset\",1).\nin file exceptions.dl [447:1-447:45]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [447:1-447:45];cfi_operand_is_register(\\\"def_cfa_offset\\\",1).;"
(QUERY
        (INSERT ((STRING "def_cfa_offset") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"def_cfa_register\",1).\nin file exceptions.dl [448:1-448:47]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [448:1-448:47];cfi_operand_is_register(\\\"def_cfa_register\\\",1).;"
(QUERY
        (INSERT ((STRING "def_cfa_register") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"offset\",1).\nin file exceptions.dl [449:1-449:37]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [449:1-449:37];cfi_operand_is_register(\\\"offset\\\",1).;"
(QUERY
        (INSERT ((STRING "offset") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"offset_extended\",1).\nin file exceptions.dl [450:1-450:46]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [450:1-450:46];cfi_operand_is_register(\\\"offset_extended\\\",1).;"
(QUERY
        (INSERT ((STRING "offset_extended") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"offset_extended_sf\",1).\nin file exceptions.dl [451:1-451:49]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [451:1-451:49];cfi_operand_is_register(\\\"offset_extended_sf\\\",1).;"
(QUERY
        (INSERT ((STRING "offset_extended_sf") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"register\",1).\nin file exceptions.dl [452:1-452:39]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [452:1-452:39];cfi_operand_is_register(\\\"register\\\",1).;"
(QUERY
        (INSERT ((STRING "register") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"register\",2).\nin file exceptions.dl [453:1-453:39]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [453:1-453:39];cfi_operand_is_register(\\\"register\\\",2).;"
(QUERY
        (INSERT ((STRING "register") (UNSIGNED 2)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"rel_offset\",1).\nin file exceptions.dl [454:1-454:41]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [454:1-454:41];cfi_operand_is_register(\\\"rel_offset\\\",1).;"
(QUERY
        (INSERT ((STRING "rel_offset") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"restore\",1).\nin file exceptions.dl [455:1-455:38]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [455:1-455:38];cfi_operand_is_register(\\\"restore\\\",1).;"
(QUERY
        (INSERT ((STRING "restore") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"restore_extended\",1).\nin file exceptions.dl [456:1-456:47]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [456:1-456:47];cfi_operand_is_register(\\\"restore_extended\\\",1).;"
(QUERY
        (INSERT ((STRING "restore_extended") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"return_column\",1).\nin file exceptions.dl [457:1-457:44]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [457:1-457:44];cfi_operand_is_register(\\\"return_column\\\",1).;"
(QUERY
        (INSERT ((STRING "return_column") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"same_value\",1).\nin file exceptions.dl [458:1-458:41]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [458:1-458:41];cfi_operand_is_register(\\\"same_value\\\",1).;"
(QUERY
        (INSERT ((STRING "same_value") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"undefined\",1).\nin file exceptions.dl [459:1-459:40]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [459:1-459:40];cfi_operand_is_register(\\\"undefined\\\",1).;"
(QUERY
        (INSERT ((STRING "undefined") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
      (DEBUG 
 "cfi_operand_is_register(\"val_offset\",1).\nin file exceptions.dl [460:1-460:41]" 
      (TIMER_ON cfi_operand_is_register "@t-nonrecursive-rule;cfi_operand_is_register;exceptions.dl [460:1-460:41];cfi_operand_is_register(\\\"val_offset\\\",1).;"
(QUERY
        (INSERT ((STRING "val_offset") (UNSIGNED 1)) cfi_operand_is_register)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE cie_encoding
(STMTS (STMTS (STMTS     (TIMER_ON cie_encoding "@t-relation-loadtime;cie_encoding;binary/elf/elf_binaries.dl [200:7-200:19];loadtime;"
     (IO cie_encoding ((= IO "file") (= attributeNames "CieAddr\tFdeEncoding\tLsdaEncoding") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "cie_encoding") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"CieAddr\", \"FdeEncoding\", \"LsdaEncoding\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:address\", \"u:unsigned\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE cie_encoding "@n-nonrecursive-relation;cie_encoding;binary/elf/elf_binaries.dl [200:7-200:19];")
 )   )  )  )
  (SUBROUTINE cie_entry
(STMTS (STMTS (STMTS     (TIMER_ON cie_entry "@t-relation-loadtime;cie_entry;binary/elf/elf_binaries.dl [193:7-193:16];loadtime;"
     (IO cie_entry ((= IO "file") (= attributeNames "CieAddr\tLength\tCodeAlignmentFactor\tDataAlignmentFactor") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "cie_entry") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"CieAddr\", \"Length\", \"CodeAlignmentFactor\", \"DataAlignmentFactor\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"u:address\", \"u:unsigned\", \"u:unsigned\", \"i:number\"]}}")))
    )
 ) (STMTS     (LOGSIZE cie_entry "@n-nonrecursive-relation;cie_entry;binary/elf/elf_binaries.dl [193:7-193:16];")
 )   )  )  )
  (SUBROUTINE cie_personality
(STMTS (STMTS (STMTS     (TIMER_ON cie_personality "@t-relation-loadtime;cie_personality;binary/elf/elf_binaries.dl [207:7-207:22];loadtime;"
     (IO cie_personality ((= IO "file") (= attributeNames "CieAddr\tPersonality\tPersonalityPos\tPersonalitySize\tEncoding") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "cie_personality") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"CieAddr\", \"Personality\", \"PersonalityPos\", \"PersonalitySize\", \"Encoding\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"u:address\", \"u:address\", \"u:address\", \"u:unsigned\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE cie_personality "@n-nonrecursive-relation;cie_personality;binary/elf/elf_binaries.dl [207:7-207:22];")
 )   )  )  )
  (SUBROUTINE cmp_immediate_to_reg
(STMTS     (TIMER_ON cmp_immediate_to_reg "@t-nonrecursive-relation;cmp_immediate_to_reg;/usr/local/src/ddisasm/src/datalog/main.dl [739:7-739:27];"
(STMTS      (DEBUG 
 "cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate) :- \n   op_immediate_and_reg(EA,Operation,Reg,Imm_index,Immediate),\n   arch.cmp_operation(Operation),\n   !arch.jump(EA).\nin file main.dl [741:1-747:7]" 
      (TIMER_ON cmp_immediate_to_reg "@t-nonrecursive-rule;cmp_immediate_to_reg;/usr/local/src/ddisasm/src/datalog/main.dl [741:1-747:7];cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate) :- \\n   op_immediate_and_reg(EA,Operation,Reg,Imm_index,Immediate),\\n   arch.cmp_operation(Operation),\\n   !arch.jump(EA).;"
(QUERY
        (IF (AND (NOT (ISEMPTY op_immediate_and_reg)) (NOT (ISEMPTY arch.cmp_operation)))
         (FOR_IN t0 op_immediate_and_reg           (IF (AND (EXISTS arch.cmp_operation ((TUPLE t0 1))) (NOT (EXISTS arch.jump ((TUPLE t0 0)))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) cmp_immediate_to_reg)
          ))
        )       )
      )
     )
      (DEBUG 
 "cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate) :- \n   op_immediate_and_reg(EA,Operation,Reg,Imm_index,Immediate),\n   arch.cmp_operation(Operation),\n   arch.jump(EA),\n   arch.jump_operation_op_index(Operation,JumpTargetIndex),\n   Imm_index != JumpTargetIndex.\nin file main.dl [741:1-747:7]" 
      (TIMER_ON cmp_immediate_to_reg "@t-nonrecursive-rule;cmp_immediate_to_reg;/usr/local/src/ddisasm/src/datalog/main.dl [741:1-747:7];cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate) :- \\n   op_immediate_and_reg(EA,Operation,Reg,Imm_index,Immediate),\\n   arch.cmp_operation(Operation),\\n   arch.jump(EA),\\n   arch.jump_operation_op_index(Operation,JumpTargetIndex),\\n   Imm_index != JumpTargetIndex.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY op_immediate_and_reg)) (NOT (ISEMPTY arch.jump_operation_op_index))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY arch.cmp_operation)))
         (FOR_IN t0 op_immediate_and_reg           (IF (AND (EXISTS arch.jump ((TUPLE t0 0))) (EXISTS arch.cmp_operation ((TUPLE t0 1))))
           (INDEXED_IF_EXISTS t1 arch.jump_operation_op_index (INDEX  (= (TUPLE t1 0) (TUPLE t0 1))) (CONSTRAINT != (TUPLE t0 3)  (TUPLE t1 1))
            (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) cmp_immediate_to_reg)
)          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE cmp_reg_to_reg
(STMTS     (TIMER_ON cmp_reg_to_reg "@t-nonrecursive-relation;cmp_reg_to_reg;pointer_reattribution.dl [118:7-118:21];"
(STMTS      (DEBUG 
 "cmp_reg_to_reg(EA,Reg1,Reg2) :- \n   code_in_block(EA,_),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.cmp_operation(Operation),\n   instruction_get_op(EA,_,Op1),\n   op_regdirect_contains_reg(Op1,Reg1),\n   instruction_get_op(EA,_,Op2),\n   Op2 != Op1,\n   op_regdirect_contains_reg(Op2,Reg2).\nin file pointer_reattribution.dl [120:1-127:41]" 
      (TIMER_ON cmp_reg_to_reg "@t-nonrecursive-rule;cmp_reg_to_reg;pointer_reattribution.dl [120:1-127:41];cmp_reg_to_reg(EA,Reg1,Reg2) :- \\n   code_in_block(EA,_),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.cmp_operation(Operation),\\n   instruction_get_op(EA,_,Op1),\\n   op_regdirect_contains_reg(Op1,Reg1),\\n   instruction_get_op(EA,_,Op2),\\n   Op2 != Op1,\\n   op_regdirect_contains_reg(Op2,Reg2).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY op_regdirect_contains_reg))) (NOT (ISEMPTY arch.cmp_operation))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 code_in_block           (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS arch.cmp_operation ((TUPLE t1 3)))
           (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
            (FOR t3 op_regdirect_contains_reg (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)))
             (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)))
              (IF (CONSTRAINT != (TUPLE t4 2)  (TUPLE t2 2))
               (FOR t5 op_regdirect_contains_reg (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)))
                (INSERT ((TUPLE t0 0) (TUPLE t3 1) (TUPLE t5 1)) cmp_reg_to_reg)
)              ))))))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE code_in_block
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON code_in_block "@t-nonrecursive-relation;code_in_block;code_inference.dl [65:7-65:20];"
(STMTS      (DEBUG 
 "code_in_block(EA,Block) :- \n   code_in_block_candidate_refined(EA,Block),\n   !discarded_block(Block,\"code\",_,_,_).\nin file code_inference.dl [1512:1-1514:42]" 
      (TIMER_ON code_in_block "@t-nonrecursive-rule;code_in_block;code_inference.dl [1512:1-1514:42];code_in_block(EA,Block) :- \\n   code_in_block_candidate_refined(EA,Block),\\n   !discarded_block(Block,\\\"code\\\",_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY code_in_block_candidate_refined))
         (FOR_IN t0 code_in_block_candidate_refined           (IF (NOT (EXISTS discarded_block ((TUPLE t0 1) (STRING "code") UNDEF UNDEF UNDEF)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) code_in_block)
          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 code_in_block       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_code_in_block)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_code_in_block "@t-recursive-relation;code_in_block;code_inference.dl [65:7-65:20];"
(STMTS       (DEBUG 
 "code_in_block(EA,Block) :- \n   overlapping_instruction(EA,Block),\n   code_in_block(Block,Block).\nin file code_inference.dl [1516:1-1518:32]" 
       (TIMER_ON @new_code_in_block "@t-recursive-rule;code_in_block;0;code_inference.dl [1516:1-1518:32];code_in_block(EA,Block) :- \\n   overlapping_instruction(EA,Block),\\n   code_in_block(Block,Block).;"
(QUERY
         (IF (AND (NOT (ISEMPTY overlapping_instruction)) (NOT (ISEMPTY @delta_code_in_block)))
          (FOR_IN t0 overlapping_instruction            (IF (AND (EXISTS @delta_code_in_block ((TUPLE t0 1) (TUPLE t0 1))) (NOT (EXISTS code_in_block ((TUPLE t0 0) (TUPLE t0 1)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @new_code_in_block)
           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_code_in_block "@t-recursive-relation;code_in_block;code_inference.dl [65:7-65:20];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_code_in_block))
 ) (STMTS      (TIMER_ON @new_code_in_block "@c-recursive-relation;code_in_block;code_inference.dl [65:7-65:20];"
(STMTS (QUERY
       (FOR_IN t0 @new_code_in_block         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) code_in_block)
)
      )
       (SWAP @delta_code_in_block @new_code_in_block)
       (CLEAR @new_code_in_block)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_code_in_block)
     (CLEAR @new_code_in_block)
 ) )  ) (STMTS     (CLEAR code_in_block_candidate_refined)
 ) )  )
  (SUBROUTINE code_in_block_candidate_refined
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON code_in_block_candidate_refined "@t-nonrecursive-relation;code_in_block_candidate_refined;code_inference.dl [514:7-514:38];"
(STMTS      (DEBUG 
 "code_in_block_candidate_refined(Block,Block) :- \n   code_in_block_candidate(Block,Block).\nin file code_inference.dl [516:1-517:42]" 
      (TIMER_ON code_in_block_candidate_refined "@t-nonrecursive-rule;code_in_block_candidate_refined;code_inference.dl [516:1-517:42];code_in_block_candidate_refined(Block,Block) :- \\n   code_in_block_candidate(Block,Block).;"
(QUERY
        (IF (NOT (ISEMPTY code_in_block_candidate))
         (FOR_IN t0 code_in_block_candidate           (IF (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 1))
           (INSERT ((TUPLE t0 0) (TUPLE t0 0)) code_in_block_candidate_refined)
          ))
        )       )
      )
     )
      (DEBUG 
 "code_in_block_candidate_refined(Block,Block) :- \n   common_tail(Block).\nin file code_inference.dl [519:1-520:24]" 
      (TIMER_ON code_in_block_candidate_refined "@t-nonrecursive-rule;code_in_block_candidate_refined;code_inference.dl [519:1-520:24];code_in_block_candidate_refined(Block,Block) :- \\n   common_tail(Block).;"
(QUERY
        (IF (NOT (ISEMPTY common_tail))
         (FOR_IN t0 common_tail           (INSERT ((TUPLE t0 0) (TUPLE t0 0)) code_in_block_candidate_refined)
)
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 code_in_block_candidate_refined       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_code_in_block_candidate_refined)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_code_in_block_candidate_refined "@t-recursive-relation;code_in_block_candidate_refined;code_inference.dl [514:7-514:38];"
(STMTS       (DEBUG 
 "code_in_block_candidate_refined(EA_next,Block) :- \n   code_in_block_candidate_refined(EA,Block),\n   next(EA,EA_next),\n   code_in_block_candidate(EA_next,OldBlock),\n   code_in_block_candidate(EA,OldBlock),\n   !code_in_block_candidate(EA_next,EA_next),\n   !common_tail(EA_next).\nin file code_inference.dl [522:1-529:27]" 
       (TIMER_ON @new_code_in_block_candidate_refined "@t-recursive-rule;code_in_block_candidate_refined;0;code_inference.dl [522:1-529:27];code_in_block_candidate_refined(EA_next,Block) :- \\n   code_in_block_candidate_refined(EA,Block),\\n   next(EA,EA_next),\\n   code_in_block_candidate(EA_next,OldBlock),\\n   code_in_block_candidate(EA,OldBlock),\\n   !code_in_block_candidate(EA_next,EA_next),\\n   !common_tail(EA_next).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY next)) (NOT (ISEMPTY code_in_block_candidate))) (NOT (ISEMPTY @delta_code_in_block_candidate_refined)))
          (FOR_IN t0 @delta_code_in_block_candidate_refined            (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (AND (NOT (EXISTS code_in_block_candidate_refined ((TUPLE t1 1) (TUPLE t0 1)))) (NOT (EXISTS code_in_block_candidate ((TUPLE t1 1) (TUPLE t1 1))))) (NOT (EXISTS common_tail ((TUPLE t1 1)))))
             (INDEXED_IF_EXISTS t2 code_in_block_candidate (INDEX  (= (TUPLE t2 0) (TUPLE t1 1))) (EXISTS code_in_block_candidate ((TUPLE t0 0) (TUPLE t2 1)))
              (INSERT ((TUPLE t1 1) (TUPLE t0 1)) @new_code_in_block_candidate_refined)
)            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_code_in_block_candidate_refined "@t-recursive-relation;code_in_block_candidate_refined;code_inference.dl [514:7-514:38];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_code_in_block_candidate_refined))
 ) (STMTS      (TIMER_ON @new_code_in_block_candidate_refined "@c-recursive-relation;code_in_block_candidate_refined;code_inference.dl [514:7-514:38];"
(STMTS (QUERY
       (FOR_IN t0 @new_code_in_block_candidate_refined         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) code_in_block_candidate_refined)
)
      )
       (SWAP @delta_code_in_block_candidate_refined @new_code_in_block_candidate_refined)
       (CLEAR @new_code_in_block_candidate_refined)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_code_in_block_candidate_refined)
     (CLEAR @new_code_in_block_candidate_refined)
 ) )  ) (STMTS     (CLEAR common_tail)
 ) )  )
  (SUBROUTINE code_in_refined_block
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON code_in_refined_block "@t-nonrecursive-relation;code_in_refined_block;code_inference_postprocess.dl [32:7-32:28];"
(STMTS      (DEBUG 
 "code_in_refined_block(EA,Block) :- \n   refined_block(Block),\n   code_in_split_block(EA,Block).\nin file code_inference_postprocess.dl [125:1-127:35]" 
      (TIMER_ON code_in_refined_block "@t-nonrecursive-rule;code_in_refined_block;code_inference_postprocess.dl [125:1-127:35];code_in_refined_block(EA,Block) :- \\n   refined_block(Block),\\n   code_in_split_block(EA,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY refined_block)) (NOT (ISEMPTY code_in_split_block)))
         (FOR_IN t0 refined_block           (FOR t1 code_in_split_block (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 0) (TUPLE t0 0)) code_in_refined_block)
))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 code_in_refined_block       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_code_in_refined_block)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_code_in_refined_block "@t-recursive-relation;code_in_refined_block;code_inference_postprocess.dl [32:7-32:28];"
(STMTS       (DEBUG 
 "code_in_refined_block(EA,Block) :- \n   block_needs_merging(OldBlock),\n   code_in_split_block(EA,OldBlock),\n   must_fallthrough(Prev,OldBlock),\n   code_in_refined_block(Prev,Block).\nin file code_inference_postprocess.dl [129:1-133:39]" 
       (TIMER_ON @new_code_in_refined_block "@t-recursive-rule;code_in_refined_block;0;code_inference_postprocess.dl [129:1-133:39];code_in_refined_block(EA,Block) :- \\n   block_needs_merging(OldBlock),\\n   code_in_split_block(EA,OldBlock),\\n   must_fallthrough(Prev,OldBlock),\\n   code_in_refined_block(Prev,Block).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY block_needs_merging)) (NOT (ISEMPTY @delta_code_in_refined_block))) (NOT (ISEMPTY must_fallthrough))) (NOT (ISEMPTY code_in_split_block)))
          (FOR_IN t0 block_needs_merging            (FOR t1 code_in_split_block (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (FOR t2 must_fallthrough (INDEX  (= (TUPLE t2 1) (TUPLE t0 0)))
             (FOR t3 @delta_code_in_refined_block (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
              (IF (NOT (EXISTS code_in_refined_block ((TUPLE t1 0) (TUPLE t3 1))))
               (INSERT ((TUPLE t1 0) (TUPLE t3 1)) @new_code_in_refined_block)
              )))))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_code_in_refined_block "@t-recursive-relation;code_in_refined_block;code_inference_postprocess.dl [32:7-32:28];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_code_in_refined_block))
 ) (STMTS      (TIMER_ON @new_code_in_refined_block "@c-recursive-relation;code_in_refined_block;code_inference_postprocess.dl [32:7-32:28];"
(STMTS (QUERY
       (FOR_IN t0 @new_code_in_refined_block         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) code_in_refined_block)
)
      )
       (SWAP @delta_code_in_refined_block @new_code_in_refined_block)
       (CLEAR @new_code_in_refined_block)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_code_in_refined_block)
     (CLEAR @new_code_in_refined_block)
 ) )  (STMTS     (TIMER_ON code_in_refined_block "@t-relation-savetime;code_in_refined_block;code_inference_postprocess.dl [32:7-32:28];savetime;"
     (IO code_in_refined_block ((= IO "file") (= attributeNames "ea\tblock") (= auxArity "0") (= name "code_in_refined_block") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"ea\", \"block\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"u:address\"]}}")))
    )
 ) ) (STMTS     (CLEAR block_needs_merging)
     (CLEAR code_in_split_block)
     (CLEAR must_fallthrough)
 ) )  )
  (SUBROUTINE code_in_split_block
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON code_in_split_block "@t-nonrecursive-relation;code_in_split_block;code_inference_postprocess.dl [54:7-54:26];"
(STMTS      (DEBUG 
 "code_in_split_block(Block,Block) :- \n   split_block(Block).\nin file code_inference_postprocess.dl [83:1-84:24]" 
      (TIMER_ON code_in_split_block "@t-nonrecursive-rule;code_in_split_block;code_inference_postprocess.dl [83:1-84:24];code_in_split_block(Block,Block) :- \\n   split_block(Block).;"
(QUERY
        (IF (NOT (ISEMPTY split_block))
         (FOR_IN t0 split_block           (INSERT ((TUPLE t0 0) (TUPLE t0 0)) code_in_split_block)
)
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 code_in_split_block       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_code_in_split_block)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_code_in_split_block "@t-recursive-relation;code_in_split_block;code_inference_postprocess.dl [54:7-54:26];"
(STMTS       (DEBUG 
 "code_in_split_block(EA,Block) :- \n   code_in_split_block(PrevEA,Block),\n   code_in_block(PrevEA,PrevBlock),\n   next(PrevEA,EA),\n   code_in_block(EA,PrevBlock),\n   !block_needs_splitting_at(EA).\nin file code_inference_postprocess.dl [86:1-91:35]" 
       (TIMER_ON @new_code_in_split_block "@t-recursive-rule;code_in_split_block;0;code_inference_postprocess.dl [86:1-91:35];code_in_split_block(EA,Block) :- \\n   code_in_split_block(PrevEA,Block),\\n   code_in_block(PrevEA,PrevBlock),\\n   next(PrevEA,EA),\\n   code_in_block(EA,PrevBlock),\\n   !block_needs_splitting_at(EA).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_code_in_split_block)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY next)))
          (FOR_IN t0 @delta_code_in_split_block            (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (AND (AND (EXISTS code_in_block ((TUPLE t2 1) (TUPLE t1 1))) (NOT (EXISTS block_needs_splitting_at ((TUPLE t2 1))))) (NOT (EXISTS code_in_split_block ((TUPLE t2 1) (TUPLE t0 1)))))
              (INSERT ((TUPLE t2 1) (TUPLE t0 1)) @new_code_in_split_block)
             ))))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_code_in_split_block "@t-recursive-relation;code_in_split_block;code_inference_postprocess.dl [54:7-54:26];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_code_in_split_block))
 ) (STMTS      (TIMER_ON @new_code_in_split_block "@c-recursive-relation;code_in_split_block;code_inference_postprocess.dl [54:7-54:26];"
(STMTS (QUERY
       (FOR_IN t0 @new_code_in_split_block         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) code_in_split_block)
)
      )
       (SWAP @delta_code_in_split_block @new_code_in_split_block)
       (CLEAR @new_code_in_split_block)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_code_in_split_block)
     (CLEAR @new_code_in_split_block)
 ) )  )  )  )
  (SUBROUTINE code_pointer_in_data
(STMTS     (TIMER_ON code_pointer_in_data "@t-nonrecursive-relation;code_pointer_in_data;symbolization.dl [161:7-161:27];"
(STMTS      (DEBUG 
 "code_pointer_in_data(EA,Val) :- \n   symbolic_data(EA,_,Val),\n   block(Val).\nin file symbolization.dl [849:1-851:16]" 
      (TIMER_ON code_pointer_in_data "@t-nonrecursive-rule;code_pointer_in_data;symbolization.dl [849:1-851:16];code_pointer_in_data(EA,Val) :- \\n   symbolic_data(EA,_,Val),\\n   block(Val).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY block)))
         (FOR_IN t0 symbolic_data           (IF (EXISTS block ((TUPLE t0 2)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 2)) code_pointer_in_data)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE code_section
(STMTS     (TIMER_ON code_section "@t-nonrecursive-relation;code_section;/usr/local/src/ddisasm/src/datalog/main.dl [820:7-820:19];"
(STMTS      (DEBUG 
 "code_section(Section) :- \n   section(Section,_,_,_,_),\n   section_property(Section,\"Executable\").\nin file main.dl [829:1-831:44]" 
      (TIMER_ON code_section "@t-nonrecursive-rule;code_section;/usr/local/src/ddisasm/src/datalog/main.dl [829:1-831:44];code_section(Section) :- \\n   section(Section,_,_,_,_),\\n   section_property(Section,\\\"Executable\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY section)) (NOT (ISEMPTY section_property)))
         (FOR_IN t0 section           (IF (EXISTS section_property ((TUPLE t0 0) (STRING "Executable")))
           (INSERT ((TUPLE t0 0)) code_section)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE common_tail
(STMTS     (TIMER_ON common_tail "@t-nonrecursive-relation;common_tail;code_inference.dl [504:7-504:18];"
(STMTS      (DEBUG 
 "common_tail(EA) :- \n   code_in_block_candidate(EA,Block),\n   code_in_block_candidate(EA,Block2),\n   Block != Block2,\n   next(EA_prev,EA),\n   code_in_block_candidate(EA_prev,Block),\n   !code_in_block_candidate(EA_prev,Block2).\nin file code_inference.dl [506:1-512:46]" 
      (TIMER_ON common_tail "@t-nonrecursive-rule;common_tail;code_inference.dl [506:1-512:46];common_tail(EA) :- \\n   code_in_block_candidate(EA,Block),\\n   code_in_block_candidate(EA,Block2),\\n   Block != Block2,\\n   next(EA_prev,EA),\\n   code_in_block_candidate(EA_prev,Block),\\n   !code_in_block_candidate(EA_prev,Block2).;"
(QUERY
        (IF (AND (NOT (ISEMPTY code_in_block_candidate)) (NOT (ISEMPTY next)))
         (FOR_IN t0 code_in_block_candidate           (FOR t1 code_in_block_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (CONSTRAINT != (TUPLE t0 1)  (TUPLE t1 1))
            (FOR t2 next (INDEX  (= (TUPLE t2 1) (TUPLE t0 0)))
             (IF (AND (EXISTS code_in_block_candidate ((TUPLE t2 0) (TUPLE t0 1))) (NOT (EXISTS code_in_block_candidate ((TUPLE t2 0) (TUPLE t1 1)))))
              (INSERT ((TUPLE t0 0)) common_tail)
             ))           )))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE composite_data_access
(STMTS (STMTS     (TIMER_ON composite_data_access "@t-nonrecursive-relation;composite_data_access;code_inference.dl [534:7-534:28];"
(STMTS      (DEBUG 
 "composite_data_access(EA,EA_load,as((as(RefAddr, number)+Offset), address),Size) :- \n   arch.pc_relative_addr(EA,Reg,RefAddr),\n   straight_line_def_used(EA,Reg,EA_load,_),\n   arch.reg_relative_load(EA_load,Reg,Offset,Size).\nin file code_inference.dl [536:1-540:52]" 
      (TIMER_ON composite_data_access "@t-nonrecursive-rule;composite_data_access;code_inference.dl [536:1-540:52];composite_data_access(EA,EA_load,as((as(RefAddr, number)+Offset), address),Size) :- \\n   arch.pc_relative_addr(EA,Reg,RefAddr),\\n   straight_line_def_used(EA,Reg,EA_load,_),\\n   arch.reg_relative_load(EA_load,Reg,Offset,Size).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY arch.reg_relative_load)) (NOT (ISEMPTY arch.pc_relative_addr))) (NOT (ISEMPTY straight_line_def_used)))
         (FOR_IN t0 arch.pc_relative_addr           (FOR t1 straight_line_def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (FOR t2 arch.reg_relative_load (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 2) (INTRINSIC + (TUPLE t0 2) (TUPLE t2 2)) (TUPLE t2 3)) composite_data_access)
)))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.reg_relative_load)
     (CLEAR straight_line_def_used)
 ) )  )
  (SUBROUTINE conditional_jump
(STMTS     (TIMER_ON conditional_jump "@t-nonrecursive-relation;conditional_jump;/usr/local/src/ddisasm/src/datalog/main.dl [512:7-512:23];"
(STMTS      (DEBUG 
 "conditional_jump(EA) :- \n   arch.jump(EA),\n   arch.conditional(EA,_).\nin file main.dl [514:1-516:28]" 
      (TIMER_ON conditional_jump "@t-nonrecursive-rule;conditional_jump;/usr/local/src/ddisasm/src/datalog/main.dl [514:1-516:28];conditional_jump(EA) :- \\n   arch.jump(EA),\\n   arch.conditional(EA,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.jump)) (NOT (ISEMPTY arch.conditional)))
         (FOR_IN t0 arch.jump           (IF (EXISTS arch.conditional ((TUPLE t0 0) UNDEF))
           (INSERT ((TUPLE t0 0)) conditional_jump)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE conditional_return
(STMTS     (TIMER_ON conditional_return "@t-nonrecursive-relation;conditional_return;/usr/local/src/ddisasm/src/datalog/main.dl [892:7-892:25];"
(STMTS      (DEBUG 
 "conditional_return(EA) :- \n   arch.return(EA),\n   arch.conditional(EA,_).\nin file main.dl [894:1-896:28]" 
      (TIMER_ON conditional_return "@t-nonrecursive-rule;conditional_return;/usr/local/src/ddisasm/src/datalog/main.dl [894:1-896:28];conditional_return(EA) :- \\n   arch.return(EA),\\n   arch.conditional(EA,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.return)) (NOT (ISEMPTY arch.conditional)))
         (FOR_IN t0 arch.return           (IF (EXISTS arch.conditional ((TUPLE t0 0) UNDEF))
           (INSERT ((TUPLE t0 0)) conditional_return)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE copy_relocated_symbol
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON copy_relocated_symbol "@t-nonrecursive-relation;copy_relocated_symbol;binary/elf/symbolization.dl [379:7-379:28];"
(STMTS      (DEBUG 
 "copy_relocated_symbol(EA,Name) :- \n   relocation(EA,\"COPY\",Name,_,_,_,_).\nin file symbolization.dl [382:1-383:40]" 
      (TIMER_ON copy_relocated_symbol "@t-nonrecursive-rule;copy_relocated_symbol;binary/elf/symbolization.dl [382:1-383:40];copy_relocated_symbol(EA,Name) :- \\n   relocation(EA,\\\"COPY\\\",Name,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "COPY")))
          (INSERT ((TUPLE t0 0) (TUPLE t0 2)) copy_relocated_symbol)
)        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 copy_relocated_symbol       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_copy_relocated_symbol)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_copy_relocated_symbol "@t-recursive-relation;copy_relocated_symbol;binary/elf/symbolization.dl [379:7-379:28];"
(STMTS       (DEBUG 
 "copy_relocated_symbol(EA,Name) :- \n   copy_relocated_symbol(EA,Name2),\n   symbol(EA,Size,Type,_,_,_,_,_,Name2),\n   symbol(EA,Size,Type,_,_,_,_,_,Name),\n   Name != Name2.\nin file symbolization.dl [385:1-389:19]" 
       (TIMER_ON @new_copy_relocated_symbol "@t-recursive-rule;copy_relocated_symbol;0;binary/elf/symbolization.dl [385:1-389:19];copy_relocated_symbol(EA,Name) :- \\n   copy_relocated_symbol(EA,Name2),\\n   symbol(EA,Size,Type,_,_,_,_,_,Name2),\\n   symbol(EA,Size,Type,_,_,_,_,_,Name),\\n   Name != Name2.;"
(QUERY
         (IF (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY @delta_copy_relocated_symbol)))
          (FOR_IN t0 @delta_copy_relocated_symbol            (FOR t1 symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 8) (TUPLE t0 1)))
            (FOR t2 symbol (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 2) (TUPLE t1 2)))
             (IF (AND (CONSTRAINT != (TUPLE t2 8)  (TUPLE t0 1)) (NOT (EXISTS copy_relocated_symbol ((TUPLE t0 0) (TUPLE t2 8)))))
              (INSERT ((TUPLE t0 0) (TUPLE t2 8)) @new_copy_relocated_symbol)
             ))))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_copy_relocated_symbol "@t-recursive-relation;copy_relocated_symbol;binary/elf/symbolization.dl [379:7-379:28];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_copy_relocated_symbol))
 ) (STMTS      (TIMER_ON @new_copy_relocated_symbol "@c-recursive-relation;copy_relocated_symbol;binary/elf/symbolization.dl [379:7-379:28];"
(STMTS (QUERY
       (FOR_IN t0 @new_copy_relocated_symbol         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) copy_relocated_symbol)
)
      )
       (SWAP @delta_copy_relocated_symbol @new_copy_relocated_symbol)
       (CLEAR @new_copy_relocated_symbol)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_copy_relocated_symbol)
     (CLEAR @new_copy_relocated_symbol)
 ) )  (STMTS     (TIMER_ON copy_relocated_symbol "@t-relation-savetime;copy_relocated_symbol;binary/elf/symbolization.dl [379:7-379:28];savetime;"
     (IO copy_relocated_symbol ((= IO "file") (= attributeNames "EA\tName") (= auxArity "0") (= name "copy_relocated_symbol") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"EA\", \"Name\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"s:symbol\"]}}")))
    )
 ) ) (STMTS     (CLEAR copy_relocated_symbol)
 ) )  )
  (SUBROUTINE dap_location
(STMTS     (TIMER_ON dap_location "@t-nonrecursive-relation;dap_location;data_access_analysis.dl [300:7-300:19];"
(STMTS      (DEBUG 
 "dap_location(Address,Size) :- \n   data_access_pattern_candidate_refined(Address,Size,_,_).\nin file data_access_analysis.dl [302:1-303:61]" 
      (TIMER_ON dap_location "@t-nonrecursive-rule;dap_location;data_access_analysis.dl [302:1-303:61];dap_location(Address,Size) :- \\n   data_access_pattern_candidate_refined(Address,Size,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY data_access_pattern_candidate_refined))
         (FOR_IN t0 data_access_pattern_candidate_refined           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) dap_location)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE dap_max_mult
(STMTS (STMTS     (TIMER_ON dap_max_mult "@t-nonrecursive-relation;dap_max_mult;data_access_analysis.dl [308:7-308:19];"
(STMTS      (DEBUG 
 "dap_max_mult(Address,Size,@generator_0) :- \n   dap_location(Address,Size),\n   @generator_0 = max Mult : { data_access_pattern_candidate_refined(Address,Size,Mult,+underscore_1006) }.\nin file data_access_analysis.dl [310:1-312:81]" 
      (TIMER_ON dap_max_mult "@t-nonrecursive-rule;dap_max_mult;data_access_analysis.dl [310:1-312:81];dap_max_mult(Address,Size,@generator_0) :- \\n   dap_location(Address,Size),\\n   @generator_0 = max Mult : { data_access_pattern_candidate_refined(Address,Size,Mult,+underscore_1006) }.;"
(QUERY
        (IF (NOT (ISEMPTY dap_location))
         (FOR_IN t0 dap_location           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MAX  (TUPLE t1 2) ))  t1 data_access_pattern_candidate_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1))) TRUE 
           (IF (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 0)) dap_max_mult)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR dap_location)
 ) )  )
  (SUBROUTINE data_access
(STMTS     (TIMER_ON data_access "@t-nonrecursive-relation;data_access;data_access_analysis.dl [74:7-74:18];"
(STMTS      (DEBUG 
 "data_access(EA,Op_index,RegSegment,RegBase,RegIndex,Mult,Offset,Size) :- \n   code_in_block(EA,_),\n   instruction_get_op(EA,Op_index,Op),\n   op_indirect_mapped(Op,RegSegment,RegBase,RegIndex,Mult,Offset,_),\n   instruction_memory_access_size(EA,Op_index,Size).\nin file data_access_analysis.dl [76:1-80:54]" 
      (TIMER_ON data_access "@t-nonrecursive-rule;data_access;data_access_analysis.dl [76:1-80:54];data_access(EA,Op_index,RegSegment,RegBase,RegIndex,Mult,Offset,Size) :- \\n   code_in_block(EA,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   op_indirect_mapped(Op,RegSegment,RegBase,RegIndex,Mult,Offset,_),\\n   instruction_memory_access_size(EA,Op_index,Size).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY instruction_memory_access_size))) (NOT (ISEMPTY op_indirect_mapped))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 op_indirect_mapped (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
            (FOR t3 instruction_memory_access_size (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 1) (TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 1) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t2 4) (TUPLE t2 5) (TUPLE t3 2)) data_access)
))))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE data_access_pattern
(STMTS (STMTS     (TIMER_ON data_access_pattern "@t-nonrecursive-relation;data_access_pattern;data_access_analysis.dl [163:7-163:26];"
(STMTS      (DEBUG 
 "data_access_pattern(Address,Size,Multiplier,From) :- \n   data_access_pattern_candidate_refined(Address,Size,Multiplier,From),\n   dap_max_mult(Address,Size,Multiplier).\nin file data_access_analysis.dl [314:1-316:43]" 
      (TIMER_ON data_access_pattern "@t-nonrecursive-rule;data_access_pattern;data_access_analysis.dl [314:1-316:43];data_access_pattern(Address,Size,Multiplier,From) :- \\n   data_access_pattern_candidate_refined(Address,Size,Multiplier,From),\\n   dap_max_mult(Address,Size,Multiplier).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_access_pattern_candidate_refined)) (NOT (ISEMPTY dap_max_mult)))
         (FOR_IN t0 data_access_pattern_candidate_refined           (IF (EXISTS dap_max_mult ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) data_access_pattern)
          ))
        )       )
      )
     )
      (DEBUG 
 "data_access_pattern(Address,Size,Multiplier,From) :- \n   data_access_pattern_candidate_refined(Address,Size,Multiplier,From),\n   Multiplier = as(Size, number).\nin file data_access_analysis.dl [318:1-320:34]" 
      (TIMER_ON data_access_pattern "@t-nonrecursive-rule;data_access_pattern;data_access_analysis.dl [318:1-320:34];data_access_pattern(Address,Size,Multiplier,From) :- \\n   data_access_pattern_candidate_refined(Address,Size,Multiplier,From),\\n   Multiplier = as(Size, number).;"
(QUERY
        (IF (NOT (ISEMPTY data_access_pattern_candidate_refined))
         (FOR_IN t0 data_access_pattern_candidate_refined           (IF (CONSTRAINT = (TUPLE t0 2)  (TUPLE t0 1))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) data_access_pattern)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR dap_max_mult)
 ) )  )
  (SUBROUTINE data_access_pattern_candidate
(STMTS (STMTS     (TIMER_ON data_access_pattern_candidate "@t-nonrecursive-relation;data_access_pattern_candidate;data_access_analysis.dl [168:7-168:36];"
(STMTS      (DEBUG 
 "data_access_pattern_candidate(Address,Size,0,EA) :- \n   simple_data_access_pattern(Address,_,Size,EA).\nin file data_access_analysis.dl [220:1-221:51]" 
      (TIMER_ON data_access_pattern_candidate "@t-nonrecursive-rule;data_access_pattern_candidate;data_access_analysis.dl [220:1-221:51];data_access_pattern_candidate(Address,Size,0,EA) :- \\n   simple_data_access_pattern(Address,_,Size,EA).;"
(QUERY
        (IF (NOT (ISEMPTY simple_data_access_pattern))
         (FOR_IN t0 simple_data_access_pattern           (INSERT ((TUPLE t0 0) (TUPLE t0 2) (NUMBER 0) (TUPLE t0 3)) data_access_pattern_candidate)
)
        )       )
      )
     )
      (DEBUG 
 "data_access_pattern_candidate(as(((Offset1+(Offset2*Mult))+Offset3), address),Size,(Mult*Mult2),EA) :- \n   data_access(EA,Op_index,\"NONE\",RegBase,RegMult,Mult,Offset1,Size),\n   !simple_data_access_pattern(_,Op_index,_,EA),\n   RegMult != \"NONE\",\n   RegMult != RegBase,\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,Offset2,_),\n   value_reg_at_operand(EA,Op_index,RegBase,_,0,Offset3,\"complete\"),\n   (Mult*Mult2) > 0,\n   as(Size, number) <= (Mult*Mult2),\n   data_segment(Beg,End),\n   as(((Offset1+(Offset2*Mult))+Offset3), address) >= Beg,\n   as(((Offset1+(Offset2*Mult))+Offset3), address) <= End.\nin file data_access_analysis.dl [224:1-241:20]" 
      (TIMER_ON data_access_pattern_candidate "@t-nonrecursive-rule;data_access_pattern_candidate;data_access_analysis.dl [224:1-241:20];data_access_pattern_candidate(as(((Offset1+(Offset2*Mult))+Offset3), address),Size,(Mult*Mult2),EA) :- \\n   data_access(EA,Op_index,\\\"NONE\\\",RegBase,RegMult,Mult,Offset1,Size),\\n   !simple_data_access_pattern(_,Op_index,_,EA),\\n   RegMult != \\\"NONE\\\",\\n   RegMult != RegBase,\\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,Offset2,_),\\n   value_reg_at_operand(EA,Op_index,RegBase,_,0,Offset3,\\\"complete\\\"),\\n   (Mult*Mult2) > 0,\\n   as(Size, number) <= (Mult*Mult2),\\n   data_segment(Beg,End),\\n   as(((Offset1+(Offset2*Mult))+Offset3), address) >= Beg,\\n   as(((Offset1+(Offset2*Mult))+Offset3), address) <= End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY value_reg_at_operand)))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")))
          (IF (AND (AND (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE")) (CONSTRAINT != (TUPLE t0 4)  (TUPLE t0 3))) (NOT (EXISTS simple_data_access_pattern (UNDEF (TUPLE t0 1) UNDEF (TUPLE t0 0)))))
           (FOR t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 4)))
            (IF (AND (CONSTRAINT > (INTRINSIC * (TUPLE t0 5) (TUPLE t1 4))  (NUMBER 0)) (CONSTRAINT <= (TUPLE t0 7)  (INTRINSIC * (TUPLE t0 5) (TUPLE t1 4))))
             (FOR t2 value_reg_at_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 3)) (= (TUPLE t2 4) (NUMBER 0)) (= (TUPLE t2 6) (STRING "complete")))
              (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 0)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 1))) 
               (INSERT ((INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5)) (TUPLE t0 7) (INTRINSIC * (TUPLE t0 5) (TUPLE t1 4)) (TUPLE t0 0)) data_access_pattern_candidate)
))            ))          ))        )       )
      )
     )
      (DEBUG 
 "data_access_pattern_candidate(as(((Offset1+(Offset2*Mult))+Offset3), address),Size,(Mult*Mult2),EA) :- \n   data_access(EA,Op_index,\"NONE\",RegBase,RegMult,Mult,Offset1,Size),\n   !simple_data_access_pattern(_,Op_index,_,EA),\n   RegMult != \"NONE\",\n   RegMult != RegBase,\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,Offset2,_),\n   value_reg_at_operand(EA,Op_index,RegBase,_,0,Offset3,\"complete\"),\n   (Mult*Mult2) = 0,\n   data_segment(Beg,End),\n   as(((Offset1+(Offset2*Mult))+Offset3), address) >= Beg,\n   as(((Offset1+(Offset2*Mult))+Offset3), address) <= End.\nin file data_access_analysis.dl [224:1-241:20]" 
      (TIMER_ON data_access_pattern_candidate "@t-nonrecursive-rule;data_access_pattern_candidate;data_access_analysis.dl [224:1-241:20];data_access_pattern_candidate(as(((Offset1+(Offset2*Mult))+Offset3), address),Size,(Mult*Mult2),EA) :- \\n   data_access(EA,Op_index,\\\"NONE\\\",RegBase,RegMult,Mult,Offset1,Size),\\n   !simple_data_access_pattern(_,Op_index,_,EA),\\n   RegMult != \\\"NONE\\\",\\n   RegMult != RegBase,\\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,Offset2,_),\\n   value_reg_at_operand(EA,Op_index,RegBase,_,0,Offset3,\\\"complete\\\"),\\n   (Mult*Mult2) = 0,\\n   data_segment(Beg,End),\\n   as(((Offset1+(Offset2*Mult))+Offset3), address) >= Beg,\\n   as(((Offset1+(Offset2*Mult))+Offset3), address) <= End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY value_reg_at_operand)))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")))
          (IF (AND (AND (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE")) (CONSTRAINT != (TUPLE t0 4)  (TUPLE t0 3))) (NOT (EXISTS simple_data_access_pattern (UNDEF (TUPLE t0 1) UNDEF (TUPLE t0 0)))))
           (FOR t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 4)))
            (IF (CONSTRAINT = (INTRINSIC * (TUPLE t0 5) (TUPLE t1 4))  (NUMBER 0))
             (FOR t2 value_reg_at_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 3)) (= (TUPLE t2 4) (NUMBER 0)) (= (TUPLE t2 6) (STRING "complete")))
              (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 0)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 1))) 
               (INSERT ((INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5)) (TUPLE t0 7) (INTRINSIC * (TUPLE t0 5) (TUPLE t1 4)) (TUPLE t0 0)) data_access_pattern_candidate)
))            ))          ))        )       )
      )
     )
      (DEBUG 
 "data_access_pattern_candidate(as(((Offset1+(Offset2*Mult))+Offset3), address),Size,(Mult*Mult2),EA) :- \n   data_access(EA,Op_index,\"NONE\",RegBase,RegMult,Mult,Offset1,Size),\n   !simple_data_access_pattern(_,Op_index,_,EA),\n   RegMult != \"NONE\",\n   RegMult != RegBase,\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,Offset2,_),\n   value_reg_at_operand(EA,Op_index,RegBase,_,0,Offset3,\"complete\"),\n   (Mult*Mult2) < 0,\n   as(Size, number) <= -((Mult*Mult2)),\n   data_segment(Beg,End),\n   as(((Offset1+(Offset2*Mult))+Offset3), address) >= Beg,\n   as(((Offset1+(Offset2*Mult))+Offset3), address) <= End.\nin file data_access_analysis.dl [224:1-241:20]" 
      (TIMER_ON data_access_pattern_candidate "@t-nonrecursive-rule;data_access_pattern_candidate;data_access_analysis.dl [224:1-241:20];data_access_pattern_candidate(as(((Offset1+(Offset2*Mult))+Offset3), address),Size,(Mult*Mult2),EA) :- \\n   data_access(EA,Op_index,\\\"NONE\\\",RegBase,RegMult,Mult,Offset1,Size),\\n   !simple_data_access_pattern(_,Op_index,_,EA),\\n   RegMult != \\\"NONE\\\",\\n   RegMult != RegBase,\\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,Offset2,_),\\n   value_reg_at_operand(EA,Op_index,RegBase,_,0,Offset3,\\\"complete\\\"),\\n   (Mult*Mult2) < 0,\\n   as(Size, number) <= -((Mult*Mult2)),\\n   data_segment(Beg,End),\\n   as(((Offset1+(Offset2*Mult))+Offset3), address) >= Beg,\\n   as(((Offset1+(Offset2*Mult))+Offset3), address) <= End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY value_reg_at_operand)))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")))
          (IF (AND (AND (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE")) (CONSTRAINT != (TUPLE t0 4)  (TUPLE t0 3))) (NOT (EXISTS simple_data_access_pattern (UNDEF (TUPLE t0 1) UNDEF (TUPLE t0 0)))))
           (FOR t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 4)))
            (IF (AND (CONSTRAINT < (INTRINSIC * (TUPLE t0 5) (TUPLE t1 4))  (NUMBER 0)) (CONSTRAINT <= (TUPLE t0 7)  (INTRINSIC - (INTRINSIC * (TUPLE t0 5) (TUPLE t1 4)))))
             (FOR t2 value_reg_at_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 3)) (= (TUPLE t2 4) (NUMBER 0)) (= (TUPLE t2 6) (STRING "complete")))
              (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 0)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 1))) 
               (INSERT ((INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5)) (TUPLE t0 7) (INTRINSIC * (TUPLE t0 5) (TUPLE t1 4)) (TUPLE t0 0)) data_access_pattern_candidate)
))            ))          ))        )       )
      )
     )
      (DEBUG 
 "data_access_pattern_candidate(as(((Offset1+(Offset2*Mult2))+Offset3), address),Size,Mult,EA) :- \n   data_access(EA,Op_index,\"NONE\",RegBase,RegMult,Mult2,Offset1,Size),\n   !simple_data_access_pattern(_,Op_index,_,EA),\n   RegMult != RegBase,\n   value_reg_at_operand(EA,Op_index,RegMult,_,0,Offset2,\"complete\"),\n   value_reg_at_operand(EA,Op_index,RegBase,_,Mult,Offset3,_),\n   Mult > 0,\n   as(Size, number) <= Mult,\n   data_segment(Beg,End),\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) >= Beg,\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) <= End.\nin file data_access_analysis.dl [244:1-260:20]" 
      (TIMER_ON data_access_pattern_candidate "@t-nonrecursive-rule;data_access_pattern_candidate;data_access_analysis.dl [244:1-260:20];data_access_pattern_candidate(as(((Offset1+(Offset2*Mult2))+Offset3), address),Size,Mult,EA) :- \\n   data_access(EA,Op_index,\\\"NONE\\\",RegBase,RegMult,Mult2,Offset1,Size),\\n   !simple_data_access_pattern(_,Op_index,_,EA),\\n   RegMult != RegBase,\\n   value_reg_at_operand(EA,Op_index,RegMult,_,0,Offset2,\\\"complete\\\"),\\n   value_reg_at_operand(EA,Op_index,RegBase,_,Mult,Offset3,_),\\n   Mult > 0,\\n   as(Size, number) <= Mult,\\n   data_segment(Beg,End),\\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) >= Beg,\\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) <= End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY value_reg_at_operand)))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")))
          (IF (AND (CONSTRAINT != (TUPLE t0 4)  (TUPLE t0 3)) (NOT (EXISTS simple_data_access_pattern (UNDEF (TUPLE t0 1) UNDEF (TUPLE t0 0)))))
           (FOR t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 4)) (= (TUPLE t1 4) (NUMBER 0)) (= (TUPLE t1 6) (STRING "complete")))
            (FOR t2 value_reg_at_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 3)) (<= (INTRINSIC max (TUPLE t0 7) (NUMBER 0)) (TUPLE t2 4) ))
             (IF (CONSTRAINT != (TUPLE t2 4)  (NUMBER 0))
              (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 0)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 1))) 
               (INSERT ((INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5)) (TUPLE t0 7) (TUPLE t2 4) (TUPLE t0 0)) data_access_pattern_candidate)
)             )))          ))        )       )
      )
     )
      (DEBUG 
 "data_access_pattern_candidate(as(((Offset1+(Offset2*Mult2))+Offset3), address),Size,Mult,EA) :- \n   data_access(EA,Op_index,\"NONE\",RegBase,RegMult,Mult2,Offset1,Size),\n   !simple_data_access_pattern(_,Op_index,_,EA),\n   RegMult != RegBase,\n   value_reg_at_operand(EA,Op_index,RegMult,_,0,Offset2,\"complete\"),\n   value_reg_at_operand(EA,Op_index,RegBase,_,Mult,Offset3,_),\n   Mult = 0,\n   data_segment(Beg,End),\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) >= Beg,\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) <= End.\nin file data_access_analysis.dl [244:1-260:20]" 
      (TIMER_ON data_access_pattern_candidate "@t-nonrecursive-rule;data_access_pattern_candidate;data_access_analysis.dl [244:1-260:20];data_access_pattern_candidate(as(((Offset1+(Offset2*Mult2))+Offset3), address),Size,Mult,EA) :- \\n   data_access(EA,Op_index,\\\"NONE\\\",RegBase,RegMult,Mult2,Offset1,Size),\\n   !simple_data_access_pattern(_,Op_index,_,EA),\\n   RegMult != RegBase,\\n   value_reg_at_operand(EA,Op_index,RegMult,_,0,Offset2,\\\"complete\\\"),\\n   value_reg_at_operand(EA,Op_index,RegBase,_,Mult,Offset3,_),\\n   Mult = 0,\\n   data_segment(Beg,End),\\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) >= Beg,\\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) <= End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY value_reg_at_operand)))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")))
          (IF (AND (CONSTRAINT != (TUPLE t0 4)  (TUPLE t0 3)) (NOT (EXISTS simple_data_access_pattern (UNDEF (TUPLE t0 1) UNDEF (TUPLE t0 0)))))
           (FOR t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 4)) (= (TUPLE t1 4) (NUMBER 0)) (= (TUPLE t1 6) (STRING "complete")))
            (FOR t2 value_reg_at_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 3)) (= (TUPLE t2 4) (NUMBER 0)))
             (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 0)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 1))) 
              (INSERT ((INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5)) (TUPLE t0 7) (TUPLE t2 4) (TUPLE t0 0)) data_access_pattern_candidate)
)))          ))        )       )
      )
     )
      (DEBUG 
 "data_access_pattern_candidate(as(((Offset1+(Offset2*Mult2))+Offset3), address),Size,Mult,EA) :- \n   data_access(EA,Op_index,\"NONE\",RegBase,RegMult,Mult2,Offset1,Size),\n   !simple_data_access_pattern(_,Op_index,_,EA),\n   RegMult != RegBase,\n   value_reg_at_operand(EA,Op_index,RegMult,_,0,Offset2,\"complete\"),\n   value_reg_at_operand(EA,Op_index,RegBase,_,Mult,Offset3,_),\n   Mult < 0,\n   as(Size, number) <= -(Mult),\n   data_segment(Beg,End),\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) >= Beg,\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) <= End.\nin file data_access_analysis.dl [244:1-260:20]" 
      (TIMER_ON data_access_pattern_candidate "@t-nonrecursive-rule;data_access_pattern_candidate;data_access_analysis.dl [244:1-260:20];data_access_pattern_candidate(as(((Offset1+(Offset2*Mult2))+Offset3), address),Size,Mult,EA) :- \\n   data_access(EA,Op_index,\\\"NONE\\\",RegBase,RegMult,Mult2,Offset1,Size),\\n   !simple_data_access_pattern(_,Op_index,_,EA),\\n   RegMult != RegBase,\\n   value_reg_at_operand(EA,Op_index,RegMult,_,0,Offset2,\\\"complete\\\"),\\n   value_reg_at_operand(EA,Op_index,RegBase,_,Mult,Offset3,_),\\n   Mult < 0,\\n   as(Size, number) <= -(Mult),\\n   data_segment(Beg,End),\\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) >= Beg,\\n   as(((Offset1+(Offset2*Mult2))+Offset3), address) <= End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY value_reg_at_operand)))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")))
          (IF (AND (CONSTRAINT != (TUPLE t0 4)  (TUPLE t0 3)) (NOT (EXISTS simple_data_access_pattern (UNDEF (TUPLE t0 1) UNDEF (TUPLE t0 0)))))
           (FOR t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 4)) (= (TUPLE t1 4) (NUMBER 0)) (= (TUPLE t1 6) (STRING "complete")))
            (FOR t2 value_reg_at_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 3)) (<= (TUPLE t2 4) (NUMBER 0)))
             (IF (AND (CONSTRAINT <= (TUPLE t0 7)  (INTRINSIC - (TUPLE t2 4))) (CONSTRAINT != (TUPLE t2 4)  (NUMBER 0)))
              (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 0)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5))  (TUPLE t3 1))) 
               (INSERT ((INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t2 5)) (TUPLE t0 7) (TUPLE t2 4) (TUPLE t0 0)) data_access_pattern_candidate)
)             )))          ))        )       )
      )
     )
      (DEBUG 
 "data_access_pattern_candidate(as(((Offset1+(Offset2*Mult))+Offset2), address),Size,((Mult*Mult2)+Mult2),EA) :- \n   data_access(EA,Op_index,\"NONE\",Reg,Reg,Mult,Offset1,Size),\n   Reg != \"NONE\",\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,Offset2,_),\n   as(Size, number) <= ((Mult*Mult2)+Mult2),\n   data_segment(Beg,End),\n   as(((Offset1+(Offset2*Mult))+Offset2), address) >= Beg,\n   as(((Offset1+(Offset2*Mult))+Offset2), address) <= End.\nin file data_access_analysis.dl [263:1-272:20]" 
      (TIMER_ON data_access_pattern_candidate "@t-nonrecursive-rule;data_access_pattern_candidate;data_access_analysis.dl [263:1-272:20];data_access_pattern_candidate(as(((Offset1+(Offset2*Mult))+Offset2), address),Size,((Mult*Mult2)+Mult2),EA) :- \\n   data_access(EA,Op_index,\\\"NONE\\\",Reg,Reg,Mult,Offset1,Size),\\n   Reg != \\\"NONE\\\",\\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,Offset2,_),\\n   as(Size, number) <= ((Mult*Mult2)+Mult2),\\n   data_segment(Beg,End),\\n   as(((Offset1+(Offset2*Mult))+Offset2), address) >= Beg,\\n   as(((Offset1+(Offset2*Mult))+Offset2), address) <= End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_segment)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY value_reg_at_operand)))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")))
          (IF (AND (CONSTRAINT = (TUPLE t0 3)  (TUPLE t0 4)) (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE")))
           (FOR t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 3)))
            (IF (CONSTRAINT <= (TUPLE t0 7)  (INTRINSIC + (INTRINSIC * (TUPLE t0 5) (TUPLE t1 4)) (TUPLE t1 4)))
             (IF_EXISTS t2 data_segment (AND (CONSTRAINT >= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t1 5))  (TUPLE t2 0)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t1 5))  (TUPLE t2 1))) 
              (INSERT ((INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t1 5)) (TUPLE t0 7) (INTRINSIC + (INTRINSIC * (TUPLE t0 5) (TUPLE t1 4)) (TUPLE t1 4)) (TUPLE t0 0)) data_access_pattern_candidate)
)            ))          ))        )       )
      )
     )
      (DEBUG 
 "data_access_pattern_candidate(as(((Offset1+(Offset2*Mult))+Offset2), address),Size,0,EA) :- \n   data_access(EA,Op_index,\"NONE\",Reg,Reg,Mult,Offset1,Size),\n   Reg != \"NONE\",\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,Offset2,_),\n   0 = ((Mult*Mult2)+Mult2),\n   data_segment(Beg,End),\n   as(((Offset1+(Offset2*Mult))+Offset2), address) >= Beg,\n   as(((Offset1+(Offset2*Mult))+Offset2), address) <= End.\nin file data_access_analysis.dl [263:1-272:20]" 
      (TIMER_ON data_access_pattern_candidate "@t-nonrecursive-rule;data_access_pattern_candidate;data_access_analysis.dl [263:1-272:20];data_access_pattern_candidate(as(((Offset1+(Offset2*Mult))+Offset2), address),Size,0,EA) :- \\n   data_access(EA,Op_index,\\\"NONE\\\",Reg,Reg,Mult,Offset1,Size),\\n   Reg != \\\"NONE\\\",\\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,Offset2,_),\\n   0 = ((Mult*Mult2)+Mult2),\\n   data_segment(Beg,End),\\n   as(((Offset1+(Offset2*Mult))+Offset2), address) >= Beg,\\n   as(((Offset1+(Offset2*Mult))+Offset2), address) <= End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_segment)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY value_reg_at_operand)))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")))
          (IF (AND (CONSTRAINT = (TUPLE t0 3)  (TUPLE t0 4)) (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE")))
           (FOR t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 3)))
            (IF (CONSTRAINT = (NUMBER 0)  (INTRINSIC + (INTRINSIC * (TUPLE t0 5) (TUPLE t1 4)) (TUPLE t1 4)))
             (IF_EXISTS t2 data_segment (AND (CONSTRAINT >= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t1 5))  (TUPLE t2 0)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t1 5))  (TUPLE t2 1))) 
              (INSERT ((INTRINSIC + (INTRINSIC + (TUPLE t0 6) (INTRINSIC * (TUPLE t1 5) (TUPLE t0 5))) (TUPLE t1 5)) (TUPLE t0 7) (NUMBER 0) (TUPLE t0 0)) data_access_pattern_candidate)
)            ))          ))        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR simple_data_access_pattern)
 ) )  )
  (SUBROUTINE data_access_pattern_candidate_refined
(STMTS     (TIMER_ON data_access_pattern_candidate_refined "@t-nonrecursive-relation;data_access_pattern_candidate_refined;data_access_analysis.dl [277:7-277:44];"
(STMTS      (DEBUG 
 "data_access_pattern_candidate_refined(Address,Size,Multiplier,From) :- \n   data_access_pattern_candidate(Address,Size,Multiplier,From),\n   instruction(From,_,_,Operation,_,_,_,_,_,_),\n   Operation != \"LEA\",\n   address_in_data(Address,_).\nin file data_access_analysis.dl [279:1-293:7]" 
      (TIMER_ON data_access_pattern_candidate_refined "@t-nonrecursive-rule;data_access_pattern_candidate_refined;data_access_analysis.dl [279:1-293:7];data_access_pattern_candidate_refined(Address,Size,Multiplier,From) :- \\n   data_access_pattern_candidate(Address,Size,Multiplier,From),\\n   instruction(From,_,_,Operation,_,_,_,_,_,_),\\n   Operation != \\\"LEA\\\",\\n   address_in_data(Address,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY address_in_data)) (NOT (ISEMPTY data_access_pattern_candidate))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 data_access_pattern_candidate           (IF (EXISTS address_in_data ((TUPLE t0 0) UNDEF))
           (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 3))) (CONSTRAINT != (TUPLE t1 3)  (STRING "LEA"))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) data_access_pattern_candidate_refined)
)          ))
        )       )
      )
     )
      (DEBUG 
 "data_access_pattern_candidate_refined(Address,Size,Multiplier,From) :- \n   data_access_pattern_candidate(Address,Size,Multiplier,From),\n   instruction(From,_,_,Operation,_,_,_,_,_,_),\n   Operation != \"LEA\",\n   relocation(Address,_,_,_,_,_,_).\nin file data_access_analysis.dl [279:1-293:7]" 
      (TIMER_ON data_access_pattern_candidate_refined "@t-nonrecursive-rule;data_access_pattern_candidate_refined;data_access_analysis.dl [279:1-293:7];data_access_pattern_candidate_refined(Address,Size,Multiplier,From) :- \\n   data_access_pattern_candidate(Address,Size,Multiplier,From),\\n   instruction(From,_,_,Operation,_,_,_,_,_,_),\\n   Operation != \\\"LEA\\\",\\n   relocation(Address,_,_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY data_access_pattern_candidate))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 data_access_pattern_candidate           (IF (EXISTS relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 3))) (CONSTRAINT != (TUPLE t1 3)  (STRING "LEA"))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) data_access_pattern_candidate_refined)
)          ))
        )       )
      )
     )
      (DEBUG 
 "data_access_pattern_candidate_refined(Address,Size,Multiplier,From) :- \n   data_access_pattern_candidate(Address,Size,Multiplier,From),\n   instruction(From,_,_,Operation,_,_,_,_,_,_),\n   Operation != \"LEA\",\n   pe_import_entry(Address,_,_,_).\nin file data_access_analysis.dl [279:1-293:7]" 
      (TIMER_ON data_access_pattern_candidate_refined "@t-nonrecursive-rule;data_access_pattern_candidate_refined;data_access_analysis.dl [279:1-293:7];data_access_pattern_candidate_refined(Address,Size,Multiplier,From) :- \\n   data_access_pattern_candidate(Address,Size,Multiplier,From),\\n   instruction(From,_,_,Operation,_,_,_,_,_,_),\\n   Operation != \\\"LEA\\\",\\n   pe_import_entry(Address,_,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY pe_import_entry)) (NOT (ISEMPTY data_access_pattern_candidate))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 data_access_pattern_candidate           (IF (EXISTS pe_import_entry ((TUPLE t0 0) UNDEF UNDEF UNDEF))
           (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 3))) (CONSTRAINT != (TUPLE t1 3)  (STRING "LEA"))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) data_access_pattern_candidate_refined)
)          ))
        )       )
      )
     )
      (DEBUG 
 "data_access_pattern_candidate_refined(Address,Size,Multiplier,From) :- \n   data_access_pattern_candidate(Address,Size,Multiplier,From),\n   instruction(From,_,_,Operation,_,_,_,_,_,_),\n   Operation != \"LEA\",\n   !indirect_jump(From),\n   !indirect_call(From).\nin file data_access_analysis.dl [279:1-293:7]" 
      (TIMER_ON data_access_pattern_candidate_refined "@t-nonrecursive-rule;data_access_pattern_candidate_refined;data_access_analysis.dl [279:1-293:7];data_access_pattern_candidate_refined(Address,Size,Multiplier,From) :- \\n   data_access_pattern_candidate(Address,Size,Multiplier,From),\\n   instruction(From,_,_,Operation,_,_,_,_,_,_),\\n   Operation != \\\"LEA\\\",\\n   !indirect_jump(From),\\n   !indirect_call(From).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_access_pattern_candidate)) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 data_access_pattern_candidate           (IF (AND (NOT (EXISTS indirect_call ((TUPLE t0 3)))) (NOT (EXISTS indirect_jump ((TUPLE t0 3)))))
           (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 3))) (CONSTRAINT != (TUPLE t1 3)  (STRING "LEA"))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) data_access_pattern_candidate_refined)
)          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE data_access_pattern_non_zero
(STMTS     (TIMER_ON data_access_pattern_non_zero "@t-nonrecursive-relation;data_access_pattern_non_zero;data_access_analysis.dl [391:7-391:35];"
(STMTS      (DEBUG 
 "data_access_pattern_non_zero(Address,Size,as(Mult, unsigned),FromWhere) :- \n   data_access_pattern(Address,Size,Mult,FromWhere),\n   Mult > 0.\nin file data_access_analysis.dl [393:1-394:64]" 
      (TIMER_ON data_access_pattern_non_zero "@t-nonrecursive-rule;data_access_pattern_non_zero;data_access_analysis.dl [393:1-394:64];data_access_pattern_non_zero(Address,Size,as(Mult, unsigned),FromWhere) :- \\n   data_access_pattern(Address,Size,Mult,FromWhere),\\n   Mult > 0.;"
(QUERY
        (IF (NOT (ISEMPTY data_access_pattern))
         (FOR t0 data_access_pattern (INDEX  (<= (NUMBER 0) (TUPLE t0 2) ))
          (IF (CONSTRAINT != (TUPLE t0 2)  (NUMBER 0))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) data_access_pattern_non_zero)
          ))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE data_block_candidate
(STMTS (STMTS     (TIMER_ON data_block_candidate "@t-nonrecursive-relation;data_block_candidate;code_inference.dl [546:7-546:27];"
(STMTS      (DEBUG 
 "data_block_candidate(Block,Size) :- \n   relative_address(Block,Size,_,_,_,_).\nin file code_inference.dl [548:1-549:42]" 
      (TIMER_ON data_block_candidate "@t-nonrecursive-rule;data_block_candidate;code_inference.dl [548:1-549:42];data_block_candidate(Block,Size) :- \\n   relative_address(Block,Size,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY relative_address))
         (FOR_IN t0 relative_address           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) data_block_candidate)
)
        )       )
      )
     )
      (DEBUG 
 "data_block_candidate(Block,Size) :- \n   arch.simple_data_load(EA,Block,Size),\n   code_in_block_candidate(EA,_).\nin file code_inference.dl [551:1-553:35]" 
      (TIMER_ON data_block_candidate "@t-nonrecursive-rule;data_block_candidate;code_inference.dl [551:1-553:35];data_block_candidate(Block,Size) :- \\n   arch.simple_data_load(EA,Block,Size),\\n   code_in_block_candidate(EA,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.simple_data_load)) (NOT (ISEMPTY code_in_block_candidate)))
         (FOR_IN t0 arch.simple_data_load           (IF (EXISTS code_in_block_candidate ((TUPLE t0 0) UNDEF))
           (INSERT ((TUPLE t0 1) (TUPLE t0 2)) data_block_candidate)
          ))
        )       )
      )
     )
      (DEBUG 
 "data_block_candidate(Block,AccessSize) :- \n   composite_data_access(EA,EA_load,Block,AccessSize),\n   code_in_block_candidate(EA,_),\n   code_in_block_candidate(EA_load,_).\nin file code_inference.dl [555:1-558:40]" 
      (TIMER_ON data_block_candidate "@t-nonrecursive-rule;data_block_candidate;code_inference.dl [555:1-558:40];data_block_candidate(Block,AccessSize) :- \\n   composite_data_access(EA,EA_load,Block,AccessSize),\\n   code_in_block_candidate(EA,_),\\n   code_in_block_candidate(EA_load,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY code_in_block_candidate)) (NOT (ISEMPTY composite_data_access)))
         (FOR_IN t0 composite_data_access           (IF (AND (EXISTS code_in_block_candidate ((TUPLE t0 1) UNDEF)) (EXISTS code_in_block_candidate ((TUPLE t0 0) UNDEF)))
           (INSERT ((TUPLE t0 2) (TUPLE t0 3)) data_block_candidate)
          ))
        )       )
      )
     )
      (DEBUG 
 "data_block_candidate(EA,Size) :- \n   repeated_byte(EA,_,Size),\n   Size > 8,\n   !is_padding(EA).\nin file code_inference.dl [560:1-562:21]" 
      (TIMER_ON data_block_candidate "@t-nonrecursive-rule;data_block_candidate;code_inference.dl [560:1-562:21];data_block_candidate(EA,Size) :- \\n   repeated_byte(EA,_,Size),\\n   Size > 8,\\n   !is_padding(EA).;"
(QUERY
        (IF (NOT (ISEMPTY repeated_byte))
         (FOR_IN t0 repeated_byte           (IF (AND (CONSTRAINT > (TUPLE t0 2)  (UNSIGNED 8)) (NOT (EXISTS is_padding ((TUPLE t0 0)))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 2)) data_block_candidate)
          ))
        )       )
      )
     )
      (DEBUG 
 "data_block_candidate(Block,Size) :- \n   defined_symbol(Block,Size,\"OBJECT\",_,_,_,_,_,_),\n   Size > 0.\nin file code_inference.dl [564:1-567:14]" 
      (TIMER_ON data_block_candidate "@t-nonrecursive-rule;data_block_candidate;code_inference.dl [564:1-567:14];data_block_candidate(Block,Size) :- \\n   defined_symbol(Block,Size,\\\"OBJECT\\\",_,_,_,_,_,_),\\n   Size > 0.;"
(QUERY
        (IF (NOT (ISEMPTY defined_symbol))
         (FOR t0 defined_symbol (INDEX  (= (TUPLE t0 2) (STRING "OBJECT")))
          (IF (AND (CONSTRAINT >= (TUPLE t0 1)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 1)  (UNSIGNED 0)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) data_block_candidate)
          ))        )       )
      )
     )
      (DEBUG 
 "data_block_candidate(Block,4) :- \n   binary_format(\"PE\"),\n   relocation(Block,\"HIGHLOW\",_,_,_,_,_),\n   !instruction_has_relocation(_,Block),\n   address_in_data(Block,_).\nin file code_inference.dl [574:1-580:30]" 
      (TIMER_ON data_block_candidate "@t-nonrecursive-rule;data_block_candidate;code_inference.dl [574:1-580:30];data_block_candidate(Block,4) :- \\n   binary_format(\\\"PE\\\"),\\n   relocation(Block,\\\"HIGHLOW\\\",_,_,_,_,_),\\n   !instruction_has_relocation(_,Block),\\n   address_in_data(Block,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY address_in_data))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "HIGHLOW")))
          (IF (AND (EXISTS address_in_data ((TUPLE t0 0) UNDEF)) (NOT (EXISTS instruction_has_relocation (UNDEF (TUPLE t0 0)))))
           (INSERT ((TUPLE t0 0) (UNSIGNED 4)) data_block_candidate)
          ))        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR code_in_block_candidate)
 ) )  )
  (SUBROUTINE data_in_code
(STMTS (STMTS     (TIMER_ON data_in_code "@t-nonrecursive-relation;data_in_code;code_inference.dl [98:7-98:19];"
(STMTS      (DEBUG 
 "data_in_code(Begin,(End+1)) :- \n   data_in_code_propagate(End,Begin,_),\n   !data_in_code_propagate((End+1),Begin,_).\nin file code_inference.dl [1589:1-1591:44]" 
      (TIMER_ON data_in_code "@t-nonrecursive-rule;data_in_code;code_inference.dl [1589:1-1591:44];data_in_code(Begin,(End+1)) :- \\n   data_in_code_propagate(End,Begin,_),\\n   !data_in_code_propagate((End+1),Begin,_).;"
(QUERY
        (IF (NOT (ISEMPTY data_in_code_propagate))
         (FOR_IN t0 data_in_code_propagate           (IF (NOT (EXISTS data_in_code_propagate ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) (TUPLE t0 1) UNDEF)))
           (INSERT ((TUPLE t0 1) (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1))) data_in_code)
          ))
        )       )
      )
     )
      (DEBUG 
 "data_in_code(Begin,EndData) :- \n   code_section(Name),\n   loaded_section(BegSect,EndSect,Name),\n   byte_interval(Begin,End),\n   BegSect <= Begin,\n   End <= EndSect,\n   first_block_in_byte_interval(Begin,End,EndData),\n   EndData > Begin.\nin file code_inference.dl [1596:1-1607:21]" 
      (TIMER_ON data_in_code "@t-nonrecursive-rule;data_in_code;code_inference.dl [1596:1-1607:21];data_in_code(Begin,EndData) :- \\n   code_section(Name),\\n   loaded_section(BegSect,EndSect,Name),\\n   byte_interval(Begin,End),\\n   BegSect <= Begin,\\n   End <= EndSect,\\n   first_block_in_byte_interval(Begin,End,EndData),\\n   EndData > Begin.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_section)) (NOT (ISEMPTY first_block_in_byte_interval))) (NOT (ISEMPTY byte_interval))) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 code_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR_IN t2 byte_interval             (IF (AND (CONSTRAINT <= (TUPLE t2 1)  (TUPLE t1 1)) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t2 0)))
             (FOR t3 first_block_in_byte_interval (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)) (= (TUPLE t3 1) (TUPLE t2 1)))
              (IF (AND (CONSTRAINT >= (TUPLE t3 2)  (TUPLE t2 0)) (CONSTRAINT != (TUPLE t3 2)  (TUPLE t2 0)))
               (INSERT ((TUPLE t2 0) (TUPLE t3 2)) data_in_code)
              ))            ))
))
        )       )
      )
     )
      (DEBUG 
 "data_in_code(Begin,End) :- \n   code_section(Name),\n   loaded_section(BegSect,EndSect,Name),\n   byte_interval(Begin,End),\n   BegSect <= Begin,\n   End <= EndSect,\n   !first_block_in_byte_interval(Begin,End,_),\n   End > Begin.\nin file code_inference.dl [1596:1-1607:21]" 
      (TIMER_ON data_in_code "@t-nonrecursive-rule;data_in_code;code_inference.dl [1596:1-1607:21];data_in_code(Begin,End) :- \\n   code_section(Name),\\n   loaded_section(BegSect,EndSect,Name),\\n   byte_interval(Begin,End),\\n   BegSect <= Begin,\\n   End <= EndSect,\\n   !first_block_in_byte_interval(Begin,End,_),\\n   End > Begin.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY byte_interval)) (NOT (ISEMPTY code_section))) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 code_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR_IN t2 byte_interval             (IF (AND (AND (AND (CONSTRAINT > (TUPLE t2 1)  (TUPLE t2 0)) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t2 0))) (CONSTRAINT <= (TUPLE t2 1)  (TUPLE t1 1))) (NOT (EXISTS first_block_in_byte_interval ((TUPLE t2 0) (TUPLE t2 1) UNDEF))))
             (INSERT ((TUPLE t2 0) (TUPLE t2 1)) data_in_code)
            ))
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR byte_interval)
     (CLEAR code_section)
     (CLEAR data_in_code_propagate)
     (CLEAR first_block_in_byte_interval)
 ) )  )
  (SUBROUTINE data_in_code_propagate
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON data_in_code_propagate "@t-nonrecursive-relation;data_in_code_propagate;code_inference.dl [1559:7-1559:29];"
(STMTS      (DEBUG 
 "data_in_code_propagate(BlockEndAddr,BlockEndAddr,EndByteInterval) :- \n   block_boundaries(_,_,BlockEndAddr),\n   !block_boundaries(_,BlockEndAddr,_),\n   byte_interval(BegByteInterval,EndByteInterval),\n   BegByteInterval < BlockEndAddr,\n   BlockEndAddr < EndByteInterval.\nin file code_inference.dl [1561:1-1565:68]" 
      (TIMER_ON data_in_code_propagate "@t-nonrecursive-rule;data_in_code_propagate;code_inference.dl [1561:1-1565:68];data_in_code_propagate(BlockEndAddr,BlockEndAddr,EndByteInterval) :- \\n   block_boundaries(_,_,BlockEndAddr),\\n   !block_boundaries(_,BlockEndAddr,_),\\n   byte_interval(BegByteInterval,EndByteInterval),\\n   BegByteInterval < BlockEndAddr,\\n   BlockEndAddr < EndByteInterval.;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_boundaries)) (NOT (ISEMPTY byte_interval)))
         (FOR_IN t0 block_boundaries           (IF (NOT (EXISTS block_boundaries (UNDEF (TUPLE t0 2) UNDEF)))
           (FOR_IN t1 byte_interval             (IF (AND (CONSTRAINT < (TUPLE t0 2)  (TUPLE t1 1)) (CONSTRAINT < (TUPLE t1 0)  (TUPLE t0 2)))
             (INSERT ((TUPLE t0 2) (TUPLE t0 2) (TUPLE t1 1)) data_in_code_propagate)
            ))
          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 data_in_code_propagate       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_data_in_code_propagate)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_data_in_code_propagate "@t-recursive-relation;data_in_code_propagate;code_inference.dl [1559:7-1559:29];"
(STMTS       (DEBUG 
 "data_in_code_propagate((EA+1),Begin,EndByteInterval) :- \n   data_in_code_propagate(EA,Begin,EndByteInterval),\n   !block_boundaries(_,(EA+1),_),\n   (EA+1) < EndByteInterval.\nin file code_inference.dl [1567:1-1570:28]" 
       (TIMER_ON @new_data_in_code_propagate "@t-recursive-rule;data_in_code_propagate;0;code_inference.dl [1567:1-1570:28];data_in_code_propagate((EA+1),Begin,EndByteInterval) :- \\n   data_in_code_propagate(EA,Begin,EndByteInterval),\\n   !block_boundaries(_,(EA+1),_),\\n   (EA+1) < EndByteInterval.;"
(QUERY
         (IF (NOT (ISEMPTY @delta_data_in_code_propagate))
          (FOR_IN t0 @delta_data_in_code_propagate            (IF (AND (AND (CONSTRAINT < (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1))  (TUPLE t0 2)) (NOT (EXISTS block_boundaries (UNDEF (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) UNDEF)))) (NOT (EXISTS data_in_code_propagate ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) (TUPLE t0 1) (TUPLE t0 2)))))
            (INSERT ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) (TUPLE t0 1) (TUPLE t0 2)) @new_data_in_code_propagate)
           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_data_in_code_propagate "@t-recursive-relation;data_in_code_propagate;code_inference.dl [1559:7-1559:29];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_data_in_code_propagate))
 ) (STMTS      (TIMER_ON @new_data_in_code_propagate "@c-recursive-relation;data_in_code_propagate;code_inference.dl [1559:7-1559:29];"
(STMTS (QUERY
       (FOR_IN t0 @new_data_in_code_propagate         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) data_in_code_propagate)
)
      )
       (SWAP @delta_data_in_code_propagate @new_data_in_code_propagate)
       (CLEAR @new_data_in_code_propagate)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_data_in_code_propagate)
     (CLEAR @new_data_in_code_propagate)
 ) )  )  )  )
  (SUBROUTINE data_limit
(STMTS (STMTS     (TIMER_ON data_limit "@t-nonrecursive-relation;data_limit;data_access_analysis.dl [330:7-330:17];"
(STMTS      (DEBUG 
 "data_limit(EA) :- \n   labeled_data_candidate(EA).\nin file data_access_analysis.dl [332:1-335:24]" 
      (TIMER_ON data_limit "@t-nonrecursive-rule;data_limit;data_access_analysis.dl [332:1-335:24];data_limit(EA) :- \\n   labeled_data_candidate(EA).;"
(QUERY
        (IF (NOT (ISEMPTY labeled_data_candidate))
         (FOR_IN t0 labeled_data_candidate           (INSERT ((TUPLE t0 0)) data_limit)
)
        )       )
      )
     )
      (DEBUG 
 "data_limit(EA) :- \n   data_segment(_,EA).\nin file data_access_analysis.dl [332:1-335:24]" 
      (TIMER_ON data_limit "@t-nonrecursive-rule;data_limit;data_access_analysis.dl [332:1-335:24];data_limit(EA) :- \\n   data_segment(_,EA).;"
(QUERY
        (IF (NOT (ISEMPTY data_segment))
         (FOR_IN t0 data_segment           (INSERT ((TUPLE t0 1)) data_limit)
)
        )       )
      )
     )
      (DEBUG 
 "data_limit(EA) :- \n   data_segment(EA,_).\nin file data_access_analysis.dl [332:1-335:24]" 
      (TIMER_ON data_limit "@t-nonrecursive-rule;data_limit;data_access_analysis.dl [332:1-335:24];data_limit(EA) :- \\n   data_segment(EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY data_segment))
         (FOR_IN t0 data_segment           (INSERT ((TUPLE t0 0)) data_limit)
)
        )       )
      )
     )
      (DEBUG 
 "data_limit((EA0+Count)) :- \n   data_access_pattern_non_zero(EA_labeled,Size,Size,_),\n   repeated_byte(EA0,0,Count),\n   EA_labeled >= EA0,\n   EA_labeled < (EA0+Count),\n   ((EA0+Count)-EA_labeled) > (Size*2),\n   (((EA0+Count)-EA_labeled)%Size) = 0.\nin file data_access_analysis.dl [343:1-351:20]" 
      (TIMER_ON data_limit "@t-nonrecursive-rule;data_limit;data_access_analysis.dl [343:1-351:20];data_limit((EA0+Count)) :- \\n   data_access_pattern_non_zero(EA_labeled,Size,Size,_),\\n   repeated_byte(EA0,0,Count),\\n   EA_labeled >= EA0,\\n   EA_labeled < (EA0+Count),\\n   ((EA0+Count)-EA_labeled) > (Size*2),\\n   (((EA0+Count)-EA_labeled)%Size) = 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_access_pattern_non_zero)) (NOT (ISEMPTY repeated_byte)))
         (FOR_IN t0 data_access_pattern_non_zero           (IF (CONSTRAINT = (TUPLE t0 1)  (TUPLE t0 2))
           (FOR t1 repeated_byte (INDEX  (= (TUPLE t1 1) (UNSIGNED 0)))
            (IF (AND (AND (AND (CONSTRAINT = (INTRINSIC % (INTRINSIC - (INTRINSIC + (TUPLE t1 0) (TUPLE t1 2)) (TUPLE t0 0)) (TUPLE t0 1))  (UNSIGNED 0)) (CONSTRAINT > (INTRINSIC - (INTRINSIC + (TUPLE t1 0) (TUPLE t1 2)) (TUPLE t0 0))  (INTRINSIC * (TUPLE t0 1) (UNSIGNED 2)))) (CONSTRAINT < (TUPLE t0 0)  (INTRINSIC + (TUPLE t1 0) (TUPLE t1 2)))) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t1 0)))
             (INSERT ((INTRINSIC + (TUPLE t1 0) (TUPLE t1 2))) data_limit)
            ))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR repeated_byte)
 ) )  )
  (SUBROUTINE data_limit_after_access
(STMTS     (TIMER_ON data_limit_after_access "@t-nonrecursive-relation;data_limit_after_access;data_access_analysis.dl [368:7-368:30];"
(STMTS      (DEBUG 
 "data_limit_after_access(Access,@generator_0) :- \n   data_access_pattern(Access,_,_,_),\n   data_segment(Beg,End),\n   Access >= Beg,\n   Access < End,\n   @generator_0 <= End,\n   @generator_0 = min DataLimit0 : { data_limit(DataLimit0),DataLimit0 > Access }.\nin file data_access_analysis.dl [371:1-375:22]" 
      (TIMER_ON data_limit_after_access "@t-nonrecursive-rule;data_limit_after_access;data_access_analysis.dl [371:1-375:22];data_limit_after_access(Access,@generator_0) :- \\n   data_access_pattern(Access,_,_,_),\\n   data_segment(Beg,End),\\n   Access >= Beg,\\n   Access < End,\\n   @generator_0 <= End,\\n   @generator_0 = min DataLimit0 : { data_limit(DataLimit0),DataLimit0 > Access }.;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_access_pattern)) (NOT (ISEMPTY data_segment)))
         (FOR_IN t0 data_access_pattern           (FOR_IN t1 data_segment            (IF (AND (CONSTRAINT < (TUPLE t0 0)  (TUPLE t1 1)) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t1 0)))
            (AGGREGATE t2 min (TUPLE t2 0)  t2 data_limit (CONSTRAINT > (TUPLE t2 0)  (TUPLE t0 0))
             (IF (AND (CONSTRAINT = (TUPLE t2 0)  (TUPLE t2 0)) (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t1 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t2 0)) data_limit_after_access)
             ))           ))
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE data_object
(STMTS (STMTS     (TIMER_ON data_object "@t-nonrecursive-relation;data_object;symbolization.dl [514:7-514:18];"
(STMTS      (DEBUG 
 "data_object(EA,Size,Type) :- \n   data_object_total_points(EA,Size,Type,Points),\n   !discarded_data_object(EA,Size,Type),\n   Points >= 0.\nin file symbolization.dl [818:1-821:17]" 
      (TIMER_ON data_object "@t-nonrecursive-rule;data_object;symbolization.dl [818:1-821:17];data_object(EA,Size,Type) :- \\n   data_object_total_points(EA,Size,Type,Points),\\n   !discarded_data_object(EA,Size,Type),\\n   Points >= 0.;"
(QUERY
        (IF (NOT (ISEMPTY data_object_total_points))
         (FOR t0 data_object_total_points (INDEX  (<= (NUMBER 0) (TUPLE t0 3) ))
          (IF (NOT (EXISTS discarded_data_object ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) data_object)
          ))        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR data_object_total_points)
     (CLEAR discarded_data_object)
 ) )  )
  (SUBROUTINE data_object_boundary
(STMTS (STMTS (STMTS     (TIMER_ON data_object_boundary "@t-nonrecursive-relation;data_object_boundary;symbolization.dl [170:7-170:27];"
(STMTS      (DEBUG 
 "data_object_boundary(EA) :- \n   labeled_ea(EA).\nin file symbolization.dl [893:1-899:32]" 
      (TIMER_ON data_object_boundary "@t-nonrecursive-rule;data_object_boundary;symbolization.dl [893:1-899:32];data_object_boundary(EA) :- \\n   labeled_ea(EA).;"
(QUERY
        (IF (NOT (ISEMPTY labeled_ea))
         (FOR_IN t0 labeled_ea           (INSERT ((TUPLE t0 0)) data_object_boundary)
)
        )       )
      )
     )
      (DEBUG 
 "data_object_boundary(EA) :- \n   symbolic_data(EA,_,_).\nin file symbolization.dl [893:1-899:32]" 
      (TIMER_ON data_object_boundary "@t-nonrecursive-rule;data_object_boundary;symbolization.dl [893:1-899:32];data_object_boundary(EA) :- \\n   symbolic_data(EA,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY symbolic_data))
         (FOR_IN t0 symbolic_data           (INSERT ((TUPLE t0 0)) data_object_boundary)
)
        )       )
      )
     )
      (DEBUG 
 "data_object_boundary(EA) :- \n   string(EA,_,_).\nin file symbolization.dl [893:1-899:32]" 
      (TIMER_ON data_object_boundary "@t-nonrecursive-rule;data_object_boundary;symbolization.dl [893:1-899:32];data_object_boundary(EA) :- \\n   string(EA,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY string))
         (FOR_IN t0 string           (INSERT ((TUPLE t0 0)) data_object_boundary)
)
        )       )
      )
     )
      (DEBUG 
 "data_object_boundary(EA) :- \n   symbol_minus_symbol(EA,_,_,_,_,_).\nin file symbolization.dl [893:1-899:32]" 
      (TIMER_ON data_object_boundary "@t-nonrecursive-rule;data_object_boundary;symbolization.dl [893:1-899:32];data_object_boundary(EA) :- \\n   symbol_minus_symbol(EA,_,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY symbol_minus_symbol))
         (FOR_IN t0 symbol_minus_symbol           (INSERT ((TUPLE t0 0)) data_object_boundary)
)
        )       )
      )
     )
      (DEBUG 
 "data_object_boundary(EA) :- \n   symbolic_expr_from_relocation(EA,_,_,_,_).\nin file symbolization.dl [893:1-899:32]" 
      (TIMER_ON data_object_boundary "@t-nonrecursive-rule;data_object_boundary;symbolization.dl [893:1-899:32];data_object_boundary(EA) :- \\n   symbolic_expr_from_relocation(EA,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY symbolic_expr_from_relocation))
         (FOR_IN t0 symbolic_expr_from_relocation           (INSERT ((TUPLE t0 0)) data_object_boundary)
)
        )       )
      )
     )
      (DEBUG 
 "data_object_boundary(EA) :- \n   moved_data_label(EA,_,_,_).\nin file symbolization.dl [893:1-899:32]" 
      (TIMER_ON data_object_boundary "@t-nonrecursive-rule;data_object_boundary;symbolization.dl [893:1-899:32];data_object_boundary(EA) :- \\n   moved_data_label(EA,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY moved_data_label))
         (FOR_IN t0 moved_data_label           (INSERT ((TUPLE t0 0)) data_object_boundary)
)
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON data_object_boundary "@t-relation-savetime;data_object_boundary;symbolization.dl [170:7-170:27];savetime;"
     (IO data_object_boundary ((= IO "file") (= attributeNames "EA") (= auxArity "0") (= name "data_object_boundary") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"EA\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) ) (STMTS     (CLEAR labeled_ea)
     (CLEAR moved_data_label)
     (CLEAR string)
     (CLEAR symbolic_expr_from_relocation)
 ) )  )
  (SUBROUTINE data_object_candidate
(STMTS     (TIMER_ON data_object_candidate "@t-nonrecursive-relation;data_object_candidate;symbolization.dl [506:7-506:28];"
(STMTS      (DEBUG 
 "data_object_candidate(EA,Size,\"symbol-symbol\") :- \n   symbol_minus_symbol_candidate(EA,Size,_,_,_,_).\nin file symbolization.dl [516:1-517:52]" 
      (TIMER_ON data_object_candidate "@t-nonrecursive-rule;data_object_candidate;symbolization.dl [516:1-517:52];data_object_candidate(EA,Size,\\\"symbol-symbol\\\") :- \\n   symbol_minus_symbol_candidate(EA,Size,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY symbol_minus_symbol_candidate))
         (FOR_IN t0 symbol_minus_symbol_candidate           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol-symbol")) data_object_candidate)
)
        )       )
      )
     )
      (DEBUG 
 "data_object_candidate(EA,Size,\"other\") :- \n   preferred_data_access(EA,Size,_),\n   !address_in_data_refined(EA,_),\n   !symbol_minus_symbol_candidate(EA,Size,_,_,_,_).\nin file symbolization.dl [528:1-531:53]" 
      (TIMER_ON data_object_candidate "@t-nonrecursive-rule;data_object_candidate;symbolization.dl [528:1-531:53];data_object_candidate(EA,Size,\\\"other\\\") :- \\n   preferred_data_access(EA,Size,_),\\n   !address_in_data_refined(EA,_),\\n   !symbol_minus_symbol_candidate(EA,Size,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY preferred_data_access))
         (FOR_IN t0 preferred_data_access           (IF (AND (NOT (EXISTS symbol_minus_symbol_candidate ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS address_in_data_refined ((TUPLE t0 0) UNDEF))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "other")) data_object_candidate)
          ))
        )       )
      )
     )
      (DEBUG 
 "data_object_candidate(EA,(End-EA),\"string\") :- \n   string_candidate_refined(EA,End,_).\nin file symbolization.dl [524:1-526:19]" 
      (TIMER_ON data_object_candidate "@t-nonrecursive-rule;data_object_candidate;symbolization.dl [524:1-526:19];data_object_candidate(EA,(End-EA),\\\"string\\\") :- \\n   string_candidate_refined(EA,End,_).;"
(QUERY
        (IF (NOT (ISEMPTY string_candidate_refined))
         (FOR_IN t0 string_candidate_refined           (INSERT ((TUPLE t0 0) (INTRINSIC - (TUPLE t0 1) (TUPLE t0 0)) (STRING "string")) data_object_candidate)
)
        )       )
      )
     )
      (DEBUG 
 "data_object_candidate(EA,8,\"symbol\") :- \n   address_in_data_refined(EA,_).\nin file symbolization.dl [519:1-522:35]" 
      (TIMER_ON data_object_candidate "@t-nonrecursive-rule;data_object_candidate;symbolization.dl [519:1-522:35];data_object_candidate(EA,8,\\\"symbol\\\") :- \\n   address_in_data_refined(EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY address_in_data_refined))
         (FOR_IN t0 address_in_data_refined           (INSERT ((TUPLE t0 0) (UNSIGNED 8) (STRING "symbol")) data_object_candidate)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE data_object_conflict
(STMTS     (TIMER_ON data_object_conflict "@t-nonrecursive-relation;data_object_conflict;symbolization.dl [510:7-510:27];"
(STMTS      (DEBUG 
 "data_object_conflict(EA,Size,Type,EA2,Size2,Type2) :- \n   data_object_candidate(EA,Size,Type),\n   data_object_candidate(EA2,Size2,Type2),\n   EA2 > EA,\n   EA2 < (EA+Size).\nin file symbolization.dl [783:1-787:19]" 
      (TIMER_ON data_object_conflict "@t-nonrecursive-rule;data_object_conflict;symbolization.dl [783:1-787:19];data_object_conflict(EA,Size,Type,EA2,Size2,Type2) :- \\n   data_object_candidate(EA,Size,Type),\\n   data_object_candidate(EA2,Size2,Type2),\\n   EA2 > EA,\\n   EA2 < (EA+Size).;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR_IN t0 data_object_candidate           (FOR_IN t1 data_object_candidate            (IF (AND (CONSTRAINT < (TUPLE t1 0)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))) (CONSTRAINT > (TUPLE t1 0)  (TUPLE t0 0)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2)) data_object_conflict)
           ))
)
        )       )
      )
     )
      (DEBUG 
 "data_object_conflict(EA,Size,Type,EA,Size2,Type2) :- \n   data_object_candidate(EA,Size,Type),\n   data_object_candidate(EA,Size2,Type2),\n   Size2 > Size.\nin file symbolization.dl [790:1-793:18]" 
      (TIMER_ON data_object_conflict "@t-nonrecursive-rule;data_object_conflict;symbolization.dl [790:1-793:18];data_object_conflict(EA,Size,Type,EA,Size2,Type2) :- \\n   data_object_candidate(EA,Size,Type),\\n   data_object_candidate(EA,Size2,Type2),\\n   Size2 > Size.;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR_IN t0 data_object_candidate           (FOR t1 data_object_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (CONSTRAINT >= (TUPLE t1 1)  (TUPLE t0 1)) (CONSTRAINT != (TUPLE t1 1)  (TUPLE t0 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 2)) data_object_conflict)
           )))
        )       )
      )
     )
      (DEBUG 
 "data_object_conflict(EA,Size,Type,EA,Size,Type2) :- \n   data_object_candidate(EA,Size,Type),\n   data_object_candidate(EA,Size,Type2),\n   Type != Type2.\nin file symbolization.dl [796:1-799:19]" 
      (TIMER_ON data_object_conflict "@t-nonrecursive-rule;data_object_conflict;symbolization.dl [796:1-799:19];data_object_conflict(EA,Size,Type,EA,Size,Type2) :- \\n   data_object_candidate(EA,Size,Type),\\n   data_object_candidate(EA,Size,Type2),\\n   Type != Type2.;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR_IN t0 data_object_candidate           (FOR t1 data_object_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (IF (CONSTRAINT != (TUPLE t0 2)  (TUPLE t1 2))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2)) data_object_conflict)
           )))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE data_object_point
(STMTS (STMTS     (TIMER_ON data_object_point "@t-nonrecursive-relation;data_object_point;symbolization.dl [508:7-508:24];"
(STMTS      (DEBUG 
 "data_object_point(EA,Size,\"symbol\",-5,\"data object in padding\") :- \n   data_object_candidate(EA,Size,\"symbol\"),\n   npad(PaddingEA,PaddingSize),\n   is_padding(PaddingEA),\n   EA >= PaddingEA,\n   EA < (PaddingEA+PaddingSize).\nin file symbolization.dl [266:1-270:51]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;binary/pe/symbolization.dl [266:1-270:51];data_object_point(EA,Size,\\\"symbol\\\",-5,\\\"data object in padding\\\") :- \\n   data_object_candidate(EA,Size,\\\"symbol\\\"),\\n   npad(PaddingEA,PaddingSize),\\n   is_padding(PaddingEA),\\n   EA >= PaddingEA,\\n   EA < (PaddingEA+PaddingSize).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY is_padding)) (NOT (ISEMPTY data_object_candidate))) (NOT (ISEMPTY npad)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (FOR_IN t1 npad            (IF (AND (AND (CONSTRAINT < (TUPLE t0 0)  (INTRINSIC + (TUPLE t1 0) (TUPLE t1 1))) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t1 0))) (EXISTS is_padding ((TUPLE t1 0))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER -5) (STRING "data object in padding")) data_object_point)
           ))
)        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,Type,-2,\"data object bias\") :- \n   data_object_candidate(EA,Pt_size,Type).\nin file symbolization.dl [654:1-655:44]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [654:1-655:44];data_object_point(EA,Pt_size,Type,-2,\\\"data object bias\\\") :- \\n   data_object_candidate(EA,Pt_size,Type).;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR_IN t0 data_object_candidate           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (NUMBER -2) (STRING "data object bias")) data_object_point)
)
        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Size,Type,-100,\"in-exception-section\") :- \n   data_object_candidate(EA,Size,Type),\n   exception_section(Name),\n   loaded_section(Base,End,Name),\n   EA >= Base,\n   EA < End.\nin file symbolization.dl [659:1-663:26]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [659:1-663:26];data_object_point(EA,Size,Type,-100,\\\"in-exception-section\\\") :- \\n   data_object_candidate(EA,Size,Type),\\n   exception_section(Name),\\n   loaded_section(Base,End,Name),\\n   EA >= Base,\\n   EA < End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY data_object_candidate))) (NOT (ISEMPTY exception_section)))
         (FOR_IN t0 data_object_candidate           (FOR_IN t1 exception_section            (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0))) (AND (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 1)) (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t2 1))) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t2 0)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (NUMBER -100) (STRING "in-exception-section")) data_object_point)
))
)
        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,8,\"symbol-symbol\",5,\"quad symbol-symbol\") :- \n   data_object_candidate(EA,8,\"symbol-symbol\").\nin file symbolization.dl [665:1-666:49]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [665:1-666:49];data_object_point(EA,8,\\\"symbol-symbol\\\",5,\\\"quad symbol-symbol\\\") :- \\n   data_object_candidate(EA,8,\\\"symbol-symbol\\\").;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 1) (UNSIGNED 8)) (= (TUPLE t0 2) (STRING "symbol-symbol")))
          (INSERT ((TUPLE t0 0) (UNSIGNED 8) (STRING "symbol-symbol") (NUMBER 5) (STRING "quad symbol-symbol")) data_object_point)
)        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Size,\"symbol-symbol\",4,\"symbol-symbol\") :- \n   data_object_candidate(EA,Size,\"symbol-symbol\"),\n   Size <= 4.\nin file symbolization.dl [668:1-670:15]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [668:1-670:15];data_object_point(EA,Size,\\\"symbol-symbol\\\",4,\\\"symbol-symbol\\\") :- \\n   data_object_candidate(EA,Size,\\\"symbol-symbol\\\"),\\n   Size <= 4.;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol-symbol")))
          (IF (CONSTRAINT <= (TUPLE t0 1)  (UNSIGNED 4))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol-symbol") (NUMBER 4) (STRING "symbol-symbol")) data_object_point)
          ))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,\"symbol\",3,\"pointer array\") :- \n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   address_array(EA,_,_).\nin file symbolization.dl [673:1-675:27]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [673:1-675:27];data_object_point(EA,Pt_size,\\\"symbol\\\",3,\\\"pointer array\\\") :- \\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   address_array(EA,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object_candidate)) (NOT (ISEMPTY address_array)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (IF (EXISTS address_array ((TUPLE t0 0) UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER 3) (STRING "pointer array")) data_object_point)
          ))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,\"symbol\",5,\"data access\") :- \n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   preferred_data_access(EA,Pt_size,_).\nin file symbolization.dl [700:1-705:7]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [700:1-705:7];data_object_point(EA,Pt_size,\\\"symbol\\\",5,\\\"data access\\\") :- \\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   preferred_data_access(EA,Pt_size,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object_candidate)) (NOT (ISEMPTY preferred_data_access)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (IF (EXISTS preferred_data_access ((TUPLE t0 0) (TUPLE t0 1) UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER 5) (STRING "data access")) data_object_point)
          ))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,\"symbol\",5,\"data access\") :- \n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   preferred_data_access(EA,0,_).\nin file symbolization.dl [700:1-705:7]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [700:1-705:7];data_object_point(EA,Pt_size,\\\"symbol\\\",5,\\\"data access\\\") :- \\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   preferred_data_access(EA,0,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object_candidate)) (NOT (ISEMPTY preferred_data_access)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (IF (EXISTS preferred_data_access ((TUPLE t0 0) (UNSIGNED 0) UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER 5) (STRING "data access")) data_object_point)
          ))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,\"symbol\",-2,\"multiple conflict\") :- \n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   data_object_conflict(EA,Pt_size,\"symbol\",EA2,_,\"other\"),\n   data_object_conflict(EA,Pt_size,\"symbol\",EA3,_,\"other\"),\n   EA2 != EA3.\nin file symbolization.dl [708:1-712:16]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [708:1-712:16];data_object_point(EA,Pt_size,\\\"symbol\\\",-2,\\\"multiple conflict\\\") :- \\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   data_object_conflict(EA,Pt_size,\\\"symbol\\\",EA2,_,\\\"other\\\"),\\n   data_object_conflict(EA,Pt_size,\\\"symbol\\\",EA3,_,\\\"other\\\"),\\n   EA2 != EA3.;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object_conflict)) (NOT (ISEMPTY data_object_candidate)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (FOR t1 data_object_conflict (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (STRING "symbol")) (= (TUPLE t1 5) (STRING "other")))
           (INDEXED_IF_EXISTS t2 data_object_conflict (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (STRING "symbol")) (= (TUPLE t2 5) (STRING "other"))) (CONSTRAINT != (TUPLE t1 3)  (TUPLE t2 3))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER -2) (STRING "multiple conflict")) data_object_point)
)))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,\"symbol\",1,\"no label conflicts\") :- \n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   !label_conflict(EA,Pt_size,\"symbol\").\nin file symbolization.dl [721:1-723:42]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [721:1-723:42];data_object_point(EA,Pt_size,\\\"symbol\\\",1,\\\"no label conflicts\\\") :- \\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   !label_conflict(EA,Pt_size,\\\"symbol\\\").;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (IF (NOT (EXISTS label_conflict ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol"))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER 1) (STRING "no label conflicts")) data_object_point)
          ))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,\"symbol\",2,\"aligned\") :- \n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   (EA%Pt_size) = 0.\nin file symbolization.dl [725:1-727:22]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [725:1-727:22];data_object_point(EA,Pt_size,\\\"symbol\\\",2,\\\"aligned\\\") :- \\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   (EA%Pt_size) = 0.;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (IF (CONSTRAINT = (INTRINSIC % (TUPLE t0 0) (TUPLE t0 1))  (UNSIGNED 0))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER 2) (STRING "aligned")) data_object_point)
          ))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,\"symbol\",4,\"point-to-boundary-sym\") :- \n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   address_in_data_refined(EA,Dest),\n   boundary_sym_expr(EA,Dest).\nin file symbolization.dl [729:1-732:32]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [729:1-732:32];data_object_point(EA,Pt_size,\\\"symbol\\\",4,\\\"point-to-boundary-sym\\\") :- \\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   address_in_data_refined(EA,Dest),\\n   boundary_sym_expr(EA,Dest).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY boundary_sym_expr)) (NOT (ISEMPTY data_object_candidate))) (NOT (ISEMPTY address_in_data_refined)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (INDEXED_IF_EXISTS t1 address_in_data_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS boundary_sym_expr ((TUPLE t0 0) (TUPLE t1 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER 4) (STRING "point-to-boundary-sym")) data_object_point)
))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,\"symbol\",-2,\"point-to-exception-section\") :- \n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   address_in_data_refined(EA,Dest),\n   exception_section(Name),\n   loaded_section(Base,End,Name),\n   Dest >= Base,\n   Dest < End.\nin file symbolization.dl [734:1-739:30]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [734:1-739:30];data_object_point(EA,Pt_size,\\\"symbol\\\",-2,\\\"point-to-exception-section\\\") :- \\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   address_in_data_refined(EA,Dest),\\n   exception_section(Name),\\n   loaded_section(Base,End,Name),\\n   Dest >= Base,\\n   Dest < End.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY data_object_candidate)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY exception_section))) (NOT (ISEMPTY address_in_data_refined)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (FOR t1 address_in_data_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR_IN t2 exception_section             (INDEXED_IF_EXISTS t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0))) (AND (AND (CONSTRAINT != (TUPLE t1 1)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t3 1))) (CONSTRAINT >= (TUPLE t1 1)  (TUPLE t3 0)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER -2) (STRING "point-to-exception-section")) data_object_point)
))
))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,\"symbol\",-1,\"point-to-special-section\") :- \n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   address_in_data_refined(EA,Dest),\n   special_data_section(Name),\n   loaded_section(Base,End,Name),\n   Dest >= Base,\n   Dest < End.\nin file symbolization.dl [741:1-746:30]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [741:1-746:30];data_object_point(EA,Pt_size,\\\"symbol\\\",-1,\\\"point-to-special-section\\\") :- \\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   address_in_data_refined(EA,Dest),\\n   special_data_section(Name),\\n   loaded_section(Base,End,Name),\\n   Dest >= Base,\\n   Dest < End.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY data_object_candidate)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY special_data_section))) (NOT (ISEMPTY address_in_data_refined)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (FOR t1 address_in_data_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR_IN t2 special_data_section             (INDEXED_IF_EXISTS t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0))) (AND (AND (CONSTRAINT != (TUPLE t1 1)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t3 1))) (CONSTRAINT >= (TUPLE t1 1)  (TUPLE t3 0)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER -1) (STRING "point-to-special-section")) data_object_point)
))
))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,\"symbol\",10,\"has relocation\") :- \n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   relocation(EA,Type,_,_,_,_,_),\n   Type != \"ABSOLUTE\".\nin file symbolization.dl [748:1-751:24]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [748:1-751:24];data_object_point(EA,Pt_size,\\\"symbol\\\",10,\\\"has relocation\\\") :- \\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   relocation(EA,Type,_,_,_,_,_),\\n   Type != \\\"ABSOLUTE\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object_candidate)) (NOT (ISEMPTY relocation)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (INDEXED_IF_EXISTS t1 relocation (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (CONSTRAINT != (TUPLE t1 1)  (STRING "ABSOLUTE"))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER 10) (STRING "has relocation")) data_object_point)
))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Pt_size,\"symbol\",-10,\"has no relocation\") :- \n   !binary_type(\"EXEC\"),\n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   !relocation(EA,_,_,_,_,_,_).\nin file symbolization.dl [753:1-756:33]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [753:1-756:33];data_object_point(EA,Pt_size,\\\"symbol\\\",-10,\\\"has no relocation\\\") :- \\n   !binary_type(\\\"EXEC\\\"),\\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   !relocation(EA,_,_,_,_,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object_candidate)) (NOT (EXISTS binary_type ((STRING "EXEC")))))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (IF (NOT (EXISTS relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol") (NUMBER -10) (STRING "has no relocation")) data_object_point)
          ))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Size,\"string\",2,\"string basic point\") :- \n   data_object_candidate(EA,Size,\"string\").\nin file symbolization.dl [759:1-760:45]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [759:1-760:45];data_object_point(EA,Size,\\\"string\\\",2,\\\"string basic point\\\") :- \\n   data_object_candidate(EA,Size,\\\"string\\\").;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "string")))
          (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "string") (NUMBER 2) (STRING "string basic point")) data_object_point)
)        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Size,\"string\",3,\"long string\") :- \n   data_object_candidate(EA,Size,\"string\"),\n   string_candidate(EA,End,_),\n   string_candidate(Beg,End,_),\n   (End-Beg) > 5.\nin file symbolization.dl [762:1-765:46]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [762:1-765:46];data_object_point(EA,Size,\\\"string\\\",3,\\\"long string\\\") :- \\n   data_object_candidate(EA,Size,\\\"string\\\"),\\n   string_candidate(EA,End,_),\\n   string_candidate(Beg,End,_),\\n   (End-Beg) > 5.;"
(QUERY
        (IF (AND (NOT (ISEMPTY string_candidate)) (NOT (ISEMPTY data_object_candidate)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "string")))
          (FOR t1 string_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 string_candidate (INDEX  (= (TUPLE t2 1) (TUPLE t1 1))) (CONSTRAINT > (INTRINSIC - (TUPLE t1 1) (TUPLE t2 0))  (UNSIGNED 5))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "string") (NUMBER 3) (STRING "long string")) data_object_point)
)))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Size,\"string\",-2,\"string in jump table\") :- \n   data_object_candidate(EA,Size,\"string\"),\n   preferred_data_access(EA,_,EA_ref),\n   jump_table_start(_,_,EA_ref,_,_).\nin file symbolization.dl [767:1-770:38]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [767:1-770:38];data_object_point(EA,Size,\\\"string\\\",-2,\\\"string in jump table\\\") :- \\n   data_object_candidate(EA,Size,\\\"string\\\"),\\n   preferred_data_access(EA,_,EA_ref),\\n   jump_table_start(_,_,EA_ref,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY jump_table_start)) (NOT (ISEMPTY data_object_candidate))) (NOT (ISEMPTY preferred_data_access)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "string")))
          (INDEXED_IF_EXISTS t1 preferred_data_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS jump_table_start (UNDEF UNDEF (TUPLE t1 2) UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "string") (NUMBER -2) (STRING "string in jump table")) data_object_point)
))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Size,\"other\",4,\"data access\") :- \n   data_object_candidate(EA,Size,\"other\"),\n   Size < 16.\nin file symbolization.dl [773:1-775:15]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [773:1-775:15];data_object_point(EA,Size,\\\"other\\\",4,\\\"data access\\\") :- \\n   data_object_candidate(EA,Size,\\\"other\\\"),\\n   Size < 16.;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "other")))
          (IF (AND (CONSTRAINT <= (TUPLE t0 1)  (UNSIGNED 16)) (CONSTRAINT != (TUPLE t0 1)  (UNSIGNED 16)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "other") (NUMBER 4) (STRING "data access")) data_object_point)
          ))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Size,\"other\",1,\"data access xmm\") :- \n   data_object_candidate(EA,Size,\"other\"),\n   Size >= 16.\nin file symbolization.dl [778:1-780:16]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [778:1-780:16];data_object_point(EA,Size,\\\"other\\\",1,\\\"data access xmm\\\") :- \\n   data_object_candidate(EA,Size,\\\"other\\\"),\\n   Size >= 16.;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "other")))
          (IF (CONSTRAINT >= (TUPLE t0 1)  (UNSIGNED 16))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "other") (NUMBER 1) (STRING "data access xmm")) data_object_point)
          ))        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA,Size,Type,2,\"pointed by pointer array\") :- \n   address_array(EA_array,Distance,InitialEA),\n   address_in_data(EA_array,EA),\n   data_object_candidate(EA,Size,Type),\n   address_array( _tmp_37,Distance,InitialEA),\n   address_in_data( _tmp_37,EA2),\n   data_object_candidate(EA2,_,Type),\n   address_array( _tmp_38,Distance,InitialEA),\n   address_in_data( _tmp_38,EA3),\n   data_object_candidate(EA3,_,Type),\n   address_array( _tmp_39,Distance,InitialEA),\n   address_in_data( _tmp_39,EA4),\n   data_object_candidate(EA4,_,Type),\n    _tmp_37 = (EA_array+Distance),\n    _tmp_38 = (EA_array+(2*Distance)),\n    _tmp_39 = (EA_array+(3*Distance)).\nin file symbolization.dl [679:1-697:43]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [679:1-697:43];data_object_point(EA,Size,Type,2,\\\"pointed by pointer array\\\") :- \\n   address_array(EA_array,Distance,InitialEA),\\n   address_in_data(EA_array,EA),\\n   data_object_candidate(EA,Size,Type),\\n   address_array( _tmp_37,Distance,InitialEA),\\n   address_in_data( _tmp_37,EA2),\\n   data_object_candidate(EA2,_,Type),\\n   address_array( _tmp_38,Distance,InitialEA),\\n   address_in_data( _tmp_38,EA3),\\n   data_object_candidate(EA3,_,Type),\\n   address_array( _tmp_39,Distance,InitialEA),\\n   address_in_data( _tmp_39,EA4),\\n   data_object_candidate(EA4,_,Type),\\n    _tmp_37 = (EA_array+Distance),\\n    _tmp_38 = (EA_array+(2*Distance)),\\n    _tmp_39 = (EA_array+(3*Distance)).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY address_array)) (NOT (ISEMPTY data_object_candidate))) (NOT (ISEMPTY address_in_data)))
         (FOR_IN t0 address_array           (FOR t1 address_array (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
           (FOR t2 address_array (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 2) (TUPLE t0 1)))) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 2)))
            (FOR t3 address_array (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 3) (TUPLE t0 1)))) (= (TUPLE t3 1) (TUPLE t0 1)) (= (TUPLE t3 2) (TUPLE t0 2)))
             (FOR t4 address_in_data (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)))
              (FOR t5 data_object_candidate (INDEX  (= (TUPLE t5 0) (TUPLE t4 1)))
               (INDEXED_IF_EXISTS t6 address_in_data (INDEX  (= (TUPLE t6 0) (TUPLE t1 0))) (EXISTS data_object_candidate ((TUPLE t6 1) UNDEF (TUPLE t5 2)))
                (INDEXED_IF_EXISTS t7 address_in_data (INDEX  (= (TUPLE t7 0) (TUPLE t2 0))) (EXISTS data_object_candidate ((TUPLE t7 1) UNDEF (TUPLE t5 2)))
                 (INDEXED_IF_EXISTS t8 address_in_data (INDEX  (= (TUPLE t8 0) (TUPLE t3 0))) (EXISTS data_object_candidate ((TUPLE t8 1) UNDEF (TUPLE t5 2)))
                  (INSERT ((TUPLE t4 1) (TUPLE t5 1) (TUPLE t5 2) (NUMBER 2) (STRING "pointed by pointer array")) data_object_point)
)))))))))
        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA2,Size2,Type,2,\"pointed by pointer array\") :- \n   address_array(EA_array,Distance,InitialEA),\n   address_in_data(EA_array,EA),\n   data_object_candidate(EA,_,Type),\n   address_array( _tmp_40,Distance,InitialEA),\n   address_in_data( _tmp_40,EA2),\n   data_object_candidate(EA2,Size2,Type),\n   address_array( _tmp_41,Distance,InitialEA),\n   address_in_data( _tmp_41,EA3),\n   data_object_candidate(EA3,_,Type),\n   address_array( _tmp_42,Distance,InitialEA),\n   address_in_data( _tmp_42,EA4),\n   data_object_candidate(EA4,_,Type),\n    _tmp_40 = (EA_array+Distance),\n    _tmp_41 = (EA_array+(2*Distance)),\n    _tmp_42 = (EA_array+(3*Distance)).\nin file symbolization.dl [679:1-697:43]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [679:1-697:43];data_object_point(EA2,Size2,Type,2,\\\"pointed by pointer array\\\") :- \\n   address_array(EA_array,Distance,InitialEA),\\n   address_in_data(EA_array,EA),\\n   data_object_candidate(EA,_,Type),\\n   address_array( _tmp_40,Distance,InitialEA),\\n   address_in_data( _tmp_40,EA2),\\n   data_object_candidate(EA2,Size2,Type),\\n   address_array( _tmp_41,Distance,InitialEA),\\n   address_in_data( _tmp_41,EA3),\\n   data_object_candidate(EA3,_,Type),\\n   address_array( _tmp_42,Distance,InitialEA),\\n   address_in_data( _tmp_42,EA4),\\n   data_object_candidate(EA4,_,Type),\\n    _tmp_40 = (EA_array+Distance),\\n    _tmp_41 = (EA_array+(2*Distance)),\\n    _tmp_42 = (EA_array+(3*Distance)).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY address_array)) (NOT (ISEMPTY data_object_candidate))) (NOT (ISEMPTY address_in_data)))
         (FOR_IN t0 address_array           (FOR t1 address_array (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
           (FOR t2 address_array (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 2) (TUPLE t0 1)))) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 2)))
            (FOR t3 address_array (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 3) (TUPLE t0 1)))) (= (TUPLE t3 1) (TUPLE t0 1)) (= (TUPLE t3 2) (TUPLE t0 2)))
             (FOR t4 address_in_data (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)))
              (FOR t5 data_object_candidate (INDEX  (= (TUPLE t5 0) (TUPLE t4 1)))
               (FOR t6 address_in_data (INDEX  (= (TUPLE t6 0) (TUPLE t1 0)))
                (FOR t7 data_object_candidate (INDEX  (= (TUPLE t7 0) (TUPLE t6 1)) (= (TUPLE t7 2) (TUPLE t5 2)))
                 (INDEXED_IF_EXISTS t8 address_in_data (INDEX  (= (TUPLE t8 0) (TUPLE t2 0))) (EXISTS data_object_candidate ((TUPLE t8 1) UNDEF (TUPLE t5 2)))
                  (INDEXED_IF_EXISTS t9 address_in_data (INDEX  (= (TUPLE t9 0) (TUPLE t3 0))) (EXISTS data_object_candidate ((TUPLE t9 1) UNDEF (TUPLE t5 2)))
                   (INSERT ((TUPLE t6 1) (TUPLE t7 1) (TUPLE t5 2) (NUMBER 2) (STRING "pointed by pointer array")) data_object_point)
))))))))))
        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA3,Size3,Type,2,\"pointed by pointer array\") :- \n   address_array(EA_array,Distance,InitialEA),\n   address_in_data(EA_array,EA),\n   data_object_candidate(EA,_,Type),\n   address_array( _tmp_43,Distance,InitialEA),\n   address_in_data( _tmp_43,EA2),\n   data_object_candidate(EA2,_,Type),\n   address_array( _tmp_44,Distance,InitialEA),\n   address_in_data( _tmp_44,EA3),\n   data_object_candidate(EA3,Size3,Type),\n   address_array( _tmp_45,Distance,InitialEA),\n   address_in_data( _tmp_45,EA4),\n   data_object_candidate(EA4,_,Type),\n    _tmp_43 = (EA_array+Distance),\n    _tmp_44 = (EA_array+(2*Distance)),\n    _tmp_45 = (EA_array+(3*Distance)).\nin file symbolization.dl [679:1-697:43]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [679:1-697:43];data_object_point(EA3,Size3,Type,2,\\\"pointed by pointer array\\\") :- \\n   address_array(EA_array,Distance,InitialEA),\\n   address_in_data(EA_array,EA),\\n   data_object_candidate(EA,_,Type),\\n   address_array( _tmp_43,Distance,InitialEA),\\n   address_in_data( _tmp_43,EA2),\\n   data_object_candidate(EA2,_,Type),\\n   address_array( _tmp_44,Distance,InitialEA),\\n   address_in_data( _tmp_44,EA3),\\n   data_object_candidate(EA3,Size3,Type),\\n   address_array( _tmp_45,Distance,InitialEA),\\n   address_in_data( _tmp_45,EA4),\\n   data_object_candidate(EA4,_,Type),\\n    _tmp_43 = (EA_array+Distance),\\n    _tmp_44 = (EA_array+(2*Distance)),\\n    _tmp_45 = (EA_array+(3*Distance)).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY address_array)) (NOT (ISEMPTY data_object_candidate))) (NOT (ISEMPTY address_in_data)))
         (FOR_IN t0 address_array           (FOR t1 address_array (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
           (FOR t2 address_array (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 2) (TUPLE t0 1)))) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 2)))
            (FOR t3 address_array (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 3) (TUPLE t0 1)))) (= (TUPLE t3 1) (TUPLE t0 1)) (= (TUPLE t3 2) (TUPLE t0 2)))
             (FOR t4 address_in_data (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)))
              (FOR t5 data_object_candidate (INDEX  (= (TUPLE t5 0) (TUPLE t4 1)))
               (INDEXED_IF_EXISTS t6 address_in_data (INDEX  (= (TUPLE t6 0) (TUPLE t1 0))) (EXISTS data_object_candidate ((TUPLE t6 1) UNDEF (TUPLE t5 2)))
                (FOR t7 address_in_data (INDEX  (= (TUPLE t7 0) (TUPLE t2 0)))
                 (FOR t8 data_object_candidate (INDEX  (= (TUPLE t8 0) (TUPLE t7 1)) (= (TUPLE t8 2) (TUPLE t5 2)))
                  (INDEXED_IF_EXISTS t9 address_in_data (INDEX  (= (TUPLE t9 0) (TUPLE t3 0))) (EXISTS data_object_candidate ((TUPLE t9 1) UNDEF (TUPLE t5 2)))
                   (INSERT ((TUPLE t7 1) (TUPLE t8 1) (TUPLE t5 2) (NUMBER 2) (STRING "pointed by pointer array")) data_object_point)
))))))))))
        )       )
      )
     )
      (DEBUG 
 "data_object_point(EA4,Size4,Type,2,\"pointed by pointer array\") :- \n   address_array(EA_array,Distance,InitialEA),\n   address_in_data(EA_array,EA),\n   data_object_candidate(EA,_,Type),\n   address_array( _tmp_46,Distance,InitialEA),\n   address_in_data( _tmp_46,EA2),\n   data_object_candidate(EA2,_,Type),\n   address_array( _tmp_47,Distance,InitialEA),\n   address_in_data( _tmp_47,EA3),\n   data_object_candidate(EA3,_,Type),\n   address_array( _tmp_48,Distance,InitialEA),\n   address_in_data( _tmp_48,EA4),\n   data_object_candidate(EA4,Size4,Type),\n    _tmp_46 = (EA_array+Distance),\n    _tmp_47 = (EA_array+(2*Distance)),\n    _tmp_48 = (EA_array+(3*Distance)).\nin file symbolization.dl [679:1-697:43]" 
      (TIMER_ON data_object_point "@t-nonrecursive-rule;data_object_point;symbolization.dl [679:1-697:43];data_object_point(EA4,Size4,Type,2,\\\"pointed by pointer array\\\") :- \\n   address_array(EA_array,Distance,InitialEA),\\n   address_in_data(EA_array,EA),\\n   data_object_candidate(EA,_,Type),\\n   address_array( _tmp_46,Distance,InitialEA),\\n   address_in_data( _tmp_46,EA2),\\n   data_object_candidate(EA2,_,Type),\\n   address_array( _tmp_47,Distance,InitialEA),\\n   address_in_data( _tmp_47,EA3),\\n   data_object_candidate(EA3,_,Type),\\n   address_array( _tmp_48,Distance,InitialEA),\\n   address_in_data( _tmp_48,EA4),\\n   data_object_candidate(EA4,Size4,Type),\\n    _tmp_46 = (EA_array+Distance),\\n    _tmp_47 = (EA_array+(2*Distance)),\\n    _tmp_48 = (EA_array+(3*Distance)).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY address_array)) (NOT (ISEMPTY data_object_candidate))) (NOT (ISEMPTY address_in_data)))
         (FOR_IN t0 address_array           (FOR t1 address_array (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
           (FOR t2 address_array (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 2) (TUPLE t0 1)))) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 2)))
            (FOR t3 address_array (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (UNSIGNED 3) (TUPLE t0 1)))) (= (TUPLE t3 1) (TUPLE t0 1)) (= (TUPLE t3 2) (TUPLE t0 2)))
             (FOR t4 address_in_data (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)))
              (FOR t5 data_object_candidate (INDEX  (= (TUPLE t5 0) (TUPLE t4 1)))
               (INDEXED_IF_EXISTS t6 address_in_data (INDEX  (= (TUPLE t6 0) (TUPLE t1 0))) (EXISTS data_object_candidate ((TUPLE t6 1) UNDEF (TUPLE t5 2)))
                (INDEXED_IF_EXISTS t7 address_in_data (INDEX  (= (TUPLE t7 0) (TUPLE t2 0))) (EXISTS data_object_candidate ((TUPLE t7 1) UNDEF (TUPLE t5 2)))
                 (FOR t8 address_in_data (INDEX  (= (TUPLE t8 0) (TUPLE t3 0)))
                  (FOR t9 data_object_candidate (INDEX  (= (TUPLE t9 0) (TUPLE t8 1)) (= (TUPLE t9 2) (TUPLE t5 2)))
                   (INSERT ((TUPLE t8 1) (TUPLE t9 1) (TUPLE t5 2) (NUMBER 2) (STRING "pointed by pointer array")) data_object_point)
))))))))))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR address_array)
     (CLEAR label_conflict)
     (CLEAR npad)
     (CLEAR preferred_data_access)
     (CLEAR special_data_section)
     (CLEAR string_candidate)
 ) )  )
  (SUBROUTINE data_object_total_points
(STMTS (STMTS     (TIMER_ON data_object_total_points "@t-nonrecursive-relation;data_object_total_points;symbolization.dl [812:7-812:31];"
(STMTS      (DEBUG 
 "data_object_total_points(EA,Size,Type,@generator_0) :- \n   data_object_candidate(EA,Size,Type),\n   @generator_0 = sum X : { data_object_point(EA,Size,Type,X,+underscore_1156) }.\nin file symbolization.dl [814:1-816:58]" 
      (TIMER_ON data_object_total_points "@t-nonrecursive-rule;data_object_total_points;symbolization.dl [814:1-816:58];data_object_total_points(EA,Size,Type,@generator_0) :- \\n   data_object_candidate(EA,Size,Type),\\n   @generator_0 = sum X : { data_object_point(EA,Size,Type,X,+underscore_1156) }.;"
(QUERY
        (IF (NOT (ISEMPTY data_object_candidate))
         (FOR_IN t0 data_object_candidate           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION SUM  (TUPLE t1 3) ))  t1 data_object_point (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2))) TRUE 
           (IF (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0)) data_object_total_points)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR data_object_candidate)
     (CLEAR data_object_point)
 ) )  )
  (SUBROUTINE data_region
(STMTS (STMTS (STMTS     (TIMER_ON data_region "@t-relation-loadtime;data_region;/usr/local/src/ddisasm/src/datalog/main.dl [301:7-301:18];loadtime;"
     (IO data_region ((= IO "file") (= attributeNames "Begin\tSize") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "data_region") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"Begin\", \"Size\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (TIMER_ON data_region "@t-nonrecursive-relation;data_region;/usr/local/src/ddisasm/src/datalog/main.dl [301:7-301:18];"
(STMTS      (DEBUG 
 "data_region(Begin,Size) :- \n   pe_data_directory(_,Begin,Size),\n   Size > 0.\nin file pe_binaries.dl [99:1-101:43]" 
      (TIMER_ON data_region "@t-nonrecursive-rule;data_region;binary/pe/pe_binaries.dl [99:1-101:43];data_region(Begin,Size) :- \\n   pe_data_directory(_,Begin,Size),\\n   Size > 0.;"
(QUERY
        (IF (NOT (ISEMPTY pe_data_directory))
         (FOR_IN t0 pe_data_directory           (IF (CONSTRAINT > (TUPLE t0 2)  (UNSIGNED 0))
           (INSERT ((TUPLE t0 1) (TUPLE t0 2)) data_region)
          ))
        )       )
      )
     )
      (DEBUG 
 "data_region(Begin,Size) :- \n   pe_debug_data(_,Begin,Size),\n   Size > 0.\nin file pe_binaries.dl [99:1-101:43]" 
      (TIMER_ON data_region "@t-nonrecursive-rule;data_region;binary/pe/pe_binaries.dl [99:1-101:43];data_region(Begin,Size) :- \\n   pe_debug_data(_,Begin,Size),\\n   Size > 0.;"
(QUERY
        (IF (NOT (ISEMPTY pe_debug_data))
         (FOR_IN t0 pe_debug_data           (IF (CONSTRAINT > (TUPLE t0 2)  (UNSIGNED 0))
           (INSERT ((TUPLE t0 1) (TUPLE t0 2)) data_region)
          ))
        )       )
      )
     )
      (DEBUG 
 "data_region(Start,(z-Start)) :- \n   binary_format(\"PE\"),\n   incremental_linking(_,EA),\n   next(EA,Start),\n   __agg_single4(z).\nin file pe_binaries.dl [234:1-248:25]" 
      (TIMER_ON data_region "@t-nonrecursive-rule;data_region;binary/pe/pe_binaries.dl [234:1-248:25];data_region(Start,(z-Start)) :- \\n   binary_format(\\\"PE\\\"),\\n   incremental_linking(_,EA),\\n   next(EA,Start),\\n   __agg_single4(z).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY __agg_single4)) (NOT (ISEMPTY incremental_linking))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY next))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 incremental_linking           (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (FOR_IN t2 __agg_single4             (INSERT ((TUPLE t1 1) (INTRINSIC - (TUPLE t2 0) (TUPLE t1 1))) data_region)
)
))
        )       )
      )
     )
      (DEBUG 
 "data_region(Start,(z-Start)) :- \n   binary_format(\"PE\"),\n   !incremental_linking(_,_),\n   entry_point(Entry),\n   z <= Entry,\n   loaded_section(Start,_,\".text\"),\n   __agg_single4(z).\nin file pe_binaries.dl [234:1-248:25]" 
      (TIMER_ON data_region "@t-nonrecursive-rule;data_region;binary/pe/pe_binaries.dl [234:1-248:25];data_region(Start,(z-Start)) :- \\n   binary_format(\\\"PE\\\"),\\n   !incremental_linking(_,_),\\n   entry_point(Entry),\\n   z <= Entry,\\n   loaded_section(Start,_,\\\".text\\\"),\\n   __agg_single4(z).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY entry_point)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY __agg_single4))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE")))) (NOT (EXISTS incremental_linking (UNDEF UNDEF))))
         (FOR_IN t0 entry_point           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (STRING ".text")))
           (FOR_IN t2 __agg_single4             (IF (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t0 0))
             (INSERT ((TUPLE t1 0) (INTRINSIC - (TUPLE t2 0) (TUPLE t1 0))) data_region)
            ))
))
        )       )
      )
     )
 )    )
 )   ) (STMTS     (CLEAR __agg_single4)
     (CLEAR pe_data_directory)
     (CLEAR pe_debug_data)
 ) )  )
  (SUBROUTINE data_section
(STMTS (STMTS     (TIMER_ON data_section "@t-nonrecursive-relation;data_section;/usr/local/src/ddisasm/src/datalog/main.dl [816:7-816:19];"
(STMTS      (DEBUG 
 "data_section(Name) :- \n   section_property(Name,\"Loaded\"),\n   !section_property(Name,\"Executable\"),\n   section_type(Name,Type),\n   elf_section_type(\"PROGBITS\",Type).\nin file elf_binaries.dl [49:1-61:7]" 
      (TIMER_ON data_section "@t-nonrecursive-rule;data_section;binary/elf/elf_binaries.dl [49:1-61:7];data_section(Name) :- \\n   section_property(Name,\\\"Loaded\\\"),\\n   !section_property(Name,\\\"Executable\\\"),\\n   section_type(Name,Type),\\n   elf_section_type(\\\"PROGBITS\\\",Type).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY elf_section_type)) (NOT (ISEMPTY section_property))) (NOT (ISEMPTY section_type)))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Executable"))))
           (INDEXED_IF_EXISTS t1 section_type (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS elf_section_type ((STRING "PROGBITS") (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0)) data_section)
)          ))        )       )
      )
     )
      (DEBUG 
 "data_section(Name) :- \n   section_property(Name,\"Loaded\"),\n   !section_property(Name,\"Executable\"),\n   section_type(Name,Type),\n   elf_section_type(\"NOBITS\",Type).\nin file elf_binaries.dl [49:1-61:7]" 
      (TIMER_ON data_section "@t-nonrecursive-rule;data_section;binary/elf/elf_binaries.dl [49:1-61:7];data_section(Name) :- \\n   section_property(Name,\\\"Loaded\\\"),\\n   !section_property(Name,\\\"Executable\\\"),\\n   section_type(Name,Type),\\n   elf_section_type(\\\"NOBITS\\\",Type).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY elf_section_type)) (NOT (ISEMPTY section_property))) (NOT (ISEMPTY section_type)))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Executable"))))
           (INDEXED_IF_EXISTS t1 section_type (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS elf_section_type ((STRING "NOBITS") (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0)) data_section)
)          ))        )       )
      )
     )
      (DEBUG 
 "data_section(Name) :- \n   section_property(Name,\"Loaded\"),\n   !section_property(Name,\"Executable\"),\n   section_type(Name,Type),\n   elf_section_type(\"NOTE\",Type).\nin file elf_binaries.dl [49:1-61:7]" 
      (TIMER_ON data_section "@t-nonrecursive-rule;data_section;binary/elf/elf_binaries.dl [49:1-61:7];data_section(Name) :- \\n   section_property(Name,\\\"Loaded\\\"),\\n   !section_property(Name,\\\"Executable\\\"),\\n   section_type(Name,Type),\\n   elf_section_type(\\\"NOTE\\\",Type).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY elf_section_type)) (NOT (ISEMPTY section_property))) (NOT (ISEMPTY section_type)))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Executable"))))
           (INDEXED_IF_EXISTS t1 section_type (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS elf_section_type ((STRING "NOTE") (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0)) data_section)
)          ))        )       )
      )
     )
      (DEBUG 
 "data_section(Name) :- \n   section_property(Name,\"Loaded\"),\n   !section_property(Name,\"Executable\"),\n   section_type(Name,Type),\n   elf_section_type(\"INIT_ARRAY\",Type).\nin file elf_binaries.dl [49:1-61:7]" 
      (TIMER_ON data_section "@t-nonrecursive-rule;data_section;binary/elf/elf_binaries.dl [49:1-61:7];data_section(Name) :- \\n   section_property(Name,\\\"Loaded\\\"),\\n   !section_property(Name,\\\"Executable\\\"),\\n   section_type(Name,Type),\\n   elf_section_type(\\\"INIT_ARRAY\\\",Type).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY elf_section_type)) (NOT (ISEMPTY section_property))) (NOT (ISEMPTY section_type)))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Executable"))))
           (INDEXED_IF_EXISTS t1 section_type (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS elf_section_type ((STRING "INIT_ARRAY") (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0)) data_section)
)          ))        )       )
      )
     )
      (DEBUG 
 "data_section(Name) :- \n   section_property(Name,\"Loaded\"),\n   !section_property(Name,\"Executable\"),\n   section_type(Name,Type),\n   elf_section_type(\"FINI_ARRAY\",Type).\nin file elf_binaries.dl [49:1-61:7]" 
      (TIMER_ON data_section "@t-nonrecursive-rule;data_section;binary/elf/elf_binaries.dl [49:1-61:7];data_section(Name) :- \\n   section_property(Name,\\\"Loaded\\\"),\\n   !section_property(Name,\\\"Executable\\\"),\\n   section_type(Name,Type),\\n   elf_section_type(\\\"FINI_ARRAY\\\",Type).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY elf_section_type)) (NOT (ISEMPTY section_property))) (NOT (ISEMPTY section_type)))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Executable"))))
           (INDEXED_IF_EXISTS t1 section_type (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS elf_section_type ((STRING "FINI_ARRAY") (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0)) data_section)
)          ))        )       )
      )
     )
      (DEBUG 
 "data_section(Name) :- \n   section_property(Name,\"Loaded\"),\n   !section_property(Name,\"Executable\"),\n   section_type(Name,Type),\n   elf_section_type(\"PREINIT_ARRAY\",Type).\nin file elf_binaries.dl [49:1-61:7]" 
      (TIMER_ON data_section "@t-nonrecursive-rule;data_section;binary/elf/elf_binaries.dl [49:1-61:7];data_section(Name) :- \\n   section_property(Name,\\\"Loaded\\\"),\\n   !section_property(Name,\\\"Executable\\\"),\\n   section_type(Name,Type),\\n   elf_section_type(\\\"PREINIT_ARRAY\\\",Type).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY elf_section_type)) (NOT (ISEMPTY section_property))) (NOT (ISEMPTY section_type)))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Executable"))))
           (INDEXED_IF_EXISTS t1 section_type (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS elf_section_type ((STRING "PREINIT_ARRAY") (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0)) data_section)
)          ))        )       )
      )
     )
      (DEBUG 
 "data_section(Name) :- \n   section_property(Name,\"Loaded\"),\n   !section_property(Name,\"Executable\"),\n   section_type(Name,Type),\n   elf_section_type(\"DYNAMIC\",Type).\nin file elf_binaries.dl [49:1-61:7]" 
      (TIMER_ON data_section "@t-nonrecursive-rule;data_section;binary/elf/elf_binaries.dl [49:1-61:7];data_section(Name) :- \\n   section_property(Name,\\\"Loaded\\\"),\\n   !section_property(Name,\\\"Executable\\\"),\\n   section_type(Name,Type),\\n   elf_section_type(\\\"DYNAMIC\\\",Type).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY elf_section_type)) (NOT (ISEMPTY section_property))) (NOT (ISEMPTY section_type)))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Executable"))))
           (INDEXED_IF_EXISTS t1 section_type (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS elf_section_type ((STRING "DYNAMIC") (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0)) data_section)
)          ))        )       )
      )
     )
      (DEBUG 
 "data_section(Name) :- \n   section_property(Name,\"Loaded\"),\n   !section_property(Name,\"Executable\"),\n   section_type(Name,Type),\n   elf_section_type(\"RELA\",Type).\nin file elf_binaries.dl [49:1-61:7]" 
      (TIMER_ON data_section "@t-nonrecursive-rule;data_section;binary/elf/elf_binaries.dl [49:1-61:7];data_section(Name) :- \\n   section_property(Name,\\\"Loaded\\\"),\\n   !section_property(Name,\\\"Executable\\\"),\\n   section_type(Name,Type),\\n   elf_section_type(\\\"RELA\\\",Type).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY elf_section_type)) (NOT (ISEMPTY section_property))) (NOT (ISEMPTY section_type)))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Executable"))))
           (INDEXED_IF_EXISTS t1 section_type (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS elf_section_type ((STRING "RELA") (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0)) data_section)
)          ))        )       )
      )
     )
      (DEBUG 
 "data_section(Section) :- \n   binary_format(\"PE\"),\n   section_property(Section,\"Loaded\"),\n   section_property(Section,\"Initialized\"),\n   !section_property(Section,\"Executable\").\nin file pe_binaries.dl [86:1-90:45]" 
      (TIMER_ON data_section "@t-nonrecursive-rule;data_section;binary/pe/pe_binaries.dl [86:1-90:45];data_section(Section) :- \\n   binary_format(\\\"PE\\\"),\\n   section_property(Section,\\\"Loaded\\\"),\\n   section_property(Section,\\\"Initialized\\\"),\\n   !section_property(Section,\\\"Executable\\\").;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY section_property))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (AND (EXISTS section_property ((TUPLE t0 0) (STRING "Initialized"))) (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Executable")))))
           (INSERT ((TUPLE t0 0)) data_section)
          ))        )       )
      )
     )
      (DEBUG 
 "data_section(Section) :- \n   binary_format(\"PE\"),\n   section_property(Section,\"Loaded\"),\n   !section_property(Section,\"Initialized\"),\n   !section_property(Section,\"Executable\").\nin file pe_binaries.dl [92:1-97:45]" 
      (TIMER_ON data_section "@t-nonrecursive-rule;data_section;binary/pe/pe_binaries.dl [92:1-97:45];data_section(Section) :- \\n   binary_format(\\\"PE\\\"),\\n   section_property(Section,\\\"Loaded\\\"),\\n   !section_property(Section,\\\"Initialized\\\"),\\n   !section_property(Section,\\\"Executable\\\").;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY section_property))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 section_property (INDEX  (= (TUPLE t0 1) (STRING "Loaded")))
          (IF (AND (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Initialized")))) (NOT (EXISTS section_property ((TUPLE t0 0) (STRING "Executable")))))
           (INSERT ((TUPLE t0 0)) data_section)
          ))        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR elf_section_type)
     (CLEAR section_type)
 ) )  )
  (SUBROUTINE data_segment
(STMTS (STMTS     (TIMER_ON data_segment "@t-nonrecursive-relation;data_segment;/usr/local/src/ddisasm/src/datalog/main.dl [867:7-867:19];"
(STMTS      (DEBUG 
 "data_segment(0x7FFE0000,0x7FFE1000) :- \n   binary_format(\"PE\").\nin file pe_binaries.dl [104:1-105:25]" 
      (TIMER_ON data_segment "@t-nonrecursive-rule;data_segment;binary/pe/pe_binaries.dl [104:1-105:25];data_segment(0x7FFE0000,0x7FFE1000) :- \\n   binary_format(\\\"PE\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "PE"))))
         (INSERT ((UNSIGNED 2147352576) (UNSIGNED 2147356672)) data_segment)
        )       )
      )
     )
      (DEBUG 
 "data_segment(ImageBase,(ImageBase+1024)) :- \n   binary_format(\"PE\"),\n   base_address(ImageBase).\nin file pe_binaries.dl [108:1-110:29]" 
      (TIMER_ON data_segment "@t-nonrecursive-rule;data_segment;binary/pe/pe_binaries.dl [108:1-110:29];data_segment(ImageBase,(ImageBase+1024)) :- \\n   binary_format(\\\"PE\\\"),\\n   base_address(ImageBase).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY base_address))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 base_address           (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1024))) data_segment)
)
        )       )
      )
     )
      (DEBUG 
 "data_segment(Begin,End) :- \n   data_section(Section),\n   loaded_section(Begin,End,Section).\nin file main.dl [869:1-871:39]" 
      (TIMER_ON data_segment "@t-nonrecursive-rule;data_segment;/usr/local/src/ddisasm/src/datalog/main.dl [869:1-871:39];data_segment(Begin,End) :- \\n   data_section(Section),\\n   loaded_section(Begin,End,Section).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_section)) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 data_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 0) (TUPLE t1 1)) data_segment)
))
        )       )
      )
     )
      (DEBUG 
 "data_segment(Begin,End) :- \n   initialized_data_segment(Begin,End).\nin file main.dl [873:1-874:41]" 
      (TIMER_ON data_segment "@t-nonrecursive-rule;data_segment;/usr/local/src/ddisasm/src/datalog/main.dl [873:1-874:41];data_segment(Begin,End) :- \\n   initialized_data_segment(Begin,End).;"
(QUERY
        (IF (NOT (ISEMPTY initialized_data_segment))
         (FOR_IN t0 initialized_data_segment           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) data_segment)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR initialized_data_segment)
 ) )  )
  (SUBROUTINE def_register_is_not_base_address
(STMTS (STMTS     (TIMER_ON def_register_is_not_base_address "@t-nonrecursive-relation;def_register_is_not_base_address;register_type_analysis.dl [24:7-24:39];"
(STMTS      (DEBUG 
 "def_register_is_not_base_address(EA_def,Reg) :- \n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   cmp_immediate_to_reg(EA,Reg,Imm_index,_),\n   !symbolic_operand_candidate(EA,Imm_index,_,_).\nin file register_type_analysis.dl [27:1-30:51]" 
      (TIMER_ON def_register_is_not_base_address "@t-nonrecursive-rule;def_register_is_not_base_address;register_type_analysis.dl [27:1-30:51];def_register_is_not_base_address(EA_def,Reg) :- \\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   cmp_immediate_to_reg(EA,Reg,Imm_index,_),\\n   !symbolic_operand_candidate(EA,Imm_index,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY reg_def_use.def_used)) (NOT (ISEMPTY cmp_immediate_to_reg)))
         (FOR_IN t0 reg_def_use.def_used           (INDEXED_IF_EXISTS t1 cmp_immediate_to_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 1) (TUPLE t0 1))) (NOT (EXISTS symbolic_operand_candidate ((TUPLE t0 2) (TUPLE t1 2) UNDEF UNDEF)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) def_register_is_not_base_address)
))
        )       )
      )
     )
      (DEBUG 
 "def_register_is_not_base_address(EA_def,Reg) :- \n   reg_def_use.def_used(EA_def,Reg,_,_),\n   instruction(EA_def,_,_,Operation,_,_,_,_,_,_),\n   arch.multiplication_operation(Operation).\nin file register_type_analysis.dl [33:1-40:7]" 
      (TIMER_ON def_register_is_not_base_address "@t-nonrecursive-rule;def_register_is_not_base_address;register_type_analysis.dl [33:1-40:7];def_register_is_not_base_address(EA_def,Reg) :- \\n   reg_def_use.def_used(EA_def,Reg,_,_),\\n   instruction(EA_def,_,_,Operation,_,_,_,_,_,_),\\n   arch.multiplication_operation(Operation).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY arch.multiplication_operation)) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 reg_def_use.def_used           (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS arch.multiplication_operation ((TUPLE t1 3)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) def_register_is_not_base_address)
))
        )       )
      )
     )
      (DEBUG 
 "def_register_is_not_base_address(EA_def,Reg) :- \n   reg_def_use.def_used(EA_def,Reg,_,_),\n   instruction(EA_def,_,_,Operation,_,_,_,_,_,_),\n   arch.shift_rotate_operation(Operation).\nin file register_type_analysis.dl [33:1-40:7]" 
      (TIMER_ON def_register_is_not_base_address "@t-nonrecursive-rule;def_register_is_not_base_address;register_type_analysis.dl [33:1-40:7];def_register_is_not_base_address(EA_def,Reg) :- \\n   reg_def_use.def_used(EA_def,Reg,_,_),\\n   instruction(EA_def,_,_,Operation,_,_,_,_,_,_),\\n   arch.shift_rotate_operation(Operation).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY arch.shift_rotate_operation)) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 reg_def_use.def_used           (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS arch.shift_rotate_operation ((TUPLE t1 3)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) def_register_is_not_base_address)
))
        )       )
      )
     )
      (DEBUG 
 "def_register_is_not_base_address(EA_def,Reg) :- \n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.multiplication_operation(Operation).\nin file register_type_analysis.dl [43:1-46:46]" 
      (TIMER_ON def_register_is_not_base_address "@t-nonrecursive-rule;def_register_is_not_base_address;register_type_analysis.dl [43:1-46:46];def_register_is_not_base_address(EA_def,Reg) :- \\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.multiplication_operation(Operation).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY arch.multiplication_operation)) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 reg_def_use.def_used           (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 2))) (EXISTS arch.multiplication_operation ((TUPLE t1 3)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) def_register_is_not_base_address)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.multiplication_operation)
     (CLEAR arch.shift_rotate_operation)
 ) )  )
  (SUBROUTINE defined_symbol
(STMTS     (TIMER_ON defined_symbol "@t-nonrecursive-relation;defined_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [771:7-771:21];"
(STMTS      (DEBUG 
 "defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\n   SectIndex != 0,\n   SectIndex < 0xff00,\n   Type != \"FILE\".\nin file main.dl [773:1-786:20]" 
      (TIMER_ON defined_symbol "@t-nonrecursive-rule;defined_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [773:1-786:20];defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \\n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\\n   SectIndex != 0,\\n   SectIndex < 0xff00,\\n   Type != \\\"FILE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR_IN t0 symbol           (IF (AND (AND (CONSTRAINT != (TUPLE t0 5)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 2)  (STRING "FILE"))) (CONSTRAINT < (TUPLE t0 5)  (UNSIGNED 65280)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6) (TUPLE t0 7) (TUPLE t0 8)) defined_symbol)
          ))
        )       )
      )
     )
      (DEBUG 
 "defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\n   SectIndex != 0,\n   SectIndex = 0xfff1,\n   Type != \"FILE\".\nin file main.dl [773:1-786:20]" 
      (TIMER_ON defined_symbol "@t-nonrecursive-rule;defined_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [773:1-786:20];defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \\n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\\n   SectIndex != 0,\\n   SectIndex = 0xfff1,\\n   Type != \\\"FILE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR t0 symbol (INDEX  (= (TUPLE t0 5) (UNSIGNED 65521)))
          (IF (AND (CONSTRAINT != (TUPLE t0 5)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 2)  (STRING "FILE")))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6) (TUPLE t0 7) (TUPLE t0 8)) defined_symbol)
          ))        )       )
      )
     )
      (DEBUG 
 "defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\n   SectIndex != 0,\n   SectIndex > 0xffff,\n   Type != \"FILE\".\nin file main.dl [773:1-786:20]" 
      (TIMER_ON defined_symbol "@t-nonrecursive-rule;defined_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [773:1-786:20];defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \\n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\\n   SectIndex != 0,\\n   SectIndex > 0xffff,\\n   Type != \\\"FILE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR_IN t0 symbol           (IF (AND (AND (CONSTRAINT != (TUPLE t0 5)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 2)  (STRING "FILE"))) (CONSTRAINT > (TUPLE t0 5)  (UNSIGNED 65535)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6) (TUPLE t0 7) (TUPLE t0 8)) defined_symbol)
          ))
        )       )
      )
     )
      (DEBUG 
 "defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\n   EA != 0,\n   SectIndex < 0xff00,\n   Type != \"FILE\".\nin file main.dl [773:1-786:20]" 
      (TIMER_ON defined_symbol "@t-nonrecursive-rule;defined_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [773:1-786:20];defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \\n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\\n   EA != 0,\\n   SectIndex < 0xff00,\\n   Type != \\\"FILE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR_IN t0 symbol           (IF (AND (AND (CONSTRAINT != (TUPLE t0 0)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 2)  (STRING "FILE"))) (CONSTRAINT < (TUPLE t0 5)  (UNSIGNED 65280)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6) (TUPLE t0 7) (TUPLE t0 8)) defined_symbol)
          ))
        )       )
      )
     )
      (DEBUG 
 "defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\n   EA != 0,\n   SectIndex = 0xfff1,\n   Type != \"FILE\".\nin file main.dl [773:1-786:20]" 
      (TIMER_ON defined_symbol "@t-nonrecursive-rule;defined_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [773:1-786:20];defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \\n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\\n   EA != 0,\\n   SectIndex = 0xfff1,\\n   Type != \\\"FILE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR t0 symbol (INDEX  (= (TUPLE t0 5) (UNSIGNED 65521)))
          (IF (AND (CONSTRAINT != (TUPLE t0 0)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 2)  (STRING "FILE")))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6) (TUPLE t0 7) (TUPLE t0 8)) defined_symbol)
          ))        )       )
      )
     )
      (DEBUG 
 "defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\n   EA != 0,\n   SectIndex > 0xffff,\n   Type != \"FILE\".\nin file main.dl [773:1-786:20]" 
      (TIMER_ON defined_symbol "@t-nonrecursive-rule;defined_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [773:1-786:20];defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name) :- \\n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,OriginTable,TableIndex,Name),\\n   EA != 0,\\n   SectIndex > 0xffff,\\n   Type != \\\"FILE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR_IN t0 symbol           (IF (AND (AND (CONSTRAINT != (TUPLE t0 0)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 2)  (STRING "FILE"))) (CONSTRAINT > (TUPLE t0 5)  (UNSIGNED 65535)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6) (TUPLE t0 7) (TUPLE t0 8)) defined_symbol)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE dest_enlarged_data_section
(STMTS (STMTS     (TIMER_ON dest_enlarged_data_section "@t-nonrecursive-relation;dest_enlarged_data_section;pointer_reattribution.dl [136:7-136:33];"
(STMTS      (DEBUG 
 "dest_enlarged_data_section(EA_def,Reg,as(NewDest, address),(Beg-as(max(Mult,-(Mult)), unsigned)),(End+as(max(Mult,-(Mult)), unsigned)),Beg,End) :- \n   best_value_reg(EA_def,Reg,_,Mult,NewDest,\"loop\"),\n   NewDest >= 0,\n   regular_data_section(Name),\n   loaded_section(Beg,End,Name),\n   as(NewDest, address) >= Beg,\n   as(NewDest, address) <= End.\nin file pointer_reattribution.dl [139:1-146:24]" 
      (TIMER_ON dest_enlarged_data_section "@t-nonrecursive-rule;dest_enlarged_data_section;pointer_reattribution.dl [139:1-146:24];dest_enlarged_data_section(EA_def,Reg,as(NewDest, address),(Beg-as(max(Mult,-(Mult)), unsigned)),(End+as(max(Mult,-(Mult)), unsigned)),Beg,End) :- \\n   best_value_reg(EA_def,Reg,_,Mult,NewDest,\\\"loop\\\"),\\n   NewDest >= 0,\\n   regular_data_section(Name),\\n   loaded_section(Beg,End,Name),\\n   as(NewDest, address) >= Beg,\\n   as(NewDest, address) <= End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY best_value_reg))) (NOT (ISEMPTY regular_data_section)))
         (FOR t0 best_value_reg (INDEX  (<= (NUMBER 0) (TUPLE t0 4) ) (= (TUPLE t0 5) (STRING "loop")))
          (FOR_IN t1 regular_data_section            (FOR t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
            (IF (AND (CONSTRAINT >= (TUPLE t0 4)  (TUPLE t2 0)) (CONSTRAINT <= (TUPLE t0 4)  (TUPLE t2 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 4) (INTRINSIC - (TUPLE t2 0) (INTRINSIC max (TUPLE t0 3) (INTRINSIC - (TUPLE t0 3)))) (INTRINSIC + (TUPLE t2 1) (INTRINSIC max (TUPLE t0 3) (INTRINSIC - (TUPLE t0 3)))) (TUPLE t2 0) (TUPLE t2 1)) dest_enlarged_data_section)
            )))
)        )       )
      )
     )
      (DEBUG 
 "dest_enlarged_data_section(EA_def,Reg,as(NewDest, address),((Beg-as(max(Mult,-(Mult)), unsigned))-as(Offset, address)),((End+as(max(Mult,-(Mult)), unsigned))-as(Offset, address)),Beg,End) :- \n   best_value_reg(EA_def,Reg,EA_from,Mult,_,\"loop\"),\n   reg_def_use.def_used(EA_def,Reg,EA_used,Op_index),\n   value_reg_at_operand_loop(EA_used,Op_index,Reg,EA_from,Mult,NewDest,\"loop\"),\n   NewDest >= 0,\n   data_access(EA_used,Op_index,\"NONE\",Reg,\"NONE\",_,Offset,_),\n   Offset > 0,\n   @functor_data_valid(as(Offset, address),1) = 0,\n   regular_data_section(Name),\n   loaded_section(Beg,End,Name),\n   as(NewDest, address) >= Beg,\n   as(NewDest, address) <= End.\nin file pointer_reattribution.dl [153:1-165:24]" 
      (TIMER_ON dest_enlarged_data_section "@t-nonrecursive-rule;dest_enlarged_data_section;pointer_reattribution.dl [153:1-165:24];dest_enlarged_data_section(EA_def,Reg,as(NewDest, address),((Beg-as(max(Mult,-(Mult)), unsigned))-as(Offset, address)),((End+as(max(Mult,-(Mult)), unsigned))-as(Offset, address)),Beg,End) :- \\n   best_value_reg(EA_def,Reg,EA_from,Mult,_,\\\"loop\\\"),\\n   reg_def_use.def_used(EA_def,Reg,EA_used,Op_index),\\n   value_reg_at_operand_loop(EA_used,Op_index,Reg,EA_from,Mult,NewDest,\\\"loop\\\"),\\n   NewDest >= 0,\\n   data_access(EA_used,Op_index,\\\"NONE\\\",Reg,\\\"NONE\\\",_,Offset,_),\\n   Offset > 0,\\n   @functor_data_valid(as(Offset, address),1) = 0,\\n   regular_data_section(Name),\\n   loaded_section(Beg,End,Name),\\n   as(NewDest, address) >= Beg,\\n   as(NewDest, address) <= End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY best_value_reg)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY value_reg_at_operand_loop))) (NOT (ISEMPTY regular_data_section))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR t0 best_value_reg (INDEX  (= (TUPLE t0 5) (STRING "loop")))
          (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (FOR t2 value_reg_at_operand_loop (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t1 3)) (= (TUPLE t2 2) (TUPLE t0 1)) (= (TUPLE t2 3) (TUPLE t0 2)) (= (TUPLE t2 4) (TUPLE t0 3)) (<= (NUMBER 0) (TUPLE t2 5) ) (= (TUPLE t2 6) (STRING "loop")))
            (FOR t3 data_access (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)) (= (TUPLE t3 1) (TUPLE t1 3)) (= (TUPLE t3 2) (STRING "NONE")) (= (TUPLE t3 3) (TUPLE t0 1)) (= (TUPLE t3 4) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t3 6) ))
             (IF (AND (CONSTRAINT != (TUPLE t3 6)  (NUMBER 0)) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t3 6) (UNSIGNED 1)))  (UNSIGNED 0)))
              (FOR_IN t4 regular_data_section                (FOR t5 loaded_section (INDEX  (= (TUPLE t5 2) (TUPLE t4 0)))
                (IF (AND (CONSTRAINT >= (TUPLE t2 5)  (TUPLE t5 0)) (CONSTRAINT <= (TUPLE t2 5)  (TUPLE t5 1)))
                 (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 5) (INTRINSIC - (INTRINSIC - (TUPLE t5 0) (INTRINSIC max (TUPLE t0 3) (INTRINSIC - (TUPLE t0 3)))) (TUPLE t3 6)) (INTRINSIC - (INTRINSIC + (TUPLE t5 1) (INTRINSIC max (TUPLE t0 3) (INTRINSIC - (TUPLE t0 3)))) (TUPLE t3 6)) (TUPLE t5 0) (TUPLE t5 1)) dest_enlarged_data_section)
                )))
             )))))        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR best_value_reg)
     (CLEAR value_reg_at_operand_loop)
 ) )  )
  (SUBROUTINE direct_call
(STMTS     (TIMER_ON direct_call "@t-nonrecursive-relation;direct_call;/usr/local/src/ddisasm/src/datalog/main.dl [604:7-604:18];"
(STMTS      (DEBUG 
 "direct_call(EA,as(Dest, address)) :- \n   arch.call(EA,Index),\n   instruction_get_op(EA,Index,Op),\n   op_immediate(Op,Dest),\n   !instruction_has_relocation(EA,_).\nin file main.dl [606:1-617:7]" 
      (TIMER_ON direct_call "@t-nonrecursive-rule;direct_call;/usr/local/src/ddisasm/src/datalog/main.dl [606:1-617:7];direct_call(EA,as(Dest, address)) :- \\n   arch.call(EA,Index),\\n   instruction_get_op(EA,Index,Op),\\n   op_immediate(Op,Dest),\\n   !instruction_has_relocation(EA,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_immediate)) (NOT (ISEMPTY arch.call))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 arch.call           (IF (NOT (EXISTS instruction_has_relocation ((TUPLE t0 0) UNDEF)))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 op_immediate (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1)) direct_call)
))          ))
        )       )
      )
     )
      (DEBUG 
 "direct_call(EA,as(Dest, address)) :- \n   arch.call(EA,Index),\n   instruction_get_op(EA,Index,Op),\n   op_immediate(Op,Dest),\n   binary_format(\"PE\").\nin file main.dl [606:1-617:7]" 
      (TIMER_ON direct_call "@t-nonrecursive-rule;direct_call;/usr/local/src/ddisasm/src/datalog/main.dl [606:1-617:7];direct_call(EA,as(Dest, address)) :- \\n   arch.call(EA,Index),\\n   instruction_get_op(EA,Index,Op),\\n   op_immediate(Op,Dest),\\n   binary_format(\\\"PE\\\").;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY op_immediate)) (NOT (ISEMPTY arch.call))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY instruction_get_op))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 arch.call           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (FOR t2 op_immediate (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 1)) direct_call)
)))
        )       )
      )
     )
      (DEBUG 
 "direct_call(EA,Dest) :- \n   arch.call(EA,_),\n   instruction_immediate_offset(EA,_,_,_),\n   instruction_has_relocation(EA,Rel),\n   relocation(Rel,_,_,_,SymbolIndex,_,_),\n   relocation_active_symbol_table(SymbolTable),\n   defined_symbol(Dest,_,_,_,_,_,SymbolTable,SymbolIndex,_).\nin file main.dl [619:1-626:62]" 
      (TIMER_ON direct_call "@t-nonrecursive-rule;direct_call;/usr/local/src/ddisasm/src/datalog/main.dl [619:1-626:62];direct_call(EA,Dest) :- \\n   arch.call(EA,_),\\n   instruction_immediate_offset(EA,_,_,_),\\n   instruction_has_relocation(EA,Rel),\\n   relocation(Rel,_,_,_,SymbolIndex,_,_),\\n   relocation_active_symbol_table(SymbolTable),\\n   defined_symbol(Dest,_,_,_,_,_,SymbolTable,SymbolIndex,_).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY arch.call)) (NOT (ISEMPTY defined_symbol))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY instruction_has_relocation))) (NOT (ISEMPTY relocation_active_symbol_table))) (NOT (ISEMPTY instruction_immediate_offset)))
         (FOR_IN t0 arch.call           (IF (EXISTS instruction_immediate_offset ((TUPLE t0 0) UNDEF UNDEF UNDEF))
           (FOR t1 instruction_has_relocation (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 relocation (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
             (FOR_IN t3 relocation_active_symbol_table               (FOR t4 defined_symbol (INDEX  (= (TUPLE t4 6) (TUPLE t3 0)) (= (TUPLE t4 7) (TUPLE t2 4)))
               (INSERT ((TUPLE t0 0) (TUPLE t4 0)) direct_call)
))
))          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE direct_jump
(STMTS (STMTS     (TIMER_ON direct_jump "@t-nonrecursive-relation;direct_jump;/usr/local/src/ddisasm/src/datalog/main.dl [525:7-525:18];"
(STMTS      (DEBUG 
 "direct_jump(EA,as(Dest, address)) :- \n   arch.jump(EA),\n   instruction_immediate_offset(EA,_,_,_),\n   instruction_has_relocation(EA,Rel),\n   relocation(Rel,_,_,_,SymbolIndex,_,_),\n   relocation_active_symbol_table(SymbolTable),\n   defined_symbol(Dest,_,_,_,_,_,SymbolTable,SymbolIndex,_).\nin file main.dl [541:1-547:62]" 
      (TIMER_ON direct_jump "@t-nonrecursive-rule;direct_jump;/usr/local/src/ddisasm/src/datalog/main.dl [541:1-547:62];direct_jump(EA,as(Dest, address)) :- \\n   arch.jump(EA),\\n   instruction_immediate_offset(EA,_,_,_),\\n   instruction_has_relocation(EA,Rel),\\n   relocation(Rel,_,_,_,SymbolIndex,_,_),\\n   relocation_active_symbol_table(SymbolTable),\\n   defined_symbol(Dest,_,_,_,_,_,SymbolTable,SymbolIndex,_).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY arch.jump)) (NOT (ISEMPTY defined_symbol))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY instruction_has_relocation))) (NOT (ISEMPTY relocation_active_symbol_table))) (NOT (ISEMPTY instruction_immediate_offset)))
         (FOR_IN t0 arch.jump           (IF (EXISTS instruction_immediate_offset ((TUPLE t0 0) UNDEF UNDEF UNDEF))
           (FOR t1 instruction_has_relocation (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 relocation (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
             (FOR_IN t3 relocation_active_symbol_table               (FOR t4 defined_symbol (INDEX  (= (TUPLE t4 6) (TUPLE t3 0)) (= (TUPLE t4 7) (TUPLE t2 4)))
               (INSERT ((TUPLE t0 0) (TUPLE t4 0)) direct_jump)
))
))          ))
        )       )
      )
     )
      (DEBUG 
 "direct_jump(EA,EA) :- \n   instruction_has_loop_prefix(EA).\nin file main.dl [549:1-550:37]" 
      (TIMER_ON direct_jump "@t-nonrecursive-rule;direct_jump;/usr/local/src/ddisasm/src/datalog/main.dl [549:1-550:37];direct_jump(EA,EA) :- \\n   instruction_has_loop_prefix(EA).;"
(QUERY
        (IF (NOT (ISEMPTY instruction_has_loop_prefix))
         (FOR_IN t0 instruction_has_loop_prefix           (INSERT ((TUPLE t0 0) (TUPLE t0 0)) direct_jump)
)
        )       )
      )
     )
      (DEBUG 
 "direct_jump(EA,as(Dest, address)) :- \n   arch.jump(EA),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.jump_operation_op_index(Operation,Index),\n   instruction_get_op(EA,Index,Op),\n   op_immediate(Op,Dest),\n   !instruction_has_relocation(EA,_).\nin file main.dl [527:1-539:7]" 
      (TIMER_ON direct_jump "@t-nonrecursive-rule;direct_jump;/usr/local/src/ddisasm/src/datalog/main.dl [527:1-539:7];direct_jump(EA,as(Dest, address)) :- \\n   arch.jump(EA),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.jump_operation_op_index(Operation,Index),\\n   instruction_get_op(EA,Index,Op),\\n   op_immediate(Op,Dest),\\n   !instruction_has_relocation(EA,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY op_immediate)) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY arch.jump_operation_op_index))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 arch.jump           (IF (NOT (EXISTS instruction_has_relocation ((TUPLE t0 0) UNDEF)))
           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 arch.jump_operation_op_index (INDEX  (= (TUPLE t2 0) (TUPLE t1 3)))
             (FOR t3 instruction_get_op (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 1) (TUPLE t2 1)))
              (FOR t4 op_immediate (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)))
               (INSERT ((TUPLE t0 0) (TUPLE t4 1)) direct_jump)
))))          ))
        )       )
      )
     )
      (DEBUG 
 "direct_jump(EA,as(Dest, address)) :- \n   arch.jump(EA),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.jump_operation_op_index(Operation,Index),\n   instruction_get_op(EA,Index,Op),\n   op_immediate(Op,Dest),\n   binary_format(\"PE\").\nin file main.dl [527:1-539:7]" 
      (TIMER_ON direct_jump "@t-nonrecursive-rule;direct_jump;/usr/local/src/ddisasm/src/datalog/main.dl [527:1-539:7];direct_jump(EA,as(Dest, address)) :- \\n   arch.jump(EA),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.jump_operation_op_index(Operation,Index),\\n   instruction_get_op(EA,Index,Op),\\n   op_immediate(Op,Dest),\\n   binary_format(\\\"PE\\\").;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY op_immediate)) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY arch.jump_operation_op_index))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY instruction_get_op))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 arch.jump           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 arch.jump_operation_op_index (INDEX  (= (TUPLE t2 0) (TUPLE t1 3)))
            (FOR t3 instruction_get_op (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 1) (TUPLE t2 1)))
             (FOR t4 op_immediate (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)))
              (INSERT ((TUPLE t0 0) (TUPLE t4 1)) direct_jump)
)))))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR relocation_active_symbol_table)
 ) )  )
  (SUBROUTINE direct_or_pcrel_jump
(STMTS     (TIMER_ON direct_or_pcrel_jump "@t-nonrecursive-relation;direct_or_pcrel_jump;noreturn.dl [42:7-42:27];"
(STMTS      (DEBUG 
 "direct_or_pcrel_jump(Src,Dest) :- \n   direct_jump(Src,Dest).\nin file noreturn.dl [44:1-46:32]" 
      (TIMER_ON direct_or_pcrel_jump "@t-nonrecursive-rule;direct_or_pcrel_jump;noreturn.dl [44:1-46:32];direct_or_pcrel_jump(Src,Dest) :- \\n   direct_jump(Src,Dest).;"
(QUERY
        (IF (NOT (ISEMPTY direct_jump))
         (FOR_IN t0 direct_jump           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) direct_or_pcrel_jump)
)
        )       )
      )
     )
      (DEBUG 
 "direct_or_pcrel_jump(Src,Dest) :- \n   pc_relative_jump(Src,Dest).\nin file noreturn.dl [44:1-46:32]" 
      (TIMER_ON direct_or_pcrel_jump "@t-nonrecursive-rule;direct_or_pcrel_jump;noreturn.dl [44:1-46:32];direct_or_pcrel_jump(Src,Dest) :- \\n   pc_relative_jump(Src,Dest).;"
(QUERY
        (IF (NOT (ISEMPTY pc_relative_jump))
         (FOR_IN t0 pc_relative_jump           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) direct_or_pcrel_jump)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE discarded_block
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON discarded_block "@t-nonrecursive-relation;discarded_block;code_inference.dl [1080:7-1080:22];"
(STMTS      (DEBUG 
 "discarded_block(Block,Type,Size,\"interval discarded\",0) :- \n   unresolved_block(Block,Type,Size),\n   block_candidate_boundaries(Block,Type,Start,End),\n   unresolved_interval_order(I,Start,End),\n   Size = (End-Start),\n   !wis_schedule(I).\nin file code_inference.dl [1082:1-1087:22]" 
      (TIMER_ON discarded_block "@t-nonrecursive-rule;discarded_block;code_inference.dl [1082:1-1087:22];discarded_block(Block,Type,Size,\\\"interval discarded\\\",0) :- \\n   unresolved_block(Block,Type,Size),\\n   block_candidate_boundaries(Block,Type,Start,End),\\n   unresolved_interval_order(I,Start,End),\\n   Size = (End-Start),\\n   !wis_schedule(I).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY unresolved_interval_order)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY block_candidate_boundaries)))
         (FOR_IN t0 unresolved_block           (FOR t1 block_candidate_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (IF (CONSTRAINT = (TUPLE t0 2)  (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2)))
            (INDEXED_IF_EXISTS t2 unresolved_interval_order (INDEX  (= (TUPLE t2 1) (TUPLE t1 2)) (= (TUPLE t2 2) (TUPLE t1 3))) (NOT (EXISTS wis_schedule ((TUPLE t2 0))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (STRING "interval discarded") (UNSIGNED 0)) discarded_block)
)           )))
        )       )
      )
     )
      (DEBUG 
 "discarded_block(Block2,Type2,Size2,\"overlaps known code\",Block1) :- \n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2),\n   known_block(Block1,Type1,Size1,_),\n   known_block(Block2,Type2,Size2,\"propagated\"),\n   Type1 = \"code\",\n   Type2 = \"data\".\nin file code_inference.dl [1103:1-1107:36]" 
      (TIMER_ON discarded_block "@t-nonrecursive-rule;discarded_block;code_inference.dl [1103:1-1107:36];discarded_block(Block2,Type2,Size2,\\\"overlaps known code\\\",Block1) :- \\n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2),\\n   known_block(Block1,Type1,Size1,_),\\n   known_block(Block2,Type2,Size2,\\\"propagated\\\"),\\n   Type1 = \\\"code\\\",\\n   Type2 = \\\"data\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY known_block)) (NOT (ISEMPTY block_overlap)))
         (FOR t0 block_overlap (INDEX  (= (TUPLE t0 1) (STRING "code")) (= (TUPLE t0 4) (STRING "data")))
          (IF (AND (EXISTS known_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF)) (EXISTS known_block ((TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (STRING "propagated"))))
           (INSERT ((TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (STRING "overlaps known code") (TUPLE t0 0)) discarded_block)
          ))        )       )
      )
     )
      (DEBUG 
 "discarded_block(Block,Type,Size,\"impossible\",0) :- \n   impossible_block(Block,Type,Size,_).\nin file code_inference.dl [1116:1-1117:41]" 
      (TIMER_ON discarded_block "@t-nonrecursive-rule;discarded_block;code_inference.dl [1116:1-1117:41];discarded_block(Block,Type,Size,\\\"impossible\\\",0) :- \\n   impossible_block(Block,Type,Size,_).;"
(QUERY
        (IF (NOT (ISEMPTY impossible_block))
         (FOR_IN t0 impossible_block           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (STRING "impossible") (UNSIGNED 0)) discarded_block)
)
        )       )
      )
     )
      (DEBUG 
 "discarded_block(Block,Type,Size,\"negative points\",0) :- \n   block_total_points(Block,Type,Size,Points),\n   Points < 0.\nin file code_inference.dl [1119:1-1121:16]" 
      (TIMER_ON discarded_block "@t-nonrecursive-rule;discarded_block;code_inference.dl [1119:1-1121:16];discarded_block(Block,Type,Size,\\\"negative points\\\",0) :- \\n   block_total_points(Block,Type,Size,Points),\\n   Points < 0.;"
(QUERY
        (IF (NOT (ISEMPTY block_total_points))
         (FOR t0 block_total_points (INDEX  (<= (TUPLE t0 3) (NUMBER 0)))
          (IF (CONSTRAINT != (TUPLE t0 3)  (NUMBER 0))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (STRING "negative points") (UNSIGNED 0)) discarded_block)
          ))        )       )
      )
     )
      (DEBUG 
 "discarded_block(Block2,\"code\",Block2Size,\"first instruction overlap\",Block) :- \n   block_overlap(Block,\"code\",_,Block2,\"code\",Block2Size),\n   instruction(Block,Size,\"LOCK\",OpCode,Op1,Op2,Op3,Op4,_,_),\n   Block2 = (Block+1),\n   instruction(Block2,Size2,\"\",OpCode,Op1,Op2,Op3,Op4,_,_),\n   (Block2-Block) = (Size-Size2).\nin file code_inference.dl [1140:1-1147:35]" 
      (TIMER_ON discarded_block "@t-nonrecursive-rule;discarded_block;code_inference.dl [1140:1-1147:35];discarded_block(Block2,\\\"code\\\",Block2Size,\\\"first instruction overlap\\\",Block) :- \\n   block_overlap(Block,\\\"code\\\",_,Block2,\\\"code\\\",Block2Size),\\n   instruction(Block,Size,\\\"LOCK\\\",OpCode,Op1,Op2,Op3,Op4,_,_),\\n   Block2 = (Block+1),\\n   instruction(Block2,Size2,\\\"\\\",OpCode,Op1,Op2,Op3,Op4,_,_),\\n   (Block2-Block) = (Size-Size2).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY block_overlap)))
         (FOR t0 block_overlap (INDEX  (= (TUPLE t0 1) (STRING "code")) (= (TUPLE t0 4) (STRING "code")))
          (IF (CONSTRAINT = (TUPLE t0 3)  (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)))
           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (STRING "LOCK")))
            (INDEXED_IF_EXISTS t2 instruction (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)) (= (TUPLE t2 2) (STRING "")) (= (TUPLE t2 3) (TUPLE t1 3)) (= (TUPLE t2 4) (TUPLE t1 4)) (= (TUPLE t2 5) (TUPLE t1 5)) (= (TUPLE t2 6) (TUPLE t1 6)) (= (TUPLE t2 7) (TUPLE t1 7))) (CONSTRAINT = (INTRINSIC - (TUPLE t0 3) (TUPLE t0 0))  (INTRINSIC - (TUPLE t1 1) (TUPLE t2 1)))
             (INSERT ((TUPLE t0 3) (STRING "code") (TUPLE t0 5) (STRING "first instruction overlap") (TUPLE t0 0)) discarded_block)
))          ))        )       )
      )
     )
      (DEBUG 
 "discarded_block(Block,Type,(End-Start),\"less points\",0) :- \n   wis_schedule(I),\n   unresolved_interval_order(I,Start,End),\n   block_candidate_boundaries(Block,Type,Start,End),\n   !unresolved_interval_best_block(I,Block,Type,(End-Start),_).\nin file code_inference.dl [1109:1-1114:58]" 
      (TIMER_ON discarded_block "@t-nonrecursive-rule;discarded_block;code_inference.dl [1109:1-1114:58];discarded_block(Block,Type,(End-Start),\\\"less points\\\",0) :- \\n   wis_schedule(I),\\n   unresolved_interval_order(I,Start,End),\\n   block_candidate_boundaries(Block,Type,Start,End),\\n   !unresolved_interval_best_block(I,Block,Type,(End-Start),_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY block_candidate_boundaries)) (NOT (ISEMPTY wis_schedule))) (NOT (ISEMPTY unresolved_interval_order)))
         (FOR_IN t0 wis_schedule           (FOR t1 unresolved_interval_order (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 block_candidate_boundaries (INDEX  (= (TUPLE t2 2) (TUPLE t1 1)) (= (TUPLE t2 3) (TUPLE t1 2)))
            (IF (NOT (EXISTS unresolved_interval_best_block ((TUPLE t0 0) (TUPLE t2 0) (TUPLE t2 1) (INTRINSIC - (TUPLE t1 2) (TUPLE t1 1)) UNDEF)))
             (INSERT ((TUPLE t2 0) (TUPLE t2 1) (INTRINSIC - (TUPLE t1 2) (TUPLE t1 1)) (STRING "less points") (UNSIGNED 0)) discarded_block)
            ))))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 discarded_block       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @delta_discarded_block)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_discarded_block "@t-recursive-relation;discarded_block;code_inference.dl [1080:7-1080:22];"
(STMTS (STMTS (STMTS       (DEBUG 
 "discarded_block(Block1,Type1,Size1,\"propagated\",Block2) :- \n   discarded_block(Block2,\"code\",Size2,_,_),\n   !overlapping_instruction(Block2,_),\n   block_candidate_dependency_edge(Block1,Type1,Size1,Block2,\"code\",Size2),\n   unresolved_block(Block1,Type1,Size1).\nin file code_inference.dl [1124:1-1133:7]" 
       (TIMER_ON @new_discarded_block "@t-recursive-rule;discarded_block;0;code_inference.dl [1124:1-1133:7];discarded_block(Block1,Type1,Size1,\\\"propagated\\\",Block2) :- \\n   discarded_block(Block2,\\\"code\\\",Size2,_,_),\\n   !overlapping_instruction(Block2,_),\\n   block_candidate_dependency_edge(Block1,Type1,Size1,Block2,\\\"code\\\",Size2),\\n   unresolved_block(Block1,Type1,Size1).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY @delta_discarded_block))) (NOT (ISEMPTY block_candidate_dependency_edge)))
          (FOR t0 @delta_discarded_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
           (IF (NOT (EXISTS overlapping_instruction ((TUPLE t0 0) UNDEF)))
            (FOR t1 block_candidate_dependency_edge (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)) (= (TUPLE t1 4) (STRING "code")) (= (TUPLE t1 5) (TUPLE t0 2)))
             (IF (AND (EXISTS unresolved_block ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2))) (NOT (EXISTS discarded_block ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (STRING "propagated") (TUPLE t0 0)))))
              (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (STRING "propagated") (TUPLE t0 0)) @new_discarded_block)
             ))           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "discarded_block(Block1,Type1,Size1,\"propagated\",Block2) :- \n   discarded_block(Block2,\"code\",Size2,_,_),\n   !overlapping_instruction(Block2,_),\n   block_candidate_dependency_edge(Block1,Type1,Size1,Block2,\"code\",Size2),\n   !unresolved_block_overlap(Block1,Type1,Size1,_,_,_).\nin file code_inference.dl [1124:1-1133:7]" 
       (TIMER_ON @new_discarded_block "@t-recursive-rule;discarded_block;0;code_inference.dl [1124:1-1133:7];discarded_block(Block1,Type1,Size1,\\\"propagated\\\",Block2) :- \\n   discarded_block(Block2,\\\"code\\\",Size2,_,_),\\n   !overlapping_instruction(Block2,_),\\n   block_candidate_dependency_edge(Block1,Type1,Size1,Block2,\\\"code\\\",Size2),\\n   !unresolved_block_overlap(Block1,Type1,Size1,_,_,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_discarded_block)) (NOT (ISEMPTY block_candidate_dependency_edge)))
          (FOR t0 @delta_discarded_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
           (IF (NOT (EXISTS overlapping_instruction ((TUPLE t0 0) UNDEF)))
            (FOR t1 block_candidate_dependency_edge (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)) (= (TUPLE t1 4) (STRING "code")) (= (TUPLE t1 5) (TUPLE t0 2)))
             (IF (AND (NOT (EXISTS unresolved_block_overlap ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) UNDEF UNDEF UNDEF))) (NOT (EXISTS discarded_block ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (STRING "propagated") (TUPLE t0 0)))))
              (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (STRING "propagated") (TUPLE t0 0)) @new_discarded_block)
             ))           ))         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_discarded_block "@t-recursive-relation;discarded_block;code_inference.dl [1080:7-1080:22];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_discarded_block))
 ) (STMTS      (TIMER_ON @new_discarded_block "@c-recursive-relation;discarded_block;code_inference.dl [1080:7-1080:22];"
(STMTS (QUERY
       (FOR_IN t0 @new_discarded_block         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) discarded_block)
)
      )
       (SWAP @delta_discarded_block @new_discarded_block)
       (CLEAR @new_discarded_block)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_discarded_block)
     (CLEAR @new_discarded_block)
 ) )  ) (STMTS     (CLEAR block_candidate_dependency_edge)
     (CLEAR block_total_points)
     (CLEAR impossible_block)
     (CLEAR known_block)
     (CLEAR unresolved_block)
     (CLEAR unresolved_block_overlap)
     (CLEAR unresolved_interval_order)
 ) )  )
  (SUBROUTINE discarded_data_object
(STMTS (STMTS     (TIMER_ON discarded_data_object "@t-nonrecursive-relation;discarded_data_object;symbolization.dl [512:7-512:28];"
(STMTS      (DEBUG 
 "discarded_data_object(EA,Size,Type) :- \n   data_object_conflict(EA,Size,Type,EA2,Size2,Type2),\n   data_object_total_points(EA,Size,Type,Points1),\n   data_object_total_points(EA2,Size2,Type2,Points2),\n   Points1 < Points2.\nin file symbolization.dl [823:1-837:7]" 
      (TIMER_ON discarded_data_object "@t-nonrecursive-rule;discarded_data_object;symbolization.dl [823:1-837:7];discarded_data_object(EA,Size,Type) :- \\n   data_object_conflict(EA,Size,Type,EA2,Size2,Type2),\\n   data_object_total_points(EA,Size,Type,Points1),\\n   data_object_total_points(EA2,Size2,Type2,Points2),\\n   Points1 < Points2.;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object_total_points)) (NOT (ISEMPTY data_object_conflict)))
         (FOR_IN t0 data_object_conflict           (FOR t1 data_object_total_points (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
           (INDEXED_IF_EXISTS t2 data_object_total_points (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)) (= (TUPLE t2 1) (TUPLE t0 4)) (= (TUPLE t2 2) (TUPLE t0 5)) (<= (TUPLE t1 3) (TUPLE t2 3) )) (CONSTRAINT != (TUPLE t1 3)  (TUPLE t2 3))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) discarded_data_object)
)))
        )       )
      )
     )
      (DEBUG 
 "discarded_data_object(EA2,Size2,Type2) :- \n   data_object_conflict(EA,Size,Type,EA2,Size2,Type2),\n   data_object_total_points(EA,Size,Type,Points1),\n   data_object_total_points(EA2,Size2,Type2,Points2),\n   Points1 > Points2.\nin file symbolization.dl [823:1-837:7]" 
      (TIMER_ON discarded_data_object "@t-nonrecursive-rule;discarded_data_object;symbolization.dl [823:1-837:7];discarded_data_object(EA2,Size2,Type2) :- \\n   data_object_conflict(EA,Size,Type,EA2,Size2,Type2),\\n   data_object_total_points(EA,Size,Type,Points1),\\n   data_object_total_points(EA2,Size2,Type2,Points2),\\n   Points1 > Points2.;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object_total_points)) (NOT (ISEMPTY data_object_conflict)))
         (FOR_IN t0 data_object_conflict           (FOR t1 data_object_total_points (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
           (INDEXED_IF_EXISTS t2 data_object_total_points (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)) (= (TUPLE t2 1) (TUPLE t0 4)) (= (TUPLE t2 2) (TUPLE t0 5)) (<= (TUPLE t2 3) (TUPLE t1 3))) (CONSTRAINT != (TUPLE t1 3)  (TUPLE t2 3))
            (INSERT ((TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) discarded_data_object)
)))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR data_object_conflict)
 ) )  )
  (SUBROUTINE discarded_jump_table_entry
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON discarded_jump_table_entry "@t-nonrecursive-relation;discarded_jump_table_entry;relative_jump_tables.dl [389:7-389:33];"
(STMTS      (DEBUG 
 "discarded_jump_table_entry(TableStart,Ref,EA) :- \n   relative_jump_table_entry_candidate(EA,TableStart,Size,Ref,_,_,_),\n   symbolic_operand(_,_,Limit,\"data\"),\n   EA <= Limit,\n   Limit < (EA+Size),\n   EA != TableStart.\nin file relative_jump_tables.dl [399:1-408:22]" 
      (TIMER_ON discarded_jump_table_entry "@t-nonrecursive-rule;discarded_jump_table_entry;relative_jump_tables.dl [399:1-408:22];discarded_jump_table_entry(TableStart,Ref,EA) :- \\n   relative_jump_table_entry_candidate(EA,TableStart,Size,Ref,_,_,_),\\n   symbolic_operand(_,_,Limit,\\\"data\\\"),\\n   EA <= Limit,\\n   Limit < (EA+Size),\\n   EA != TableStart.;"
(QUERY
        (IF (AND (NOT (ISEMPTY relative_jump_table_entry_candidate)) (NOT (ISEMPTY symbolic_operand)))
         (FOR_IN t0 relative_jump_table_entry_candidate           (IF (CONSTRAINT != (TUPLE t0 0)  (TUPLE t0 1))
           (INDEXED_IF_EXISTS t1 symbolic_operand (INDEX  (= (TUPLE t1 3) (STRING "data"))) (AND (AND (CONSTRAINT != (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (CONSTRAINT <= (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))) (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t1 2)))
            (INSERT ((TUPLE t0 1) (TUPLE t0 3) (TUPLE t0 0)) discarded_jump_table_entry)
)          ))
        )       )
      )
     )
      (DEBUG 
 "discarded_jump_table_entry(TableStart,Ref,EA) :- \n   relative_jump_table_entry_candidate(EA,TableStart,Size,Ref,_,_,_),\n   data_segment(Limit,_),\n   EA <= Limit,\n   Limit < (EA+Size),\n   EA != TableStart.\nin file relative_jump_tables.dl [399:1-408:22]" 
      (TIMER_ON discarded_jump_table_entry "@t-nonrecursive-rule;discarded_jump_table_entry;relative_jump_tables.dl [399:1-408:22];discarded_jump_table_entry(TableStart,Ref,EA) :- \\n   relative_jump_table_entry_candidate(EA,TableStart,Size,Ref,_,_,_),\\n   data_segment(Limit,_),\\n   EA <= Limit,\\n   Limit < (EA+Size),\\n   EA != TableStart.;"
(QUERY
        (IF (AND (NOT (ISEMPTY relative_jump_table_entry_candidate)) (NOT (ISEMPTY data_segment)))
         (FOR_IN t0 relative_jump_table_entry_candidate           (IF (CONSTRAINT != (TUPLE t0 0)  (TUPLE t0 1))
           (IF_EXISTS t1 data_segment (AND (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t1 0)) (CONSTRAINT < (TUPLE t1 0)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))) 
            (INSERT ((TUPLE t0 1) (TUPLE t0 3) (TUPLE t0 0)) discarded_jump_table_entry)
)          ))
        )       )
      )
     )
      (DEBUG 
 "discarded_jump_table_entry(TableStart,Ref,EA) :- \n   relative_jump_table_entry_candidate(EA,TableStart,Size,Ref,_,_,_),\n   data_segment(_,Limit),\n   EA <= Limit,\n   Limit < (EA+Size),\n   EA != TableStart.\nin file relative_jump_tables.dl [399:1-408:22]" 
      (TIMER_ON discarded_jump_table_entry "@t-nonrecursive-rule;discarded_jump_table_entry;relative_jump_tables.dl [399:1-408:22];discarded_jump_table_entry(TableStart,Ref,EA) :- \\n   relative_jump_table_entry_candidate(EA,TableStart,Size,Ref,_,_,_),\\n   data_segment(_,Limit),\\n   EA <= Limit,\\n   Limit < (EA+Size),\\n   EA != TableStart.;"
(QUERY
        (IF (AND (NOT (ISEMPTY relative_jump_table_entry_candidate)) (NOT (ISEMPTY data_segment)))
         (FOR_IN t0 relative_jump_table_entry_candidate           (IF (CONSTRAINT != (TUPLE t0 0)  (TUPLE t0 1))
           (IF_EXISTS t1 data_segment (AND (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t1 1)) (CONSTRAINT < (TUPLE t1 1)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))) 
            (INSERT ((TUPLE t0 1) (TUPLE t0 3) (TUPLE t0 0)) discarded_jump_table_entry)
)          ))
        )       )
      )
     )
      (DEBUG 
 "discarded_jump_table_entry(TableStart,Ref,EA) :- \n   relative_jump_table_entry_candidate(EA,TableStart,Size,Ref,_,_,_),\n   jump_table_start(_,_,Limit,_,_),\n   EA <= Limit,\n   Limit < (EA+Size),\n   EA != TableStart.\nin file relative_jump_tables.dl [399:1-408:22]" 
      (TIMER_ON discarded_jump_table_entry "@t-nonrecursive-rule;discarded_jump_table_entry;relative_jump_tables.dl [399:1-408:22];discarded_jump_table_entry(TableStart,Ref,EA) :- \\n   relative_jump_table_entry_candidate(EA,TableStart,Size,Ref,_,_,_),\\n   jump_table_start(_,_,Limit,_,_),\\n   EA <= Limit,\\n   Limit < (EA+Size),\\n   EA != TableStart.;"
(QUERY
        (IF (AND (NOT (ISEMPTY relative_jump_table_entry_candidate)) (NOT (ISEMPTY jump_table_start)))
         (FOR_IN t0 relative_jump_table_entry_candidate           (IF (CONSTRAINT != (TUPLE t0 0)  (TUPLE t0 1))
           (IF_EXISTS t1 jump_table_start (AND (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t1 2)) (CONSTRAINT < (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))) 
            (INSERT ((TUPLE t0 1) (TUPLE t0 3) (TUPLE t0 0)) discarded_jump_table_entry)
)          ))
        )       )
      )
     )
      (DEBUG 
 "discarded_jump_table_entry(TableStart,TableRef1,TableStart) :- \n   jump_table_start(_,_,TableStart,TableRef1,_),\n   jump_table_start(_,_,TableStart,TableStart,_),\n   TableRef1 != TableStart.\nin file relative_jump_tables.dl [392:1-396:28]" 
      (TIMER_ON discarded_jump_table_entry "@t-nonrecursive-rule;discarded_jump_table_entry;relative_jump_tables.dl [392:1-396:28];discarded_jump_table_entry(TableStart,TableRef1,TableStart) :- \\n   jump_table_start(_,_,TableStart,TableRef1,_),\\n   jump_table_start(_,_,TableStart,TableStart,_),\\n   TableRef1 != TableStart.;"
(QUERY
        (IF (NOT (ISEMPTY jump_table_start))
         (FOR_IN t0 jump_table_start           (IF (AND (CONSTRAINT != (TUPLE t0 3)  (TUPLE t0 2)) (EXISTS jump_table_start (UNDEF UNDEF (TUPLE t0 2) (TUPLE t0 2) UNDEF)))
           (INSERT ((TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 2)) discarded_jump_table_entry)
          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 discarded_jump_table_entry       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_discarded_jump_table_entry)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_discarded_jump_table_entry "@t-recursive-relation;discarded_jump_table_entry;relative_jump_tables.dl [389:7-389:33];"
(STMTS       (DEBUG 
 "discarded_jump_table_entry(TableStart,Ref,EA) :- \n   discarded_jump_table_entry(TableStart,Ref,DiscardEA),\n   jump_table_start(_,Size,TableStart,Ref,_),\n   EA = (DiscardEA+Size),\n   relative_jump_table_entry_candidate(EA,TableStart,Size,Ref,_,_,_).\nin file relative_jump_tables.dl [411:1-415:71]" 
       (TIMER_ON @new_discarded_jump_table_entry "@t-recursive-rule;discarded_jump_table_entry;0;relative_jump_tables.dl [411:1-415:71];discarded_jump_table_entry(TableStart,Ref,EA) :- \\n   discarded_jump_table_entry(TableStart,Ref,DiscardEA),\\n   jump_table_start(_,Size,TableStart,Ref,_),\\n   EA = (DiscardEA+Size),\\n   relative_jump_table_entry_candidate(EA,TableStart,Size,Ref,_,_,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY relative_jump_table_entry_candidate)) (NOT (ISEMPTY @delta_discarded_jump_table_entry))) (NOT (ISEMPTY jump_table_start)))
          (FOR_IN t0 @delta_discarded_jump_table_entry            (FOR t1 jump_table_start (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 relative_jump_table_entry_candidate (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 2) (TUPLE t1 1))) (= (TUPLE t2 1) (TUPLE t0 0)) (= (TUPLE t2 2) (TUPLE t1 1)) (= (TUPLE t2 3) (TUPLE t0 1)))
             (IF (NOT (EXISTS discarded_jump_table_entry ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 0))))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 0)) @new_discarded_jump_table_entry)
             ))))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_discarded_jump_table_entry "@t-recursive-relation;discarded_jump_table_entry;relative_jump_tables.dl [389:7-389:33];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_discarded_jump_table_entry))
 ) (STMTS      (TIMER_ON @new_discarded_jump_table_entry "@c-recursive-relation;discarded_jump_table_entry;relative_jump_tables.dl [389:7-389:33];"
(STMTS (QUERY
       (FOR_IN t0 @new_discarded_jump_table_entry         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) discarded_jump_table_entry)
)
      )
       (SWAP @delta_discarded_jump_table_entry @new_discarded_jump_table_entry)
       (CLEAR @new_discarded_jump_table_entry)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_discarded_jump_table_entry)
     (CLEAR @new_discarded_jump_table_entry)
 ) )  )  )  )
  (SUBROUTINE dwarf_encoding_size
(STMTS     (TIMER_ON dwarf_encoding_size "@t-nonrecursive-relation;dwarf_encoding_size;exceptions.dl [46:7-46:26];"
(STMTS      (DEBUG 
 "dwarf_encoding_size(0,4).\nin file exceptions.dl [51:1-51:26]" 
      (TIMER_ON dwarf_encoding_size "@t-nonrecursive-rule;dwarf_encoding_size;exceptions.dl [51:1-51:26];dwarf_encoding_size(0,4).;"
(QUERY
        (INSERT ((UNSIGNED 0) (UNSIGNED 4)) dwarf_encoding_size)
       )
      )
     )
      (DEBUG 
 "dwarf_encoding_size(2,2).\nin file exceptions.dl [53:1-53:26]" 
      (TIMER_ON dwarf_encoding_size "@t-nonrecursive-rule;dwarf_encoding_size;exceptions.dl [53:1-53:26];dwarf_encoding_size(2,2).;"
(QUERY
        (INSERT ((UNSIGNED 2) (UNSIGNED 2)) dwarf_encoding_size)
       )
      )
     )
      (DEBUG 
 "dwarf_encoding_size(3,4).\nin file exceptions.dl [54:1-54:26]" 
      (TIMER_ON dwarf_encoding_size "@t-nonrecursive-rule;dwarf_encoding_size;exceptions.dl [54:1-54:26];dwarf_encoding_size(3,4).;"
(QUERY
        (INSERT ((UNSIGNED 3) (UNSIGNED 4)) dwarf_encoding_size)
       )
      )
     )
      (DEBUG 
 "dwarf_encoding_size(4,8).\nin file exceptions.dl [55:1-55:26]" 
      (TIMER_ON dwarf_encoding_size "@t-nonrecursive-rule;dwarf_encoding_size;exceptions.dl [55:1-55:26];dwarf_encoding_size(4,8).;"
(QUERY
        (INSERT ((UNSIGNED 4) (UNSIGNED 8)) dwarf_encoding_size)
       )
      )
     )
      (DEBUG 
 "dwarf_encoding_size(10,2).\nin file exceptions.dl [57:1-57:27]" 
      (TIMER_ON dwarf_encoding_size "@t-nonrecursive-rule;dwarf_encoding_size;exceptions.dl [57:1-57:27];dwarf_encoding_size(10,2).;"
(QUERY
        (INSERT ((UNSIGNED 10) (UNSIGNED 2)) dwarf_encoding_size)
       )
      )
     )
      (DEBUG 
 "dwarf_encoding_size(11,4).\nin file exceptions.dl [58:1-58:27]" 
      (TIMER_ON dwarf_encoding_size "@t-nonrecursive-rule;dwarf_encoding_size;exceptions.dl [58:1-58:27];dwarf_encoding_size(11,4).;"
(QUERY
        (INSERT ((UNSIGNED 11) (UNSIGNED 4)) dwarf_encoding_size)
       )
      )
     )
      (DEBUG 
 "dwarf_encoding_size(12,8).\nin file exceptions.dl [59:1-59:27]" 
      (TIMER_ON dwarf_encoding_size "@t-nonrecursive-rule;dwarf_encoding_size;exceptions.dl [59:1-59:27];dwarf_encoding_size(12,8).;"
(QUERY
        (INSERT ((UNSIGNED 12) (UNSIGNED 8)) dwarf_encoding_size)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE dwarf_to_cfi
(STMTS     (TIMER_ON dwarf_to_cfi "@t-nonrecursive-relation;dwarf_to_cfi;exceptions.dl [463:7-463:19];"
(STMTS      (DEBUG 
 "dwarf_to_cfi(\"def_cfa\",2,\".cfi_def_cfa\").\nin file exceptions.dl [466:1-466:42]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [466:1-466:42];dwarf_to_cfi(\\\"def_cfa\\\",2,\\\".cfi_def_cfa\\\").;"
(QUERY
        (INSERT ((STRING "def_cfa") (UNSIGNED 2) (STRING ".cfi_def_cfa")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"def_cfa_offset\",1,\".cfi_def_cfa_offset\").\nin file exceptions.dl [467:1-467:56]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [467:1-467:56];dwarf_to_cfi(\\\"def_cfa_offset\\\",1,\\\".cfi_def_cfa_offset\\\").;"
(QUERY
        (INSERT ((STRING "def_cfa_offset") (UNSIGNED 1) (STRING ".cfi_def_cfa_offset")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"def_cfa_offset_sf\",1,\".cfi_def_cfa_offset\").\nin file exceptions.dl [468:1-468:59]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [468:1-468:59];dwarf_to_cfi(\\\"def_cfa_offset_sf\\\",1,\\\".cfi_def_cfa_offset\\\").;"
(QUERY
        (INSERT ((STRING "def_cfa_offset_sf") (UNSIGNED 1) (STRING ".cfi_def_cfa_offset")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"def_cfa_register\",1,\".cfi_def_cfa_register\").\nin file exceptions.dl [469:1-469:60]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [469:1-469:60];dwarf_to_cfi(\\\"def_cfa_register\\\",1,\\\".cfi_def_cfa_register\\\").;"
(QUERY
        (INSERT ((STRING "def_cfa_register") (UNSIGNED 1) (STRING ".cfi_def_cfa_register")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"def_cfa_sf\",2,\".cfi_def_cfa\").\nin file exceptions.dl [470:1-470:45]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [470:1-470:45];dwarf_to_cfi(\\\"def_cfa_sf\\\",2,\\\".cfi_def_cfa\\\").;"
(QUERY
        (INSERT ((STRING "def_cfa_sf") (UNSIGNED 2) (STRING ".cfi_def_cfa")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"offset\",2,\".cfi_offset\").\nin file exceptions.dl [471:1-471:40]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [471:1-471:40];dwarf_to_cfi(\\\"offset\\\",2,\\\".cfi_offset\\\").;"
(QUERY
        (INSERT ((STRING "offset") (UNSIGNED 2) (STRING ".cfi_offset")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"offset_extended\",2,\".cfi_offset\").\nin file exceptions.dl [472:1-472:49]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [472:1-472:49];dwarf_to_cfi(\\\"offset_extended\\\",2,\\\".cfi_offset\\\").;"
(QUERY
        (INSERT ((STRING "offset_extended") (UNSIGNED 2) (STRING ".cfi_offset")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"offset_extended_sf\",2,\".cfi_offset\").\nin file exceptions.dl [473:1-473:52]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [473:1-473:52];dwarf_to_cfi(\\\"offset_extended_sf\\\",2,\\\".cfi_offset\\\").;"
(QUERY
        (INSERT ((STRING "offset_extended_sf") (UNSIGNED 2) (STRING ".cfi_offset")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"register\",2,\".cfi_register\").\nin file exceptions.dl [474:1-474:44]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [474:1-474:44];dwarf_to_cfi(\\\"register\\\",2,\\\".cfi_register\\\").;"
(QUERY
        (INSERT ((STRING "register") (UNSIGNED 2) (STRING ".cfi_register")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"remember_state\",0,\".cfi_remember_state\").\nin file exceptions.dl [475:1-475:56]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [475:1-475:56];dwarf_to_cfi(\\\"remember_state\\\",0,\\\".cfi_remember_state\\\").;"
(QUERY
        (INSERT ((STRING "remember_state") (UNSIGNED 0) (STRING ".cfi_remember_state")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"restore\",1,\".cfi_restore\").\nin file exceptions.dl [476:1-476:42]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [476:1-476:42];dwarf_to_cfi(\\\"restore\\\",1,\\\".cfi_restore\\\").;"
(QUERY
        (INSERT ((STRING "restore") (UNSIGNED 1) (STRING ".cfi_restore")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"restore_extended\",1,\".cfi_restore\").\nin file exceptions.dl [477:1-477:51]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [477:1-477:51];dwarf_to_cfi(\\\"restore_extended\\\",1,\\\".cfi_restore\\\").;"
(QUERY
        (INSERT ((STRING "restore_extended") (UNSIGNED 1) (STRING ".cfi_restore")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"restore_state\",0,\".cfi_restore_state\").\nin file exceptions.dl [478:1-478:54]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [478:1-478:54];dwarf_to_cfi(\\\"restore_state\\\",0,\\\".cfi_restore_state\\\").;"
(QUERY
        (INSERT ((STRING "restore_state") (UNSIGNED 0) (STRING ".cfi_restore_state")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"same_value\",1,\".cfi_same_value\").\nin file exceptions.dl [479:1-479:48]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [479:1-479:48];dwarf_to_cfi(\\\"same_value\\\",1,\\\".cfi_same_value\\\").;"
(QUERY
        (INSERT ((STRING "same_value") (UNSIGNED 1) (STRING ".cfi_same_value")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"undefined\",1,\".cfi_undefined\").\nin file exceptions.dl [480:1-480:46]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [480:1-480:46];dwarf_to_cfi(\\\"undefined\\\",1,\\\".cfi_undefined\\\").;"
(QUERY
        (INSERT ((STRING "undefined") (UNSIGNED 1) (STRING ".cfi_undefined")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"val_offset\",2,\".cfi_val_offset\").\nin file exceptions.dl [481:1-481:48]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [481:1-481:48];dwarf_to_cfi(\\\"val_offset\\\",2,\\\".cfi_val_offset\\\").;"
(QUERY
        (INSERT ((STRING "val_offset") (UNSIGNED 2) (STRING ".cfi_val_offset")) dwarf_to_cfi)
       )
      )
     )
      (DEBUG 
 "dwarf_to_cfi(\"val_offset_sf\",2,\".cfi_val_offset\").\nin file exceptions.dl [482:1-482:51]" 
      (TIMER_ON dwarf_to_cfi "@t-nonrecursive-rule;dwarf_to_cfi;exceptions.dl [482:1-482:51];dwarf_to_cfi(\\\"val_offset_sf\\\",2,\\\".cfi_val_offset\\\").;"
(QUERY
        (INSERT ((STRING "val_offset_sf") (UNSIGNED 2) (STRING ".cfi_val_offset")) dwarf_to_cfi)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE dynamic_entry
(STMTS (STMTS (STMTS     (TIMER_ON dynamic_entry "@t-relation-loadtime;dynamic_entry;/usr/local/src/ddisasm/src/datalog/main.dl [211:7-211:20];loadtime;"
     (IO dynamic_entry ((= IO "file") (= attributeNames "tag\tvalue") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "dynamic_entry") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"tag\", \"value\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:symbol\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE dynamic_entry "@n-nonrecursive-relation;dynamic_entry;/usr/local/src/ddisasm/src/datalog/main.dl [211:7-211:20];")
 )   )  )  )
  (SUBROUTINE elf_avoid_symbols
(STMTS     (TIMER_ON elf_avoid_symbols "@t-nonrecursive-relation;elf_avoid_symbols;symbols.dl [192:7-192:24];"
(STMTS      (DEBUG 
 "elf_avoid_symbols(\"__bss_start\").\nin file symbols.dl [194:1-194:34]" 
      (TIMER_ON elf_avoid_symbols "@t-nonrecursive-rule;elf_avoid_symbols;symbols.dl [194:1-194:34];elf_avoid_symbols(\\\"__bss_start\\\").;"
(QUERY
        (INSERT ((STRING "__bss_start")) elf_avoid_symbols)
       )
      )
     )
      (DEBUG 
 "elf_avoid_symbols(\"__data_start\").\nin file symbols.dl [195:1-195:35]" 
      (TIMER_ON elf_avoid_symbols "@t-nonrecursive-rule;elf_avoid_symbols;symbols.dl [195:1-195:35];elf_avoid_symbols(\\\"__data_start\\\").;"
(QUERY
        (INSERT ((STRING "__data_start")) elf_avoid_symbols)
       )
      )
     )
      (DEBUG 
 "elf_avoid_symbols(\"__dso_handle\").\nin file symbols.dl [196:1-196:35]" 
      (TIMER_ON elf_avoid_symbols "@t-nonrecursive-rule;elf_avoid_symbols;symbols.dl [196:1-196:35];elf_avoid_symbols(\\\"__dso_handle\\\").;"
(QUERY
        (INSERT ((STRING "__dso_handle")) elf_avoid_symbols)
       )
      )
     )
      (DEBUG 
 "elf_avoid_symbols(\"_fp_hw\").\nin file symbols.dl [197:1-197:29]" 
      (TIMER_ON elf_avoid_symbols "@t-nonrecursive-rule;elf_avoid_symbols;symbols.dl [197:1-197:29];elf_avoid_symbols(\\\"_fp_hw\\\").;"
(QUERY
        (INSERT ((STRING "_fp_hw")) elf_avoid_symbols)
       )
      )
     )
      (DEBUG 
 "elf_avoid_symbols(\"_IO_stdin_used\").\nin file symbols.dl [198:1-198:37]" 
      (TIMER_ON elf_avoid_symbols "@t-nonrecursive-rule;elf_avoid_symbols;symbols.dl [198:1-198:37];elf_avoid_symbols(\\\"_IO_stdin_used\\\").;"
(QUERY
        (INSERT ((STRING "_IO_stdin_used")) elf_avoid_symbols)
       )
      )
     )
      (DEBUG 
 "elf_avoid_symbols(\"__TMC_END__\").\nin file symbols.dl [199:1-199:34]" 
      (TIMER_ON elf_avoid_symbols "@t-nonrecursive-rule;elf_avoid_symbols;symbols.dl [199:1-199:34];elf_avoid_symbols(\\\"__TMC_END__\\\").;"
(QUERY
        (INSERT ((STRING "__TMC_END__")) elf_avoid_symbols)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE elf_pointer_array_section_type
(STMTS     (TIMER_ON elf_pointer_array_section_type "@t-nonrecursive-relation;elf_pointer_array_section_type;binary/elf/elf_binaries.dl [82:7-82:37];"
(STMTS      (DEBUG 
 "elf_pointer_array_section_type(\"INIT_ARRAY\").\nin file elf_binaries.dl [84:1-84:46]" 
      (TIMER_ON elf_pointer_array_section_type "@t-nonrecursive-rule;elf_pointer_array_section_type;binary/elf/elf_binaries.dl [84:1-84:46];elf_pointer_array_section_type(\\\"INIT_ARRAY\\\").;"
(QUERY
        (INSERT ((STRING "INIT_ARRAY")) elf_pointer_array_section_type)
       )
      )
     )
      (DEBUG 
 "elf_pointer_array_section_type(\"PREINIT_ARRAY\").\nin file elf_binaries.dl [85:1-85:49]" 
      (TIMER_ON elf_pointer_array_section_type "@t-nonrecursive-rule;elf_pointer_array_section_type;binary/elf/elf_binaries.dl [85:1-85:49];elf_pointer_array_section_type(\\\"PREINIT_ARRAY\\\").;"
(QUERY
        (INSERT ((STRING "PREINIT_ARRAY")) elf_pointer_array_section_type)
       )
      )
     )
      (DEBUG 
 "elf_pointer_array_section_type(\"FINI_ARRAY\").\nin file elf_binaries.dl [86:1-86:46]" 
      (TIMER_ON elf_pointer_array_section_type "@t-nonrecursive-rule;elf_pointer_array_section_type;binary/elf/elf_binaries.dl [86:1-86:46];elf_pointer_array_section_type(\\\"FINI_ARRAY\\\").;"
(QUERY
        (INSERT ((STRING "FINI_ARRAY")) elf_pointer_array_section_type)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE elf_relocation_size
(STMTS     (TIMER_ON elf_relocation_size "@t-nonrecursive-relation;elf_relocation_size;relocations.dl [27:7-27:26];"
(STMTS      (DEBUG 
 "elf_relocation_size(\"X64\",\"NONE\",0).\nin file relocations.dl [30:1-30:39]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [30:1-30:39];elf_relocation_size(\\\"X64\\\",\\\"NONE\\\",0).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "NONE") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"R64\",64).\nin file relocations.dl [31:1-31:39]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [31:1-31:39];elf_relocation_size(\\\"X64\\\",\\\"R64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "R64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"PC32\",32).\nin file relocations.dl [32:1-32:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [32:1-32:40];elf_relocation_size(\\\"X64\\\",\\\"PC32\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "PC32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GOT32\",32).\nin file relocations.dl [33:1-33:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [33:1-33:41];elf_relocation_size(\\\"X64\\\",\\\"GOT32\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GOT32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"PLT32\",32).\nin file relocations.dl [34:1-34:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [34:1-34:41];elf_relocation_size(\\\"X64\\\",\\\"PLT32\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "PLT32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"COPY\",32).\nin file relocations.dl [35:1-35:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [35:1-35:40];elf_relocation_size(\\\"X64\\\",\\\"COPY\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "COPY") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GLOB_DAT\",64).\nin file relocations.dl [36:1-36:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [36:1-36:44];elf_relocation_size(\\\"X64\\\",\\\"GLOB_DAT\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GLOB_DAT") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"JUMP_SLOT\",64).\nin file relocations.dl [37:1-37:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [37:1-37:45];elf_relocation_size(\\\"X64\\\",\\\"JUMP_SLOT\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "JUMP_SLOT") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"RELATIVE\",64).\nin file relocations.dl [38:1-38:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [38:1-38:44];elf_relocation_size(\\\"X64\\\",\\\"RELATIVE\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "RELATIVE") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GOTPCREL\",32).\nin file relocations.dl [39:1-39:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [39:1-39:44];elf_relocation_size(\\\"X64\\\",\\\"GOTPCREL\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GOTPCREL") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"R32\",32).\nin file relocations.dl [40:1-40:39]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [40:1-40:39];elf_relocation_size(\\\"X64\\\",\\\"R32\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "R32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"R32S\",32).\nin file relocations.dl [41:1-41:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [41:1-41:40];elf_relocation_size(\\\"X64\\\",\\\"R32S\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "R32S") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"R16\",16).\nin file relocations.dl [42:1-42:39]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [42:1-42:39];elf_relocation_size(\\\"X64\\\",\\\"R16\\\",16).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "R16") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"PC16\",16).\nin file relocations.dl [43:1-43:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [43:1-43:40];elf_relocation_size(\\\"X64\\\",\\\"PC16\\\",16).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "PC16") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"R8\",8).\nin file relocations.dl [44:1-44:37]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [44:1-44:37];elf_relocation_size(\\\"X64\\\",\\\"R8\\\",8).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "R8") (UNSIGNED 8)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"PC8\",8).\nin file relocations.dl [45:1-45:38]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [45:1-45:38];elf_relocation_size(\\\"X64\\\",\\\"PC8\\\",8).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "PC8") (UNSIGNED 8)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"DTPMOD64\",64).\nin file relocations.dl [46:1-46:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [46:1-46:44];elf_relocation_size(\\\"X64\\\",\\\"DTPMOD64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "DTPMOD64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"DTPOFF64\",64).\nin file relocations.dl [47:1-47:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [47:1-47:44];elf_relocation_size(\\\"X64\\\",\\\"DTPOFF64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "DTPOFF64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"TPOFF64\",64).\nin file relocations.dl [48:1-48:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [48:1-48:43];elf_relocation_size(\\\"X64\\\",\\\"TPOFF64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "TPOFF64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"TLSGD\",32).\nin file relocations.dl [49:1-49:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [49:1-49:41];elf_relocation_size(\\\"X64\\\",\\\"TLSGD\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "TLSGD") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"TLSLD\",32).\nin file relocations.dl [50:1-50:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [50:1-50:41];elf_relocation_size(\\\"X64\\\",\\\"TLSLD\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "TLSLD") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"DTPOFF32\",32).\nin file relocations.dl [51:1-51:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [51:1-51:44];elf_relocation_size(\\\"X64\\\",\\\"DTPOFF32\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "DTPOFF32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GOTTPOFF\",32).\nin file relocations.dl [52:1-52:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [52:1-52:44];elf_relocation_size(\\\"X64\\\",\\\"GOTTPOFF\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GOTTPOFF") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"TPOFF32\",32).\nin file relocations.dl [53:1-53:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [53:1-53:43];elf_relocation_size(\\\"X64\\\",\\\"TPOFF32\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "TPOFF32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"PC64\",64).\nin file relocations.dl [54:1-54:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [54:1-54:40];elf_relocation_size(\\\"X64\\\",\\\"PC64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "PC64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GOTOFF64\",64).\nin file relocations.dl [55:1-55:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [55:1-55:44];elf_relocation_size(\\\"X64\\\",\\\"GOTOFF64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GOTOFF64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GOTPC32\",32).\nin file relocations.dl [56:1-56:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [56:1-56:43];elf_relocation_size(\\\"X64\\\",\\\"GOTPC32\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GOTPC32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GOT64\",64).\nin file relocations.dl [57:1-57:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [57:1-57:41];elf_relocation_size(\\\"X64\\\",\\\"GOT64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GOT64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GOTPCREL64\",64).\nin file relocations.dl [58:1-58:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [58:1-58:46];elf_relocation_size(\\\"X64\\\",\\\"GOTPCREL64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GOTPCREL64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GOTPC64\",64).\nin file relocations.dl [59:1-59:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [59:1-59:43];elf_relocation_size(\\\"X64\\\",\\\"GOTPC64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GOTPC64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GOTPLT64\",64).\nin file relocations.dl [60:1-60:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [60:1-60:44];elf_relocation_size(\\\"X64\\\",\\\"GOTPLT64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GOTPLT64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"PLTOFF64\",64).\nin file relocations.dl [61:1-61:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [61:1-61:44];elf_relocation_size(\\\"X64\\\",\\\"PLTOFF64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "PLTOFF64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"SIZE32\",32).\nin file relocations.dl [62:1-62:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [62:1-62:42];elf_relocation_size(\\\"X64\\\",\\\"SIZE32\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "SIZE32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"SIZE64\",64).\nin file relocations.dl [63:1-63:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [63:1-63:42];elf_relocation_size(\\\"X64\\\",\\\"SIZE64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "SIZE64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GOTPC32_TLSDESC\",32).\nin file relocations.dl [64:1-64:51]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [64:1-64:51];elf_relocation_size(\\\"X64\\\",\\\"GOTPC32_TLSDESC\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GOTPC32_TLSDESC") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"TLSDESC_CALL\",0).\nin file relocations.dl [65:1-65:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [65:1-65:47];elf_relocation_size(\\\"X64\\\",\\\"TLSDESC_CALL\\\",0).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "TLSDESC_CALL") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"TLSDESC\",64).\nin file relocations.dl [66:1-66:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [66:1-66:43];elf_relocation_size(\\\"X64\\\",\\\"TLSDESC\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "TLSDESC") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"IRELATIVE\",64).\nin file relocations.dl [67:1-67:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [67:1-67:45];elf_relocation_size(\\\"X64\\\",\\\"IRELATIVE\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "IRELATIVE") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"RELATIVE64\",64).\nin file relocations.dl [68:1-68:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [68:1-68:46];elf_relocation_size(\\\"X64\\\",\\\"RELATIVE64\\\",64).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "RELATIVE64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"PC32_BND\",32).\nin file relocations.dl [69:1-69:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [69:1-69:44];elf_relocation_size(\\\"X64\\\",\\\"PC32_BND\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "PC32_BND") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"PLT32_BND\",32).\nin file relocations.dl [70:1-70:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [70:1-70:45];elf_relocation_size(\\\"X64\\\",\\\"PLT32_BND\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "PLT32_BND") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"GOTPCRELX\",32).\nin file relocations.dl [71:1-71:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [71:1-71:45];elf_relocation_size(\\\"X64\\\",\\\"GOTPCRELX\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "GOTPCRELX") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X64\",\"REX_GOTPCRELX\",32).\nin file relocations.dl [72:1-72:49]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [72:1-72:49];elf_relocation_size(\\\"X64\\\",\\\"REX_GOTPCRELX\\\",32).;"
(QUERY
        (INSERT ((STRING "X64") (STRING "REX_GOTPCRELX") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"NONE\",0).\nin file relocations.dl [75:1-75:39]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [75:1-75:39];elf_relocation_size(\\\"X86\\\",\\\"NONE\\\",0).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "NONE") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"R32\",32).\nin file relocations.dl [76:1-76:39]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [76:1-76:39];elf_relocation_size(\\\"X86\\\",\\\"R32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "R32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"PC32\",32).\nin file relocations.dl [77:1-77:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [77:1-77:40];elf_relocation_size(\\\"X86\\\",\\\"PC32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "PC32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"GOT32\",32).\nin file relocations.dl [78:1-78:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [78:1-78:41];elf_relocation_size(\\\"X86\\\",\\\"GOT32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "GOT32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"PLT32\",32).\nin file relocations.dl [79:1-79:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [79:1-79:41];elf_relocation_size(\\\"X86\\\",\\\"PLT32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "PLT32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"COPY\",32).\nin file relocations.dl [80:1-80:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [80:1-80:40];elf_relocation_size(\\\"X86\\\",\\\"COPY\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "COPY") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"GLOB_DAT\",32).\nin file relocations.dl [81:1-81:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [81:1-81:44];elf_relocation_size(\\\"X86\\\",\\\"GLOB_DAT\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "GLOB_DAT") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"JUMP_SLOT\",32).\nin file relocations.dl [82:1-82:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [82:1-82:45];elf_relocation_size(\\\"X86\\\",\\\"JUMP_SLOT\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "JUMP_SLOT") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"RELATIVE\",32).\nin file relocations.dl [83:1-83:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [83:1-83:44];elf_relocation_size(\\\"X86\\\",\\\"RELATIVE\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "RELATIVE") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"GOTOFF\",32).\nin file relocations.dl [84:1-84:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [84:1-84:42];elf_relocation_size(\\\"X86\\\",\\\"GOTOFF\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "GOTOFF") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"GOTPC\",32).\nin file relocations.dl [85:1-85:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [85:1-85:41];elf_relocation_size(\\\"X86\\\",\\\"GOTPC\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "GOTPC") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"R32PLT\",32).\nin file relocations.dl [86:1-86:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [86:1-86:42];elf_relocation_size(\\\"X86\\\",\\\"R32PLT\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "R32PLT") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_TPOFF\",32).\nin file relocations.dl [87:1-87:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [87:1-87:45];elf_relocation_size(\\\"X86\\\",\\\"TLS_TPOFF\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_TPOFF") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_IE\",32).\nin file relocations.dl [88:1-88:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [88:1-88:42];elf_relocation_size(\\\"X86\\\",\\\"TLS_IE\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_IE") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_GOTIE\",32).\nin file relocations.dl [89:1-89:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [89:1-89:45];elf_relocation_size(\\\"X86\\\",\\\"TLS_GOTIE\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_GOTIE") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_LE\",32).\nin file relocations.dl [90:1-90:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [90:1-90:42];elf_relocation_size(\\\"X86\\\",\\\"TLS_LE\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_LE") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_GD\",32).\nin file relocations.dl [91:1-91:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [91:1-91:42];elf_relocation_size(\\\"X86\\\",\\\"TLS_GD\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_GD") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_LDM\",32).\nin file relocations.dl [92:1-92:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [92:1-92:43];elf_relocation_size(\\\"X86\\\",\\\"TLS_LDM\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_LDM") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"R16\",16).\nin file relocations.dl [93:1-93:39]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [93:1-93:39];elf_relocation_size(\\\"X86\\\",\\\"R16\\\",16).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "R16") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"PC16\",16).\nin file relocations.dl [94:1-94:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [94:1-94:40];elf_relocation_size(\\\"X86\\\",\\\"PC16\\\",16).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "PC16") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"R8\",8).\nin file relocations.dl [95:1-95:37]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [95:1-95:37];elf_relocation_size(\\\"X86\\\",\\\"R8\\\",8).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "R8") (UNSIGNED 8)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"PC8\",8).\nin file relocations.dl [96:1-96:38]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [96:1-96:38];elf_relocation_size(\\\"X86\\\",\\\"PC8\\\",8).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "PC8") (UNSIGNED 8)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_GD_32\",32).\nin file relocations.dl [97:1-97:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [97:1-97:45];elf_relocation_size(\\\"X86\\\",\\\"TLS_GD_32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_GD_32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_GD_PUSH\",32).\nin file relocations.dl [98:1-98:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [98:1-98:47];elf_relocation_size(\\\"X86\\\",\\\"TLS_GD_PUSH\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_GD_PUSH") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_GD_CALL\",32).\nin file relocations.dl [99:1-99:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [99:1-99:47];elf_relocation_size(\\\"X86\\\",\\\"TLS_GD_CALL\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_GD_CALL") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_GD_POP\",32).\nin file relocations.dl [100:1-100:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [100:1-100:46];elf_relocation_size(\\\"X86\\\",\\\"TLS_GD_POP\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_GD_POP") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_LDM_32\",32).\nin file relocations.dl [101:1-101:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [101:1-101:46];elf_relocation_size(\\\"X86\\\",\\\"TLS_LDM_32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_LDM_32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_LDM_PUSH\",32).\nin file relocations.dl [102:1-102:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [102:1-102:48];elf_relocation_size(\\\"X86\\\",\\\"TLS_LDM_PUSH\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_LDM_PUSH") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_LDM_CALL\",0).\nin file relocations.dl [103:1-103:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [103:1-103:47];elf_relocation_size(\\\"X86\\\",\\\"TLS_LDM_CALL\\\",0).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_LDM_CALL") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_LDM_POP\",32).\nin file relocations.dl [104:1-104:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [104:1-104:47];elf_relocation_size(\\\"X86\\\",\\\"TLS_LDM_POP\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_LDM_POP") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_LDO_32\",32).\nin file relocations.dl [105:1-105:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [105:1-105:46];elf_relocation_size(\\\"X86\\\",\\\"TLS_LDO_32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_LDO_32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_IE_32\",32).\nin file relocations.dl [106:1-106:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [106:1-106:45];elf_relocation_size(\\\"X86\\\",\\\"TLS_IE_32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_IE_32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_LE_32\",32).\nin file relocations.dl [107:1-107:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [107:1-107:45];elf_relocation_size(\\\"X86\\\",\\\"TLS_LE_32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_LE_32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_DTPMOD32\",32).\nin file relocations.dl [108:1-108:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [108:1-108:48];elf_relocation_size(\\\"X86\\\",\\\"TLS_DTPMOD32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_DTPMOD32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_DTPOFF32\",32).\nin file relocations.dl [109:1-109:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [109:1-109:48];elf_relocation_size(\\\"X86\\\",\\\"TLS_DTPOFF32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_DTPOFF32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_TPOFF32\",32).\nin file relocations.dl [110:1-110:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [110:1-110:47];elf_relocation_size(\\\"X86\\\",\\\"TLS_TPOFF32\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_TPOFF32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_GOTDESC\",32).\nin file relocations.dl [111:1-111:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [111:1-111:47];elf_relocation_size(\\\"X86\\\",\\\"TLS_GOTDESC\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_GOTDESC") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_DESC_CALL\",32).\nin file relocations.dl [112:1-112:49]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [112:1-112:49];elf_relocation_size(\\\"X86\\\",\\\"TLS_DESC_CALL\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_DESC_CALL") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"TLS_DESC\",32).\nin file relocations.dl [113:1-113:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [113:1-113:44];elf_relocation_size(\\\"X86\\\",\\\"TLS_DESC\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "TLS_DESC") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"X86\",\"IRELATIVE\",32).\nin file relocations.dl [114:1-114:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [114:1-114:45];elf_relocation_size(\\\"X86\\\",\\\"IRELATIVE\\\",32).;"
(QUERY
        (INSERT ((STRING "X86") (STRING "IRELATIVE") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"NONE\",0).\nin file relocations.dl [117:1-117:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [117:1-117:41];elf_relocation_size(\\\"ARM64\\\",\\\"NONE\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "NONE") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"ABS64\",64).\nin file relocations.dl [118:1-118:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [118:1-118:43];elf_relocation_size(\\\"ARM64\\\",\\\"ABS64\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "ABS64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"ABS32\",32).\nin file relocations.dl [119:1-119:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [119:1-119:43];elf_relocation_size(\\\"ARM64\\\",\\\"ABS32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "ABS32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"ABS16\",16).\nin file relocations.dl [120:1-120:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [120:1-120:43];elf_relocation_size(\\\"ARM64\\\",\\\"ABS16\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "ABS16") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"PREL64\",64).\nin file relocations.dl [121:1-121:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [121:1-121:44];elf_relocation_size(\\\"ARM64\\\",\\\"PREL64\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "PREL64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"PREL32\",32).\nin file relocations.dl [122:1-122:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [122:1-122:44];elf_relocation_size(\\\"ARM64\\\",\\\"PREL32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "PREL32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"PREL16\",16).\nin file relocations.dl [123:1-123:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [123:1-123:44];elf_relocation_size(\\\"ARM64\\\",\\\"PREL16\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "PREL16") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_UABS_G0\",16).\nin file relocations.dl [124:1-124:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [124:1-124:50];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_UABS_G0\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_UABS_G0") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_UABS_G0_NC\",16).\nin file relocations.dl [125:1-125:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [125:1-125:53];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_UABS_G0_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_UABS_G0_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_UABS_G1\",16).\nin file relocations.dl [126:1-126:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [126:1-126:50];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_UABS_G1\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_UABS_G1") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_UABS_G1_NC\",16).\nin file relocations.dl [127:1-127:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [127:1-127:53];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_UABS_G1_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_UABS_G1_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_UABS_G2\",16).\nin file relocations.dl [128:1-128:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [128:1-128:50];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_UABS_G2\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_UABS_G2") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_UABS_G2_NC\",16).\nin file relocations.dl [129:1-129:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [129:1-129:53];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_UABS_G2_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_UABS_G2_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_UABS_G3\",16).\nin file relocations.dl [130:1-130:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [130:1-130:50];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_UABS_G3\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_UABS_G3") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_SABS_G0\",16).\nin file relocations.dl [131:1-131:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [131:1-131:50];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_SABS_G0\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_SABS_G0") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_SABS_G1\",16).\nin file relocations.dl [132:1-132:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [132:1-132:50];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_SABS_G1\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_SABS_G1") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_SABS_G2\",16).\nin file relocations.dl [133:1-133:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [133:1-133:50];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_SABS_G2\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_SABS_G2") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"LD_PREL_LO19\",19).\nin file relocations.dl [134:1-134:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [134:1-134:50];elf_relocation_size(\\\"ARM64\\\",\\\"LD_PREL_LO19\\\",19).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "LD_PREL_LO19") (UNSIGNED 19)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"ADR_PREL_LO21\",21).\nin file relocations.dl [135:1-135:51]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [135:1-135:51];elf_relocation_size(\\\"ARM64\\\",\\\"ADR_PREL_LO21\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "ADR_PREL_LO21") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"ADR_PREL_PG_HI21\",21).\nin file relocations.dl [136:1-136:54]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [136:1-136:54];elf_relocation_size(\\\"ARM64\\\",\\\"ADR_PREL_PG_HI21\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "ADR_PREL_PG_HI21") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"ADR_PREL_PG_HI21_NC\",21).\nin file relocations.dl [137:1-137:57]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [137:1-137:57];elf_relocation_size(\\\"ARM64\\\",\\\"ADR_PREL_PG_HI21_NC\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "ADR_PREL_PG_HI21_NC") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"ADD_ABS_LO12_NC\",12).\nin file relocations.dl [138:1-138:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [138:1-138:53];elf_relocation_size(\\\"ARM64\\\",\\\"ADD_ABS_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "ADD_ABS_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"LDST8_ABS_LO12_NC\",12).\nin file relocations.dl [139:1-139:55]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [139:1-139:55];elf_relocation_size(\\\"ARM64\\\",\\\"LDST8_ABS_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "LDST8_ABS_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TSTBR14\",14).\nin file relocations.dl [140:1-140:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [140:1-140:45];elf_relocation_size(\\\"ARM64\\\",\\\"TSTBR14\\\",14).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TSTBR14") (UNSIGNED 14)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"CONDBR19\",19).\nin file relocations.dl [141:1-141:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [141:1-141:46];elf_relocation_size(\\\"ARM64\\\",\\\"CONDBR19\\\",19).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "CONDBR19") (UNSIGNED 19)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"JUMP26\",26).\nin file relocations.dl [142:1-142:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [142:1-142:44];elf_relocation_size(\\\"ARM64\\\",\\\"JUMP26\\\",26).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "JUMP26") (UNSIGNED 26)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"CALL26\",26).\nin file relocations.dl [143:1-143:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [143:1-143:44];elf_relocation_size(\\\"ARM64\\\",\\\"CALL26\\\",26).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "CALL26") (UNSIGNED 26)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"LDST16_ABS_LO12_NC\",12).\nin file relocations.dl [144:1-144:56]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [144:1-144:56];elf_relocation_size(\\\"ARM64\\\",\\\"LDST16_ABS_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "LDST16_ABS_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"LDST32_ABS_LO12_NC\",12).\nin file relocations.dl [145:1-145:56]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [145:1-145:56];elf_relocation_size(\\\"ARM64\\\",\\\"LDST32_ABS_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "LDST32_ABS_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"LDST64_ABS_LO12_NC\",12).\nin file relocations.dl [146:1-146:56]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [146:1-146:56];elf_relocation_size(\\\"ARM64\\\",\\\"LDST64_ABS_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "LDST64_ABS_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_PREL_G0\",16).\nin file relocations.dl [147:1-147:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [147:1-147:50];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_PREL_G0\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_PREL_G0") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_PREL_G0_NC\",16).\nin file relocations.dl [148:1-148:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [148:1-148:53];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_PREL_G0_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_PREL_G0_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_PREL_G1\",16).\nin file relocations.dl [149:1-149:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [149:1-149:50];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_PREL_G1\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_PREL_G1") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_PREL_G1_NC\",16).\nin file relocations.dl [150:1-150:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [150:1-150:53];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_PREL_G1_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_PREL_G1_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_PREL_G2\",16).\nin file relocations.dl [151:1-151:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [151:1-151:50];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_PREL_G2\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_PREL_G2") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_PREL_G2_NC\",16).\nin file relocations.dl [152:1-152:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [152:1-152:53];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_PREL_G2_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_PREL_G2_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_PREL_G3\",16).\nin file relocations.dl [153:1-153:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [153:1-153:50];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_PREL_G3\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_PREL_G3") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"LDST128_ABS_LO12_NC\",12).\nin file relocations.dl [154:1-154:57]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [154:1-154:57];elf_relocation_size(\\\"ARM64\\\",\\\"LDST128_ABS_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "LDST128_ABS_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_GOTOFF_G0\",16).\nin file relocations.dl [155:1-155:52]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [155:1-155:52];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_GOTOFF_G0\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_GOTOFF_G0") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_GOTOFF_G0_NC\",16).\nin file relocations.dl [156:1-156:55]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [156:1-156:55];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_GOTOFF_G0_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_GOTOFF_G0_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_GOTOFF_G1\",16).\nin file relocations.dl [157:1-157:52]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [157:1-157:52];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_GOTOFF_G1\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_GOTOFF_G1") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_GOTOFF_G1_NC\",16).\nin file relocations.dl [158:1-158:55]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [158:1-158:55];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_GOTOFF_G1_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_GOTOFF_G1_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_GOTOFF_G2\",16).\nin file relocations.dl [159:1-159:52]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [159:1-159:52];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_GOTOFF_G2\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_GOTOFF_G2") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_GOTOFF_G2_NC\",16).\nin file relocations.dl [160:1-160:55]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [160:1-160:55];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_GOTOFF_G2_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_GOTOFF_G2_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"MOVW_GOTOFF_G3\",16).\nin file relocations.dl [161:1-161:52]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [161:1-161:52];elf_relocation_size(\\\"ARM64\\\",\\\"MOVW_GOTOFF_G3\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "MOVW_GOTOFF_G3") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"GOTREL64\",64).\nin file relocations.dl [162:1-162:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [162:1-162:46];elf_relocation_size(\\\"ARM64\\\",\\\"GOTREL64\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "GOTREL64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"GOTREL32\",64).\nin file relocations.dl [163:1-163:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [163:1-163:46];elf_relocation_size(\\\"ARM64\\\",\\\"GOTREL32\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "GOTREL32") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"GOT_LD_PREL19\",19).\nin file relocations.dl [164:1-164:51]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [164:1-164:51];elf_relocation_size(\\\"ARM64\\\",\\\"GOT_LD_PREL19\\\",19).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "GOT_LD_PREL19") (UNSIGNED 19)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"LD64_GOTOFF_LO15\",15).\nin file relocations.dl [165:1-165:54]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [165:1-165:54];elf_relocation_size(\\\"ARM64\\\",\\\"LD64_GOTOFF_LO15\\\",15).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "LD64_GOTOFF_LO15") (UNSIGNED 15)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"ADR_GOT_PAGE\",21).\nin file relocations.dl [166:1-166:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [166:1-166:50];elf_relocation_size(\\\"ARM64\\\",\\\"ADR_GOT_PAGE\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "ADR_GOT_PAGE") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"LD64_GOT_LO12_NC\",12).\nin file relocations.dl [167:1-167:54]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [167:1-167:54];elf_relocation_size(\\\"ARM64\\\",\\\"LD64_GOT_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "LD64_GOT_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"LD64_GOTPAGE_LO15\",15).\nin file relocations.dl [168:1-168:55]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [168:1-168:55];elf_relocation_size(\\\"ARM64\\\",\\\"LD64_GOTPAGE_LO15\\\",15).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "LD64_GOTPAGE_LO15") (UNSIGNED 15)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSGD_ADR_PREL21\",21).\nin file relocations.dl [169:1-169:54]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [169:1-169:54];elf_relocation_size(\\\"ARM64\\\",\\\"TLSGD_ADR_PREL21\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSGD_ADR_PREL21") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSGD_ADR_PAGE21\",21).\nin file relocations.dl [170:1-170:54]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [170:1-170:54];elf_relocation_size(\\\"ARM64\\\",\\\"TLSGD_ADR_PAGE21\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSGD_ADR_PAGE21") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSGD_ADD_LO12_NC\",12).\nin file relocations.dl [171:1-171:55]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [171:1-171:55];elf_relocation_size(\\\"ARM64\\\",\\\"TLSGD_ADD_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSGD_ADD_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSGD_MOVW_G1\",16).\nin file relocations.dl [172:1-172:51]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [172:1-172:51];elf_relocation_size(\\\"ARM64\\\",\\\"TLSGD_MOVW_G1\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSGD_MOVW_G1") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSGD_MOVW_G0_NC\",16).\nin file relocations.dl [173:1-173:54]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [173:1-173:54];elf_relocation_size(\\\"ARM64\\\",\\\"TLSGD_MOVW_G0_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSGD_MOVW_G0_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_ADR_PREL21\",21).\nin file relocations.dl [174:1-174:54]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [174:1-174:54];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_ADR_PREL21\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_ADR_PREL21") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_ADR_PAGE21\",21).\nin file relocations.dl [175:1-175:54]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [175:1-175:54];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_ADR_PAGE21\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_ADR_PAGE21") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_ADD_LO12_NC\",0).\nin file relocations.dl [176:1-176:54]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [176:1-176:54];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_ADD_LO12_NC\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_ADD_LO12_NC") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_MOVW_G1\",0).\nin file relocations.dl [177:1-177:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [177:1-177:50];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_MOVW_G1\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_MOVW_G1") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_MOVW_G0_NC\",0).\nin file relocations.dl [178:1-178:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [178:1-178:53];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_MOVW_G0_NC\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_MOVW_G0_NC") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_LD_PREL19\",19).\nin file relocations.dl [179:1-179:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [179:1-179:53];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_LD_PREL19\\\",19).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_LD_PREL19") (UNSIGNED 19)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_MOVW_DTPREL_G2\",16).\nin file relocations.dl [180:1-180:58]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [180:1-180:58];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_MOVW_DTPREL_G2\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_MOVW_DTPREL_G2") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_MOVW_DTPREL_G1\",16).\nin file relocations.dl [181:1-181:58]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [181:1-181:58];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_MOVW_DTPREL_G1\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_MOVW_DTPREL_G1") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_MOVW_DTPREL_G1_NC\",16).\nin file relocations.dl [182:1-182:61]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [182:1-182:61];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_MOVW_DTPREL_G1_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_MOVW_DTPREL_G1_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_MOVW_DTPREL_G0\",16).\nin file relocations.dl [183:1-183:58]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [183:1-183:58];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_MOVW_DTPREL_G0\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_MOVW_DTPREL_G0") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_MOVW_DTPREL_G0_NC\",16).\nin file relocations.dl [184:1-184:61]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [184:1-184:61];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_MOVW_DTPREL_G0_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_MOVW_DTPREL_G0_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_ADD_DTPREL_HI12\",12).\nin file relocations.dl [185:1-185:59]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [185:1-185:59];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_ADD_DTPREL_HI12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_ADD_DTPREL_HI12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_ADD_DTPREL_LO12\",12).\nin file relocations.dl [186:1-186:59]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [186:1-186:59];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_ADD_DTPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_ADD_DTPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_ADD_DTPREL_LO12_NC\",12).\nin file relocations.dl [187:1-187:62]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [187:1-187:62];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_ADD_DTPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_ADD_DTPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_LDST8_DTPREL_LO12\",12).\nin file relocations.dl [188:1-188:61]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [188:1-188:61];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_LDST8_DTPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_LDST8_DTPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_LDST8_DTPREL_LO12_NC\",12).\nin file relocations.dl [189:1-189:64]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [189:1-189:64];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_LDST8_DTPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_LDST8_DTPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_LDST16_DTPREL_LO12\",12).\nin file relocations.dl [190:1-190:62]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [190:1-190:62];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_LDST16_DTPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_LDST16_DTPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_LDST16_DTPREL_LO12_NC\",12).\nin file relocations.dl [191:1-191:65]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [191:1-191:65];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_LDST16_DTPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_LDST16_DTPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_LDST32_DTPREL_LO12\",12).\nin file relocations.dl [192:1-192:62]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [192:1-192:62];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_LDST32_DTPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_LDST32_DTPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_LDST32_DTPREL_LO12_NC\",12).\nin file relocations.dl [193:1-193:65]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [193:1-193:65];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_LDST32_DTPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_LDST32_DTPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_LDST64_DTPREL_LO12\",12).\nin file relocations.dl [194:1-194:62]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [194:1-194:62];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_LDST64_DTPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_LDST64_DTPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_LDST64_DTPREL_LO12_NC\",12).\nin file relocations.dl [195:1-195:65]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [195:1-195:65];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_LDST64_DTPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_LDST64_DTPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSIE_MOVW_GOTTPREL_G1\",16).\nin file relocations.dl [196:1-196:60]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [196:1-196:60];elf_relocation_size(\\\"ARM64\\\",\\\"TLSIE_MOVW_GOTTPREL_G1\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSIE_MOVW_GOTTPREL_G1") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSIE_MOVW_GOTTPREL_G0_NC\",16).\nin file relocations.dl [197:1-197:63]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [197:1-197:63];elf_relocation_size(\\\"ARM64\\\",\\\"TLSIE_MOVW_GOTTPREL_G0_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSIE_MOVW_GOTTPREL_G0_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSIE_ADR_GOTTPREL_PAGE21\",21).\nin file relocations.dl [198:1-198:63]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [198:1-198:63];elf_relocation_size(\\\"ARM64\\\",\\\"TLSIE_ADR_GOTTPREL_PAGE21\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSIE_ADR_GOTTPREL_PAGE21") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSIE_LD64_GOTTPREL_LO12_NC\",12).\nin file relocations.dl [199:1-199:65]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [199:1-199:65];elf_relocation_size(\\\"ARM64\\\",\\\"TLSIE_LD64_GOTTPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSIE_LD64_GOTTPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSIE_LD_GOTTPREL_PREL19\",19).\nin file relocations.dl [200:1-200:62]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [200:1-200:62];elf_relocation_size(\\\"ARM64\\\",\\\"TLSIE_LD_GOTTPREL_PREL19\\\",19).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSIE_LD_GOTTPREL_PREL19") (UNSIGNED 19)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_MOVW_TPREL_G2\",16).\nin file relocations.dl [201:1-201:57]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [201:1-201:57];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_MOVW_TPREL_G2\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_MOVW_TPREL_G2") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_MOVW_TPREL_G1\",16).\nin file relocations.dl [202:1-202:57]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [202:1-202:57];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_MOVW_TPREL_G1\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_MOVW_TPREL_G1") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_MOVW_TPREL_G1_NC\",16).\nin file relocations.dl [203:1-203:60]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [203:1-203:60];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_MOVW_TPREL_G1_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_MOVW_TPREL_G1_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_MOVW_TPREL_G0\",16).\nin file relocations.dl [204:1-204:57]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [204:1-204:57];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_MOVW_TPREL_G0\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_MOVW_TPREL_G0") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_MOVW_TPREL_G0_NC\",16).\nin file relocations.dl [205:1-205:60]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [205:1-205:60];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_MOVW_TPREL_G0_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_MOVW_TPREL_G0_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_ADD_TPREL_HI12\",12).\nin file relocations.dl [206:1-206:58]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [206:1-206:58];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_ADD_TPREL_HI12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_ADD_TPREL_HI12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_ADD_TPREL_LO12\",12).\nin file relocations.dl [207:1-207:58]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [207:1-207:58];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_ADD_TPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_ADD_TPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_ADD_TPREL_LO12_NC\",12).\nin file relocations.dl [208:1-208:61]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [208:1-208:61];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_ADD_TPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_ADD_TPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_LDST8_TPREL_LO12\",12).\nin file relocations.dl [209:1-209:60]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [209:1-209:60];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_LDST8_TPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_LDST8_TPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_LDST8_TPREL_LO12_NC\",12).\nin file relocations.dl [210:1-210:63]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [210:1-210:63];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_LDST8_TPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_LDST8_TPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_LDST16_TPREL_LO12\",12).\nin file relocations.dl [211:1-211:61]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [211:1-211:61];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_LDST16_TPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_LDST16_TPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_LDST16_TPREL_LO12_NC\",12).\nin file relocations.dl [212:1-212:64]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [212:1-212:64];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_LDST16_TPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_LDST16_TPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_LDST32_TPREL_LO12\",12).\nin file relocations.dl [213:1-213:61]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [213:1-213:61];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_LDST32_TPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_LDST32_TPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_LDST32_TPREL_LO12_NC\",12).\nin file relocations.dl [214:1-214:64]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [214:1-214:64];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_LDST32_TPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_LDST32_TPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_LDST64_TPREL_LO12\",12).\nin file relocations.dl [215:1-215:61]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [215:1-215:61];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_LDST64_TPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_LDST64_TPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_LDST64_TPREL_LO12_NC\",12).\nin file relocations.dl [216:1-216:64]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [216:1-216:64];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_LDST64_TPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_LDST64_TPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSDESC_LD_PREL19\",19).\nin file relocations.dl [217:1-217:55]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [217:1-217:55];elf_relocation_size(\\\"ARM64\\\",\\\"TLSDESC_LD_PREL19\\\",19).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSDESC_LD_PREL19") (UNSIGNED 19)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSDESC_ADR_PREL21\",21).\nin file relocations.dl [218:1-218:56]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [218:1-218:56];elf_relocation_size(\\\"ARM64\\\",\\\"TLSDESC_ADR_PREL21\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSDESC_ADR_PREL21") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSDESC_ADR_PAGE21\",21).\nin file relocations.dl [219:1-219:56]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [219:1-219:56];elf_relocation_size(\\\"ARM64\\\",\\\"TLSDESC_ADR_PAGE21\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSDESC_ADR_PAGE21") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSDESC_LD64_LO12_NC\",12).\nin file relocations.dl [220:1-220:58]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [220:1-220:58];elf_relocation_size(\\\"ARM64\\\",\\\"TLSDESC_LD64_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSDESC_LD64_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSDESC_ADD_LO12_NC\",12).\nin file relocations.dl [221:1-221:57]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [221:1-221:57];elf_relocation_size(\\\"ARM64\\\",\\\"TLSDESC_ADD_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSDESC_ADD_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSDESC_OFF_G1\",12).\nin file relocations.dl [222:1-222:52]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [222:1-222:52];elf_relocation_size(\\\"ARM64\\\",\\\"TLSDESC_OFF_G1\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSDESC_OFF_G1") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSDESC_OFF_G0_NC\",12).\nin file relocations.dl [223:1-223:55]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [223:1-223:55];elf_relocation_size(\\\"ARM64\\\",\\\"TLSDESC_OFF_G0_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSDESC_OFF_G0_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSDESC_LDR\",12).\nin file relocations.dl [224:1-224:49]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [224:1-224:49];elf_relocation_size(\\\"ARM64\\\",\\\"TLSDESC_LDR\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSDESC_LDR") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSDESC_ADD\",12).\nin file relocations.dl [225:1-225:49]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [225:1-225:49];elf_relocation_size(\\\"ARM64\\\",\\\"TLSDESC_ADD\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSDESC_ADD") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSDESC_CALL\",12).\nin file relocations.dl [226:1-226:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [226:1-226:50];elf_relocation_size(\\\"ARM64\\\",\\\"TLSDESC_CALL\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSDESC_CALL") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_LDST128_TPREL_LO12\",12).\nin file relocations.dl [227:1-227:62]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [227:1-227:62];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_LDST128_TPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_LDST128_TPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLE_LDST128_TPREL_LO12_NC\",12).\nin file relocations.dl [228:1-228:65]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [228:1-228:65];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLE_LDST128_TPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLE_LDST128_TPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_LDST128_DTPREL_LO12\",12).\nin file relocations.dl [229:1-229:63]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [229:1-229:63];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_LDST128_DTPREL_LO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_LDST128_DTPREL_LO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSLD_LDST128_DTPREL_LO12_NC\",12).\nin file relocations.dl [230:1-230:66]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [230:1-230:66];elf_relocation_size(\\\"ARM64\\\",\\\"TLSLD_LDST128_DTPREL_LO12_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSLD_LDST128_DTPREL_LO12_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"COPY\",64).\nin file relocations.dl [231:1-231:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [231:1-231:42];elf_relocation_size(\\\"ARM64\\\",\\\"COPY\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "COPY") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"GLOB_DAT\",64).\nin file relocations.dl [232:1-232:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [232:1-232:46];elf_relocation_size(\\\"ARM64\\\",\\\"GLOB_DAT\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "GLOB_DAT") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"JUMP_SLOT\",64).\nin file relocations.dl [233:1-233:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [233:1-233:47];elf_relocation_size(\\\"ARM64\\\",\\\"JUMP_SLOT\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "JUMP_SLOT") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"RELATIVE\",64).\nin file relocations.dl [234:1-234:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [234:1-234:46];elf_relocation_size(\\\"ARM64\\\",\\\"RELATIVE\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "RELATIVE") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLS_DTPREL64\",64).\nin file relocations.dl [235:1-235:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [235:1-235:50];elf_relocation_size(\\\"ARM64\\\",\\\"TLS_DTPREL64\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLS_DTPREL64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLS_DTPMOD64\",64).\nin file relocations.dl [236:1-236:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [236:1-236:50];elf_relocation_size(\\\"ARM64\\\",\\\"TLS_DTPMOD64\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLS_DTPMOD64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLS_TPREL64\",64).\nin file relocations.dl [237:1-237:49]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [237:1-237:49];elf_relocation_size(\\\"ARM64\\\",\\\"TLS_TPREL64\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLS_TPREL64") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"TLSDESC\",64).\nin file relocations.dl [238:1-238:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [238:1-238:45];elf_relocation_size(\\\"ARM64\\\",\\\"TLSDESC\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "TLSDESC") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM64\",\"IRELATIVE\",64).\nin file relocations.dl [239:1-239:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [239:1-239:47];elf_relocation_size(\\\"ARM64\\\",\\\"IRELATIVE\\\",64).;"
(QUERY
        (INSERT ((STRING "ARM64") (STRING "IRELATIVE") (UNSIGNED 64)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"NONE\",0).\nin file relocations.dl [241:1-241:39]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [241:1-241:39];elf_relocation_size(\\\"ARM\\\",\\\"NONE\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "NONE") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PC24\",24).\nin file relocations.dl [242:1-242:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [242:1-242:40];elf_relocation_size(\\\"ARM\\\",\\\"PC24\\\",24).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PC24") (UNSIGNED 24)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ABS32\",32).\nin file relocations.dl [243:1-243:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [243:1-243:41];elf_relocation_size(\\\"ARM\\\",\\\"ABS32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ABS32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"REL32\",32).\nin file relocations.dl [244:1-244:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [244:1-244:41];elf_relocation_size(\\\"ARM\\\",\\\"REL32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "REL32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDR_PC_G0\",32).\nin file relocations.dl [245:1-245:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [245:1-245:45];elf_relocation_size(\\\"ARM\\\",\\\"LDR_PC_G0\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDR_PC_G0") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ABS16\",16).\nin file relocations.dl [246:1-246:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [246:1-246:41];elf_relocation_size(\\\"ARM\\\",\\\"ABS16\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ABS16") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ABS12\",12).\nin file relocations.dl [247:1-247:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [247:1-247:41];elf_relocation_size(\\\"ARM\\\",\\\"ABS12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ABS12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_ABS5\",5).\nin file relocations.dl [248:1-248:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [248:1-248:43];elf_relocation_size(\\\"ARM\\\",\\\"THM_ABS5\\\",5).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_ABS5") (UNSIGNED 5)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ABS8\",8).\nin file relocations.dl [249:1-249:39]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [249:1-249:39];elf_relocation_size(\\\"ARM\\\",\\\"ABS8\\\",8).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ABS8") (UNSIGNED 8)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"SBREL32\",32).\nin file relocations.dl [250:1-250:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [250:1-250:43];elf_relocation_size(\\\"ARM\\\",\\\"SBREL32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "SBREL32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_CALL\",25).\nin file relocations.dl [251:1-251:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [251:1-251:44];elf_relocation_size(\\\"ARM\\\",\\\"THM_CALL\\\",25).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_CALL") (UNSIGNED 25)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_PC8\",8).\nin file relocations.dl [252:1-252:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [252:1-252:42];elf_relocation_size(\\\"ARM\\\",\\\"THM_PC8\\\",8).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_PC8") (UNSIGNED 8)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"BREL_ADJ\",32).\nin file relocations.dl [253:1-253:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [253:1-253:44];elf_relocation_size(\\\"ARM\\\",\\\"BREL_ADJ\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "BREL_ADJ") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_DESC\",0).\nin file relocations.dl [254:1-254:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [254:1-254:43];elf_relocation_size(\\\"ARM\\\",\\\"TLS_DESC\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_DESC") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_SWI8\",0).\nin file relocations.dl [255:1-255:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [255:1-255:43];elf_relocation_size(\\\"ARM\\\",\\\"THM_SWI8\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_SWI8") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"XPC25\",25).\nin file relocations.dl [256:1-256:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [256:1-256:41];elf_relocation_size(\\\"ARM\\\",\\\"XPC25\\\",25).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "XPC25") (UNSIGNED 25)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_XPC22\",22).\nin file relocations.dl [257:1-257:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [257:1-257:45];elf_relocation_size(\\\"ARM\\\",\\\"THM_XPC22\\\",22).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_XPC22") (UNSIGNED 22)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_DTPMOD32\",32).\nin file relocations.dl [258:1-258:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [258:1-258:48];elf_relocation_size(\\\"ARM\\\",\\\"TLS_DTPMOD32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_DTPMOD32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_DTPOFF32\",32).\nin file relocations.dl [259:1-259:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [259:1-259:48];elf_relocation_size(\\\"ARM\\\",\\\"TLS_DTPOFF32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_DTPOFF32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_TPOFF32\",32).\nin file relocations.dl [260:1-260:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [260:1-260:47];elf_relocation_size(\\\"ARM\\\",\\\"TLS_TPOFF32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_TPOFF32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"COPY\",32).\nin file relocations.dl [261:1-261:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [261:1-261:40];elf_relocation_size(\\\"ARM\\\",\\\"COPY\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "COPY") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"GLOB_DAT\",32).\nin file relocations.dl [262:1-262:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [262:1-262:44];elf_relocation_size(\\\"ARM\\\",\\\"GLOB_DAT\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "GLOB_DAT") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"JUMP_SLOT\",32).\nin file relocations.dl [263:1-263:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [263:1-263:45];elf_relocation_size(\\\"ARM\\\",\\\"JUMP_SLOT\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "JUMP_SLOT") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"RELATIVE\",32).\nin file relocations.dl [264:1-264:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [264:1-264:44];elf_relocation_size(\\\"ARM\\\",\\\"RELATIVE\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "RELATIVE") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"GOTOFF32\",32).\nin file relocations.dl [265:1-265:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [265:1-265:44];elf_relocation_size(\\\"ARM\\\",\\\"GOTOFF32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "GOTOFF32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"BASE_PREL\",32).\nin file relocations.dl [266:1-266:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [266:1-266:45];elf_relocation_size(\\\"ARM\\\",\\\"BASE_PREL\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "BASE_PREL") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"GOT_BREL\",32).\nin file relocations.dl [267:1-267:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [267:1-267:44];elf_relocation_size(\\\"ARM\\\",\\\"GOT_BREL\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "GOT_BREL") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PLT32\",24).\nin file relocations.dl [268:1-268:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [268:1-268:41];elf_relocation_size(\\\"ARM\\\",\\\"PLT32\\\",24).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PLT32") (UNSIGNED 24)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"CALL\",24).\nin file relocations.dl [269:1-269:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [269:1-269:40];elf_relocation_size(\\\"ARM\\\",\\\"CALL\\\",24).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "CALL") (UNSIGNED 24)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"JUMP24\",24).\nin file relocations.dl [270:1-270:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [270:1-270:42];elf_relocation_size(\\\"ARM\\\",\\\"JUMP24\\\",24).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "JUMP24") (UNSIGNED 24)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_JUMP24\",24).\nin file relocations.dl [271:1-271:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [271:1-271:46];elf_relocation_size(\\\"ARM\\\",\\\"THM_JUMP24\\\",24).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_JUMP24") (UNSIGNED 24)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"BASE_ABS\",21).\nin file relocations.dl [272:1-272:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [272:1-272:44];elf_relocation_size(\\\"ARM\\\",\\\"BASE_ABS\\\",21).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "BASE_ABS") (UNSIGNED 21)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_PCREL_7_0\",12).\nin file relocations.dl [273:1-273:49]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [273:1-273:49];elf_relocation_size(\\\"ARM\\\",\\\"ALU_PCREL_7_0\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_PCREL_7_0") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_PCREL_15_8\",12).\nin file relocations.dl [274:1-274:50]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [274:1-274:50];elf_relocation_size(\\\"ARM\\\",\\\"ALU_PCREL_15_8\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_PCREL_15_8") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_PCREL_23_15\",12).\nin file relocations.dl [275:1-275:51]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [275:1-275:51];elf_relocation_size(\\\"ARM\\\",\\\"ALU_PCREL_23_15\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_PCREL_23_15") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDR_SBREL_11_0_NC\",12).\nin file relocations.dl [276:1-276:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [276:1-276:53];elf_relocation_size(\\\"ARM\\\",\\\"LDR_SBREL_11_0_NC\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDR_SBREL_11_0_NC") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_SBREL_19_12_NC\",8).\nin file relocations.dl [277:1-277:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [277:1-277:53];elf_relocation_size(\\\"ARM\\\",\\\"ALU_SBREL_19_12_NC\\\",8).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_SBREL_19_12_NC") (UNSIGNED 8)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_SBREL_27_20_CK\",8).\nin file relocations.dl [278:1-278:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [278:1-278:53];elf_relocation_size(\\\"ARM\\\",\\\"ALU_SBREL_27_20_CK\\\",8).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_SBREL_27_20_CK") (UNSIGNED 8)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TARGET1\",32).\nin file relocations.dl [279:1-279:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [279:1-279:43];elf_relocation_size(\\\"ARM\\\",\\\"TARGET1\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TARGET1") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"SBREL31\",32).\nin file relocations.dl [280:1-280:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [280:1-280:43];elf_relocation_size(\\\"ARM\\\",\\\"SBREL31\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "SBREL31") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"V4BX\",32).\nin file relocations.dl [281:1-281:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [281:1-281:40];elf_relocation_size(\\\"ARM\\\",\\\"V4BX\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "V4BX") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TARGET2\",32).\nin file relocations.dl [282:1-282:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [282:1-282:43];elf_relocation_size(\\\"ARM\\\",\\\"TARGET2\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TARGET2") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PREL31\",31).\nin file relocations.dl [283:1-283:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [283:1-283:42];elf_relocation_size(\\\"ARM\\\",\\\"PREL31\\\",31).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PREL31") (UNSIGNED 31)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"MOVW_ABS_NC\",16).\nin file relocations.dl [284:1-284:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [284:1-284:47];elf_relocation_size(\\\"ARM\\\",\\\"MOVW_ABS_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "MOVW_ABS_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"MOVT_ABS\",16).\nin file relocations.dl [285:1-285:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [285:1-285:44];elf_relocation_size(\\\"ARM\\\",\\\"MOVT_ABS\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "MOVT_ABS") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"MOVW_PREL_NC\",16).\nin file relocations.dl [286:1-286:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [286:1-286:48];elf_relocation_size(\\\"ARM\\\",\\\"MOVW_PREL_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "MOVW_PREL_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"MOVT_PREL\",16).\nin file relocations.dl [287:1-287:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [287:1-287:45];elf_relocation_size(\\\"ARM\\\",\\\"MOVT_PREL\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "MOVT_PREL") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_MOVW_ABS_NC\",16).\nin file relocations.dl [288:1-288:51]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [288:1-288:51];elf_relocation_size(\\\"ARM\\\",\\\"THM_MOVW_ABS_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_MOVW_ABS_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_MOVT_ABS\",16).\nin file relocations.dl [289:1-289:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [289:1-289:48];elf_relocation_size(\\\"ARM\\\",\\\"THM_MOVT_ABS\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_MOVT_ABS") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_MOVW_PREL_NC\",16).\nin file relocations.dl [290:1-290:52]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [290:1-290:52];elf_relocation_size(\\\"ARM\\\",\\\"THM_MOVW_PREL_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_MOVW_PREL_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_MOVT_PREL\",16).\nin file relocations.dl [291:1-291:49]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [291:1-291:49];elf_relocation_size(\\\"ARM\\\",\\\"THM_MOVT_PREL\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_MOVT_PREL") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_JUMP19\",19).\nin file relocations.dl [292:1-292:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [292:1-292:46];elf_relocation_size(\\\"ARM\\\",\\\"THM_JUMP19\\\",19).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_JUMP19") (UNSIGNED 19)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_JUMP6\",6).\nin file relocations.dl [293:1-293:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [293:1-293:44];elf_relocation_size(\\\"ARM\\\",\\\"THM_JUMP6\\\",6).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_JUMP6") (UNSIGNED 6)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_ALU_PREL_11_0\",13).\nin file relocations.dl [294:1-294:53]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [294:1-294:53];elf_relocation_size(\\\"ARM\\\",\\\"THM_ALU_PREL_11_0\\\",13).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_ALU_PREL_11_0") (UNSIGNED 13)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_PC12\",13).\nin file relocations.dl [295:1-295:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [295:1-295:44];elf_relocation_size(\\\"ARM\\\",\\\"THM_PC12\\\",13).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_PC12") (UNSIGNED 13)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ABS32_NOI\",32).\nin file relocations.dl [296:1-296:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [296:1-296:45];elf_relocation_size(\\\"ARM\\\",\\\"ABS32_NOI\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ABS32_NOI") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"REL32_NOI\",32).\nin file relocations.dl [297:1-297:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [297:1-297:45];elf_relocation_size(\\\"ARM\\\",\\\"REL32_NOI\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "REL32_NOI") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_PC_G0_NC\",32).\nin file relocations.dl [298:1-298:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [298:1-298:48];elf_relocation_size(\\\"ARM\\\",\\\"ALU_PC_G0_NC\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_PC_G0_NC") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_PC_G0\",32).\nin file relocations.dl [299:1-299:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [299:1-299:45];elf_relocation_size(\\\"ARM\\\",\\\"ALU_PC_G0\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_PC_G0") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_PC_G1_NC\",32).\nin file relocations.dl [300:1-300:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [300:1-300:48];elf_relocation_size(\\\"ARM\\\",\\\"ALU_PC_G1_NC\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_PC_G1_NC") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_PC_G1\",32).\nin file relocations.dl [301:1-301:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [301:1-301:45];elf_relocation_size(\\\"ARM\\\",\\\"ALU_PC_G1\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_PC_G1") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_PC_G2\",32).\nin file relocations.dl [302:1-302:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [302:1-302:45];elf_relocation_size(\\\"ARM\\\",\\\"ALU_PC_G2\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_PC_G2") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDR_PC_G1\",32).\nin file relocations.dl [303:1-303:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [303:1-303:45];elf_relocation_size(\\\"ARM\\\",\\\"LDR_PC_G1\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDR_PC_G1") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDR_PC_G2\",32).\nin file relocations.dl [304:1-304:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [304:1-304:45];elf_relocation_size(\\\"ARM\\\",\\\"LDR_PC_G2\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDR_PC_G2") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDRS_PC_G0\",32).\nin file relocations.dl [305:1-305:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [305:1-305:46];elf_relocation_size(\\\"ARM\\\",\\\"LDRS_PC_G0\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDRS_PC_G0") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDRS_PC_G1\",32).\nin file relocations.dl [306:1-306:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [306:1-306:46];elf_relocation_size(\\\"ARM\\\",\\\"LDRS_PC_G1\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDRS_PC_G1") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDRS_PC_G2\",32).\nin file relocations.dl [307:1-307:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [307:1-307:46];elf_relocation_size(\\\"ARM\\\",\\\"LDRS_PC_G2\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDRS_PC_G2") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDC_PC_G0\",32).\nin file relocations.dl [308:1-308:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [308:1-308:45];elf_relocation_size(\\\"ARM\\\",\\\"LDC_PC_G0\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDC_PC_G0") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDC_PC_G1\",32).\nin file relocations.dl [309:1-309:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [309:1-309:45];elf_relocation_size(\\\"ARM\\\",\\\"LDC_PC_G1\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDC_PC_G1") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDC_PC_G2\",32).\nin file relocations.dl [310:1-310:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [310:1-310:45];elf_relocation_size(\\\"ARM\\\",\\\"LDC_PC_G2\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDC_PC_G2") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_SB_G0_NC\",32).\nin file relocations.dl [311:1-311:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [311:1-311:48];elf_relocation_size(\\\"ARM\\\",\\\"ALU_SB_G0_NC\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_SB_G0_NC") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_SB_G0\",32).\nin file relocations.dl [312:1-312:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [312:1-312:45];elf_relocation_size(\\\"ARM\\\",\\\"ALU_SB_G0\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_SB_G0") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_SB_G1_NC\",32).\nin file relocations.dl [313:1-313:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [313:1-313:48];elf_relocation_size(\\\"ARM\\\",\\\"ALU_SB_G1_NC\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_SB_G1_NC") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_SB_G1\",32).\nin file relocations.dl [314:1-314:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [314:1-314:45];elf_relocation_size(\\\"ARM\\\",\\\"ALU_SB_G1\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_SB_G1") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ALU_SB_G2\",32).\nin file relocations.dl [315:1-315:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [315:1-315:45];elf_relocation_size(\\\"ARM\\\",\\\"ALU_SB_G2\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ALU_SB_G2") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDR_SB_G0\",32).\nin file relocations.dl [316:1-316:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [316:1-316:45];elf_relocation_size(\\\"ARM\\\",\\\"LDR_SB_G0\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDR_SB_G0") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDR_SB_G1\",32).\nin file relocations.dl [317:1-317:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [317:1-317:45];elf_relocation_size(\\\"ARM\\\",\\\"LDR_SB_G1\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDR_SB_G1") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDR_SB_G2\",32).\nin file relocations.dl [318:1-318:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [318:1-318:45];elf_relocation_size(\\\"ARM\\\",\\\"LDR_SB_G2\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDR_SB_G2") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDRS_SB_G0\",32).\nin file relocations.dl [319:1-319:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [319:1-319:46];elf_relocation_size(\\\"ARM\\\",\\\"LDRS_SB_G0\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDRS_SB_G0") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDRS_SB_G1\",32).\nin file relocations.dl [320:1-320:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [320:1-320:46];elf_relocation_size(\\\"ARM\\\",\\\"LDRS_SB_G1\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDRS_SB_G1") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDRS_SB_G2\",32).\nin file relocations.dl [321:1-321:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [321:1-321:46];elf_relocation_size(\\\"ARM\\\",\\\"LDRS_SB_G2\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDRS_SB_G2") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDC_SB_G0\",32).\nin file relocations.dl [322:1-322:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [322:1-322:45];elf_relocation_size(\\\"ARM\\\",\\\"LDC_SB_G0\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDC_SB_G0") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDC_SB_G1\",32).\nin file relocations.dl [323:1-323:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [323:1-323:45];elf_relocation_size(\\\"ARM\\\",\\\"LDC_SB_G1\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDC_SB_G1") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"LDC_SB_G2\",32).\nin file relocations.dl [324:1-324:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [324:1-324:45];elf_relocation_size(\\\"ARM\\\",\\\"LDC_SB_G2\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "LDC_SB_G2") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"MOVW_BREL_NC\",16).\nin file relocations.dl [325:1-325:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [325:1-325:48];elf_relocation_size(\\\"ARM\\\",\\\"MOVW_BREL_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "MOVW_BREL_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"MOVT_BREL\",16).\nin file relocations.dl [326:1-326:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [326:1-326:45];elf_relocation_size(\\\"ARM\\\",\\\"MOVT_BREL\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "MOVT_BREL") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"MOVW_BREL\",16).\nin file relocations.dl [327:1-327:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [327:1-327:45];elf_relocation_size(\\\"ARM\\\",\\\"MOVW_BREL\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "MOVW_BREL") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_MOVW_BREL_NC\",16).\nin file relocations.dl [328:1-328:52]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [328:1-328:52];elf_relocation_size(\\\"ARM\\\",\\\"THM_MOVW_BREL_NC\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_MOVW_BREL_NC") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_MOVT_BREL\",16).\nin file relocations.dl [329:1-329:49]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [329:1-329:49];elf_relocation_size(\\\"ARM\\\",\\\"THM_MOVT_BREL\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_MOVT_BREL") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_MOVW_BREL\",16).\nin file relocations.dl [330:1-330:49]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [330:1-330:49];elf_relocation_size(\\\"ARM\\\",\\\"THM_MOVW_BREL\\\",16).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_MOVW_BREL") (UNSIGNED 16)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_GOTDESC\",0).\nin file relocations.dl [331:1-331:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [331:1-331:46];elf_relocation_size(\\\"ARM\\\",\\\"TLS_GOTDESC\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_GOTDESC") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_CALL\",0).\nin file relocations.dl [332:1-332:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [332:1-332:43];elf_relocation_size(\\\"ARM\\\",\\\"TLS_CALL\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_CALL") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_DESCSEQ\",0).\nin file relocations.dl [333:1-333:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [333:1-333:46];elf_relocation_size(\\\"ARM\\\",\\\"TLS_DESCSEQ\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_DESCSEQ") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_TLS_CALL\",0).\nin file relocations.dl [334:1-334:47]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [334:1-334:47];elf_relocation_size(\\\"ARM\\\",\\\"THM_TLS_CALL\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_TLS_CALL") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PLT32_ABS\",32).\nin file relocations.dl [335:1-335:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [335:1-335:45];elf_relocation_size(\\\"ARM\\\",\\\"PLT32_ABS\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PLT32_ABS") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"GOT_ABS\",32).\nin file relocations.dl [336:1-336:43]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [336:1-336:43];elf_relocation_size(\\\"ARM\\\",\\\"GOT_ABS\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "GOT_ABS") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"GOT_PREL\",32).\nin file relocations.dl [337:1-337:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [337:1-337:44];elf_relocation_size(\\\"ARM\\\",\\\"GOT_PREL\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "GOT_PREL") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"GOT_BREL12\",12).\nin file relocations.dl [338:1-338:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [338:1-338:46];elf_relocation_size(\\\"ARM\\\",\\\"GOT_BREL12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "GOT_BREL12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"GOTOFF12\",12).\nin file relocations.dl [339:1-339:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [339:1-339:44];elf_relocation_size(\\\"ARM\\\",\\\"GOTOFF12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "GOTOFF12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"GOTRELAX\",12).\nin file relocations.dl [340:1-340:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [340:1-340:44];elf_relocation_size(\\\"ARM\\\",\\\"GOTRELAX\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "GOTRELAX") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"GNU_VTENTRY\",0).\nin file relocations.dl [341:1-341:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [341:1-341:46];elf_relocation_size(\\\"ARM\\\",\\\"GNU_VTENTRY\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "GNU_VTENTRY") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"GNU_VTINHERIT\",0).\nin file relocations.dl [342:1-342:48]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [342:1-342:48];elf_relocation_size(\\\"ARM\\\",\\\"GNU_VTINHERIT\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "GNU_VTINHERIT") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_JUMP11\",11).\nin file relocations.dl [343:1-343:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [343:1-343:46];elf_relocation_size(\\\"ARM\\\",\\\"THM_JUMP11\\\",11).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_JUMP11") (UNSIGNED 11)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_JUMP8\",8).\nin file relocations.dl [344:1-344:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [344:1-344:44];elf_relocation_size(\\\"ARM\\\",\\\"THM_JUMP8\\\",8).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_JUMP8") (UNSIGNED 8)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_GD32\",32).\nin file relocations.dl [345:1-345:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [345:1-345:44];elf_relocation_size(\\\"ARM\\\",\\\"TLS_GD32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_GD32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_LDM32\",32).\nin file relocations.dl [346:1-346:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [346:1-346:45];elf_relocation_size(\\\"ARM\\\",\\\"TLS_LDM32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_LDM32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_LDO32\",32).\nin file relocations.dl [347:1-347:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [347:1-347:45];elf_relocation_size(\\\"ARM\\\",\\\"TLS_LDO32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_LDO32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_IE32\",32).\nin file relocations.dl [348:1-348:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [348:1-348:44];elf_relocation_size(\\\"ARM\\\",\\\"TLS_IE32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_IE32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_LE32\",32).\nin file relocations.dl [349:1-349:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [349:1-349:44];elf_relocation_size(\\\"ARM\\\",\\\"TLS_LE32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_LE32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_LDO12\",12).\nin file relocations.dl [350:1-350:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [350:1-350:45];elf_relocation_size(\\\"ARM\\\",\\\"TLS_LDO12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_LDO12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_LE12\",12).\nin file relocations.dl [351:1-351:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [351:1-351:44];elf_relocation_size(\\\"ARM\\\",\\\"TLS_LE12\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_LE12") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"TLS_IE12GP\",12).\nin file relocations.dl [352:1-352:46]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [352:1-352:46];elf_relocation_size(\\\"ARM\\\",\\\"TLS_IE12GP\\\",12).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "TLS_IE12GP") (UNSIGNED 12)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_0\",0).\nin file relocations.dl [353:1-353:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [353:1-353:44];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_0\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_0") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_1\",0).\nin file relocations.dl [354:1-354:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [354:1-354:44];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_1\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_1") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_2\",0).\nin file relocations.dl [355:1-355:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [355:1-355:44];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_2\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_2") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_3\",0).\nin file relocations.dl [356:1-356:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [356:1-356:44];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_3\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_3") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_4\",0).\nin file relocations.dl [357:1-357:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [357:1-357:44];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_4\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_4") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_5\",0).\nin file relocations.dl [358:1-358:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [358:1-358:44];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_5\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_5") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_6\",0).\nin file relocations.dl [359:1-359:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [359:1-359:44];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_6\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_6") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_7\",0).\nin file relocations.dl [360:1-360:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [360:1-360:44];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_7\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_7") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_8\",0).\nin file relocations.dl [361:1-361:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [361:1-361:44];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_8\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_8") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_9\",0).\nin file relocations.dl [362:1-362:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [362:1-362:44];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_9\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_9") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_10\",0).\nin file relocations.dl [363:1-363:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [363:1-363:45];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_10\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_10") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_11\",0).\nin file relocations.dl [364:1-364:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [364:1-364:45];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_11\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_11") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_12\",0).\nin file relocations.dl [365:1-365:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [365:1-365:45];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_12\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_12") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_13\",0).\nin file relocations.dl [366:1-366:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [366:1-366:45];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_13\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_13") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_14\",0).\nin file relocations.dl [367:1-367:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [367:1-367:45];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_14\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_14") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"PRIVATE_15\",0).\nin file relocations.dl [368:1-368:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [368:1-368:45];elf_relocation_size(\\\"ARM\\\",\\\"PRIVATE_15\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "PRIVATE_15") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"ME_TOO\",0).\nin file relocations.dl [369:1-369:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [369:1-369:41];elf_relocation_size(\\\"ARM\\\",\\\"ME_TOO\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "ME_TOO") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_TLS_DESCSEQ16\",0).\nin file relocations.dl [370:1-370:52]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [370:1-370:52];elf_relocation_size(\\\"ARM\\\",\\\"THM_TLS_DESCSEQ16\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_TLS_DESCSEQ16") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_TLS_DESCSEQ32\",0).\nin file relocations.dl [371:1-371:52]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [371:1-371:52];elf_relocation_size(\\\"ARM\\\",\\\"THM_TLS_DESCSEQ32\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_TLS_DESCSEQ32") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"IRELATIVE\",0).\nin file relocations.dl [372:1-372:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [372:1-372:44];elf_relocation_size(\\\"ARM\\\",\\\"IRELATIVE\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "IRELATIVE") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"RXPC25\",25).\nin file relocations.dl [373:1-373:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [373:1-373:42];elf_relocation_size(\\\"ARM\\\",\\\"RXPC25\\\",25).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "RXPC25") (UNSIGNED 25)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"RSBREL32\",32).\nin file relocations.dl [374:1-374:44]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [374:1-374:44];elf_relocation_size(\\\"ARM\\\",\\\"RSBREL32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "RSBREL32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"THM_RPC22\",22).\nin file relocations.dl [375:1-375:45]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [375:1-375:45];elf_relocation_size(\\\"ARM\\\",\\\"THM_RPC22\\\",22).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "THM_RPC22") (UNSIGNED 22)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"RREL32\",32).\nin file relocations.dl [376:1-376:42]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [376:1-376:42];elf_relocation_size(\\\"ARM\\\",\\\"RREL32\\\",32).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "RREL32") (UNSIGNED 32)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"RPC24\",24).\nin file relocations.dl [377:1-377:41]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [377:1-377:41];elf_relocation_size(\\\"ARM\\\",\\\"RPC24\\\",24).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "RPC24") (UNSIGNED 24)) elf_relocation_size)
       )
      )
     )
      (DEBUG 
 "elf_relocation_size(\"ARM\",\"RBASE\",0).\nin file relocations.dl [378:1-378:40]" 
      (TIMER_ON elf_relocation_size "@t-nonrecursive-rule;elf_relocation_size;relocations.dl [378:1-378:40];elf_relocation_size(\\\"ARM\\\",\\\"RBASE\\\",0).;"
(QUERY
        (INSERT ((STRING "ARM") (STRING "RBASE") (UNSIGNED 0)) elf_relocation_size)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE elf_section_type
(STMTS     (TIMER_ON elf_section_type "@t-nonrecursive-relation;elf_section_type;binary/elf/elf_binaries.dl [27:7-27:23];"
(STMTS      (DEBUG 
 "elf_section_type(\"NULL\",0).\nin file elf_binaries.dl [29:1-29:28]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [29:1-29:28];elf_section_type(\\\"NULL\\\",0).;"
(QUERY
        (INSERT ((STRING "NULL") (UNSIGNED 0)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"PROGBITS\",1).\nin file elf_binaries.dl [30:1-30:32]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [30:1-30:32];elf_section_type(\\\"PROGBITS\\\",1).;"
(QUERY
        (INSERT ((STRING "PROGBITS") (UNSIGNED 1)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"SYMTAB\",2).\nin file elf_binaries.dl [31:1-31:30]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [31:1-31:30];elf_section_type(\\\"SYMTAB\\\",2).;"
(QUERY
        (INSERT ((STRING "SYMTAB") (UNSIGNED 2)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"STRTAB\",3).\nin file elf_binaries.dl [32:1-32:30]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [32:1-32:30];elf_section_type(\\\"STRTAB\\\",3).;"
(QUERY
        (INSERT ((STRING "STRTAB") (UNSIGNED 3)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"RELA\",4).\nin file elf_binaries.dl [33:1-33:28]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [33:1-33:28];elf_section_type(\\\"RELA\\\",4).;"
(QUERY
        (INSERT ((STRING "RELA") (UNSIGNED 4)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"HASH\",5).\nin file elf_binaries.dl [34:1-34:28]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [34:1-34:28];elf_section_type(\\\"HASH\\\",5).;"
(QUERY
        (INSERT ((STRING "HASH") (UNSIGNED 5)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"DYNAMIC\",6).\nin file elf_binaries.dl [35:1-35:31]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [35:1-35:31];elf_section_type(\\\"DYNAMIC\\\",6).;"
(QUERY
        (INSERT ((STRING "DYNAMIC") (UNSIGNED 6)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"NOTE\",7).\nin file elf_binaries.dl [36:1-36:28]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [36:1-36:28];elf_section_type(\\\"NOTE\\\",7).;"
(QUERY
        (INSERT ((STRING "NOTE") (UNSIGNED 7)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"NOBITS\",8).\nin file elf_binaries.dl [37:1-37:30]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [37:1-37:30];elf_section_type(\\\"NOBITS\\\",8).;"
(QUERY
        (INSERT ((STRING "NOBITS") (UNSIGNED 8)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"REL\",9).\nin file elf_binaries.dl [38:1-38:27]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [38:1-38:27];elf_section_type(\\\"REL\\\",9).;"
(QUERY
        (INSERT ((STRING "REL") (UNSIGNED 9)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"SHLIB\",10).\nin file elf_binaries.dl [39:1-39:30]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [39:1-39:30];elf_section_type(\\\"SHLIB\\\",10).;"
(QUERY
        (INSERT ((STRING "SHLIB") (UNSIGNED 10)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"DYNSYM\",11).\nin file elf_binaries.dl [40:1-40:31]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [40:1-40:31];elf_section_type(\\\"DYNSYM\\\",11).;"
(QUERY
        (INSERT ((STRING "DYNSYM") (UNSIGNED 11)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"INIT_ARRAY\",14).\nin file elf_binaries.dl [42:1-42:35]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [42:1-42:35];elf_section_type(\\\"INIT_ARRAY\\\",14).;"
(QUERY
        (INSERT ((STRING "INIT_ARRAY") (UNSIGNED 14)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"FINI_ARRAY\",15).\nin file elf_binaries.dl [43:1-43:35]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [43:1-43:35];elf_section_type(\\\"FINI_ARRAY\\\",15).;"
(QUERY
        (INSERT ((STRING "FINI_ARRAY") (UNSIGNED 15)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"PREINIT_ARRAY\",16).\nin file elf_binaries.dl [44:1-44:38]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [44:1-44:38];elf_section_type(\\\"PREINIT_ARRAY\\\",16).;"
(QUERY
        (INSERT ((STRING "PREINIT_ARRAY") (UNSIGNED 16)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"GROUP\",17).\nin file elf_binaries.dl [45:1-45:30]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [45:1-45:30];elf_section_type(\\\"GROUP\\\",17).;"
(QUERY
        (INSERT ((STRING "GROUP") (UNSIGNED 17)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"SYMTAB_SHNDX\",18).\nin file elf_binaries.dl [46:1-46:37]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [46:1-46:37];elf_section_type(\\\"SYMTAB_SHNDX\\\",18).;"
(QUERY
        (INSERT ((STRING "SYMTAB_SHNDX") (UNSIGNED 18)) elf_section_type)
       )
      )
     )
      (DEBUG 
 "elf_section_type(\"NUM\",19).\nin file elf_binaries.dl [47:1-47:28]" 
      (TIMER_ON elf_section_type "@t-nonrecursive-rule;elf_section_type;binary/elf/elf_binaries.dl [47:1-47:28];elf_section_type(\\\"NUM\\\",19).;"
(QUERY
        (INSERT ((STRING "NUM") (UNSIGNED 19)) elf_section_type)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE endproc_local_index
(STMTS (STMTS     (TIMER_ON endproc_local_index "@t-nonrecursive-relation;endproc_local_index;exceptions.dl [101:7-101:26];"
(STMTS      (DEBUG 
 "endproc_local_index(FdeAddr,LastLocalIndex) :- \n   fde_entry(FdeAddr,_,_,_,EndAddr,_),\n   last_fde_instruction(FdeAddr,Index),\n   fde_instruction_ref(FdeAddr,Index,LastLocalIndex,EndAddr).\nin file exceptions.dl [103:1-112:7]" 
      (TIMER_ON endproc_local_index "@t-nonrecursive-rule;endproc_local_index;exceptions.dl [103:1-112:7];endproc_local_index(FdeAddr,LastLocalIndex) :- \\n   fde_entry(FdeAddr,_,_,_,EndAddr,_),\\n   last_fde_instruction(FdeAddr,Index),\\n   fde_instruction_ref(FdeAddr,Index,LastLocalIndex,EndAddr).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY fde_instruction_ref)) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY last_fde_instruction)))
         (FOR_IN t0 fde_entry           (FOR t1 last_fde_instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 fde_instruction_ref (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 3) (TUPLE t0 4)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 2)) endproc_local_index)
)))
        )       )
      )
     )
      (DEBUG 
 "endproc_local_index(FdeAddr,0) :- \n   fde_entry(FdeAddr,_,_,_,EndAddr,_),\n   last_fde_instruction(FdeAddr,Index),\n   fde_instruction_ref(FdeAddr,Index,_,Addr),\n   Addr != EndAddr.\nin file exceptions.dl [103:1-112:7]" 
      (TIMER_ON endproc_local_index "@t-nonrecursive-rule;endproc_local_index;exceptions.dl [103:1-112:7];endproc_local_index(FdeAddr,0) :- \\n   fde_entry(FdeAddr,_,_,_,EndAddr,_),\\n   last_fde_instruction(FdeAddr,Index),\\n   fde_instruction_ref(FdeAddr,Index,_,Addr),\\n   Addr != EndAddr.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY fde_instruction_ref)) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY last_fde_instruction)))
         (FOR_IN t0 fde_entry           (FOR t1 last_fde_instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 fde_instruction_ref (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1))) (CONSTRAINT != (TUPLE t2 3)  (TUPLE t0 4))
            (INSERT ((TUPLE t0 0) (UNSIGNED 0)) endproc_local_index)
)))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR last_fde_instruction)
 ) )  )
  (SUBROUTINE entry_point
(STMTS (STMTS (STMTS     (TIMER_ON entry_point "@t-relation-loadtime;entry_point;/usr/local/src/ddisasm/src/datalog/main.dl [144:7-144:18];loadtime;"
     (IO entry_point ((= IO "file") (= attributeNames "ea") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "entry_point") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"ea\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE entry_point "@n-nonrecursive-relation;entry_point;/usr/local/src/ddisasm/src/datalog/main.dl [144:7-144:18];")
 )   (STMTS     (TIMER_ON entry_point "@t-relation-savetime;entry_point;/usr/local/src/ddisasm/src/datalog/main.dl [144:7-144:18];savetime;"
     (IO entry_point ((= IO "file") (= attributeNames "ea") (= auxArity "0") (= name "entry_point") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"ea\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE exception_section
(STMTS     (TIMER_ON exception_section "@t-nonrecursive-relation;exception_section;/usr/local/src/ddisasm/src/datalog/main.dl [817:7-817:24];"
(STMTS      (DEBUG 
 "exception_section(\".eh_frame\").\nin file elf_binaries.dl [63:1-63:32]" 
      (TIMER_ON exception_section "@t-nonrecursive-rule;exception_section;binary/elf/elf_binaries.dl [63:1-63:32];exception_section(\\\".eh_frame\\\").;"
(QUERY
        (INSERT ((STRING ".eh_frame")) exception_section)
       )
      )
     )
      (DEBUG 
 "exception_section(\".eh_frame_hdr\").\nin file elf_binaries.dl [64:1-64:36]" 
      (TIMER_ON exception_section "@t-nonrecursive-rule;exception_section;binary/elf/elf_binaries.dl [64:1-64:36];exception_section(\\\".eh_frame_hdr\\\").;"
(QUERY
        (INSERT ((STRING ".eh_frame_hdr")) exception_section)
       )
      )
     )
      (DEBUG 
 "exception_section(\".gcc_except_table\").\nin file elf_binaries.dl [65:1-65:40]" 
      (TIMER_ON exception_section "@t-nonrecursive-rule;exception_section;binary/elf/elf_binaries.dl [65:1-65:40];exception_section(\\\".gcc_except_table\\\").;"
(QUERY
        (INSERT ((STRING ".gcc_except_table")) exception_section)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE false_negative
(STMTS (STMTS (STMTS     (TIMER_ON false_negative "@t-nonrecursive-relation;false_negative;self_diagnose.dl [1:7-1:21];"
(STMTS      (DEBUG 
 "false_negative((EA+Offset)) :- \n   relocation_in_operand(EA,Index,Rel,_),\n   !trivial_relocation(Rel),\n   !symbolic_operand(EA,Index,_,_),\n   !moved_label(EA,Index,_,_),\n   instruction_immediate_offset(EA,Index,Offset,_).\nin file self_diagnose.dl [87:1-96:26]" 
      (TIMER_ON false_negative "@t-nonrecursive-rule;false_negative;self_diagnose.dl [87:1-96:26];false_negative((EA+Offset)) :- \\n   relocation_in_operand(EA,Index,Rel,_),\\n   !trivial_relocation(Rel),\\n   !symbolic_operand(EA,Index,_,_),\\n   !moved_label(EA,Index,_,_),\\n   instruction_immediate_offset(EA,Index,Offset,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY relocation_in_operand)) (NOT (ISEMPTY instruction_immediate_offset)))
         (FOR_IN t0 relocation_in_operand           (IF (AND (AND (NOT (EXISTS trivial_relocation ((TUPLE t0 2)))) (NOT (EXISTS moved_label ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))))
           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2))) false_negative)
)          ))
        )       )
      )
     )
      (DEBUG 
 "false_negative((EA+Offset)) :- \n   relocation_in_operand(EA,Index,Rel,_),\n   !trivial_relocation(Rel),\n   !symbolic_operand(EA,Index,_,_),\n   !moved_label(EA,Index,_,_),\n   instruction_displacement_offset(EA,Index,Offset,_).\nin file self_diagnose.dl [87:1-96:26]" 
      (TIMER_ON false_negative "@t-nonrecursive-rule;false_negative;self_diagnose.dl [87:1-96:26];false_negative((EA+Offset)) :- \\n   relocation_in_operand(EA,Index,Rel,_),\\n   !trivial_relocation(Rel),\\n   !symbolic_operand(EA,Index,_,_),\\n   !moved_label(EA,Index,_,_),\\n   instruction_displacement_offset(EA,Index,Offset,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY relocation_in_operand)) (NOT (ISEMPTY instruction_displacement_offset)))
         (FOR_IN t0 relocation_in_operand           (IF (AND (AND (NOT (EXISTS trivial_relocation ((TUPLE t0 2)))) (NOT (EXISTS moved_label ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))))
           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2))) false_negative)
)          ))
        )       )
      )
     )
      (DEBUG 
 "false_negative(EA) :- \n   @functor_data_valid(EA,1) = 1,\n   relocation(EA,_,_,_,_,_,_),\n   !zero_relocation(EA),\n   !symbolic_data(EA,_,_),\n   !symbol_minus_symbol(EA,_,_,_,_,_),\n   regular_data_section(Sect),\n   loaded_section(BegSect,EndSect,Sect),\n   EA >= BegSect,\n   EA < EndSect.\nin file self_diagnose.dl [120:1-129:18]" 
      (TIMER_ON false_negative "@t-nonrecursive-rule;false_negative;self_diagnose.dl [120:1-129:18];false_negative(EA) :- \\n   @functor_data_valid(EA,1) = 1,\\n   relocation(EA,_,_,_,_,_,_),\\n   !zero_relocation(EA),\\n   !symbolic_data(EA,_,_),\\n   !symbol_minus_symbol(EA,_,_,_,_,_),\\n   regular_data_section(Sect),\\n   loaded_section(BegSect,EndSect,Sect),\\n   EA >= BegSect,\\n   EA < EndSect.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY regular_data_section)))
         (FOR_IN t0 relocation           (IF (AND (AND (AND (NOT (EXISTS symbolic_data ((TUPLE t0 0) UNDEF UNDEF))) (NOT (EXISTS zero_relocation ((TUPLE t0 0))))) (NOT (EXISTS symbol_minus_symbol ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR_IN t1 regular_data_section             (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0))) (AND (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 1)) (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t2 1))) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t2 0)))
             (INSERT ((TUPLE t0 0)) false_negative)
))
          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON false_negative "@t-relation-savetime;false_negative;self_diagnose.dl [1:7-1:21];savetime;"
     (IO false_negative ((= IO "file") (= attributeNames "EA") (= auxArity "0") (= name "false_negative") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"EA\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) ) (STMTS     (CLEAR trivial_relocation)
     (CLEAR zero_relocation)
 ) )  )
  (SUBROUTINE false_positive
(STMTS (STMTS (STMTS     (TIMER_ON false_positive "@t-nonrecursive-relation;false_positive;self_diagnose.dl [2:7-2:21];"
(STMTS      (DEBUG 
 "false_positive(EA) :- \n   symbolic_data(EA,_,_),\n   !relocation(EA,_,_,_,_,_,_),\n   regular_data_section(Sect),\n   loaded_section(BegSect,EndSect,Sect),\n   EA >= BegSect,\n   EA < EndSect.\nin file self_diagnose.dl [131:1-143:18]" 
      (TIMER_ON false_positive "@t-nonrecursive-rule;false_positive;self_diagnose.dl [131:1-143:18];false_positive(EA) :- \\n   symbolic_data(EA,_,_),\\n   !relocation(EA,_,_,_,_,_,_),\\n   regular_data_section(Sect),\\n   loaded_section(BegSect,EndSect,Sect),\\n   EA >= BegSect,\\n   EA < EndSect.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY regular_data_section)))
         (FOR_IN t0 symbolic_data           (IF (NOT (EXISTS relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
           (FOR_IN t1 regular_data_section             (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0))) (AND (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 1)) (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t2 1))) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t2 0)))
             (INSERT ((TUPLE t0 0)) false_positive)
))
          ))
        )       )
      )
     )
      (DEBUG 
 "false_positive(EA) :- \n   symbol_minus_symbol(EA,Size,_,_,_,_),\n   Size > 4,\n   !relocation(EA,_,_,_,_,_,_),\n   regular_data_section(Sect),\n   loaded_section(BegSect,EndSect,Sect),\n   EA >= BegSect,\n   EA < EndSect.\nin file self_diagnose.dl [131:1-143:18]" 
      (TIMER_ON false_positive "@t-nonrecursive-rule;false_positive;self_diagnose.dl [131:1-143:18];false_positive(EA) :- \\n   symbol_minus_symbol(EA,Size,_,_,_,_),\\n   Size > 4,\\n   !relocation(EA,_,_,_,_,_,_),\\n   regular_data_section(Sect),\\n   loaded_section(BegSect,EndSect,Sect),\\n   EA >= BegSect,\\n   EA < EndSect.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY regular_data_section)))
         (FOR_IN t0 symbol_minus_symbol           (IF (AND (CONSTRAINT > (TUPLE t0 1)  (UNSIGNED 4)) (NOT (EXISTS relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (FOR_IN t1 regular_data_section             (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0))) (AND (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 1)) (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t2 1))) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t2 0)))
             (INSERT ((TUPLE t0 0)) false_positive)
))
          ))
        )       )
      )
     )
      (DEBUG 
 "false_positive((EA+Offset)) :- \n   code_in_block(EA,_),\n   symbolic_operand(EA,Index,_,_),\n   !pc_relative_operand(EA,Index,_),\n   !direct_jump(EA,_),\n   !direct_call(EA,_),\n   !relocation_in_operand(EA,Index,_,_),\n   instruction_immediate_offset(EA,Index,Offset,_).\nin file self_diagnose.dl [98:1-112:24]" 
      (TIMER_ON false_positive "@t-nonrecursive-rule;false_positive;self_diagnose.dl [98:1-112:24];false_positive((EA+Offset)) :- \\n   code_in_block(EA,_),\\n   symbolic_operand(EA,Index,_,_),\\n   !pc_relative_operand(EA,Index,_),\\n   !direct_jump(EA,_),\\n   !direct_call(EA,_),\\n   !relocation_in_operand(EA,Index,_,_),\\n   instruction_immediate_offset(EA,Index,Offset,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_immediate_offset)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY symbolic_operand)))
         (FOR_IN t0 code_in_block           (IF (AND (NOT (EXISTS direct_call ((TUPLE t0 0) UNDEF))) (NOT (EXISTS direct_jump ((TUPLE t0 0) UNDEF))))
           (FOR t1 symbolic_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF))) (NOT (EXISTS relocation_in_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF UNDEF))))
             (FOR t2 instruction_immediate_offset (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t2 2))) false_positive)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "false_positive((EA+Offset)) :- \n   code_in_block(EA,_),\n   symbolic_operand(EA,Index,_,_),\n   !pc_relative_operand(EA,Index,_),\n   !direct_jump(EA,_),\n   !direct_call(EA,_),\n   !relocation_in_operand(EA,Index,_,_),\n   instruction_displacement_offset(EA,Index,Offset,_).\nin file self_diagnose.dl [98:1-112:24]" 
      (TIMER_ON false_positive "@t-nonrecursive-rule;false_positive;self_diagnose.dl [98:1-112:24];false_positive((EA+Offset)) :- \\n   code_in_block(EA,_),\\n   symbolic_operand(EA,Index,_,_),\\n   !pc_relative_operand(EA,Index,_),\\n   !direct_jump(EA,_),\\n   !direct_call(EA,_),\\n   !relocation_in_operand(EA,Index,_,_),\\n   instruction_displacement_offset(EA,Index,Offset,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_displacement_offset)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY symbolic_operand)))
         (FOR_IN t0 code_in_block           (IF (AND (NOT (EXISTS direct_call ((TUPLE t0 0) UNDEF))) (NOT (EXISTS direct_jump ((TUPLE t0 0) UNDEF))))
           (FOR t1 symbolic_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF))) (NOT (EXISTS relocation_in_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF UNDEF))))
             (FOR t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t2 2))) false_positive)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "false_positive((EA+Offset)) :- \n   code_in_block(EA,_),\n   moved_label(EA,Index,_,_),\n   !pc_relative_operand(EA,Index,_),\n   !direct_jump(EA,_),\n   !direct_call(EA,_),\n   !relocation_in_operand(EA,Index,_,_),\n   instruction_immediate_offset(EA,Index,Offset,_).\nin file self_diagnose.dl [98:1-112:24]" 
      (TIMER_ON false_positive "@t-nonrecursive-rule;false_positive;self_diagnose.dl [98:1-112:24];false_positive((EA+Offset)) :- \\n   code_in_block(EA,_),\\n   moved_label(EA,Index,_,_),\\n   !pc_relative_operand(EA,Index,_),\\n   !direct_jump(EA,_),\\n   !direct_call(EA,_),\\n   !relocation_in_operand(EA,Index,_,_),\\n   instruction_immediate_offset(EA,Index,Offset,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_immediate_offset)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY moved_label)))
         (FOR_IN t0 code_in_block           (IF (AND (NOT (EXISTS direct_call ((TUPLE t0 0) UNDEF))) (NOT (EXISTS direct_jump ((TUPLE t0 0) UNDEF))))
           (FOR t1 moved_label (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF))) (NOT (EXISTS relocation_in_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF UNDEF))))
             (FOR t2 instruction_immediate_offset (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t2 2))) false_positive)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "false_positive((EA+Offset)) :- \n   code_in_block(EA,_),\n   moved_label(EA,Index,_,_),\n   !pc_relative_operand(EA,Index,_),\n   !direct_jump(EA,_),\n   !direct_call(EA,_),\n   !relocation_in_operand(EA,Index,_,_),\n   instruction_displacement_offset(EA,Index,Offset,_).\nin file self_diagnose.dl [98:1-112:24]" 
      (TIMER_ON false_positive "@t-nonrecursive-rule;false_positive;self_diagnose.dl [98:1-112:24];false_positive((EA+Offset)) :- \\n   code_in_block(EA,_),\\n   moved_label(EA,Index,_,_),\\n   !pc_relative_operand(EA,Index,_),\\n   !direct_jump(EA,_),\\n   !direct_call(EA,_),\\n   !relocation_in_operand(EA,Index,_,_),\\n   instruction_displacement_offset(EA,Index,Offset,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_displacement_offset)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY moved_label)))
         (FOR_IN t0 code_in_block           (IF (AND (NOT (EXISTS direct_call ((TUPLE t0 0) UNDEF))) (NOT (EXISTS direct_jump ((TUPLE t0 0) UNDEF))))
           (FOR t1 moved_label (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF))) (NOT (EXISTS relocation_in_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF UNDEF))))
             (FOR t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t2 2))) false_positive)
)            ))          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON false_positive "@t-relation-savetime;false_positive;self_diagnose.dl [2:7-2:21];savetime;"
     (IO false_positive ((= IO "file") (= attributeNames "EA") (= auxArity "0") (= name "false_positive") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"EA\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) ) (STMTS     (CLEAR direct_call)
     (CLEAR direct_jump)
     (CLEAR instruction_immediate_offset)
     (CLEAR moved_label)
     (CLEAR relocation)
     (CLEAR relocation_in_operand)
 ) )  )
  (SUBROUTINE fde_addresses
(STMTS     (TIMER_ON fde_addresses "@t-nonrecursive-relation;fde_addresses;binary/elf/elf_binaries.dl [291:7-291:20];"
(STMTS      (DEBUG 
 "fde_addresses(Start,End) :- \n   fde_entry(_,_,_,Start,End,_).\nin file elf_binaries.dl [293:1-294:34]" 
      (TIMER_ON fde_addresses "@t-nonrecursive-rule;fde_addresses;binary/elf/elf_binaries.dl [293:1-294:34];fde_addresses(Start,End) :- \\n   fde_entry(_,_,_,Start,End,_).;"
(QUERY
        (IF (NOT (ISEMPTY fde_entry))
         (FOR_IN t0 fde_entry           (INSERT ((TUPLE t0 3) (TUPLE t0 4)) fde_addresses)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE fde_block_addresses
(STMTS (STMTS     (TIMER_ON fde_block_addresses "@t-nonrecursive-relation;fde_block_addresses;exceptions.dl [140:7-140:26];"
(STMTS      (DEBUG 
 "fde_block_addresses(FdeAddr,StartAdjusted,EndAddrAdjusted) :- \n   fde_entry(FdeAddr,_,_,Start,EndAddr,_),\n   !refined_block(Start),\n   misaligned_fde_start(Start,StartAdjusted),\n   refined_block(StartAdjusted),\n   !block_information(_,_,_,EndAddr),\n   after_end(EndAddr,End),\n   refined_block_last_instruction(Block,End),\n   block_information(Block,_,_,EndAddrAdjusted).\nin file exceptions.dl [142:1-162:7]" 
      (TIMER_ON fde_block_addresses "@t-nonrecursive-rule;fde_block_addresses;exceptions.dl [142:1-162:7];fde_block_addresses(FdeAddr,StartAdjusted,EndAddrAdjusted) :- \\n   fde_entry(FdeAddr,_,_,Start,EndAddr,_),\\n   !refined_block(Start),\\n   misaligned_fde_start(Start,StartAdjusted),\\n   refined_block(StartAdjusted),\\n   !block_information(_,_,_,EndAddr),\\n   after_end(EndAddr,End),\\n   refined_block_last_instruction(Block,End),\\n   block_information(Block,_,_,EndAddrAdjusted).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY fde_entry)) (NOT (ISEMPTY block_information))) (NOT (ISEMPTY after_end))) (NOT (ISEMPTY refined_block))) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY misaligned_fde_start)))
         (FOR_IN t0 fde_entry           (IF (AND (NOT (EXISTS block_information (UNDEF UNDEF UNDEF (TUPLE t0 4)))) (NOT (EXISTS refined_block ((TUPLE t0 3)))))
           (FOR t1 misaligned_fde_start (INDEX  (= (TUPLE t1 0) (TUPLE t0 3)))
            (IF (EXISTS refined_block ((TUPLE t1 1)))
             (FOR t2 after_end (INDEX  (= (TUPLE t2 0) (TUPLE t0 4)))
              (FOR t3 refined_block_last_instruction (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)))
               (FOR t4 block_information (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t4 3)) fde_block_addresses)
)))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "fde_block_addresses(FdeAddr,Start,EndAddr) :- \n   fde_entry(FdeAddr,_,_,Start,EndAddr,_),\n   refined_block(Start),\n   block_information(_,_,_,EndAddr).\nin file exceptions.dl [142:1-162:7]" 
      (TIMER_ON fde_block_addresses "@t-nonrecursive-rule;fde_block_addresses;exceptions.dl [142:1-162:7];fde_block_addresses(FdeAddr,Start,EndAddr) :- \\n   fde_entry(FdeAddr,_,_,Start,EndAddr,_),\\n   refined_block(Start),\\n   block_information(_,_,_,EndAddr).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY block_information)) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY refined_block)))
         (FOR_IN t0 fde_entry           (IF (AND (EXISTS block_information (UNDEF UNDEF UNDEF (TUPLE t0 4))) (EXISTS refined_block ((TUPLE t0 3))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 3) (TUPLE t0 4)) fde_block_addresses)
          ))
        )       )
      )
     )
      (DEBUG 
 "fde_block_addresses(FdeAddr,Start,EndAddrAdjusted) :- \n   fde_entry(FdeAddr,_,_,Start,EndAddr,_),\n   refined_block(Start),\n   !block_information(_,_,_,EndAddr),\n   after_end(EndAddr,End),\n   refined_block_last_instruction(Block,End),\n   block_information(Block,_,_,EndAddrAdjusted).\nin file exceptions.dl [142:1-162:7]" 
      (TIMER_ON fde_block_addresses "@t-nonrecursive-rule;fde_block_addresses;exceptions.dl [142:1-162:7];fde_block_addresses(FdeAddr,Start,EndAddrAdjusted) :- \\n   fde_entry(FdeAddr,_,_,Start,EndAddr,_),\\n   refined_block(Start),\\n   !block_information(_,_,_,EndAddr),\\n   after_end(EndAddr,End),\\n   refined_block_last_instruction(Block,End),\\n   block_information(Block,_,_,EndAddrAdjusted).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY block_information)) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY after_end))) (NOT (ISEMPTY refined_block_last_instruction))) (NOT (ISEMPTY refined_block)))
         (FOR_IN t0 fde_entry           (IF (AND (EXISTS refined_block ((TUPLE t0 3))) (NOT (EXISTS block_information (UNDEF UNDEF UNDEF (TUPLE t0 4)))))
           (FOR t1 after_end (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)))
            (FOR t2 refined_block_last_instruction (INDEX  (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 block_information (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 3) (TUPLE t3 3)) fde_block_addresses)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "fde_block_addresses(FdeAddr,StartAdjusted,EndAddr) :- \n   fde_entry(FdeAddr,_,_,Start,EndAddr,_),\n   !refined_block(Start),\n   misaligned_fde_start(Start,StartAdjusted),\n   refined_block(StartAdjusted),\n   block_information(_,_,_,EndAddr).\nin file exceptions.dl [142:1-162:7]" 
      (TIMER_ON fde_block_addresses "@t-nonrecursive-rule;fde_block_addresses;exceptions.dl [142:1-162:7];fde_block_addresses(FdeAddr,StartAdjusted,EndAddr) :- \\n   fde_entry(FdeAddr,_,_,Start,EndAddr,_),\\n   !refined_block(Start),\\n   misaligned_fde_start(Start,StartAdjusted),\\n   refined_block(StartAdjusted),\\n   block_information(_,_,_,EndAddr).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY fde_entry)) (NOT (ISEMPTY block_information))) (NOT (ISEMPTY refined_block))) (NOT (ISEMPTY misaligned_fde_start)))
         (FOR_IN t0 fde_entry           (IF (AND (NOT (EXISTS refined_block ((TUPLE t0 3)))) (EXISTS block_information (UNDEF UNDEF UNDEF (TUPLE t0 4))))
           (FOR t1 misaligned_fde_start (INDEX  (= (TUPLE t1 0) (TUPLE t0 3)))
            (IF (EXISTS refined_block ((TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 4)) fde_block_addresses)
            ))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR misaligned_fde_start)
 ) )  )
  (SUBROUTINE fde_entry
(STMTS (STMTS (STMTS     (TIMER_ON fde_entry "@t-relation-loadtime;fde_entry;binary/elf/elf_binaries.dl [216:7-216:16];loadtime;"
     (IO fde_entry ((= IO "file") (= attributeNames "FdeAddr\tLength\tCie\tStart\tEnd\tLsda") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "fde_entry") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"FdeAddr\", \"Length\", \"Cie\", \"Start\", \"End\", \"Lsda\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"u:address\", \"u:unsigned\", \"u:address\", \"u:address\", \"u:address\", \"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE fde_entry "@n-nonrecursive-relation;fde_entry;binary/elf/elf_binaries.dl [216:7-216:16];")
 )   )  )  )
  (SUBROUTINE fde_instruction
(STMTS (STMTS (STMTS     (TIMER_ON fde_instruction "@t-relation-loadtime;fde_instruction;binary/elf/elf_binaries.dl [241:7-241:22];loadtime;"
     (IO fde_instruction ((= IO "file") (= attributeNames "FdeAddr\tIndex\tSize\tInsnAddr\tInsn\tOp1\tOp2") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "fde_instruction") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 7, \"params\": [\"FdeAddr\", \"Index\", \"Size\", \"InsnAddr\", \"Insn\", \"Op1\", \"Op2\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 7, \"types\": [\"u:address\", \"u:unsigned\", \"u:unsigned\", \"u:address\", \"s:symbol\", \"i:number\", \"i:number\"]}}")))
    )
 ) (STMTS     (LOGSIZE fde_instruction "@n-nonrecursive-relation;fde_instruction;binary/elf/elf_binaries.dl [241:7-241:22];")
 )   )  )  )
  (SUBROUTINE fde_instruction_block_offset
(STMTS (STMTS     (TIMER_ON fde_instruction_block_offset "@t-nonrecursive-relation;fde_instruction_block_offset;exceptions.dl [118:7-118:35];"
(STMTS      (DEBUG 
 "fde_instruction_block_offset(FdeAddr,Index,LocalIndex,StartFunction,0) :- \n   fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),\n   fde_block_addresses(FdeAddr,StartFunction,_),\n   Addr < StartFunction.\nin file exceptions.dl [120:1-136:7]" 
      (TIMER_ON fde_instruction_block_offset "@t-nonrecursive-rule;fde_instruction_block_offset;exceptions.dl [120:1-136:7];fde_instruction_block_offset(FdeAddr,Index,LocalIndex,StartFunction,0) :- \\n   fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),\\n   fde_block_addresses(FdeAddr,StartFunction,_),\\n   Addr < StartFunction.;"
(QUERY
        (IF (AND (NOT (ISEMPTY fde_instruction_ref)) (NOT (ISEMPTY fde_block_addresses)))
         (FOR_IN t0 fde_instruction_ref           (FOR t1 fde_block_addresses (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (CONSTRAINT <= (TUPLE t0 3)  (TUPLE t1 1)) (CONSTRAINT != (TUPLE t0 3)  (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 1) (UNSIGNED 0)) fde_instruction_block_offset)
           )))
        )       )
      )
     )
      (DEBUG 
 "fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset) :- \n   fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),\n   fde_block_addresses(FdeAddr,_,EndBlockAddr),\n   Addr >= EndBlockAddr,\n   block_information(Block,Offset,_,EndBlockAddr).\nin file exceptions.dl [120:1-136:7]" 
      (TIMER_ON fde_instruction_block_offset "@t-nonrecursive-rule;fde_instruction_block_offset;exceptions.dl [120:1-136:7];fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,Offset) :- \\n   fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),\\n   fde_block_addresses(FdeAddr,_,EndBlockAddr),\\n   Addr >= EndBlockAddr,\\n   block_information(Block,Offset,_,EndBlockAddr).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY block_information)) (NOT (ISEMPTY fde_instruction_ref))) (NOT (ISEMPTY fde_block_addresses)))
         (FOR_IN t0 fde_instruction_ref           (FOR t1 fde_block_addresses (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (CONSTRAINT >= (TUPLE t0 3)  (TUPLE t1 2))
            (FOR t2 block_information (INDEX  (= (TUPLE t2 3) (TUPLE t1 2)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t2 0) (TUPLE t2 1)) fde_instruction_block_offset)
)           )))
        )       )
      )
     )
      (DEBUG 
 "fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,(Addr-Block)) :- \n   fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),\n   fde_block_addresses(FdeAddr,StartFunction,EndBlockAddr),\n   Addr >= StartFunction,\n   Addr < EndBlockAddr,\n   code_in_refined_block(Addr,Block).\nin file exceptions.dl [120:1-136:7]" 
      (TIMER_ON fde_instruction_block_offset "@t-nonrecursive-rule;fde_instruction_block_offset;exceptions.dl [120:1-136:7];fde_instruction_block_offset(FdeAddr,Index,LocalIndex,Block,(Addr-Block)) :- \\n   fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),\\n   fde_block_addresses(FdeAddr,StartFunction,EndBlockAddr),\\n   Addr >= StartFunction,\\n   Addr < EndBlockAddr,\\n   code_in_refined_block(Addr,Block).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_refined_block)) (NOT (ISEMPTY fde_instruction_ref))) (NOT (ISEMPTY fde_block_addresses)))
         (FOR_IN t0 fde_instruction_ref           (INDEXED_IF_EXISTS t1 fde_block_addresses (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (AND (AND (CONSTRAINT != (TUPLE t0 3)  (TUPLE t1 2)) (CONSTRAINT <= (TUPLE t0 3)  (TUPLE t1 2))) (CONSTRAINT >= (TUPLE t0 3)  (TUPLE t1 1)))
           (FOR t2 code_in_refined_block (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t2 1) (INTRINSIC - (TUPLE t0 3) (TUPLE t2 1))) fde_instruction_block_offset)
)))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR fde_instruction_ref)
 ) )  )
  (SUBROUTINE fde_instruction_ref
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON fde_instruction_ref "@t-nonrecursive-relation;fde_instruction_ref;exceptions.dl [75:7-75:26];"
(STMTS      (DEBUG 
 "fde_instruction_ref(FdeAddr,0,3,StartFunction) :- \n   fde_entry(FdeAddr,_,_,StartFunction,_,_).\nin file exceptions.dl [78:1-79:47]" 
      (TIMER_ON fde_instruction_ref "@t-nonrecursive-rule;fde_instruction_ref;exceptions.dl [78:1-79:47];fde_instruction_ref(FdeAddr,0,3,StartFunction) :- \\n   fde_entry(FdeAddr,_,_,StartFunction,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY fde_entry))
         (FOR_IN t0 fde_entry           (INSERT ((TUPLE t0 0) (UNSIGNED 0) (UNSIGNED 3) (TUPLE t0 3)) fde_instruction_ref)
)
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 fde_instruction_ref       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) @delta_fde_instruction_ref)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_fde_instruction_ref "@t-recursive-relation;fde_instruction_ref;exceptions.dl [75:7-75:26];"
(STMTS (STMTS (STMTS       (DEBUG 
 "fde_instruction_ref(FdeAddr,(Index+1),0,(Addr+(CodeAlignmentFactor*as(Advance, unsigned)))) :- \n   fde_instruction_ref(FdeAddr,Index,_,Addr),\n   fde_entry(FdeAddr,_,Cie,_,_,_),\n   cie_entry(Cie,_,CodeAlignmentFactor,_),\n   fde_instruction(FdeAddr,Index,_,_,\"advance_loc\",Advance,_).\nin file exceptions.dl [92:1-99:7]" 
       (TIMER_ON @new_fde_instruction_ref "@t-recursive-rule;fde_instruction_ref;0;exceptions.dl [92:1-99:7];fde_instruction_ref(FdeAddr,(Index+1),0,(Addr+(CodeAlignmentFactor*as(Advance, unsigned)))) :- \\n   fde_instruction_ref(FdeAddr,Index,_,Addr),\\n   fde_entry(FdeAddr,_,Cie,_,_,_),\\n   cie_entry(Cie,_,CodeAlignmentFactor,_),\\n   fde_instruction(FdeAddr,Index,_,_,\\\"advance_loc\\\",Advance,_).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_fde_instruction_ref)) (NOT (ISEMPTY fde_instruction))) (NOT (ISEMPTY cie_entry))) (NOT (ISEMPTY fde_entry)))
          (FOR_IN t0 @delta_fde_instruction_ref            (FOR t1 fde_entry (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 cie_entry (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (FOR t3 fde_instruction (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 1) (TUPLE t0 1)) (= (TUPLE t3 4) (STRING "advance_loc")))
              (IF (NOT (EXISTS fde_instruction_ref ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)) (UNSIGNED 0) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t2 2) (TUPLE t3 5))))))
               (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)) (UNSIGNED 0) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t2 2) (TUPLE t3 5)))) @new_fde_instruction_ref)
              )))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "fde_instruction_ref(FdeAddr,(Index+1),0,(Addr+(CodeAlignmentFactor*as(Advance, unsigned)))) :- \n   fde_instruction_ref(FdeAddr,Index,_,Addr),\n   fde_entry(FdeAddr,_,Cie,_,_,_),\n   cie_entry(Cie,_,CodeAlignmentFactor,_),\n   fde_instruction(FdeAddr,Index,_,_,\"cf_advance_loc\",Advance,_).\nin file exceptions.dl [92:1-99:7]" 
       (TIMER_ON @new_fde_instruction_ref "@t-recursive-rule;fde_instruction_ref;0;exceptions.dl [92:1-99:7];fde_instruction_ref(FdeAddr,(Index+1),0,(Addr+(CodeAlignmentFactor*as(Advance, unsigned)))) :- \\n   fde_instruction_ref(FdeAddr,Index,_,Addr),\\n   fde_entry(FdeAddr,_,Cie,_,_,_),\\n   cie_entry(Cie,_,CodeAlignmentFactor,_),\\n   fde_instruction(FdeAddr,Index,_,_,\\\"cf_advance_loc\\\",Advance,_).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_fde_instruction_ref)) (NOT (ISEMPTY fde_instruction))) (NOT (ISEMPTY cie_entry))) (NOT (ISEMPTY fde_entry)))
          (FOR_IN t0 @delta_fde_instruction_ref            (FOR t1 fde_entry (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 cie_entry (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (FOR t3 fde_instruction (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 1) (TUPLE t0 1)) (= (TUPLE t3 4) (STRING "cf_advance_loc")))
              (IF (NOT (EXISTS fde_instruction_ref ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)) (UNSIGNED 0) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t2 2) (TUPLE t3 5))))))
               (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)) (UNSIGNED 0) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t2 2) (TUPLE t3 5)))) @new_fde_instruction_ref)
              )))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "fde_instruction_ref(FdeAddr,(Index+1),LocalIndex,Addr) :- \n   fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),\n   fde_instruction(FdeAddr,Index,_,_,Insn,_,_),\n   Insn != \"advance_loc\",\n   Insn != \"cf_advance_loc\",\n   Insn = \"nop\".\nin file exceptions.dl [81:1-90:7]" 
       (TIMER_ON @new_fde_instruction_ref "@t-recursive-rule;fde_instruction_ref;0;exceptions.dl [81:1-90:7];fde_instruction_ref(FdeAddr,(Index+1),LocalIndex,Addr) :- \\n   fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),\\n   fde_instruction(FdeAddr,Index,_,_,Insn,_,_),\\n   Insn != \\\"advance_loc\\\",\\n   Insn != \\\"cf_advance_loc\\\",\\n   Insn = \\\"nop\\\".;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_fde_instruction_ref)) (NOT (ISEMPTY fde_instruction)))
          (FOR_IN t0 @delta_fde_instruction_ref            (IF (NOT (EXISTS fde_instruction_ref ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)) (TUPLE t0 2) (TUPLE t0 3))))
            (INDEXED_IF_EXISTS t1 fde_instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 4) (STRING "nop"))) (AND (CONSTRAINT != (TUPLE t1 4)  (STRING "cf_advance_loc")) (CONSTRAINT != (TUPLE t1 4)  (STRING "advance_loc")))
             (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)) (TUPLE t0 2) (TUPLE t0 3)) @new_fde_instruction_ref)
)           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "fde_instruction_ref(FdeAddr,(Index+1),(LocalIndex+1),Addr) :- \n   fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),\n   fde_instruction(FdeAddr,Index,_,_,Insn,_,_),\n   Insn != \"advance_loc\",\n   Insn != \"cf_advance_loc\",\n   Insn != \"nop\".\nin file exceptions.dl [81:1-90:7]" 
       (TIMER_ON @new_fde_instruction_ref "@t-recursive-rule;fde_instruction_ref;0;exceptions.dl [81:1-90:7];fde_instruction_ref(FdeAddr,(Index+1),(LocalIndex+1),Addr) :- \\n   fde_instruction_ref(FdeAddr,Index,LocalIndex,Addr),\\n   fde_instruction(FdeAddr,Index,_,_,Insn,_,_),\\n   Insn != \\\"advance_loc\\\",\\n   Insn != \\\"cf_advance_loc\\\",\\n   Insn != \\\"nop\\\".;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_fde_instruction_ref)) (NOT (ISEMPTY fde_instruction)))
          (FOR_IN t0 @delta_fde_instruction_ref            (IF (NOT (EXISTS fde_instruction_ref ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)) (INTRINSIC + (TUPLE t0 2) (UNSIGNED 1)) (TUPLE t0 3))))
            (INDEXED_IF_EXISTS t1 fde_instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1))) (AND (AND (CONSTRAINT != (TUPLE t1 4)  (STRING "nop")) (CONSTRAINT != (TUPLE t1 4)  (STRING "cf_advance_loc"))) (CONSTRAINT != (TUPLE t1 4)  (STRING "advance_loc")))
             (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)) (INTRINSIC + (TUPLE t0 2) (UNSIGNED 1)) (TUPLE t0 3)) @new_fde_instruction_ref)
)           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_fde_instruction_ref "@t-recursive-relation;fde_instruction_ref;exceptions.dl [75:7-75:26];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_fde_instruction_ref))
 ) (STMTS      (TIMER_ON @new_fde_instruction_ref "@c-recursive-relation;fde_instruction_ref;exceptions.dl [75:7-75:26];"
(STMTS (QUERY
       (FOR_IN t0 @new_fde_instruction_ref         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) fde_instruction_ref)
)
      )
       (SWAP @delta_fde_instruction_ref @new_fde_instruction_ref)
       (CLEAR @new_fde_instruction_ref)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_fde_instruction_ref)
     (CLEAR @new_fde_instruction_ref)
 ) )  )  )  )
  (SUBROUTINE fde_pointer_locations
(STMTS (STMTS (STMTS     (TIMER_ON fde_pointer_locations "@t-relation-loadtime;fde_pointer_locations;binary/elf/elf_binaries.dl [223:7-223:28];loadtime;"
     (IO fde_pointer_locations ((= IO "file") (= attributeNames "addr\tstartLocation\tendLocation\tendSize\tlsdaLocation\tlsdaSize") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "fde_pointer_locations") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"addr\", \"startLocation\", \"endLocation\", \"endSize\", \"lsdaLocation\", \"lsdaSize\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"u:address\", \"u:address\", \"u:address\", \"u:unsigned\", \"u:address\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE fde_pointer_locations "@n-nonrecursive-relation;fde_pointer_locations;binary/elf/elf_binaries.dl [223:7-223:28];")
 )   )  )  )
  (SUBROUTINE first_block_in_byte_interval
(STMTS     (TIMER_ON first_block_in_byte_interval "@t-nonrecursive-relation;first_block_in_byte_interval;code_inference.dl [1578:7-1578:35];"
(STMTS      (DEBUG 
 "first_block_in_byte_interval(Begin,End,@generator_0) :- \n   code_section(Name),\n   loaded_section(BegSect,EndSect,Name),\n   byte_interval(Begin,End),\n   BegSect <= Begin,\n   End <= EndSect,\n   @generator_0 = min EA : { block_boundaries(+underscore_1389,EA,+underscore_1390),EA >= Begin,EA < End }.\nin file code_inference.dl [1580:1-1585:74]" 
      (TIMER_ON first_block_in_byte_interval "@t-nonrecursive-rule;first_block_in_byte_interval;code_inference.dl [1580:1-1585:74];first_block_in_byte_interval(Begin,End,@generator_0) :- \\n   code_section(Name),\\n   loaded_section(BegSect,EndSect,Name),\\n   byte_interval(Begin,End),\\n   BegSect <= Begin,\\n   End <= EndSect,\\n   @generator_0 = min EA : { block_boundaries(+underscore_1389,EA,+underscore_1390),EA >= Begin,EA < End }.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY byte_interval)) (NOT (ISEMPTY code_section))) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 code_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR_IN t2 byte_interval             (IF (AND (CONSTRAINT <= (TUPLE t2 1)  (TUPLE t1 1)) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t2 0)))
             (AGGREGATE t3 min (TUPLE t3 1)  t3 block_boundaries (AND (CONSTRAINT >= (TUPLE t3 1)  (TUPLE t2 0)) (CONSTRAINT < (TUPLE t3 1)  (TUPLE t2 1)))
              (IF (CONSTRAINT = (TUPLE t3 0)  (TUPLE t3 0))
               (INSERT ((TUPLE t2 0) (TUPLE t2 1) (TUPLE t3 0)) first_block_in_byte_interval)
              ))            ))
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE first_synchronous_access
(STMTS     (TIMER_ON first_synchronous_access "@t-nonrecursive-relation;first_synchronous_access;data_access_analysis.dl [484:7-484:31];"
(STMTS      (DEBUG 
 "first_synchronous_access(@generator_0,Access) :- \n   synchronous_access(_,Access),\n   @generator_0 = min Ref0 : { synchronous_access(Ref0,Access) }.\nin file data_access_analysis.dl [486:1-488:53]" 
      (TIMER_ON first_synchronous_access "@t-nonrecursive-rule;first_synchronous_access;data_access_analysis.dl [486:1-488:53];first_synchronous_access(@generator_0,Access) :- \\n   synchronous_access(_,Access),\\n   @generator_0 = min Ref0 : { synchronous_access(Ref0,Access) }.;"
(QUERY
        (IF (NOT (ISEMPTY synchronous_access))
         (FOR_IN t0 synchronous_access           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MIN  (TUPLE t1 0) ))  t1 synchronous_access (INDEX  (= (TUPLE t1 1) (TUPLE t0 1))) TRUE 
           (IF (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0))
            (INSERT ((TUPLE t1 0) (TUPLE t0 1)) first_synchronous_access)
           )))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE function_inference.function_entry
(STMTS (STMTS     (TIMER_ON function_inference.function_entry "@t-nonrecursive-relation;function_inference.function_entry;basic_function_inference.dl [29:7-29:21];"
(STMTS      (DEBUG 
 "function_inference.function_entry(EA) :- \n   function_inference.function_entry_initial(EA),\n   refined_block(EA).\nin file basic_function_inference.dl [63:1-65:23]" 
      (TIMER_ON function_inference.function_entry "@t-nonrecursive-rule;function_inference.function_entry;basic_function_inference.dl [63:1-65:23];function_inference.function_entry(EA) :- \\n   function_inference.function_entry_initial(EA),\\n   refined_block(EA).;"
(QUERY
        (IF (AND (NOT (ISEMPTY function_inference.function_entry_initial)) (NOT (ISEMPTY refined_block)))
         (FOR_IN t0 function_inference.function_entry_initial           (IF (EXISTS refined_block ((TUPLE t0 0)))
           (INSERT ((TUPLE t0 0)) function_inference.function_entry)
          ))
        )       )
      )
     )
      (DEBUG 
 "function_inference.function_entry(EA) :- \n   main_function(EA),\n   refined_block(EA),\n   !fde_addresses(EA,_).\nin file basic_function_inference.dl [72:1-75:26]" 
      (TIMER_ON function_inference.function_entry "@t-nonrecursive-rule;function_inference.function_entry;basic_function_inference.dl [72:1-75:26];function_inference.function_entry(EA) :- \\n   main_function(EA),\\n   refined_block(EA),\\n   !fde_addresses(EA,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY main_function)) (NOT (ISEMPTY refined_block)))
         (FOR_IN t0 main_function           (IF (AND (EXISTS refined_block ((TUPLE t0 0))) (NOT (EXISTS fde_addresses ((TUPLE t0 0) UNDEF))))
           (INSERT ((TUPLE t0 0)) function_inference.function_entry)
          ))
        )       )
      )
     )
      (DEBUG 
 "function_inference.function_entry(EA) :- \n   code_pointer_in_data(Src,EA),\n   function_pointer_section(Name),\n   loaded_section(Base,End,Name),\n   Src >= Base,\n   Src < End.\nin file basic_function_inference.dl [78:1-83:15]" 
      (TIMER_ON function_inference.function_entry "@t-nonrecursive-rule;function_inference.function_entry;basic_function_inference.dl [78:1-83:15];function_inference.function_entry(EA) :- \\n   code_pointer_in_data(Src,EA),\\n   function_pointer_section(Name),\\n   loaded_section(Base,End,Name),\\n   Src >= Base,\\n   Src < End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY code_pointer_in_data))) (NOT (ISEMPTY function_pointer_section)))
         (FOR_IN t0 code_pointer_in_data           (FOR_IN t1 function_pointer_section            (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0))) (AND (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 1)) (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t2 1))) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t2 0)))
            (INSERT ((TUPLE t0 1)) function_inference.function_entry)
))
)
        )       )
      )
     )
      (DEBUG 
 "function_inference.function_entry(EA) :- \n   resolved_transfer(EA_caller,EA,\"call\"),\n   code_in_block(EA_caller,_),\n   refined_block(EA).\nin file basic_function_inference.dl [67:1-70:23]" 
      (TIMER_ON function_inference.function_entry "@t-nonrecursive-rule;function_inference.function_entry;basic_function_inference.dl [67:1-70:23];function_inference.function_entry(EA) :- \\n   resolved_transfer(EA_caller,EA,\\\"call\\\"),\\n   code_in_block(EA_caller,_),\\n   refined_block(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY resolved_transfer))) (NOT (ISEMPTY refined_block)))
         (FOR t0 resolved_transfer (INDEX  (= (TUPLE t0 2) (STRING "call")))
          (IF (AND (EXISTS code_in_block ((TUPLE t0 0) UNDEF)) (EXISTS refined_block ((TUPLE t0 1))))
           (INSERT ((TUPLE t0 1)) function_inference.function_entry)
          ))        )       )
      )
     )
      (DEBUG 
 "function_inference.function_entry(EA) :- \n   incremental_linking(First,Last),\n   code_in_block(Src,_),\n   First <= Src,\n   Src <= Last,\n   direct_jump(Src,EA),\n   code_in_block(EA,_).\nin file basic_function_inference.dl [86:1-91:14]" 
      (TIMER_ON function_inference.function_entry "@t-nonrecursive-rule;function_inference.function_entry;basic_function_inference.dl [86:1-91:14];function_inference.function_entry(EA) :- \\n   incremental_linking(First,Last),\\n   code_in_block(Src,_),\\n   First <= Src,\\n   Src <= Last,\\n   direct_jump(Src,EA),\\n   code_in_block(EA,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY incremental_linking)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY direct_jump)))
         (FOR_IN t0 incremental_linking           (FOR_IN t1 code_in_block            (IF (AND (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t0 1)) (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t1 0)))
            (FOR t2 direct_jump (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (IF (EXISTS code_in_block ((TUPLE t2 1) UNDEF))
              (INSERT ((TUPLE t2 1)) function_inference.function_entry)
             ))           ))
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR code_pointer_in_data)
     (CLEAR function_inference.function_entry_initial)
     (CLEAR function_pointer_section)
     (CLEAR incremental_linking)
 ) )  )
  (SUBROUTINE function_inference.function_entry_initial
(STMTS     (TIMER_ON function_inference.function_entry_initial "@t-nonrecursive-relation;function_inference.function_entry_initial;basic_function_inference.dl [42:7-42:29];"
(STMTS      (DEBUG 
 "function_inference.function_entry_initial(EA) :- \n   fde_addresses(EA,_),\n   block(EA).\nin file basic_function_inference.dl [44:1-46:15]" 
      (TIMER_ON function_inference.function_entry_initial "@t-nonrecursive-rule;function_inference.function_entry_initial;basic_function_inference.dl [44:1-46:15];function_inference.function_entry_initial(EA) :- \\n   fde_addresses(EA,_),\\n   block(EA).;"
(QUERY
        (IF (AND (NOT (ISEMPTY fde_addresses)) (NOT (ISEMPTY block)))
         (FOR_IN t0 fde_addresses           (IF (EXISTS block ((TUPLE t0 0)))
           (INSERT ((TUPLE t0 0)) function_inference.function_entry_initial)
          ))
        )       )
      )
     )
      (DEBUG 
 "function_inference.function_entry_initial(EA) :- \n   block(EA),\n   entry_point(EA).\nin file basic_function_inference.dl [48:1-57:7]" 
      (TIMER_ON function_inference.function_entry_initial "@t-nonrecursive-rule;function_inference.function_entry_initial;basic_function_inference.dl [48:1-57:7];function_inference.function_entry_initial(EA) :- \\n   block(EA),\\n   entry_point(EA).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block)) (NOT (ISEMPTY entry_point)))
         (FOR_IN t0 block           (IF (EXISTS entry_point ((TUPLE t0 0)))
           (INSERT ((TUPLE t0 0)) function_inference.function_entry_initial)
          ))
        )       )
      )
     )
      (DEBUG 
 "function_inference.function_entry_initial(EA) :- \n   block(EA),\n   function_symbol(EA,_).\nin file basic_function_inference.dl [48:1-57:7]" 
      (TIMER_ON function_inference.function_entry_initial "@t-nonrecursive-rule;function_inference.function_entry_initial;basic_function_inference.dl [48:1-57:7];function_inference.function_entry_initial(EA) :- \\n   block(EA),\\n   function_symbol(EA,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block)) (NOT (ISEMPTY function_symbol)))
         (FOR_IN t0 block           (IF (EXISTS function_symbol ((TUPLE t0 0) UNDEF))
           (INSERT ((TUPLE t0 0)) function_inference.function_entry_initial)
          ))
        )       )
      )
     )
      (DEBUG 
 "function_inference.function_entry_initial(EA) :- \n   block(EA),\n   start_function(EA).\nin file basic_function_inference.dl [48:1-57:7]" 
      (TIMER_ON function_inference.function_entry_initial "@t-nonrecursive-rule;function_inference.function_entry_initial;basic_function_inference.dl [48:1-57:7];function_inference.function_entry_initial(EA) :- \\n   block(EA),\\n   start_function(EA).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block)) (NOT (ISEMPTY start_function)))
         (FOR_IN t0 block           (IF (EXISTS start_function ((TUPLE t0 0)))
           (INSERT ((TUPLE t0 0)) function_inference.function_entry_initial)
          ))
        )       )
      )
     )
      (DEBUG 
 "function_inference.function_entry_initial(EA) :- \n   block(EA),\n   loaded_section(EA,_,_).\nin file basic_function_inference.dl [48:1-57:7]" 
      (TIMER_ON function_inference.function_entry_initial "@t-nonrecursive-rule;function_inference.function_entry_initial;basic_function_inference.dl [48:1-57:7];function_inference.function_entry_initial(EA) :- \\n   block(EA),\\n   loaded_section(EA,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block)) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 block           (IF (EXISTS loaded_section ((TUPLE t0 0) UNDEF UNDEF))
           (INSERT ((TUPLE t0 0)) function_inference.function_entry_initial)
          ))
        )       )
      )
     )
      (DEBUG 
 "function_inference.function_entry_initial(EA) :- \n   block(EA),\n   direct_call(EA_caller,EA),\n   code_in_block(EA_caller,_),\n   !pc_load_call(EA_caller,EA).\nin file basic_function_inference.dl [48:1-57:7]" 
      (TIMER_ON function_inference.function_entry_initial "@t-nonrecursive-rule;function_inference.function_entry_initial;basic_function_inference.dl [48:1-57:7];function_inference.function_entry_initial(EA) :- \\n   block(EA),\\n   direct_call(EA_caller,EA),\\n   code_in_block(EA_caller,_),\\n   !pc_load_call(EA_caller,EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY block))) (NOT (ISEMPTY direct_call)))
         (FOR_IN t0 block           (FOR t1 direct_call (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (IF (AND (EXISTS code_in_block ((TUPLE t1 0) UNDEF)) (NOT (EXISTS pc_load_call ((TUPLE t1 0) (TUPLE t0 0)))))
            (INSERT ((TUPLE t0 0)) function_inference.function_entry_initial)
           )))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE function_inference.function_entry_name
(STMTS (STMTS (STMTS     (TIMER_ON function_inference.function_entry_name "@t-nonrecursive-relation;function_inference.function_entry_name;basic_function_inference.dl [30:7-30:26];"
(STMTS      (DEBUG 
 "function_inference.function_entry_name(EA,SymbolName) :- \n   function_inference.function_entry(EA),\n   best_func_symbol(EA,SymbolName).\nin file basic_function_inference.dl [59:1-61:37]" 
      (TIMER_ON function_inference.function_entry_name "@t-nonrecursive-rule;function_inference.function_entry_name;basic_function_inference.dl [59:1-61:37];function_inference.function_entry_name(EA,SymbolName) :- \\n   function_inference.function_entry(EA),\\n   best_func_symbol(EA,SymbolName).;"
(QUERY
        (IF (AND (NOT (ISEMPTY function_inference.function_entry)) (NOT (ISEMPTY best_func_symbol)))
         (FOR_IN t0 function_inference.function_entry           (FOR t1 best_func_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 1)) function_inference.function_entry_name)
))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON function_inference.function_entry_name "@t-relation-savetime;function_inference.function_entry_name;basic_function_inference.dl [30:7-30:26];savetime;"
     (IO function_inference.function_entry_name ((= IO "file") (= attributeNames "Block\tName") (= auxArity "0") (= name "function_inference.function_entry_name") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"Block\", \"Name\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"s:symbol\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE function_inference.function_without_callframe
(STMTS     (TIMER_ON function_inference.function_without_callframe "@t-nonrecursive-relation;function_inference.function_without_callframe;basic_function_inference.dl [36:7-36:33];"
(STMTS      (DEBUG 
 "function_inference.function_without_callframe(EA) :- \n   function_inference.function_entry(EA),\n   !fde_addresses(EA,_).\nin file basic_function_inference.dl [93:1-95:26]" 
      (TIMER_ON function_inference.function_without_callframe "@t-nonrecursive-rule;function_inference.function_without_callframe;basic_function_inference.dl [93:1-95:26];function_inference.function_without_callframe(EA) :- \\n   function_inference.function_entry(EA),\\n   !fde_addresses(EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY function_inference.function_entry))
         (FOR_IN t0 function_inference.function_entry           (IF (NOT (EXISTS fde_addresses ((TUPLE t0 0) UNDEF)))
           (INSERT ((TUPLE t0 0)) function_inference.function_without_callframe)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE function_inference.in_function
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON function_inference.in_function "@t-nonrecursive-relation;function_inference.in_function;basic_function_inference.dl [33:7-33:18];"
(STMTS      (DEBUG 
 "function_inference.in_function(Block,Function) :- \n   function_inference.in_function_initial(Block,Function).\nin file basic_function_inference.dl [119:1-120:41]" 
      (TIMER_ON function_inference.in_function "@t-nonrecursive-rule;function_inference.in_function;basic_function_inference.dl [119:1-120:41];function_inference.in_function(Block,Function) :- \\n   function_inference.in_function_initial(Block,Function).;"
(QUERY
        (IF (NOT (ISEMPTY function_inference.in_function_initial))
         (FOR_IN t0 function_inference.in_function_initial           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) function_inference.in_function)
)
        )       )
      )
     )
      (DEBUG 
 "function_inference.in_function(Function,Function) :- \n   function_inference.function_without_callframe(Function).\nin file basic_function_inference.dl [122:1-123:42]" 
      (TIMER_ON function_inference.in_function "@t-nonrecursive-rule;function_inference.in_function;basic_function_inference.dl [122:1-123:42];function_inference.in_function(Function,Function) :- \\n   function_inference.function_without_callframe(Function).;"
(QUERY
        (IF (NOT (ISEMPTY function_inference.function_without_callframe))
         (FOR_IN t0 function_inference.function_without_callframe           (INSERT ((TUPLE t0 0) (TUPLE t0 0)) function_inference.in_function)
)
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 function_inference.in_function       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_function_inference.in_function)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_function_inference.in_function "@t-recursive-relation;function_inference.in_function;basic_function_inference.dl [33:7-33:18];"
(STMTS       (DEBUG 
 "function_inference.in_function(Block,Function) :- \n   function_inference.in_function(Block_prev,Function),\n   function_inference.function_without_callframe(Function),\n   next_refined_block_in_byte_interval(Block_prev,Block),\n   function_inference.not_in_function_initial(Block),\n   !function_inference.function_without_callframe(Block).\nin file basic_function_inference.dl [125:1-130:40]" 
       (TIMER_ON @new_function_inference.in_function "@t-recursive-rule;function_inference.in_function;0;basic_function_inference.dl [125:1-130:40];function_inference.in_function(Block,Function) :- \\n   function_inference.in_function(Block_prev,Function),\\n   function_inference.function_without_callframe(Function),\\n   next_refined_block_in_byte_interval(Block_prev,Block),\\n   function_inference.not_in_function_initial(Block),\\n   !function_inference.function_without_callframe(Block).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_function_inference.in_function)) (NOT (ISEMPTY function_inference.not_in_function_initial))) (NOT (ISEMPTY next_refined_block_in_byte_interval))) (NOT (ISEMPTY function_inference.function_without_callframe)))
          (FOR_IN t0 @delta_function_inference.in_function            (IF (EXISTS function_inference.function_without_callframe ((TUPLE t0 1)))
            (FOR t1 next_refined_block_in_byte_interval (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (AND (AND (EXISTS function_inference.not_in_function_initial ((TUPLE t1 1))) (NOT (EXISTS function_inference.function_without_callframe ((TUPLE t1 1))))) (NOT (EXISTS function_inference.in_function ((TUPLE t1 1) (TUPLE t0 1)))))
              (INSERT ((TUPLE t1 1) (TUPLE t0 1)) @new_function_inference.in_function)
             ))           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_function_inference.in_function "@t-recursive-relation;function_inference.in_function;basic_function_inference.dl [33:7-33:18];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_function_inference.in_function))
 ) (STMTS      (TIMER_ON @new_function_inference.in_function "@c-recursive-relation;function_inference.in_function;basic_function_inference.dl [33:7-33:18];"
(STMTS (QUERY
       (FOR_IN t0 @new_function_inference.in_function         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) function_inference.in_function)
)
      )
       (SWAP @delta_function_inference.in_function @new_function_inference.in_function)
       (CLEAR @new_function_inference.in_function)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_function_inference.in_function)
     (CLEAR @new_function_inference.in_function)
 ) )  (STMTS     (TIMER_ON function_inference.in_function "@t-relation-savetime;function_inference.in_function;basic_function_inference.dl [33:7-33:18];savetime;"
     (IO function_inference.in_function ((= IO "file") (= attributeNames "Block\tFunction") (= auxArity "0") (= name "function_inference.in_function") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"Block\", \"Function\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"u:address\"]}}")))
    )
 ) ) (STMTS     (CLEAR function_inference.function_without_callframe)
     (CLEAR function_inference.in_function_initial)
     (CLEAR function_inference.not_in_function_initial)
     (CLEAR next_refined_block_in_byte_interval)
 ) )  )
  (SUBROUTINE function_inference.in_function_initial
(STMTS (STMTS     (TIMER_ON function_inference.in_function_initial "@t-nonrecursive-relation;function_inference.in_function_initial;basic_function_inference.dl [97:7-97:26];"
(STMTS      (DEBUG 
 "function_inference.in_function_initial(Block,Block) :- \n   function_inference.function_entry(Block).\nin file basic_function_inference.dl [99:1-100:27]" 
      (TIMER_ON function_inference.in_function_initial "@t-nonrecursive-rule;function_inference.in_function_initial;basic_function_inference.dl [99:1-100:27];function_inference.in_function_initial(Block,Block) :- \\n   function_inference.function_entry(Block).;"
(QUERY
        (IF (NOT (ISEMPTY function_inference.function_entry))
         (FOR_IN t0 function_inference.function_entry           (INSERT ((TUPLE t0 0) (TUPLE t0 0)) function_inference.in_function_initial)
)
        )       )
      )
     )
      (DEBUG 
 "function_inference.in_function_initial(Block,Begin) :- \n   function_inference.function_entry(Begin),\n   fde_addresses(Begin,End),\n   refined_block(Block),\n   Begin <= Block,\n   Block < End.\nin file basic_function_inference.dl [102:1-107:17]" 
      (TIMER_ON function_inference.in_function_initial "@t-nonrecursive-rule;function_inference.in_function_initial;basic_function_inference.dl [102:1-107:17];function_inference.in_function_initial(Block,Begin) :- \\n   function_inference.function_entry(Begin),\\n   fde_addresses(Begin,End),\\n   refined_block(Block),\\n   Begin <= Block,\\n   Block < End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY refined_block)) (NOT (ISEMPTY function_inference.function_entry))) (NOT (ISEMPTY fde_addresses)))
         (FOR_IN t0 function_inference.function_entry           (FOR t1 fde_addresses (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR_IN t2 refined_block             (IF (AND (CONSTRAINT < (TUPLE t2 0)  (TUPLE t1 1)) (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t2 0)))
             (INSERT ((TUPLE t2 0) (TUPLE t0 0)) function_inference.in_function_initial)
            ))
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR fde_addresses)
 ) )  )
  (SUBROUTINE function_inference.not_in_function_initial
(STMTS     (TIMER_ON function_inference.not_in_function_initial "@t-nonrecursive-relation;function_inference.not_in_function_initial;basic_function_inference.dl [113:7-113:30];"
(STMTS      (DEBUG 
 "function_inference.not_in_function_initial(Block) :- \n   refined_block(Block),\n   !function_inference.in_function_initial(Block,_).\nin file basic_function_inference.dl [115:1-117:35]" 
      (TIMER_ON function_inference.not_in_function_initial "@t-nonrecursive-rule;function_inference.not_in_function_initial;basic_function_inference.dl [115:1-117:35];function_inference.not_in_function_initial(Block) :- \\n   refined_block(Block),\\n   !function_inference.in_function_initial(Block,_).;"
(QUERY
        (IF (NOT (ISEMPTY refined_block))
         (FOR_IN t0 refined_block           (IF (NOT (EXISTS function_inference.in_function_initial ((TUPLE t0 0) UNDEF)))
           (INSERT ((TUPLE t0 0)) function_inference.not_in_function_initial)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE function_pointer_section
(STMTS (STMTS     (TIMER_ON function_pointer_section "@t-nonrecursive-relation;function_pointer_section;/usr/local/src/ddisasm/src/datalog/main.dl [912:7-912:31];"
(STMTS      (DEBUG 
 "function_pointer_section(SectionName) :- \n   binary_format(\"ELF\"),\n   elf_pointer_array_section_type(SectionTypeName),\n   elf_section_type(SectionTypeName,SectionType),\n   section_type(SectionName,SectionType).\nin file elf_binaries.dl [88:1-92:43]" 
      (TIMER_ON function_pointer_section "@t-nonrecursive-rule;function_pointer_section;binary/elf/elf_binaries.dl [88:1-92:43];function_pointer_section(SectionName) :- \\n   binary_format(\\\"ELF\\\"),\\n   elf_pointer_array_section_type(SectionTypeName),\\n   elf_section_type(SectionTypeName,SectionType),\\n   section_type(SectionName,SectionType).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY section_type)) (NOT (ISEMPTY elf_pointer_array_section_type))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY elf_section_type))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 elf_pointer_array_section_type           (FOR t1 elf_section_type (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 section_type (INDEX  (= (TUPLE t2 1) (TUPLE t1 1)))
            (INSERT ((TUPLE t2 0)) function_pointer_section)
)))
        )       )
      )
     )
      (DEBUG 
 "function_pointer_section(\".got.plt\") :- \n   binary_format(\"ELF\").\nin file elf_binaries.dl [94:1-95:26]" 
      (TIMER_ON function_pointer_section "@t-nonrecursive-rule;function_pointer_section;binary/elf/elf_binaries.dl [94:1-95:26];function_pointer_section(\\\".got.plt\\\") :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING ".got.plt")) function_pointer_section)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR elf_pointer_array_section_type)
 ) )  )
  (SUBROUTINE function_symbol
(STMTS     (TIMER_ON function_symbol "@t-nonrecursive-relation;function_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [763:7-763:22];"
(STMTS      (DEBUG 
 "function_symbol(EA,Name) :- \n   symbol(EA,_,\"FUNC\",_,_,_,_,_,Name).\nin file main.dl [765:1-766:40]" 
      (TIMER_ON function_symbol "@t-nonrecursive-rule;function_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [765:1-766:40];function_symbol(EA,Name) :- \\n   symbol(EA,_,\\\"FUNC\\\",_,_,_,_,_,Name).;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR t0 symbol (INDEX  (= (TUPLE t0 2) (STRING "FUNC")))
          (INSERT ((TUPLE t0 0) (TUPLE t0 8)) function_symbol)
)        )       )
      )
     )
      (DEBUG 
 "function_symbol(EA,Name) :- \n   symbol(EA,_,\"GNU_IFUNC\",_,_,_,_,_,Name).\nin file main.dl [768:1-769:45]" 
      (TIMER_ON function_symbol "@t-nonrecursive-rule;function_symbol;/usr/local/src/ddisasm/src/datalog/main.dl [768:1-769:45];function_symbol(EA,Name) :- \\n   symbol(EA,_,\\\"GNU_IFUNC\\\",_,_,_,_,_,Name).;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR t0 symbol (INDEX  (= (TUPLE t0 2) (STRING "GNU_IFUNC")))
          (INSERT ((TUPLE t0 0) (TUPLE t0 8)) function_symbol)
)        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE got_reference
(STMTS (STMTS (STMTS     (TIMER_ON got_reference "@t-nonrecursive-relation;got_reference;/usr/local/src/ddisasm/src/datalog/main.dl [886:7-886:20];"
(STMTS      (DEBUG 
 "got_reference(EA,Symbol) :- \n   relocation(EA,\"DTPMOD64\",Symbol,_,_,_,_),\n   Symbol != \"\".\nin file tls.dl [612:1-617:18]" 
      (TIMER_ON got_reference "@t-nonrecursive-rule;got_reference;tls.dl [612:1-617:18];got_reference(EA,Symbol) :- \\n   relocation(EA,\\\"DTPMOD64\\\",Symbol,_,_,_,_),\\n   Symbol != \\\"\\\".;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "DTPMOD64")))
          (IF (CONSTRAINT != (TUPLE t0 2)  (STRING ""))
           (INSERT ((TUPLE t0 0) (TUPLE t0 2)) got_reference)
          ))        )       )
      )
     )
      (DEBUG 
 "got_reference(EA,Symbol) :- \n   relocation(EA,\"TLS_DTPMOD32\",Symbol,_,_,_,_),\n   Symbol != \"\".\nin file tls.dl [612:1-617:18]" 
      (TIMER_ON got_reference "@t-nonrecursive-rule;got_reference;tls.dl [612:1-617:18];got_reference(EA,Symbol) :- \\n   relocation(EA,\\\"TLS_DTPMOD32\\\",Symbol,_,_,_,_),\\n   Symbol != \\\"\\\".;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "TLS_DTPMOD32")))
          (IF (CONSTRAINT != (TUPLE t0 2)  (STRING ""))
           (INSERT ((TUPLE t0 0) (TUPLE t0 2)) got_reference)
          ))        )       )
      )
     )
      (DEBUG 
 "got_reference(EA,Symbol) :- \n   loaded_section(Beg,End,\".got\"),\n   EA >= Beg,\n   EA < End,\n   relocation(EA,RelType,Symbol,_,_,_,_),\n   RelType != \"RELATIVE\",\n   !tls_index(EA,_),\n   !tls_descriptor(EA,_),\n   symbol(_,_,_,_,_,_,_,_,Symbol).\nin file symbolization.dl [68:1-75:36]" 
      (TIMER_ON got_reference "@t-nonrecursive-rule;got_reference;binary/elf/symbolization.dl [68:1-75:36];got_reference(EA,Symbol) :- \\n   loaded_section(Beg,End,\\\".got\\\"),\\n   EA >= Beg,\\n   EA < End,\\n   relocation(EA,RelType,Symbol,_,_,_,_),\\n   RelType != \\\"RELATIVE\\\",\\n   !tls_index(EA,_),\\n   !tls_descriptor(EA,_),\\n   symbol(_,_,_,_,_,_,_,_,Symbol).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY relocation)))
         (FOR t0 loaded_section (INDEX  (= (TUPLE t0 2) (STRING ".got")))
          (FOR_IN t1 relocation            (IF (AND (AND (AND (AND (AND (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t0 0)) (CONSTRAINT < (TUPLE t1 0)  (TUPLE t0 1))) (CONSTRAINT != (TUPLE t1 1)  (STRING "RELATIVE"))) (NOT (EXISTS tls_descriptor ((TUPLE t1 0) UNDEF)))) (EXISTS symbol (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (TUPLE t1 2)))) (NOT (EXISTS tls_index ((TUPLE t1 0) UNDEF))))
            (INSERT ((TUPLE t1 0) (TUPLE t1 2)) got_reference)
           ))
)        )       )
      )
     )
      (DEBUG 
 "got_reference(Address,Function) :- \n   pe_import_entry(Address,_,Function,_).\nin file symbolization.dl [34:1-35:43]" 
      (TIMER_ON got_reference "@t-nonrecursive-rule;got_reference;binary/pe/symbolization.dl [34:1-35:43];got_reference(Address,Function) :- \\n   pe_import_entry(Address,_,Function,_).;"
(QUERY
        (IF (NOT (ISEMPTY pe_import_entry))
         (FOR_IN t0 pe_import_entry           (INSERT ((TUPLE t0 0) (TUPLE t0 2)) got_reference)
)
        )       )
      )
     )
      (DEBUG 
 "got_reference(EA,Symbol) :- \n   tls_segment(Start,_,_),\n   tls_descriptor(EA,Offset),\n   symbol( _tmp_52,_,\"TLS\",_,_,_,_,_,Symbol),\n    _tmp_52 = (Start+Offset).\nin file tls.dl [628:1-631:51]" 
      (TIMER_ON got_reference "@t-nonrecursive-rule;got_reference;tls.dl [628:1-631:51];got_reference(EA,Symbol) :- \\n   tls_segment(Start,_,_),\\n   tls_descriptor(EA,Offset),\\n   symbol( _tmp_52,_,\\\"TLS\\\",_,_,_,_,_,Symbol),\\n    _tmp_52 = (Start+Offset).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY tls_segment))) (NOT (ISEMPTY tls_descriptor)))
         (FOR_IN t0 tls_segment           (FOR_IN t1 tls_descriptor            (FOR t2 symbol (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1))) (= (TUPLE t2 2) (STRING "TLS")))
            (INSERT ((TUPLE t1 0) (TUPLE t2 8)) got_reference)
))
)
        )       )
      )
     )
      (DEBUG 
 "got_reference(Got_entry,Symbol) :- \n   loaded_section(Beg,End,\".got\"),\n   Got_entry >= Beg,\n   Got_entry < End,\n   Ptr = 8,\n   symbolic_expr(Got_entry,Ptr,Symbol,_).\nin file symbolization.dl [77:1-82:43]" 
      (TIMER_ON got_reference "@t-nonrecursive-rule;got_reference;binary/elf/symbolization.dl [77:1-82:43];got_reference(Got_entry,Symbol) :- \\n   loaded_section(Beg,End,\\\".got\\\"),\\n   Got_entry >= Beg,\\n   Got_entry < End,\\n   Ptr = 8,\\n   symbolic_expr(Got_entry,Ptr,Symbol,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY symbolic_expr)))
         (FOR t0 loaded_section (INDEX  (= (TUPLE t0 2) (STRING ".got")))
          (FOR t1 symbolic_expr (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)))
           (IF (AND (AND (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 1)) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t0 0))) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t0 1)))
            (INSERT ((TUPLE t1 0) (TUPLE t1 2)) got_reference)
           )))        )       )
      )
     )
      (DEBUG 
 "got_reference(EA,Symbol) :- \n   relocation(EA,\"DTPMOD64\",\"\",_,_,_,_),\n   Size = 8,\n   symbolic_expr_symbol_minus_symbol( _tmp_50,Size,_,Symbol,_,_),\n    _tmp_50 = (EA+Size).\nin file tls.dl [620:1-626:66]" 
      (TIMER_ON got_reference "@t-nonrecursive-rule;got_reference;tls.dl [620:1-626:66];got_reference(EA,Symbol) :- \\n   relocation(EA,\\\"DTPMOD64\\\",\\\"\\\",_,_,_,_),\\n   Size = 8,\\n   symbolic_expr_symbol_minus_symbol( _tmp_50,Size,_,Symbol,_,_),\\n    _tmp_50 = (EA+Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY symbolic_expr_symbol_minus_symbol)))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "DTPMOD64")) (= (TUPLE t0 2) (STRING "")))
          (FOR t1 symbolic_expr_symbol_minus_symbol (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)))
           (IF (CONSTRAINT = (TUPLE t1 0)  (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 3)) got_reference)
           )))        )       )
      )
     )
      (DEBUG 
 "got_reference(EA,Symbol) :- \n   relocation(EA,\"TLS_DTPMOD32\",\"\",_,_,_,_),\n   Size = 8,\n   symbolic_expr_symbol_minus_symbol( _tmp_51,Size,_,Symbol,_,_),\n    _tmp_51 = (EA+Size).\nin file tls.dl [620:1-626:66]" 
      (TIMER_ON got_reference "@t-nonrecursive-rule;got_reference;tls.dl [620:1-626:66];got_reference(EA,Symbol) :- \\n   relocation(EA,\\\"TLS_DTPMOD32\\\",\\\"\\\",_,_,_,_),\\n   Size = 8,\\n   symbolic_expr_symbol_minus_symbol( _tmp_51,Size,_,Symbol,_,_),\\n    _tmp_51 = (EA+Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY symbolic_expr_symbol_minus_symbol)))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "TLS_DTPMOD32")) (= (TUPLE t0 2) (STRING "")))
          (FOR t1 symbolic_expr_symbol_minus_symbol (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)))
           (IF (CONSTRAINT = (TUPLE t1 0)  (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 3)) got_reference)
           )))        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON got_reference "@t-relation-savetime;got_reference;/usr/local/src/ddisasm/src/datalog/main.dl [886:7-886:20];savetime;"
     (IO got_reference ((= IO "file") (= attributeNames "Got_entry\tSymbol") (= auxArity "0") (= name "got_reference") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"Got_entry\", \"Symbol\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"s:symbol\"]}}")))
    )
 ) ) (STMTS     (CLEAR symbolic_expr_symbol_minus_symbol)
 ) )  )
  (SUBROUTINE got_reference_pointer
(STMTS (STMTS (STMTS     (TIMER_ON got_reference_pointer "@t-nonrecursive-relation;got_reference_pointer;binary/elf/symbolization.dl [58:7-58:28];"
(STMTS      (DEBUG 
 "got_reference_pointer(EA) :- \n   loaded_section(EA,_,\".got.plt\").\nin file symbolization.dl [61:1-62:37]" 
      (TIMER_ON got_reference_pointer "@t-nonrecursive-rule;got_reference_pointer;binary/elf/symbolization.dl [61:1-62:37];got_reference_pointer(EA) :- \\n   loaded_section(EA,_,\\\".got.plt\\\").;"
(QUERY
        (IF (NOT (ISEMPTY loaded_section))
         (FOR t0 loaded_section (INDEX  (= (TUPLE t0 2) (STRING ".got.plt")))
          (INSERT ((TUPLE t0 0)) got_reference_pointer)
)        )       )
      )
     )
      (DEBUG 
 "got_reference_pointer(EA) :- \n   loaded_section(EA,_,\".got\"),\n   !loaded_section(_,_,\".got.plt\").\nin file symbolization.dl [64:1-66:37]" 
      (TIMER_ON got_reference_pointer "@t-nonrecursive-rule;got_reference_pointer;binary/elf/symbolization.dl [64:1-66:37];got_reference_pointer(EA) :- \\n   loaded_section(EA,_,\\\".got\\\"),\\n   !loaded_section(_,_,\\\".got.plt\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY loaded_section)) (NOT (EXISTS loaded_section (UNDEF UNDEF (STRING ".got.plt")))))
         (FOR t0 loaded_section (INDEX  (= (TUPLE t0 2) (STRING ".got")))
          (INSERT ((TUPLE t0 0)) got_reference_pointer)
)        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON got_reference_pointer "@t-relation-savetime;got_reference_pointer;binary/elf/symbolization.dl [58:7-58:28];savetime;"
     (IO got_reference_pointer ((= IO "file") (= attributeNames "EA") (= auxArity "0") (= name "got_reference_pointer") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"EA\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE got_section
(STMTS     (TIMER_ON got_section "@t-nonrecursive-relation;got_section;binary/elf/elf_binaries.dl [105:7-105:18];"
(STMTS      (DEBUG 
 "got_section(\".got\").\nin file elf_binaries.dl [107:1-107:21]" 
      (TIMER_ON got_section "@t-nonrecursive-rule;got_section;binary/elf/elf_binaries.dl [107:1-107:21];got_section(\\\".got\\\").;"
(QUERY
        (INSERT ((STRING ".got")) got_section)
       )
      )
     )
      (DEBUG 
 "got_section(\".got.plt\").\nin file elf_binaries.dl [108:1-108:25]" 
      (TIMER_ON got_section "@t-nonrecursive-rule;got_section;binary/elf/elf_binaries.dl [108:1-108:25];got_section(\\\".got.plt\\\").;"
(QUERY
        (INSERT ((STRING ".got.plt")) got_section)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE halt
(STMTS (STMTS     (TIMER_ON halt "@t-nonrecursive-relation;halt;/usr/local/src/ddisasm/src/datalog/main.dl [682:7-682:11];"
(STMTS      (DEBUG 
 "halt(EA) :- \n   arch.halt_operation(Operation),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_).\nin file main.dl [684:1-686:45]" 
      (TIMER_ON halt "@t-nonrecursive-rule;halt;/usr/local/src/ddisasm/src/datalog/main.dl [684:1-686:45];halt(EA) :- \\n   arch.halt_operation(Operation),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.halt_operation)) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 arch.halt_operation           (FOR t1 instruction (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 0)) halt)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.halt_operation)
 ) )  )
  (SUBROUTINE ifunc_scope_score
(STMTS     (TIMER_ON ifunc_scope_score "@t-nonrecursive-relation;ifunc_scope_score;binary/elf/symbolization.dl [423:7-423:24];"
(STMTS      (DEBUG 
 "ifunc_scope_score(\"LOCAL\",2).\nin file symbolization.dl [425:1-425:30]" 
      (TIMER_ON ifunc_scope_score "@t-nonrecursive-rule;ifunc_scope_score;binary/elf/symbolization.dl [425:1-425:30];ifunc_scope_score(\\\"LOCAL\\\",2).;"
(QUERY
        (INSERT ((STRING "LOCAL") (UNSIGNED 2)) ifunc_scope_score)
       )
      )
     )
      (DEBUG 
 "ifunc_scope_score(\"GLOBAL\",1).\nin file symbolization.dl [426:1-426:31]" 
      (TIMER_ON ifunc_scope_score "@t-nonrecursive-rule;ifunc_scope_score;binary/elf/symbolization.dl [426:1-426:31];ifunc_scope_score(\\\"GLOBAL\\\",1).;"
(QUERY
        (INSERT ((STRING "GLOBAL") (UNSIGNED 1)) ifunc_scope_score)
       )
      )
     )
      (DEBUG 
 "ifunc_scope_score(Scope,0) :- \n   symbol(_,_,_,Scope,_,_,_,_,_),\n   Scope != \"GLOBAL\",\n   Scope != \"LOCAL\".\nin file symbolization.dl [428:1-431:22]" 
      (TIMER_ON ifunc_scope_score "@t-nonrecursive-rule;ifunc_scope_score;binary/elf/symbolization.dl [428:1-431:22];ifunc_scope_score(Scope,0) :- \\n   symbol(_,_,_,Scope,_,_,_,_,_),\\n   Scope != \\\"GLOBAL\\\",\\n   Scope != \\\"LOCAL\\\".;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR_IN t0 symbol           (IF (AND (CONSTRAINT != (TUPLE t0 3)  (STRING "LOCAL")) (CONSTRAINT != (TUPLE t0 3)  (STRING "GLOBAL")))
           (INSERT ((TUPLE t0 3) (UNSIGNED 0)) ifunc_scope_score)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE ifunc_symbol_score
(STMTS (STMTS     (TIMER_ON ifunc_symbol_score "@t-nonrecursive-relation;ifunc_symbol_score;binary/elf/symbolization.dl [416:7-416:25];"
(STMTS      (DEBUG 
 "ifunc_symbol_score(EA,SymbolName,((((ScopeScore<<34)|(VisibilityScore<<33))|(1<<32))|as(DynSymTableIndex, unsigned))) :- \n   defined_symbol(EA,Size,\"GNU_IFUNC\",Scope,Visibility,SectIndex,_,_,SymbolName),\n   ifunc_scope_score(Scope,ScopeScore),\n   symbol_visibility_score(Visibility,VisibilityScore),\n   defined_symbol(EA,Size,\"GNU_IFUNC\",Scope,Visibility,SectIndex,\".dynsym\",DynSymTableIndex,SymbolName).\nin file symbolization.dl [433:1-453:45]" 
      (TIMER_ON ifunc_symbol_score "@t-nonrecursive-rule;ifunc_symbol_score;binary/elf/symbolization.dl [433:1-453:45];ifunc_symbol_score(EA,SymbolName,((((ScopeScore<<34)|(VisibilityScore<<33))|(1<<32))|as(DynSymTableIndex, unsigned))) :- \\n   defined_symbol(EA,Size,\\\"GNU_IFUNC\\\",Scope,Visibility,SectIndex,_,_,SymbolName),\\n   ifunc_scope_score(Scope,ScopeScore),\\n   symbol_visibility_score(Visibility,VisibilityScore),\\n   defined_symbol(EA,Size,\\\"GNU_IFUNC\\\",Scope,Visibility,SectIndex,\\\".dynsym\\\",DynSymTableIndex,SymbolName).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY ifunc_scope_score)) (NOT (ISEMPTY defined_symbol))) (NOT (ISEMPTY symbol_visibility_score)))
         (FOR t0 defined_symbol (INDEX  (= (TUPLE t0 2) (STRING "GNU_IFUNC")))
          (FOR t1 ifunc_scope_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 3)))
           (FOR t2 symbol_visibility_score (INDEX  (= (TUPLE t2 0) (TUPLE t0 4)))
            (FOR t3 defined_symbol (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 1) (TUPLE t0 1)) (= (TUPLE t3 2) (STRING "GNU_IFUNC")) (= (TUPLE t3 3) (TUPLE t0 3)) (= (TUPLE t3 4) (TUPLE t0 4)) (= (TUPLE t3 5) (TUPLE t0 5)) (= (TUPLE t3 6) (STRING ".dynsym")) (= (TUPLE t3 8) (TUPLE t0 8)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 8) (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bshl (TUPLE t1 1) (UNSIGNED 34)) (INTRINSIC bshl (TUPLE t2 1) (UNSIGNED 33))) (INTRINSIC bshl (UNSIGNED 1) (UNSIGNED 32))) (TUPLE t3 7))) ifunc_symbol_score)
))))        )       )
      )
     )
      (DEBUG 
 "ifunc_symbol_score(EA,SymbolName,((((ScopeScore<<34)|(VisibilityScore<<33))|(0<<32))|as(TableIndex, unsigned))) :- \n   defined_symbol(EA,Size,\"GNU_IFUNC\",Scope,Visibility,SectIndex,_,TableIndex,SymbolName),\n   ifunc_scope_score(Scope,ScopeScore),\n   symbol_visibility_score(Visibility,VisibilityScore),\n   !defined_symbol(EA,Size,\"GNU_IFUNC\",Scope,Visibility,SectIndex,\".dynsym\",_,SymbolName).\nin file symbolization.dl [433:1-453:45]" 
      (TIMER_ON ifunc_symbol_score "@t-nonrecursive-rule;ifunc_symbol_score;binary/elf/symbolization.dl [433:1-453:45];ifunc_symbol_score(EA,SymbolName,((((ScopeScore<<34)|(VisibilityScore<<33))|(0<<32))|as(TableIndex, unsigned))) :- \\n   defined_symbol(EA,Size,\\\"GNU_IFUNC\\\",Scope,Visibility,SectIndex,_,TableIndex,SymbolName),\\n   ifunc_scope_score(Scope,ScopeScore),\\n   symbol_visibility_score(Visibility,VisibilityScore),\\n   !defined_symbol(EA,Size,\\\"GNU_IFUNC\\\",Scope,Visibility,SectIndex,\\\".dynsym\\\",_,SymbolName).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY symbol_visibility_score)) (NOT (ISEMPTY defined_symbol))) (NOT (ISEMPTY ifunc_scope_score)))
         (FOR t0 defined_symbol (INDEX  (= (TUPLE t0 2) (STRING "GNU_IFUNC")))
          (IF (NOT (EXISTS defined_symbol ((TUPLE t0 0) (TUPLE t0 1) (STRING "GNU_IFUNC") (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (STRING ".dynsym") UNDEF (TUPLE t0 8))))
           (FOR t1 ifunc_scope_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 3)))
            (FOR t2 symbol_visibility_score (INDEX  (= (TUPLE t2 0) (TUPLE t0 4)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 8) (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bshl (TUPLE t1 1) (UNSIGNED 34)) (INTRINSIC bshl (TUPLE t2 1) (UNSIGNED 33))) (INTRINSIC bshl (UNSIGNED 0) (UNSIGNED 32))) (TUPLE t0 7))) ifunc_symbol_score)
))          ))        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR ifunc_scope_score)
 ) )  )
  (SUBROUTINE impossible_block
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON impossible_block "@t-nonrecursive-relation;impossible_block;code_inference.dl [766:7-766:23];"
(STMTS      (DEBUG 
 "impossible_block(BlockB,TypeB,SizeB,\"overlaps known\") :- \n   known_block(BlockA,TypeA,SizeA,_),\n   block_overlap(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   !known_block(BlockB,TypeB,SizeB,_),\n   !overlapping_instruction(BlockA,BlockB),\n   TypeA != \"data\".\nin file code_inference.dl [769:1-778:7]" 
      (TIMER_ON impossible_block "@t-nonrecursive-rule;impossible_block;code_inference.dl [769:1-778:7];impossible_block(BlockB,TypeB,SizeB,\\\"overlaps known\\\") :- \\n   known_block(BlockA,TypeA,SizeA,_),\\n   block_overlap(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   !known_block(BlockB,TypeB,SizeB,_),\\n   !overlapping_instruction(BlockA,BlockB),\\n   TypeA != \\\"data\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY known_block)) (NOT (ISEMPTY block_overlap)))
         (FOR_IN t0 known_block           (IF (CONSTRAINT != (TUPLE t0 1)  (STRING "data"))
           (FOR t1 block_overlap (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
            (IF (AND (NOT (EXISTS known_block ((TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5) UNDEF))) (NOT (EXISTS overlapping_instruction ((TUPLE t0 0) (TUPLE t1 3)))))
             (INSERT ((TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5) (STRING "overlaps known")) impossible_block)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "impossible_block(BlockB,TypeB,SizeB,\"overlaps known\") :- \n   known_block(BlockA,TypeA,SizeA,_),\n   block_overlap(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   !known_block(BlockB,TypeB,SizeB,_),\n   !overlapping_instruction(BlockA,BlockB),\n   TypeB != \"data\".\nin file code_inference.dl [769:1-778:7]" 
      (TIMER_ON impossible_block "@t-nonrecursive-rule;impossible_block;code_inference.dl [769:1-778:7];impossible_block(BlockB,TypeB,SizeB,\\\"overlaps known\\\") :- \\n   known_block(BlockA,TypeA,SizeA,_),\\n   block_overlap(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   !known_block(BlockB,TypeB,SizeB,_),\\n   !overlapping_instruction(BlockA,BlockB),\\n   TypeB != \\\"data\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY known_block)) (NOT (ISEMPTY block_overlap)))
         (FOR_IN t0 known_block           (FOR t1 block_overlap (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
           (IF (AND (AND (CONSTRAINT != (TUPLE t1 4)  (STRING "data")) (NOT (EXISTS overlapping_instruction ((TUPLE t0 0) (TUPLE t1 3))))) (NOT (EXISTS known_block ((TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5) UNDEF))))
            (INSERT ((TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5) (STRING "overlaps known")) impossible_block)
           )))
        )       )
      )
     )
      (DEBUG 
 "impossible_block(BlockA,TypeA,SizeA,\"implies self-overlapping block\") :- \n   block_implies_block(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   block_overlap(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   !known_block(BlockA,TypeA,SizeA,_).\nin file code_inference.dl [786:1-789:40]" 
      (TIMER_ON impossible_block "@t-nonrecursive-rule;impossible_block;code_inference.dl [786:1-789:40];impossible_block(BlockA,TypeA,SizeA,\\\"implies self-overlapping block\\\") :- \\n   block_implies_block(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   block_overlap(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   !known_block(BlockA,TypeA,SizeA,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_implies_block)) (NOT (ISEMPTY block_overlap)))
         (FOR_IN t0 block_implies_block           (IF (AND (EXISTS block_overlap ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5))) (NOT (EXISTS known_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (STRING "implies self-overlapping block")) impossible_block)
          ))
        )       )
      )
     )
      (DEBUG 
 "impossible_block(BlockA,TypeA,SizeA,\"implies overlapping blocks\") :- \n   block_implies_block(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC),\n   BlockB != BlockC,\n   TypeB != \"data\",\n   TypeC != \"data\",\n   block_overlap(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\n   !known_block(BlockA,TypeA,SizeA,_).\nin file code_inference.dl [791:1-805:40]" 
      (TIMER_ON impossible_block "@t-nonrecursive-rule;impossible_block;code_inference.dl [791:1-805:40];impossible_block(BlockA,TypeA,SizeA,\\\"implies overlapping blocks\\\") :- \\n   block_implies_block(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC),\\n   BlockB != BlockC,\\n   TypeB != \\\"data\\\",\\n   TypeC != \\\"data\\\",\\n   block_overlap(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\\n   !known_block(BlockA,TypeA,SizeA,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_overlap)) (NOT (ISEMPTY block_implies_block)))
         (FOR_IN t0 block_implies_block           (IF (AND (CONSTRAINT != (TUPLE t0 4)  (STRING "data")) (NOT (EXISTS known_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF))))
           (FOR t1 block_implies_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
            (IF (AND (AND (CONSTRAINT != (TUPLE t0 3)  (TUPLE t1 3)) (CONSTRAINT != (TUPLE t1 4)  (STRING "data"))) (EXISTS block_overlap ((TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (STRING "implies overlapping blocks")) impossible_block)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "impossible_block(BlockA,TypeA,SizeA,\"implies overlapping blocks\") :- \n   block_implies_block(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC),\n   TypeB != TypeC,\n   block_overlap(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\n   !known_block(BlockA,TypeA,SizeA,_).\nin file code_inference.dl [791:1-805:40]" 
      (TIMER_ON impossible_block "@t-nonrecursive-rule;impossible_block;code_inference.dl [791:1-805:40];impossible_block(BlockA,TypeA,SizeA,\\\"implies overlapping blocks\\\") :- \\n   block_implies_block(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   block_implies_block(BlockA,TypeA,SizeA,BlockC,TypeC,SizeC),\\n   TypeB != TypeC,\\n   block_overlap(BlockB,TypeB,SizeB,BlockC,TypeC,SizeC),\\n   !known_block(BlockA,TypeA,SizeA,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_overlap)) (NOT (ISEMPTY block_implies_block)))
         (FOR_IN t0 block_implies_block           (IF (NOT (EXISTS known_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF)))
           (FOR t1 block_implies_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
            (IF (AND (CONSTRAINT != (TUPLE t0 4)  (TUPLE t1 4)) (EXISTS block_overlap ((TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (STRING "implies overlapping blocks")) impossible_block)
            ))          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 impossible_block       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) @delta_impossible_block)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_impossible_block "@t-recursive-relation;impossible_block;code_inference.dl [766:7-766:23];"
(STMTS       (DEBUG 
 "impossible_block(BlockA,TypeA,SizeA,\"propagated impossible\") :- \n   impossible_block(BlockB,TypeB,SizeB,_),\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\n   !known_block(BlockA,TypeA,SizeA,_).\nin file code_inference.dl [781:1-784:40]" 
       (TIMER_ON @new_impossible_block "@t-recursive-rule;impossible_block;0;code_inference.dl [781:1-784:40];impossible_block(BlockA,TypeA,SizeA,\\\"propagated impossible\\\") :- \\n   impossible_block(BlockB,TypeB,SizeB,_),\\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB),\\n   !known_block(BlockA,TypeA,SizeA,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_impossible_block)) (NOT (ISEMPTY block_candidate_dependency_edge)))
          (FOR_IN t0 @delta_impossible_block            (FOR t1 block_candidate_dependency_edge (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)) (= (TUPLE t1 4) (TUPLE t0 1)) (= (TUPLE t1 5) (TUPLE t0 2)))
            (IF (AND (NOT (EXISTS known_block ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) UNDEF))) (NOT (EXISTS impossible_block ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (STRING "propagated impossible")))))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (STRING "propagated impossible")) @new_impossible_block)
            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_impossible_block "@t-recursive-relation;impossible_block;code_inference.dl [766:7-766:23];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_impossible_block))
 ) (STMTS      (TIMER_ON @new_impossible_block "@c-recursive-relation;impossible_block;code_inference.dl [766:7-766:23];"
(STMTS (QUERY
       (FOR_IN t0 @new_impossible_block         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) impossible_block)
)
      )
       (SWAP @delta_impossible_block @new_impossible_block)
       (CLEAR @new_impossible_block)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_impossible_block)
     (CLEAR @new_impossible_block)
 ) )  ) (STMTS     (CLEAR block_implies_block)
 ) )  )
  (SUBROUTINE incomplete_block
(STMTS     (TIMER_ON incomplete_block "@t-nonrecursive-relation;incomplete_block;noreturn.dl [29:7-29:23];"
(STMTS      (DEBUG 
 "incomplete_block(Block) :- \n   block_last_instruction(Block,BlockEnd),\n   indirect_jump(BlockEnd),\n   !pc_relative_jump(BlockEnd,_).\nin file noreturn.dl [31:1-40:7]" 
      (TIMER_ON incomplete_block "@t-nonrecursive-rule;incomplete_block;noreturn.dl [31:1-40:7];incomplete_block(Block) :- \\n   block_last_instruction(Block,BlockEnd),\\n   indirect_jump(BlockEnd),\\n   !pc_relative_jump(BlockEnd,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY indirect_jump)))
         (FOR_IN t0 block_last_instruction           (IF (AND (EXISTS indirect_jump ((TUPLE t0 1))) (NOT (EXISTS pc_relative_jump ((TUPLE t0 1) UNDEF))))
           (INSERT ((TUPLE t0 0)) incomplete_block)
          ))
        )       )
      )
     )
      (DEBUG 
 "incomplete_block(Block) :- \n   block_last_instruction(Block,BlockEnd),\n   reg_jump(BlockEnd,_).\nin file noreturn.dl [31:1-40:7]" 
      (TIMER_ON incomplete_block "@t-nonrecursive-rule;incomplete_block;noreturn.dl [31:1-40:7];incomplete_block(Block) :- \\n   block_last_instruction(Block,BlockEnd),\\n   reg_jump(BlockEnd,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY reg_jump)))
         (FOR_IN t0 block_last_instruction           (IF (EXISTS reg_jump ((TUPLE t0 1) UNDEF))
           (INSERT ((TUPLE t0 0)) incomplete_block)
          ))
        )       )
      )
     )
      (DEBUG 
 "incomplete_block(Block) :- \n   block_last_instruction(Block,BlockEnd),\n   arch.return(BlockEnd).\nin file noreturn.dl [31:1-40:7]" 
      (TIMER_ON incomplete_block "@t-nonrecursive-rule;incomplete_block;noreturn.dl [31:1-40:7];incomplete_block(Block) :- \\n   block_last_instruction(Block,BlockEnd),\\n   arch.return(BlockEnd).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY arch.return)))
         (FOR_IN t0 block_last_instruction           (IF (EXISTS arch.return ((TUPLE t0 1)))
           (INSERT ((TUPLE t0 0)) incomplete_block)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE incremental_linking
(STMTS (STMTS     (TIMER_ON incremental_linking "@t-nonrecursive-relation;incremental_linking;binary/pe/pe_binaries.dl [208:7-208:26];"
(STMTS      (DEBUG 
 "incremental_linking(First,Last) :- \n   incremental_linking_candidate(First,Last),\n   next(Last,Next),\n   !incremental_linking_candidate(First,Next),\n   @generator_0 > 5,\n   @generator_0 = count : { incremental_linking_candidate(First,+underscore_1503) }.\nin file pe_binaries.dl [210:1-214:75]" 
      (TIMER_ON incremental_linking "@t-nonrecursive-rule;incremental_linking;binary/pe/pe_binaries.dl [210:1-214:75];incremental_linking(First,Last) :- \\n   incremental_linking_candidate(First,Last),\\n   next(Last,Next),\\n   !incremental_linking_candidate(First,Next),\\n   @generator_0 > 5,\\n   @generator_0 = count : { incremental_linking_candidate(First,+underscore_1503) }.;"
(QUERY
        (IF (AND (NOT (ISEMPTY incremental_linking_candidate)) (NOT (ISEMPTY next)))
         (FOR_IN t0 incremental_linking_candidate           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION COUNT  UNDEF ))  t1 incremental_linking_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) TRUE 
           (IF (AND (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0)) (CONSTRAINT > (TUPLE t1 0)  (NUMBER 5)))
            (INDEXED_IF_EXISTS t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t0 1))) (NOT (EXISTS incremental_linking_candidate ((TUPLE t0 0) (TUPLE t2 1))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1)) incremental_linking)
)           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR incremental_linking_candidate)
 ) )  )
  (SUBROUTINE incremental_linking_candidate
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON incremental_linking_candidate "@t-nonrecursive-relation;incremental_linking_candidate;binary/pe/pe_binaries.dl [184:7-184:36];"
(STMTS      (DEBUG 
 "incremental_linking_candidate((EA+Count),(EA+Count)) :- \n   binary_format(\"PE\"),\n   code_section(Section),\n   loaded_section(EA,End,Section),\n   repeated_byte(EA,0xCC,Count),\n   Jmp = (EA+Count),\n   unconditional_jump(Jmp),\n   direct_jump(Jmp,_),\n   next(Jmp,JmpEnd),\n   JmpEnd <= End.\nin file pe_binaries.dl [186:1-195:19]" 
      (TIMER_ON incremental_linking_candidate "@t-nonrecursive-rule;incremental_linking_candidate;binary/pe/pe_binaries.dl [186:1-195:19];incremental_linking_candidate((EA+Count),(EA+Count)) :- \\n   binary_format(\\\"PE\\\"),\\n   code_section(Section),\\n   loaded_section(EA,End,Section),\\n   repeated_byte(EA,0xCC,Count),\\n   Jmp = (EA+Count),\\n   unconditional_jump(Jmp),\\n   direct_jump(Jmp,_),\\n   next(Jmp,JmpEnd),\\n   JmpEnd <= End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY code_section)) (NOT (ISEMPTY next))) (NOT (ISEMPTY repeated_byte))) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY unconditional_jump))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY direct_jump))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 code_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR t2 repeated_byte (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (UNSIGNED 204)))
            (FOR t3 unconditional_jump (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t1 0) (TUPLE t2 2))))
             (IF (EXISTS direct_jump ((TUPLE t3 0) UNDEF))
              (INDEXED_IF_EXISTS t4 next (INDEX  (= (TUPLE t4 0) (TUPLE t3 0))) (CONSTRAINT <= (TUPLE t4 1)  (TUPLE t1 1))
               (INSERT ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) (INTRINSIC + (TUPLE t1 0) (TUPLE t2 2))) incremental_linking_candidate)
)             )))))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 incremental_linking_candidate       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_incremental_linking_candidate)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_incremental_linking_candidate "@t-recursive-relation;incremental_linking_candidate;binary/pe/pe_binaries.dl [184:7-184:36];"
(STMTS       (DEBUG 
 "incremental_linking_candidate(First,Next) :- \n   incremental_linking_candidate(First,Last),\n   next(Last,Next),\n   unconditional_jump(Next),\n   direct_jump(Next,_).\nin file pe_binaries.dl [197:1-201:25]" 
       (TIMER_ON @new_incremental_linking_candidate "@t-recursive-rule;incremental_linking_candidate;0;binary/pe/pe_binaries.dl [197:1-201:25];incremental_linking_candidate(First,Next) :- \\n   incremental_linking_candidate(First,Last),\\n   next(Last,Next),\\n   unconditional_jump(Next),\\n   direct_jump(Next,_).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_incremental_linking_candidate)) (NOT (ISEMPTY direct_jump))) (NOT (ISEMPTY unconditional_jump))) (NOT (ISEMPTY next)))
          (FOR_IN t0 @delta_incremental_linking_candidate            (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (AND (AND (EXISTS direct_jump ((TUPLE t1 1) UNDEF)) (EXISTS unconditional_jump ((TUPLE t1 1)))) (NOT (EXISTS incremental_linking_candidate ((TUPLE t0 0) (TUPLE t1 1)))))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1)) @new_incremental_linking_candidate)
            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_incremental_linking_candidate "@t-recursive-relation;incremental_linking_candidate;binary/pe/pe_binaries.dl [184:7-184:36];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_incremental_linking_candidate))
 ) (STMTS      (TIMER_ON @new_incremental_linking_candidate "@c-recursive-relation;incremental_linking_candidate;binary/pe/pe_binaries.dl [184:7-184:36];"
(STMTS (QUERY
       (FOR_IN t0 @new_incremental_linking_candidate         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) incremental_linking_candidate)
)
      )
       (SWAP @delta_incremental_linking_candidate @new_incremental_linking_candidate)
       (CLEAR @new_incremental_linking_candidate)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_incremental_linking_candidate)
     (CLEAR @new_incremental_linking_candidate)
 ) )  )  )  )
  (SUBROUTINE indirect_call
(STMTS     (TIMER_ON indirect_call "@t-nonrecursive-relation;indirect_call;/usr/local/src/ddisasm/src/datalog/main.dl [656:7-656:20];"
(STMTS      (DEBUG 
 "indirect_call(EA) :- \n   arch.call(EA,TargetOpIndex),\n   instruction_get_op(EA,TargetOpIndex,TargetOp),\n   op_indirect(TargetOp,_,_,_,_,_,_),\n   !arch.return(EA).\nin file main.dl [658:1-662:22]" 
      (TIMER_ON indirect_call "@t-nonrecursive-rule;indirect_call;/usr/local/src/ddisasm/src/datalog/main.dl [658:1-662:22];indirect_call(EA) :- \\n   arch.call(EA,TargetOpIndex),\\n   instruction_get_op(EA,TargetOpIndex,TargetOp),\\n   op_indirect(TargetOp,_,_,_,_,_,_),\\n   !arch.return(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY arch.call))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 arch.call           (IF (NOT (EXISTS arch.return ((TUPLE t0 0))))
           (INDEXED_IF_EXISTS t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1))) (EXISTS op_indirect ((TUPLE t1 2) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
            (INSERT ((TUPLE t0 0)) indirect_call)
)          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE indirect_jump
(STMTS     (TIMER_ON indirect_jump "@t-nonrecursive-relation;indirect_jump;/usr/local/src/ddisasm/src/datalog/main.dl [588:7-588:20];"
(STMTS      (DEBUG 
 "indirect_jump(EA) :- \n   arch.jump(EA),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.jump_operation_op_index(Operation,TargetOpIndex),\n   instruction_get_op(EA,TargetOpIndex,TargetOp),\n   op_indirect(TargetOp,_,_,_,_,_,_).\nin file main.dl [590:1-595:40]" 
      (TIMER_ON indirect_jump "@t-nonrecursive-rule;indirect_jump;/usr/local/src/ddisasm/src/datalog/main.dl [590:1-595:40];indirect_jump(EA) :- \\n   arch.jump(EA),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.jump_operation_op_index(Operation,TargetOpIndex),\\n   instruction_get_op(EA,TargetOpIndex,TargetOp),\\n   op_indirect(TargetOp,_,_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY arch.jump_operation_op_index))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 arch.jump           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 arch.jump_operation_op_index (INDEX  (= (TUPLE t2 0) (TUPLE t1 3)))
            (INDEXED_IF_EXISTS t3 instruction_get_op (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 1) (TUPLE t2 1))) (EXISTS op_indirect ((TUPLE t3 2) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t0 0)) indirect_jump)
))))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE inferred_main_dispatch
(STMTS (STMTS     (TIMER_ON inferred_main_dispatch "@t-nonrecursive-relation;inferred_main_dispatch;binary/elf/symbolization.dl [158:7-158:29];"
(STMTS      (DEBUG 
 "inferred_main_dispatch(z) :- \n   binary_format(\"ELF\"),\n   !binary_type(\"REL\"),\n   !function_symbol(_,\"main\"),\n   __agg_single2(z).\nin file symbolization.dl [161:1-169:7]" 
      (TIMER_ON inferred_main_dispatch "@t-nonrecursive-rule;inferred_main_dispatch;binary/elf/symbolization.dl [161:1-169:7];inferred_main_dispatch(z) :- \\n   binary_format(\\\"ELF\\\"),\\n   !binary_type(\\\"REL\\\"),\\n   !function_symbol(_,\\\"main\\\"),\\n   __agg_single2(z).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY __agg_single2))) (NOT (EXISTS binary_type ((STRING "REL"))))) (EXISTS binary_format ((STRING "ELF")))) (NOT (EXISTS function_symbol (UNDEF (STRING "main")))))
         (FOR_IN t0 __agg_single2           (INSERT ((TUPLE t0 0)) inferred_main_dispatch)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR __agg_single2)
 ) )  )
  (SUBROUTINE inferred_main_function
(STMTS (STMTS     (TIMER_ON inferred_main_function "@t-nonrecursive-relation;inferred_main_function;binary/elf/symbolization.dl [212:7-212:29];"
(STMTS      (DEBUG 
 "inferred_main_function(Main) :- \n   inferred_main_in_reg(EA,Reg),\n   instruction_get_op(EA,_,Op),\n   op_indirect_contains_reg(Op,Reg),\n   symbolic_operand(EA,_,Dest,\"data\"),\n   address_in_data(Dest,Main).\nin file symbolization.dl [221:1-226:32]" 
      (TIMER_ON inferred_main_function "@t-nonrecursive-rule;inferred_main_function;binary/elf/symbolization.dl [221:1-226:32];inferred_main_function(Main) :- \\n   inferred_main_in_reg(EA,Reg),\\n   instruction_get_op(EA,_,Op),\\n   op_indirect_contains_reg(Op,Reg),\\n   symbolic_operand(EA,_,Dest,\\\"data\\\"),\\n   address_in_data(Dest,Main).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY address_in_data)) (NOT (ISEMPTY inferred_main_in_reg))) (NOT (ISEMPTY op_indirect_contains_reg))) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 inferred_main_in_reg           (INDEXED_IF_EXISTS t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS op_indirect_contains_reg ((TUPLE t1 2) (TUPLE t0 1)))
           (FOR t2 symbolic_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 3) (STRING "data")))
            (FOR t3 address_in_data (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)))
             (INSERT ((TUPLE t3 1)) inferred_main_function)
))))
        )       )
      )
     )
      (DEBUG 
 "inferred_main_function(as(Offset, address)) :- \n   inferred_main_in_reg(Main_load,Reg),\n   reg_def_use.def_used(EA_def,Reg,Main_load,_),\n   value_reg(EA_def,Reg,_,\"NONE\",_,Offset,_),\n   code_in_block( _tmp_152,_),\n    _tmp_152 = as(Offset, address).\nin file symbolization.dl [214:1-219:25]" 
      (TIMER_ON inferred_main_function "@t-nonrecursive-rule;inferred_main_function;binary/elf/symbolization.dl [214:1-219:25];inferred_main_function(as(Offset, address)) :- \\n   inferred_main_in_reg(Main_load,Reg),\\n   reg_def_use.def_used(EA_def,Reg,Main_load,_),\\n   value_reg(EA_def,Reg,_,\\\"NONE\\\",_,Offset,_),\\n   code_in_block( _tmp_152,_),\\n    _tmp_152 = as(Offset, address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY inferred_main_in_reg)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 inferred_main_in_reg           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR t2 value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 3) (STRING "NONE")))
            (IF (EXISTS code_in_block ((TUPLE t2 5) UNDEF))
             (INSERT ((TUPLE t2 5)) inferred_main_function)
            ))))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR inferred_main_in_reg)
     (CLEAR op_indirect_contains_reg)
 ) )  )
  (SUBROUTINE inferred_main_in_reg
(STMTS (STMTS     (TIMER_ON inferred_main_in_reg "@t-nonrecursive-relation;inferred_main_in_reg;binary/elf/symbolization.dl [188:7-188:27];"
(STMTS      (DEBUG 
 "inferred_main_in_reg(EA,Reg) :- \n   inferred_main_dispatch(EA),\n   arch.integer_reg_param(Reg,1).\nin file symbolization.dl [191:1-194:35]" 
      (TIMER_ON inferred_main_in_reg "@t-nonrecursive-rule;inferred_main_in_reg;binary/elf/symbolization.dl [191:1-194:35];inferred_main_in_reg(EA,Reg) :- \\n   inferred_main_dispatch(EA),\\n   arch.integer_reg_param(Reg,1).;"
(QUERY
        (IF (AND (NOT (ISEMPTY inferred_main_dispatch)) (NOT (ISEMPTY arch.integer_reg_param)))
         (FOR_IN t0 inferred_main_dispatch           (FOR t1 arch.integer_reg_param (INDEX  (= (TUPLE t1 1) (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 0)) inferred_main_in_reg)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.integer_reg_param)
     (CLEAR inferred_main_dispatch)
 ) )  )
  (SUBROUTINE inferred_special_symbol
(STMTS (STMTS     (TIMER_ON inferred_special_symbol "@t-nonrecursive-relation;inferred_special_symbol;symbols.dl [58:7-58:30];"
(STMTS      (DEBUG 
 "inferred_special_symbol(EA,\"_start\",\"GLOBAL\",\"HIDDEN\",\"FUNC\",\"Beg\") :- \n   !binary_type(\"REL\"),\n   !symbol(EA,_,\"FUNC\",_,_,_,_,_,_),\n   start_function(EA).\nin file symbolization.dl [236:1-239:24]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/elf/symbolization.dl [236:1-239:24];inferred_special_symbol(EA,\\\"_start\\\",\\\"GLOBAL\\\",\\\"HIDDEN\\\",\\\"FUNC\\\",\\\"Beg\\\") :- \\n   !binary_type(\\\"REL\\\"),\\n   !symbol(EA,_,\\\"FUNC\\\",_,_,_,_,_,_),\\n   start_function(EA).;"
(QUERY
        (IF (AND (NOT (ISEMPTY start_function)) (NOT (EXISTS binary_type ((STRING "REL")))))
         (FOR_IN t0 start_function           (IF (NOT (EXISTS symbol ((TUPLE t0 0) UNDEF (STRING "FUNC") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
           (INSERT ((TUPLE t0 0) (STRING "_start") (STRING "GLOBAL") (STRING "HIDDEN") (STRING "FUNC") (STRING "Beg")) inferred_special_symbol)
          ))
        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(EA,\"__do_global_dtors_aux\",\"LOCAL\",\"DEFAULT\",\"FUNC\",\"Beg\") :- \n   function_symbol(EA,\"__do_global_dtors_aux\").\nin file symbolization.dl [241:1-242:49]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/elf/symbolization.dl [241:1-242:49];inferred_special_symbol(EA,\\\"__do_global_dtors_aux\\\",\\\"LOCAL\\\",\\\"DEFAULT\\\",\\\"FUNC\\\",\\\"Beg\\\") :- \\n   function_symbol(EA,\\\"__do_global_dtors_aux\\\").;"
(QUERY
        (IF (NOT (ISEMPTY function_symbol))
         (FOR t0 function_symbol (INDEX  (= (TUPLE t0 1) (STRING "__do_global_dtors_aux")))
          (INSERT ((TUPLE t0 0) (STRING "__do_global_dtors_aux") (STRING "LOCAL") (STRING "DEFAULT") (STRING "FUNC") (STRING "Beg")) inferred_special_symbol)
)        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(EA,\"__do_global_dtors_aux\",\"LOCAL\",\"DEFAULT\",\"FUNC\",\"Beg\") :- \n   !function_symbol(EA,\"__do_global_dtors_aux\"),\n   function_inference.function_entry(EA),\n   address_in_data(FiniArray,EA),\n   loaded_section(Beg,End,\".fini_array\"),\n   FiniArray >= Beg,\n   FiniArray < End,\n   code_in_refined_block(EA_cmp,EA),\n   instruction(EA_cmp,_,_,\"CMP\",Op1,_,0,0,_,_),\n   op_immediate(Op1,0),\n   pc_relative_operand(EA_cmp,2,DataRef),\n   bss_section(SectionName),\n   loaded_section(BegData,EndData,SectionName),\n   DataRef >= BegData,\n   DataRef <= EndData.\nin file symbolization.dl [244:1-260:24]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/elf/symbolization.dl [244:1-260:24];inferred_special_symbol(EA,\\\"__do_global_dtors_aux\\\",\\\"LOCAL\\\",\\\"DEFAULT\\\",\\\"FUNC\\\",\\\"Beg\\\") :- \\n   !function_symbol(EA,\\\"__do_global_dtors_aux\\\"),\\n   function_inference.function_entry(EA),\\n   address_in_data(FiniArray,EA),\\n   loaded_section(Beg,End,\\\".fini_array\\\"),\\n   FiniArray >= Beg,\\n   FiniArray < End,\\n   code_in_refined_block(EA_cmp,EA),\\n   instruction(EA_cmp,_,_,\\\"CMP\\\",Op1,_,0,0,_,_),\\n   op_immediate(Op1,0),\\n   pc_relative_operand(EA_cmp,2,DataRef),\\n   bss_section(SectionName),\\n   loaded_section(BegData,EndData,SectionName),\\n   DataRef >= BegData,\\n   DataRef <= EndData.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY address_in_data))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY code_in_refined_block))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY function_inference.function_entry))) (NOT (ISEMPTY bss_section)))
         (FOR_IN t0 function_inference.function_entry           (IF (NOT (EXISTS function_symbol ((TUPLE t0 0) (STRING "__do_global_dtors_aux"))))
           (FOR t1 address_in_data (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (STRING ".fini_array"))) (AND (AND (CONSTRAINT != (TUPLE t1 0)  (TUPLE t2 1)) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t2 1))) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t2 0)))
             (FOR t3 code_in_refined_block (INDEX  (= (TUPLE t3 1) (TUPLE t0 0)))
              (INDEXED_IF_EXISTS t4 instruction (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)) (= (TUPLE t4 3) (STRING "CMP")) (= (TUPLE t4 6) (UNSIGNED 0)) (= (TUPLE t4 7) (UNSIGNED 0))) (EXISTS op_immediate ((TUPLE t4 4) (NUMBER 0)))
               (FOR t5 pc_relative_operand (INDEX  (= (TUPLE t5 0) (TUPLE t3 0)) (= (TUPLE t5 1) (UNSIGNED 2)))
                (FOR_IN t6 bss_section                  (INDEXED_IF_EXISTS t7 loaded_section (INDEX  (= (TUPLE t7 2) (TUPLE t6 0))) (AND (CONSTRAINT <= (TUPLE t5 2)  (TUPLE t7 1)) (CONSTRAINT >= (TUPLE t5 2)  (TUPLE t7 0)))
                  (INSERT ((TUPLE t0 0) (STRING "__do_global_dtors_aux") (STRING "LOCAL") (STRING "DEFAULT") (STRING "FUNC") (STRING "Beg")) inferred_special_symbol)
))
)))))          ))
        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(EA,\"_DYNAMIC\",\"LOCAL\",\"DEFAULT\",\"NONE\",\"Beg\") :- \n   binary_format(\"ELF\"),\n   !symbol(EA,_,_,_,_,_,_,_,\"_DYNAMIC\"),\n   loaded_section(EA,_,\".dynamic\").\nin file symbolization.dl [262:1-265:37]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/elf/symbolization.dl [262:1-265:37];inferred_special_symbol(EA,\\\"_DYNAMIC\\\",\\\"LOCAL\\\",\\\"DEFAULT\\\",\\\"NONE\\\",\\\"Beg\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   !symbol(EA,_,_,_,_,_,_,_,\\\"_DYNAMIC\\\"),\\n   loaded_section(EA,_,\\\".dynamic\\\").;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY loaded_section))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 loaded_section (INDEX  (= (TUPLE t0 2) (STRING ".dynamic")))
          (IF (NOT (EXISTS symbol ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (STRING "_DYNAMIC"))))
           (INSERT ((TUPLE t0 0) (STRING "_DYNAMIC") (STRING "LOCAL") (STRING "DEFAULT") (STRING "NONE") (STRING "Beg")) inferred_special_symbol)
          ))        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(EA,\"_GLOBAL_OFFSET_TABLE_\",\"LOCAL\",\"DEFAULT\",\"NONE\",\"Beg\") :- \n   !symbol(_,_,_,_,_,_,_,_,\"_GLOBAL_OFFSET_TABLE_\"),\n   got_reference_pointer(EA).\nin file symbolization.dl [267:1-269:31]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/elf/symbolization.dl [267:1-269:31];inferred_special_symbol(EA,\\\"_GLOBAL_OFFSET_TABLE_\\\",\\\"LOCAL\\\",\\\"DEFAULT\\\",\\\"NONE\\\",\\\"Beg\\\") :- \\n   !symbol(_,_,_,_,_,_,_,_,\\\"_GLOBAL_OFFSET_TABLE_\\\"),\\n   got_reference_pointer(EA).;"
(QUERY
        (IF (AND (NOT (ISEMPTY got_reference_pointer)) (NOT (EXISTS symbol (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (STRING "_GLOBAL_OFFSET_TABLE_")))))
         (FOR_IN t0 got_reference_pointer           (INSERT ((TUPLE t0 0) (STRING "_GLOBAL_OFFSET_TABLE_") (STRING "LOCAL") (STRING "DEFAULT") (STRING "NONE") (STRING "Beg")) inferred_special_symbol)
)
        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(Beg,\"__rela_iplt_start\",\"GLOBAL\",\"DEFAULT\",\"NONE\",\"Beg\") :- \n   loaded_section(Beg,_,\".rela.plt\"),\n   !symbol(_,_,_,_,_,_,_,_,\"__rela_iplt_start\").\nin file symbolization.dl [462:1-464:50]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/elf/symbolization.dl [462:1-464:50];inferred_special_symbol(Beg,\\\"__rela_iplt_start\\\",\\\"GLOBAL\\\",\\\"DEFAULT\\\",\\\"NONE\\\",\\\"Beg\\\") :- \\n   loaded_section(Beg,_,\\\".rela.plt\\\"),\\n   !symbol(_,_,_,_,_,_,_,_,\\\"__rela_iplt_start\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY loaded_section)) (NOT (EXISTS symbol (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (STRING "__rela_iplt_start")))))
         (FOR t0 loaded_section (INDEX  (= (TUPLE t0 2) (STRING ".rela.plt")))
          (INSERT ((TUPLE t0 0) (STRING "__rela_iplt_start") (STRING "GLOBAL") (STRING "DEFAULT") (STRING "NONE") (STRING "Beg")) inferred_special_symbol)
)        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(End,\"__rela_iplt_end\",\"GLOBAL\",\"DEFAULT\",\"NONE\",\"End\") :- \n   loaded_section(_,End,\".rela.plt\"),\n   !symbol(_,_,_,_,_,_,_,_,\"__rela_iplt_end\").\nin file symbolization.dl [466:1-468:48]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/elf/symbolization.dl [466:1-468:48];inferred_special_symbol(End,\\\"__rela_iplt_end\\\",\\\"GLOBAL\\\",\\\"DEFAULT\\\",\\\"NONE\\\",\\\"End\\\") :- \\n   loaded_section(_,End,\\\".rela.plt\\\"),\\n   !symbol(_,_,_,_,_,_,_,_,\\\"__rela_iplt_end\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY loaded_section)) (NOT (EXISTS symbol (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (STRING "__rela_iplt_end")))))
         (FOR t0 loaded_section (INDEX  (= (TUPLE t0 2) (STRING ".rela.plt")))
          (INSERT ((TUPLE t0 1) (STRING "__rela_iplt_end") (STRING "GLOBAL") (STRING "DEFAULT") (STRING "NONE") (STRING "End")) inferred_special_symbol)
)        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(ImageBase,\"__ImageBase\",\"LOCAL\",\"DEFAULT\",\"NONE\",\"Beg\") :- \n   binary_format(\"PE\"),\n   base_address(ImageBase).\nin file symbolization.dl [149:1-151:29]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/pe/symbolization.dl [149:1-151:29];inferred_special_symbol(ImageBase,\\\"__ImageBase\\\",\\\"LOCAL\\\",\\\"DEFAULT\\\",\\\"NONE\\\",\\\"Beg\\\") :- \\n   binary_format(\\\"PE\\\"),\\n   base_address(ImageBase).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY base_address))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 base_address           (INSERT ((TUPLE t0 0) (STRING "__ImageBase") (STRING "LOCAL") (STRING "DEFAULT") (STRING "NONE") (STRING "Beg")) inferred_special_symbol)
)
        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(Start,\"__EntryPoint\",\"GLOBAL\",\"DEFAULT\",\"FUNC\",\"Beg\") :- \n   binary_format(\"PE\"),\n   entry_point(Start).\nin file symbolization.dl [153:1-155:24]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/pe/symbolization.dl [153:1-155:24];inferred_special_symbol(Start,\\\"__EntryPoint\\\",\\\"GLOBAL\\\",\\\"DEFAULT\\\",\\\"FUNC\\\",\\\"Beg\\\") :- \\n   binary_format(\\\"PE\\\"),\\n   entry_point(Start).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY entry_point))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 entry_point           (INSERT ((TUPLE t0 0) (STRING "__EntryPoint") (STRING "GLOBAL") (STRING "DEFAULT") (STRING "FUNC") (STRING "Beg")) inferred_special_symbol)
)
        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(EA,\"main\",\"PUBLIC\",\"DEFAULT\",\"NONE\",\"Beg\") :- \n   binary_format(\"PE\"),\n   main_function(EA).\nin file symbolization.dl [238:1-240:23]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/pe/symbolization.dl [238:1-240:23];inferred_special_symbol(EA,\\\"main\\\",\\\"PUBLIC\\\",\\\"DEFAULT\\\",\\\"NONE\\\",\\\"Beg\\\") :- \\n   binary_format(\\\"PE\\\"),\\n   main_function(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY main_function))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 main_function           (INSERT ((TUPLE t0 0) (STRING "main") (STRING "PUBLIC") (STRING "DEFAULT") (STRING "NONE") (STRING "Beg")) inferred_special_symbol)
)
        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(EA,\"main\",\"GLOBAL\",\"DEFAULT\",\"FUNC\",\"Beg\") :- \n   binary_format(\"ELF\"),\n   main_function(EA).\nin file symbols.dl [60:1-62:23]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;symbols.dl [60:1-62:23];inferred_special_symbol(EA,\\\"main\\\",\\\"GLOBAL\\\",\\\"DEFAULT\\\",\\\"FUNC\\\",\\\"Beg\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   main_function(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY main_function))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 main_function           (INSERT ((TUPLE t0 0) (STRING "main") (STRING "GLOBAL") (STRING "DEFAULT") (STRING "FUNC") (STRING "Beg")) inferred_special_symbol)
)
        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(as(Dest, address),cat(\"FUN_\",@to_string_hex(as(Dest, unsigned))),\"GLOBAL\",\"DEFAULT\",\"GNU_IFUNC\",\"Beg\") :- \n   relocation(_,\"IRELATIVE\",\"\",Dest,_,_,_),\n   !symbol(as(Dest, address),_,\"GNU_IFUNC\",_,_,_,_,_,_).\nin file symbolization.dl [403:1-410:35]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/elf/symbolization.dl [403:1-410:35];inferred_special_symbol(as(Dest, address),cat(\\\"FUN_\\\",@to_string_hex(as(Dest, unsigned))),\\\"GLOBAL\\\",\\\"DEFAULT\\\",\\\"GNU_IFUNC\\\",\\\"Beg\\\") :- \\n   relocation(_,\\\"IRELATIVE\\\",\\\"\\\",Dest,_,_,_),\\n   !symbol(as(Dest, address),_,\\\"GNU_IFUNC\\\",_,_,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "IRELATIVE")) (= (TUPLE t0 2) (STRING "")))
          (IF (NOT (EXISTS symbol ((TUPLE t0 3) UNDEF (STRING "GNU_IFUNC") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
           (INSERT ((TUPLE t0 3) (INTRINSIC cat (STRING "FUN_") (USER_FUNCTOR "to_string_hex_[TypeAttribute::Unsigned]_TypeAttribute::Symbol"  TRUE  ((TUPLE t0 3)))) (STRING "GLOBAL") (STRING "DEFAULT") (STRING "GNU_IFUNC") (STRING "Beg")) inferred_special_symbol)
          ))        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(as(Dest, address),cat(cat(\"FUN_\",@to_string_hex(as(Dest, unsigned))),\"_IFUNC\"),\"LOCAL\",\"DEFAULT\",\"FUNC\",\"Beg\") :- \n   relocation(_,\"IRELATIVE\",\"\",Dest,_,_,_),\n   !symbol(as(Dest, address),_,\"GNU_IFUNC\",_,_,_,_,_,_).\nin file symbolization.dl [403:1-410:35]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/elf/symbolization.dl [403:1-410:35];inferred_special_symbol(as(Dest, address),cat(cat(\\\"FUN_\\\",@to_string_hex(as(Dest, unsigned))),\\\"_IFUNC\\\"),\\\"LOCAL\\\",\\\"DEFAULT\\\",\\\"FUNC\\\",\\\"Beg\\\") :- \\n   relocation(_,\\\"IRELATIVE\\\",\\\"\\\",Dest,_,_,_),\\n   !symbol(as(Dest, address),_,\\\"GNU_IFUNC\\\",_,_,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "IRELATIVE")) (= (TUPLE t0 2) (STRING "")))
          (IF (NOT (EXISTS symbol ((TUPLE t0 3) UNDEF (STRING "GNU_IFUNC") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
           (INSERT ((TUPLE t0 3) (INTRINSIC cat (INTRINSIC cat (STRING "FUN_") (USER_FUNCTOR "to_string_hex_[TypeAttribute::Unsigned]_TypeAttribute::Symbol"  TRUE  ((TUPLE t0 3)))) (STRING "_IFUNC")) (STRING "LOCAL") (STRING "DEFAULT") (STRING "FUNC") (STRING "Beg")) inferred_special_symbol)
          ))        )       )
      )
     )
      (DEBUG 
 "inferred_special_symbol(0x7FFE0000,\"KUSER_SHARED_DATA\",\"LOCAL\",\"DEFAULT\",\"NONE\",\"Beg\") :- \n   +disconnected1(),\n   binary_format(\"PE\").\nin file symbolization.dl [27:1-32:40]" 
      (TIMER_ON inferred_special_symbol "@t-nonrecursive-rule;inferred_special_symbol;binary/pe/symbolization.dl [27:1-32:40];inferred_special_symbol(0x7FFE0000,\\\"KUSER_SHARED_DATA\\\",\\\"LOCAL\\\",\\\"DEFAULT\\\",\\\"NONE\\\",\\\"Beg\\\") :- \\n   +disconnected1(),\\n   binary_format(\\\"PE\\\").;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY +disconnected1)) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (INSERT ((UNSIGNED 2147352576) (STRING "KUSER_SHARED_DATA") (STRING "LOCAL") (STRING "DEFAULT") (STRING "NONE") (STRING "Beg")) inferred_special_symbol)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR +disconnected1)
     (CLEAR entry_point)
     (CLEAR got_reference_pointer)
     (CLEAR main_function)
     (CLEAR op_immediate)
     (CLEAR start_function)
 ) )  )
  (SUBROUTINE inferred_symbol
(STMTS (STMTS (STMTS     (TIMER_ON inferred_symbol "@t-nonrecursive-relation;inferred_symbol;symbols.dl [50:7-50:22];"
(STMTS      (DEBUG 
 "inferred_symbol(EA,\"_TLS_MODULE_BASE_\",\"LOCAL\",\"DEFAULT\",\"NONE\",\"Beg\") :- \n   tls_segment(EA,_,_).\nin file tls.dl [644:1-645:25]" 
      (TIMER_ON inferred_symbol "@t-nonrecursive-rule;inferred_symbol;tls.dl [644:1-645:25];inferred_symbol(EA,\\\"_TLS_MODULE_BASE_\\\",\\\"LOCAL\\\",\\\"DEFAULT\\\",\\\"NONE\\\",\\\"Beg\\\") :- \\n   tls_segment(EA,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY tls_segment))
         (FOR_IN t0 tls_segment           (INSERT ((TUPLE t0 0) (STRING "_TLS_MODULE_BASE_") (STRING "LOCAL") (STRING "DEFAULT") (STRING "NONE") (STRING "Beg")) inferred_symbol)
)
        )       )
      )
     )
      (DEBUG 
 "inferred_symbol(EA,SymbolName,Scope,Visibility,Type,Pos) :- \n   inferred_special_symbol(EA,SymbolName,Scope,Visibility,Type,Pos).\nin file symbols.dl [64:1-66:70]" 
      (TIMER_ON inferred_symbol "@t-nonrecursive-rule;inferred_symbol;symbols.dl [64:1-66:70];inferred_symbol(EA,SymbolName,Scope,Visibility,Type,Pos) :- \\n   inferred_special_symbol(EA,SymbolName,Scope,Visibility,Type,Pos).;"
(QUERY
        (IF (NOT (ISEMPTY inferred_special_symbol))
         (FOR_IN t0 inferred_special_symbol           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) inferred_symbol)
)
        )       )
      )
     )
      (DEBUG 
 "inferred_symbol(EA,cat(\".L_\",@to_string_hex(EA)),\"LOCAL\",\"DEFAULT\",\"NONE\",\"Beg\") :- \n   labeled_ea(EA),\n   !symbol_score(EA,_,_,\"Beg\",_),\n   !best_func_symbol(EA,_).\nin file symbols.dl [233:1-238:48]" 
      (TIMER_ON inferred_symbol "@t-nonrecursive-rule;inferred_symbol;symbols.dl [233:1-238:48];inferred_symbol(EA,cat(\\\".L_\\\",@to_string_hex(EA)),\\\"LOCAL\\\",\\\"DEFAULT\\\",\\\"NONE\\\",\\\"Beg\\\") :- \\n   labeled_ea(EA),\\n   !symbol_score(EA,_,_,\\\"Beg\\\",_),\\n   !best_func_symbol(EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY labeled_ea))
         (FOR_IN t0 labeled_ea           (IF (AND (NOT (EXISTS best_func_symbol ((TUPLE t0 0) UNDEF))) (NOT (EXISTS symbol_score ((TUPLE t0 0) UNDEF UNDEF (STRING "Beg") UNDEF))))
           (INSERT ((TUPLE t0 0) (INTRINSIC cat (STRING ".L_") (USER_FUNCTOR "to_string_hex_[TypeAttribute::Unsigned]_TypeAttribute::Symbol"  TRUE  ((TUPLE t0 0)))) (STRING "LOCAL") (STRING "DEFAULT") (STRING "NONE") (STRING "Beg")) inferred_symbol)
          ))
        )       )
      )
     )
      (DEBUG 
 "inferred_symbol(EA,cat(cat(\".L_\",@to_string_hex(EA)),\"_END\"),\"LOCAL\",\"DEFAULT\",\"NONE\",\"End\") :- \n   labeled_ea(EA),\n   boundary_sym_expr(_,EA),\n   !symbol_score(EA,_,_,\"End\",_).\nin file symbols.dl [240:1-245:60]" 
      (TIMER_ON inferred_symbol "@t-nonrecursive-rule;inferred_symbol;symbols.dl [240:1-245:60];inferred_symbol(EA,cat(cat(\\\".L_\\\",@to_string_hex(EA)),\\\"_END\\\"),\\\"LOCAL\\\",\\\"DEFAULT\\\",\\\"NONE\\\",\\\"End\\\") :- \\n   labeled_ea(EA),\\n   boundary_sym_expr(_,EA),\\n   !symbol_score(EA,_,_,\\\"End\\\",_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY labeled_ea)) (NOT (ISEMPTY boundary_sym_expr)))
         (FOR_IN t0 labeled_ea           (IF (AND (EXISTS boundary_sym_expr (UNDEF (TUPLE t0 0))) (NOT (EXISTS symbol_score ((TUPLE t0 0) UNDEF UNDEF (STRING "End") UNDEF))))
           (INSERT ((TUPLE t0 0) (INTRINSIC cat (INTRINSIC cat (STRING ".L_") (USER_FUNCTOR "to_string_hex_[TypeAttribute::Unsigned]_TypeAttribute::Symbol"  TRUE  ((TUPLE t0 0)))) (STRING "_END")) (STRING "LOCAL") (STRING "DEFAULT") (STRING "NONE") (STRING "End")) inferred_symbol)
          ))
        )       )
      )
     )
      (DEBUG 
 "inferred_symbol(EA,cat(\"FUN_\",@to_string_hex(EA)),\"LOCAL\",\"DEFAULT\",\"FUNC\",\"Beg\") :- \n   function_inference.function_entry(EA),\n   !symbol_score(EA,_,\"FUNC\",\"Beg\",_).\nin file symbols.dl [209:1-217:7]" 
      (TIMER_ON inferred_symbol "@t-nonrecursive-rule;inferred_symbol;symbols.dl [209:1-217:7];inferred_symbol(EA,cat(\\\"FUN_\\\",@to_string_hex(EA)),\\\"LOCAL\\\",\\\"DEFAULT\\\",\\\"FUNC\\\",\\\"Beg\\\") :- \\n   function_inference.function_entry(EA),\\n   !symbol_score(EA,_,\\\"FUNC\\\",\\\"Beg\\\",_).;"
(QUERY
        (IF (NOT (ISEMPTY function_inference.function_entry))
         (FOR_IN t0 function_inference.function_entry           (IF (NOT (EXISTS symbol_score ((TUPLE t0 0) UNDEF (STRING "FUNC") (STRING "Beg") UNDEF)))
           (INSERT ((TUPLE t0 0) (INTRINSIC cat (STRING "FUN_") (USER_FUNCTOR "to_string_hex_[TypeAttribute::Unsigned]_TypeAttribute::Symbol"  TRUE  ((TUPLE t0 0)))) (STRING "LOCAL") (STRING "DEFAULT") (STRING "FUNC") (STRING "Beg")) inferred_symbol)
          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON inferred_symbol "@t-relation-savetime;inferred_symbol;symbols.dl [50:7-50:22];savetime;"
     (IO inferred_symbol ((= IO "file") (= attributeNames "EA\tSymbolName\tScope\tVisibility\tType\tPos") (= auxArity "0") (= name "inferred_symbol") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"EA\", \"SymbolName\", \"Scope\", \"Visibility\", \"Type\", \"Pos\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"u:address\", \"s:symbol\", \"s:symbol\", \"s:symbol\", \"s:symbol\", \"s:symbol_position\"]}}")))
    )
 ) ) (STMTS     (CLEAR best_func_symbol)
     (CLEAR boundary_sym_expr)
     (CLEAR function_inference.function_entry)
     (CLEAR inferred_special_symbol)
     (CLEAR symbol_score)
     (CLEAR tls_segment)
 ) )  )
  (SUBROUTINE initialized_data_segment
(STMTS (STMTS (STMTS     (TIMER_ON initialized_data_segment "@t-nonrecursive-relation;initialized_data_segment;/usr/local/src/ddisasm/src/datalog/main.dl [857:7-857:31];"
(STMTS      (DEBUG 
 "initialized_data_segment(Begin,End) :- \n   non_zero_data_section(Section),\n   loaded_section(Begin,End,Section).\nin file main.dl [860:1-862:39]" 
      (TIMER_ON initialized_data_segment "@t-nonrecursive-rule;initialized_data_segment;/usr/local/src/ddisasm/src/datalog/main.dl [860:1-862:39];initialized_data_segment(Begin,End) :- \\n   non_zero_data_section(Section),\\n   loaded_section(Begin,End,Section).;"
(QUERY
        (IF (AND (NOT (ISEMPTY non_zero_data_section)) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 non_zero_data_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 0) (TUPLE t1 1)) initialized_data_segment)
))
        )       )
      )
     )
      (DEBUG 
 "initialized_data_segment(Begin,End) :- \n   data_in_code(Begin,End).\nin file main.dl [864:1-865:29]" 
      (TIMER_ON initialized_data_segment "@t-nonrecursive-rule;initialized_data_segment;/usr/local/src/ddisasm/src/datalog/main.dl [864:1-865:29];initialized_data_segment(Begin,End) :- \\n   data_in_code(Begin,End).;"
(QUERY
        (IF (NOT (ISEMPTY data_in_code))
         (FOR_IN t0 data_in_code           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) initialized_data_segment)
)
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON initialized_data_segment "@t-relation-savetime;initialized_data_segment;/usr/local/src/ddisasm/src/datalog/main.dl [857:7-857:31];savetime;"
     (IO initialized_data_segment ((= IO "file") (= attributeNames "Begin\tEnd") (= auxArity "0") (= name "initialized_data_segment") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"Begin\", \"End\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"u:address\"]}}")))
    )
 ) ) (STMTS     (CLEAR non_zero_data_section)
 ) )  )
  (SUBROUTINE instruction
(STMTS (STMTS (STMTS     (TIMER_ON instruction "@t-relation-loadtime;instruction;/usr/local/src/ddisasm/src/datalog/main.dl [216:7-216:18];loadtime;"
     (IO instruction ((= IO "file") (= attributeNames "ea\tsize\tprefix\topcode\top1\top2\top3\top4\timmOffset\tdisplacementOffset") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "instruction") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 10, \"params\": [\"ea\", \"size\", \"prefix\", \"opcode\", \"op1\", \"op2\", \"op3\", \"op4\", \"immOffset\", \"displacementOffset\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 10, \"types\": [\"u:address\", \"u:unsigned\", \"s:symbol\", \"s:symbol\", \"u:operand_code\", \"u:operand_code\", \"u:operand_code\", \"u:operand_code\", \"u:unsigned\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE instruction "@n-nonrecursive-relation;instruction;/usr/local/src/ddisasm/src/datalog/main.dl [216:7-216:18];")
 )   (STMTS     (TIMER_ON instruction "@t-relation-savetime;instruction;/usr/local/src/ddisasm/src/datalog/main.dl [216:7-216:18];savetime;"
     (IO instruction ((= IO "file") (= attributeNames "ea\tsize\tprefix\topcode\top1\top2\top3\top4\timmOffset\tdisplacementOffset") (= auxArity "0") (= name "instruction") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 10, \"params\": [\"ea\", \"size\", \"prefix\", \"opcode\", \"op1\", \"op2\", \"op3\", \"op4\", \"immOffset\", \"displacementOffset\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 10, \"types\": [\"u:address\", \"u:unsigned\", \"s:symbol\", \"s:symbol\", \"u:operand_code\", \"u:operand_code\", \"u:operand_code\", \"u:operand_code\", \"u:unsigned\", \"u:unsigned\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE instruction_displacement_offset
(STMTS     (TIMER_ON instruction_displacement_offset "@t-nonrecursive-relation;instruction_displacement_offset;/usr/local/src/ddisasm/src/datalog/main.dl [377:7-377:38];"
(STMTS      (DEBUG 
 "instruction_displacement_offset(EA,Index,DisplacementOffset,(ImmediateOffset-DisplacementOffset)) :- \n   instruction(EA,_,_,_,_,_,_,_,ImmediateOffset,DisplacementOffset),\n   instruction_get_op(EA,Index,Op),\n   op_indirect(Op,_,_,_,_,_,_),\n   ImmediateOffset > DisplacementOffset.\nin file main.dl [379:1-394:7]" 
      (TIMER_ON instruction_displacement_offset "@t-nonrecursive-rule;instruction_displacement_offset;/usr/local/src/ddisasm/src/datalog/main.dl [379:1-394:7];instruction_displacement_offset(EA,Index,DisplacementOffset,(ImmediateOffset-DisplacementOffset)) :- \\n   instruction(EA,_,_,_,_,_,_,_,ImmediateOffset,DisplacementOffset),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect(Op,_,_,_,_,_,_),\\n   ImmediateOffset > DisplacementOffset.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 instruction           (IF (CONSTRAINT > (TUPLE t0 8)  (TUPLE t0 9))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (EXISTS op_indirect ((TUPLE t1 2) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 9) (INTRINSIC - (TUPLE t0 8) (TUPLE t0 9))) instruction_displacement_offset)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "instruction_displacement_offset(EA,Index,DisplacementOffset,(Size-DisplacementOffset)) :- \n   instruction(EA,Size,_,_,_,_,_,_,ImmediateOffset,DisplacementOffset),\n   instruction_get_op(EA,Index,Op),\n   op_indirect(Op,_,_,_,_,_,_),\n   ImmediateOffset <= DisplacementOffset.\nin file main.dl [379:1-394:7]" 
      (TIMER_ON instruction_displacement_offset "@t-nonrecursive-rule;instruction_displacement_offset;/usr/local/src/ddisasm/src/datalog/main.dl [379:1-394:7];instruction_displacement_offset(EA,Index,DisplacementOffset,(Size-DisplacementOffset)) :- \\n   instruction(EA,Size,_,_,_,_,_,_,ImmediateOffset,DisplacementOffset),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect(Op,_,_,_,_,_,_),\\n   ImmediateOffset <= DisplacementOffset.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 instruction           (IF (CONSTRAINT <= (TUPLE t0 8)  (TUPLE t0 9))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (EXISTS op_indirect ((TUPLE t1 2) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 9) (INTRINSIC - (TUPLE t0 1) (TUPLE t0 9))) instruction_displacement_offset)
            ))          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE instruction_get_dest_op
(STMTS     (TIMER_ON instruction_get_dest_op "@t-nonrecursive-relation;instruction_get_dest_op;/usr/local/src/ddisasm/src/datalog/main.dl [440:7-440:30];"
(STMTS      (DEBUG 
 "instruction_get_dest_op(EA,Index,Op) :- \n   instruction_op_access(EA,Index,\"W\"),\n   instruction_get_op(EA,Index,Op).\nin file main.dl [442:1-445:37]" 
      (TIMER_ON instruction_get_dest_op "@t-nonrecursive-rule;instruction_get_dest_op;/usr/local/src/ddisasm/src/datalog/main.dl [442:1-445:37];instruction_get_dest_op(EA,Index,Op) :- \\n   instruction_op_access(EA,Index,\\\"W\\\"),\\n   instruction_get_op(EA,Index,Op).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction_op_access)) (NOT (ISEMPTY instruction_get_op)))
         (FOR t0 instruction_op_access (INDEX  (= (TUPLE t0 2) (STRING "W")))
          (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2)) instruction_get_dest_op)
))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE instruction_get_op
(STMTS     (TIMER_ON instruction_get_op "@t-nonrecursive-relation;instruction_get_op;/usr/local/src/ddisasm/src/datalog/main.dl [401:7-401:25];"
(STMTS      (DEBUG 
 "instruction_get_op(EA,1,Op1) :- \n   instruction(EA,_,_,_,Op1,_,_,_,_,_),\n   Op1 != 0.\nin file main.dl [403:1-421:7]" 
      (TIMER_ON instruction_get_op "@t-nonrecursive-rule;instruction_get_op;/usr/local/src/ddisasm/src/datalog/main.dl [403:1-421:7];instruction_get_op(EA,1,Op1) :- \\n   instruction(EA,_,_,_,Op1,_,_,_,_,_),\\n   Op1 != 0.;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR_IN t0 instruction           (IF (CONSTRAINT != (TUPLE t0 4)  (UNSIGNED 0))
           (INSERT ((TUPLE t0 0) (UNSIGNED 1) (TUPLE t0 4)) instruction_get_op)
          ))
        )       )
      )
     )
      (DEBUG 
 "instruction_get_op(EA,2,Op2) :- \n   instruction(EA,_,_,_,_,Op2,_,_,_,_),\n   Op2 != 0.\nin file main.dl [403:1-421:7]" 
      (TIMER_ON instruction_get_op "@t-nonrecursive-rule;instruction_get_op;/usr/local/src/ddisasm/src/datalog/main.dl [403:1-421:7];instruction_get_op(EA,2,Op2) :- \\n   instruction(EA,_,_,_,_,Op2,_,_,_,_),\\n   Op2 != 0.;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR_IN t0 instruction           (IF (CONSTRAINT != (TUPLE t0 5)  (UNSIGNED 0))
           (INSERT ((TUPLE t0 0) (UNSIGNED 2) (TUPLE t0 5)) instruction_get_op)
          ))
        )       )
      )
     )
      (DEBUG 
 "instruction_get_op(EA,3,Op3) :- \n   instruction(EA,_,_,_,_,_,Op3,_,_,_),\n   Op3 != 0.\nin file main.dl [403:1-421:7]" 
      (TIMER_ON instruction_get_op "@t-nonrecursive-rule;instruction_get_op;/usr/local/src/ddisasm/src/datalog/main.dl [403:1-421:7];instruction_get_op(EA,3,Op3) :- \\n   instruction(EA,_,_,_,_,_,Op3,_,_,_),\\n   Op3 != 0.;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR_IN t0 instruction           (IF (CONSTRAINT != (TUPLE t0 6)  (UNSIGNED 0))
           (INSERT ((TUPLE t0 0) (UNSIGNED 3) (TUPLE t0 6)) instruction_get_op)
          ))
        )       )
      )
     )
      (DEBUG 
 "instruction_get_op(EA,4,Op4) :- \n   instruction(EA,_,_,_,_,_,_,Op4,_,_),\n   Op4 != 0.\nin file main.dl [403:1-421:7]" 
      (TIMER_ON instruction_get_op "@t-nonrecursive-rule;instruction_get_op;/usr/local/src/ddisasm/src/datalog/main.dl [403:1-421:7];instruction_get_op(EA,4,Op4) :- \\n   instruction(EA,_,_,_,_,_,_,Op4,_,_),\\n   Op4 != 0.;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR_IN t0 instruction           (IF (CONSTRAINT != (TUPLE t0 7)  (UNSIGNED 0))
           (INSERT ((TUPLE t0 0) (UNSIGNED 4) (TUPLE t0 7)) instruction_get_op)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE instruction_get_src_op
(STMTS (STMTS     (TIMER_ON instruction_get_src_op "@t-nonrecursive-relation;instruction_get_src_op;/usr/local/src/ddisasm/src/datalog/main.dl [426:7-426:29];"
(STMTS      (DEBUG 
 "instruction_get_src_op(EA,Index,Op) :- \n   instruction_op_access(EA,Index,\"R\"),\n   instruction_get_op(EA,Index,Op).\nin file main.dl [428:1-431:37]" 
      (TIMER_ON instruction_get_src_op "@t-nonrecursive-rule;instruction_get_src_op;/usr/local/src/ddisasm/src/datalog/main.dl [428:1-431:37];instruction_get_src_op(EA,Index,Op) :- \\n   instruction_op_access(EA,Index,\\\"R\\\"),\\n   instruction_get_op(EA,Index,Op).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction_op_access)) (NOT (ISEMPTY instruction_get_op)))
         (FOR t0 instruction_op_access (INDEX  (= (TUPLE t0 2) (STRING "R")))
          (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2)) instruction_get_src_op)
))        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR instruction_op_access)
 ) )  )
  (SUBROUTINE instruction_has_loop_prefix
(STMTS (STMTS     (TIMER_ON instruction_has_loop_prefix "@t-nonrecursive-relation;instruction_has_loop_prefix;/usr/local/src/ddisasm/src/datalog/main.dl [483:7-483:34];"
(STMTS      (DEBUG 
 "instruction_has_loop_prefix(EA) :- \n   instruction(EA,_,Prefix,_,_,_,_,_,_,_),\n   arch.loop_prefix(Prefix).\nin file main.dl [485:1-487:30]" 
      (TIMER_ON instruction_has_loop_prefix "@t-nonrecursive-rule;instruction_has_loop_prefix;/usr/local/src/ddisasm/src/datalog/main.dl [485:1-487:30];instruction_has_loop_prefix(EA) :- \\n   instruction(EA,_,Prefix,_,_,_,_,_,_,_),\\n   arch.loop_prefix(Prefix).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY arch.loop_prefix)))
         (FOR_IN t0 instruction           (IF (EXISTS arch.loop_prefix ((TUPLE t0 2)))
           (INSERT ((TUPLE t0 0)) instruction_has_loop_prefix)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.loop_prefix)
 ) )  )
  (SUBROUTINE instruction_has_relocation
(STMTS     (TIMER_ON instruction_has_relocation "@t-nonrecursive-relation;instruction_has_relocation;/usr/local/src/ddisasm/src/datalog/main.dl [492:7-492:33];"
(STMTS      (DEBUG 
 "instruction_has_relocation(EA,(EA+Offset)) :- \n   instruction_immediate_offset(EA,_,Offset,_),\n   relocation( _tmp_56,_,_,_,_,_,_),\n    _tmp_56 = (EA+Offset).\nin file main.dl [494:1-503:39]" 
      (TIMER_ON instruction_has_relocation "@t-nonrecursive-rule;instruction_has_relocation;/usr/local/src/ddisasm/src/datalog/main.dl [494:1-503:39];instruction_has_relocation(EA,(EA+Offset)) :- \\n   instruction_immediate_offset(EA,_,Offset,_),\\n   relocation( _tmp_56,_,_,_,_,_,_),\\n    _tmp_56 = (EA+Offset).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction_immediate_offset)) (NOT (ISEMPTY relocation)))
         (FOR_IN t0 instruction_immediate_offset           (IF (EXISTS relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) instruction_has_relocation)
          ))
        )       )
      )
     )
      (DEBUG 
 "instruction_has_relocation(EA,(EA+Offset)) :- \n   instruction_displacement_offset(EA,_,Offset,_),\n   relocation( _tmp_57,_,_,_,_,_,_),\n    _tmp_57 = (EA+Offset).\nin file main.dl [494:1-503:39]" 
      (TIMER_ON instruction_has_relocation "@t-nonrecursive-rule;instruction_has_relocation;/usr/local/src/ddisasm/src/datalog/main.dl [494:1-503:39];instruction_has_relocation(EA,(EA+Offset)) :- \\n   instruction_displacement_offset(EA,_,Offset,_),\\n   relocation( _tmp_57,_,_,_,_,_,_),\\n    _tmp_57 = (EA+Offset).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction_displacement_offset)) (NOT (ISEMPTY relocation)))
         (FOR_IN t0 instruction_displacement_offset           (IF (EXISTS relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) instruction_has_relocation)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE instruction_immediate_offset
(STMTS     (TIMER_ON instruction_immediate_offset "@t-nonrecursive-relation;instruction_immediate_offset;/usr/local/src/ddisasm/src/datalog/main.dl [363:7-363:35];"
(STMTS      (DEBUG 
 "instruction_immediate_offset(EA,Index,ImmediateOffset,(Size-ImmediateOffset)) :- \n   instruction(EA,Size,_,_,_,_,_,_,ImmediateOffset,_),\n   instruction_get_op(EA,Index,Op),\n   op_immediate(Op,_).\nin file main.dl [365:1-368:24]" 
      (TIMER_ON instruction_immediate_offset "@t-nonrecursive-rule;instruction_immediate_offset;/usr/local/src/ddisasm/src/datalog/main.dl [365:1-368:24];instruction_immediate_offset(EA,Index,ImmediateOffset,(Size-ImmediateOffset)) :- \\n   instruction(EA,Size,_,_,_,_,_,_,ImmediateOffset,_),\\n   instruction_get_op(EA,Index,Op),\\n   op_immediate(Op,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_immediate)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 instruction           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS op_immediate ((TUPLE t1 2) UNDEF))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 8) (INTRINSIC - (TUPLE t0 1) (TUPLE t0 8))) instruction_immediate_offset)
           )))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE instruction_memory_access_size
(STMTS (STMTS     (TIMER_ON instruction_memory_access_size "@t-nonrecursive-relation;instruction_memory_access_size;data_access_analysis.dl [45:7-45:37];"
(STMTS      (DEBUG 
 "instruction_memory_access_size(EA,Index,SizeAccess) :- \n   !invalid(EA,_),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   instruction_get_op(EA,Index,Op),\n   op_indirect(Op,_,_,_,_,_,_),\n   instruction_get_dest_op(EA,_,RegOp),\n   op_regdirect(RegOp,Reg),\n   arch.data_access_size(Operation, _tmp_58,SizeAccess),\n    _tmp_58 = as(Reg, register).\nin file data_access_analysis.dl [47:1-71:7]" 
      (TIMER_ON instruction_memory_access_size "@t-nonrecursive-rule;instruction_memory_access_size;data_access_analysis.dl [47:1-71:7];instruction_memory_access_size(EA,Index,SizeAccess) :- \\n   !invalid(EA,_),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect(Op,_,_,_,_,_,_),\\n   instruction_get_dest_op(EA,_,RegOp),\\n   op_regdirect(RegOp,Reg),\\n   arch.data_access_size(Operation, _tmp_58,SizeAccess),\\n    _tmp_58 = as(Reg, register).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY arch.data_access_size))) (NOT (ISEMPTY instruction_get_dest_op))) (NOT (ISEMPTY op_indirect))) (NOT (ISEMPTY op_regdirect))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 instruction           (IF (NOT (EXISTS invalid ((TUPLE t0 0) UNDEF)))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (EXISTS op_indirect ((TUPLE t1 2) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
             (FOR t2 instruction_get_dest_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
              (FOR t3 op_regdirect (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)))
               (FOR t4 arch.data_access_size (INDEX  (= (TUPLE t4 0) (TUPLE t0 3)) (= (TUPLE t4 1) (TUPLE t3 1)))
                (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t4 2)) instruction_memory_access_size)
)))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "instruction_memory_access_size(EA,Index,(NBits/8)) :- \n   !invalid(EA,_),\n   instruction(EA,_,_,_,_,_,_,_,_,_),\n   instruction_get_op(EA,Index,Op),\n   op_indirect(Op,_,_,_,_,_,NBits),\n   instruction_get_dest_op(EA,_,RegOp),\n   !op_regdirect(RegOp,_).\nin file data_access_analysis.dl [47:1-71:7]" 
      (TIMER_ON instruction_memory_access_size "@t-nonrecursive-rule;instruction_memory_access_size;data_access_analysis.dl [47:1-71:7];instruction_memory_access_size(EA,Index,(NBits/8)) :- \\n   !invalid(EA,_),\\n   instruction(EA,_,_,_,_,_,_,_,_,_),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect(Op,_,_,_,_,_,NBits),\\n   instruction_get_dest_op(EA,_,RegOp),\\n   !op_regdirect(RegOp,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY instruction_get_dest_op))) (NOT (ISEMPTY op_indirect))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 instruction           (IF (NOT (EXISTS invalid ((TUPLE t0 0) UNDEF)))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 op_indirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (INDEXED_IF_EXISTS t3 instruction_get_dest_op (INDEX  (= (TUPLE t3 0) (TUPLE t0 0))) (NOT (EXISTS op_regdirect ((TUPLE t3 2) UNDEF)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (INTRINSIC / (TUPLE t2 6) (UNSIGNED 8))) instruction_memory_access_size)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "instruction_memory_access_size(EA,Index,(NBits/8)) :- \n   !invalid(EA,_),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   instruction_get_op(EA,Index,Op),\n   op_indirect(Op,_,_,_,_,_,NBits),\n   !arch.data_access_size(Operation,_,_).\nin file data_access_analysis.dl [47:1-71:7]" 
      (TIMER_ON instruction_memory_access_size "@t-nonrecursive-rule;instruction_memory_access_size;data_access_analysis.dl [47:1-71:7];instruction_memory_access_size(EA,Index,(NBits/8)) :- \\n   !invalid(EA,_),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect(Op,_,_,_,_,_,NBits),\\n   !arch.data_access_size(Operation,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 instruction           (IF (AND (NOT (EXISTS arch.data_access_size ((TUPLE t0 3) UNDEF UNDEF))) (NOT (EXISTS invalid ((TUPLE t0 0) UNDEF))))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 op_indirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (INTRINSIC / (TUPLE t2 6) (UNSIGNED 8))) instruction_memory_access_size)
))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.data_access_size)
 ) )  )
  (SUBROUTINE instruction_op_access
(STMTS (STMTS (STMTS     (TIMER_ON instruction_op_access "@t-relation-loadtime;instruction_op_access;/usr/local/src/ddisasm/src/datalog/main.dl [247:7-247:28];loadtime;"
     (IO instruction_op_access ((= IO "file") (= attributeNames "EA\tIndex\tAccessMode") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "instruction_op_access") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"EA\", \"Index\", \"AccessMode\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:address\", \"u:operand_index\", \"s:access_mode\"]}}")))
    )
 ) (STMTS     (LOGSIZE instruction_op_access "@n-nonrecursive-relation;instruction_op_access;/usr/local/src/ddisasm/src/datalog/main.dl [247:7-247:28];")
 )   )  )  )
  (SUBROUTINE inter_procedural_edge
(STMTS     (TIMER_ON inter_procedural_edge "@t-nonrecursive-relation;inter_procedural_edge;use_def_analysis.dl [55:7-55:28];"
(STMTS      (DEBUG 
 "inter_procedural_edge(Src,Dest) :- \n   unconditional_jump(Src),\n   direct_jump(Src,Dest),\n   function_inference.function_entry_initial(Between),\n   Src < Between,\n   Between <= Dest.\nin file use_def_analysis.dl [57:1-63:36]" 
      (TIMER_ON inter_procedural_edge "@t-nonrecursive-rule;inter_procedural_edge;use_def_analysis.dl [57:1-63:36];inter_procedural_edge(Src,Dest) :- \\n   unconditional_jump(Src),\\n   direct_jump(Src,Dest),\\n   function_inference.function_entry_initial(Between),\\n   Src < Between,\\n   Between <= Dest.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY function_inference.function_entry_initial)) (NOT (ISEMPTY unconditional_jump))) (NOT (ISEMPTY direct_jump)))
         (FOR_IN t0 unconditional_jump           (FOR t1 direct_jump (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF_EXISTS t2 function_inference.function_entry_initial (AND (CONSTRAINT < (TUPLE t0 0)  (TUPLE t2 0)) (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t1 1))) 
            (INSERT ((TUPLE t0 0) (TUPLE t1 1)) inter_procedural_edge)
)))
        )       )
      )
     )
      (DEBUG 
 "inter_procedural_edge(Src,Dest) :- \n   may_fallthrough(Src,Dest),\n   !pc_load_call(Src,Dest),\n   function_inference.function_entry_initial(Dest).\nin file use_def_analysis.dl [65:1-68:53]" 
      (TIMER_ON inter_procedural_edge "@t-nonrecursive-rule;inter_procedural_edge;use_def_analysis.dl [65:1-68:53];inter_procedural_edge(Src,Dest) :- \\n   may_fallthrough(Src,Dest),\\n   !pc_load_call(Src,Dest),\\n   function_inference.function_entry_initial(Dest).;"
(QUERY
        (IF (AND (NOT (ISEMPTY may_fallthrough)) (NOT (ISEMPTY function_inference.function_entry_initial)))
         (FOR_IN t0 may_fallthrough           (IF (AND (EXISTS function_inference.function_entry_initial ((TUPLE t0 1))) (NOT (EXISTS pc_load_call ((TUPLE t0 0) (TUPLE t0 1)))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) inter_procedural_edge)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE interval_schedule_tie
(STMTS (STMTS (STMTS     (TIMER_ON interval_schedule_tie "@t-nonrecursive-relation;interval_schedule_tie;code_inference.dl [1020:7-1020:28];"
(STMTS      (DEBUG 
 "interval_schedule_tie(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB) :- \n   wis_memo(IPrev, _tmp_59,_),\n   I = (IPrev+1),\n   unresolved_interval_best_block(I,BlockA,TypeA,SizeA,IWeight),\n   !discarded_block(BlockA,TypeA,SizeA,_,_),\n   wis_prior(I,P),\n   wis_memo(P,TakeWeight0,_),\n   unresolved_interval_best_block(IPrev,BlockB,TypeB,SizeB,_),\n   wis_schedule(I),\n    _tmp_59 = (TakeWeight0+IWeight).\nin file code_inference.dl [1023:1-1039:21]" 
      (TIMER_ON interval_schedule_tie "@t-nonrecursive-rule;interval_schedule_tie;code_inference.dl [1023:1-1039:21];interval_schedule_tie(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB) :- \\n   wis_memo(IPrev, _tmp_59,_),\\n   I = (IPrev+1),\\n   unresolved_interval_best_block(I,BlockA,TypeA,SizeA,IWeight),\\n   !discarded_block(BlockA,TypeA,SizeA,_,_),\\n   wis_prior(I,P),\\n   wis_memo(P,TakeWeight0,_),\\n   unresolved_interval_best_block(IPrev,BlockB,TypeB,SizeB,_),\\n   wis_schedule(I),\\n    _tmp_59 = (TakeWeight0+IWeight).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY unresolved_interval_best_block)) (NOT (ISEMPTY wis_schedule))) (NOT (ISEMPTY wis_prior))) (NOT (ISEMPTY wis_memo)))
         (FOR_IN t0 wis_memo           (FOR t1 wis_schedule (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1))))
           (FOR t2 unresolved_interval_best_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
            (IF (NOT (EXISTS discarded_block ((TUPLE t2 1) (TUPLE t2 2) (TUPLE t2 3) UNDEF UNDEF)))
             (FOR t3 wis_prior (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)))
              (INDEXED_IF_EXISTS t4 wis_memo (INDEX  (= (TUPLE t4 0) (TUPLE t3 1))) (CONSTRAINT = (TUPLE t0 1)  (INTRINSIC + (TUPLE t4 1) (TUPLE t2 4)))
               (FOR t5 unresolved_interval_best_block (INDEX  (= (TUPLE t5 0) (TUPLE t0 0)))
                (INSERT ((TUPLE t2 1) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t5 1) (TUPLE t5 2) (TUPLE t5 3)) interval_schedule_tie)
)))            ))))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON interval_schedule_tie "@t-relation-savetime;interval_schedule_tie;code_inference.dl [1020:7-1020:28];savetime;"
     (IO interval_schedule_tie ((= IO "file") (= attributeNames "BlockA\tTypeA\tSizeA\tBlockB\tTypeB\tSizeB") (= auxArity "0") (= name "interval_schedule_tie") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"BlockA\", \"TypeA\", \"SizeA\", \"BlockB\", \"TypeB\", \"SizeB\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"u:address\", \"s:block_type\", \"u:unsigned\", \"u:address\", \"s:block_type\", \"u:unsigned\"]}}")))
    )
 ) ) (STMTS     (CLEAR discarded_block)
     (CLEAR unresolved_interval_best_block)
     (CLEAR wis_memo)
     (CLEAR wis_prior)
     (CLEAR wis_schedule)
 ) )  )
  (SUBROUTINE invalid
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON invalid "@t-nonrecursive-relation;invalid;code_inference.dl [185:7-185:14];"
(STMTS      (DEBUG 
 "invalid(Inst,\"overlaps object\") :- \n   defined_symbol(Start,ObjSize,\"OBJECT\",_,_,_,_,_,_),\n   max_instruction_size(MaxInstSize),\n   arch.instruction_at(EA,Inst),\n   (Start-MaxInstSize) < EA,\n   EA < (Start+ObjSize),\n   instruction(Inst,InstSize,_,_,_,_,_,_,_,_),\n   Start < (EA+InstSize).\nin file code_inference.dl [214:1-221:25]" 
      (TIMER_ON invalid "@t-nonrecursive-rule;invalid;code_inference.dl [214:1-221:25];invalid(Inst,\\\"overlaps object\\\") :- \\n   defined_symbol(Start,ObjSize,\\\"OBJECT\\\",_,_,_,_,_,_),\\n   max_instruction_size(MaxInstSize),\\n   arch.instruction_at(EA,Inst),\\n   (Start-MaxInstSize) < EA,\\n   EA < (Start+ObjSize),\\n   instruction(Inst,InstSize,_,_,_,_,_,_,_,_),\\n   Start < (EA+InstSize).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY arch.instruction_at))) (NOT (ISEMPTY max_instruction_size)))
         (FOR t0 defined_symbol (INDEX  (= (TUPLE t0 2) (STRING "OBJECT")))
          (FOR_IN t1 max_instruction_size            (FOR_IN t2 arch.instruction_at             (IF (AND (CONSTRAINT < (TUPLE t2 0)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))) (CONSTRAINT < (INTRINSIC - (TUPLE t0 0) (TUPLE t1 0))  (TUPLE t2 0)))
             (INDEXED_IF_EXISTS t3 instruction (INDEX  (= (TUPLE t3 0) (TUPLE t2 1))) (CONSTRAINT < (TUPLE t0 0)  (INTRINSIC + (TUPLE t2 0) (TUPLE t3 1)))
              (INSERT ((TUPLE t2 1) (STRING "overlaps object")) invalid)
)            ))
)
)        )       )
      )
     )
      (DEBUG 
 "invalid(EA,\"known data region\") :- \n   data_region(Begin,Size),\n   instruction(EA,_,_,_,_,_,_,_,_,_),\n   Size > 0,\n   EA >= Begin,\n   EA < (Begin+Size).\nin file code_inference.dl [235:1-238:48]" 
      (TIMER_ON invalid "@t-nonrecursive-rule;invalid;code_inference.dl [235:1-238:48];invalid(EA,\\\"known data region\\\") :- \\n   data_region(Begin,Size),\\n   instruction(EA,_,_,_,_,_,_,_,_,_),\\n   Size > 0,\\n   EA >= Begin,\\n   EA < (Begin+Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_region)) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 data_region           (IF (CONSTRAINT > (TUPLE t0 1)  (UNSIGNED 0))
           (FOR_IN t1 instruction             (IF (AND (CONSTRAINT < (TUPLE t1 0)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t0 0)))
             (INSERT ((TUPLE t1 0) (STRING "known data region")) invalid)
            ))
          ))
        )       )
      )
     )
      (DEBUG 
 "invalid(EA,\"invalid_op_code\") :- \n   invalid_op_code(EA).\nin file code_inference.dl [188:1-190:30]" 
      (TIMER_ON invalid "@t-nonrecursive-rule;invalid;code_inference.dl [188:1-190:30];invalid(EA,\\\"invalid_op_code\\\") :- \\n   invalid_op_code(EA).;"
(QUERY
        (IF (NOT (ISEMPTY invalid_op_code))
         (FOR_IN t0 invalid_op_code           (INSERT ((TUPLE t0 0) (STRING "invalid_op_code")) invalid)
)
        )       )
      )
     )
      (DEBUG 
 "invalid(EA,\"direct_call to invalid\") :- \n   !binary_format(\"RAW\"),\n   direct_call(EA,Dest),\n   !instruction(Dest,_,_,_,_,_,_,_,_,_),\n   Dest != 0.\nin file code_inference.dl [192:1-202:15]" 
      (TIMER_ON invalid "@t-nonrecursive-rule;invalid;code_inference.dl [192:1-202:15];invalid(EA,\\\"direct_call to invalid\\\") :- \\n   !binary_format(\\\"RAW\\\"),\\n   direct_call(EA,Dest),\\n   !instruction(Dest,_,_,_,_,_,_,_,_,_),\\n   Dest != 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY direct_call)) (NOT (EXISTS binary_format ((STRING "RAW")))))
         (FOR_IN t0 direct_call           (IF (AND (CONSTRAINT != (TUPLE t0 1)  (UNSIGNED 0)) (NOT (EXISTS instruction ((TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (INSERT ((TUPLE t0 0) (STRING "direct_call to invalid")) invalid)
          ))
        )       )
      )
     )
      (DEBUG 
 "invalid(EA,\"direct_jump to invalid\") :- \n   !binary_format(\"RAW\"),\n   direct_jump(EA,Dest),\n   !instruction(Dest,_,_,_,_,_,_,_,_,_),\n   Dest != 0.\nin file code_inference.dl [192:1-202:15]" 
      (TIMER_ON invalid "@t-nonrecursive-rule;invalid;code_inference.dl [192:1-202:15];invalid(EA,\\\"direct_jump to invalid\\\") :- \\n   !binary_format(\\\"RAW\\\"),\\n   direct_jump(EA,Dest),\\n   !instruction(Dest,_,_,_,_,_,_,_,_,_),\\n   Dest != 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY direct_jump)) (NOT (EXISTS binary_format ((STRING "RAW")))))
         (FOR_IN t0 direct_jump           (IF (AND (CONSTRAINT != (TUPLE t0 1)  (UNSIGNED 0)) (NOT (EXISTS instruction ((TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (INSERT ((TUPLE t0 0) (STRING "direct_jump to invalid")) invalid)
          ))
        )       )
      )
     )
      (DEBUG 
 "invalid(EA,\"must_fallthrough to invalid\") :- \n   !binary_format(\"RAW\"),\n   must_fallthrough(EA,Dest),\n   !instruction(Dest,_,_,_,_,_,_,_,_,_),\n   Dest != 0.\nin file code_inference.dl [192:1-202:15]" 
      (TIMER_ON invalid "@t-nonrecursive-rule;invalid;code_inference.dl [192:1-202:15];invalid(EA,\\\"must_fallthrough to invalid\\\") :- \\n   !binary_format(\\\"RAW\\\"),\\n   must_fallthrough(EA,Dest),\\n   !instruction(Dest,_,_,_,_,_,_,_,_,_),\\n   Dest != 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY must_fallthrough)) (NOT (EXISTS binary_format ((STRING "RAW")))))
         (FOR_IN t0 must_fallthrough           (IF (AND (CONSTRAINT != (TUPLE t0 1)  (UNSIGNED 0)) (NOT (EXISTS instruction ((TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (INSERT ((TUPLE t0 0) (STRING "must_fallthrough to invalid")) invalid)
          ))
        )       )
      )
     )
      (DEBUG 
 "invalid((EA+1),\"INT3\") :- \n   binary_format(\"PE\"),\n   instruction(EA,_,_,<inlined_Operation_893>,_,_,_,_,_,_),\n   <inlined_Operation_893> = \"INT3\",\n   instruction(<inlined_EA_1128>,_,_,<inlined_Operation_1128>,_,_,_,_,_,_),\n   <inlined_EA_1128> = (EA+1),\n   <inlined_Operation_1128> = \"INT3\".\nin file code_inference.dl [257:1-264:44]" 
      (TIMER_ON invalid "@t-nonrecursive-rule;invalid;code_inference.dl [257:1-264:44];invalid((EA+1),\\\"INT3\\\") :- \\n   binary_format(\\\"PE\\\"),\\n   instruction(EA,_,_,<inlined_Operation_893>,_,_,_,_,_,_),\\n   <inlined_Operation_893> = \\\"INT3\\\",\\n   instruction(<inlined_EA_1128>,_,_,<inlined_Operation_1128>,_,_,_,_,_,_),\\n   <inlined_EA_1128> = (EA+1),\\n   <inlined_Operation_1128> = \\\"INT3\\\".;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY instruction))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "INT3")))
          (IF (EXISTS instruction ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) UNDEF UNDEF (STRING "INT3") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) (STRING "INT3")) invalid)
          ))        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 invalid       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_invalid)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_invalid "@t-recursive-relation;invalid;code_inference.dl [185:7-185:14];"
(STMTS (STMTS (STMTS       (DEBUG 
 "invalid(From,\"propagate from invalid\") :- \n   invalid(To,_),\n   must_fallthrough(From,To).\nin file code_inference.dl [225:1-233:7]" 
       (TIMER_ON @new_invalid "@t-recursive-rule;invalid;0;code_inference.dl [225:1-233:7];invalid(From,\\\"propagate from invalid\\\") :- \\n   invalid(To,_),\\n   must_fallthrough(From,To).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_invalid)) (NOT (ISEMPTY must_fallthrough)))
          (FOR_IN t0 @delta_invalid            (FOR t1 must_fallthrough (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (IF (NOT (EXISTS invalid ((TUPLE t1 0) (STRING "propagate from invalid"))))
             (INSERT ((TUPLE t1 0) (STRING "propagate from invalid")) @new_invalid)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "invalid(From,\"propagate from invalid\") :- \n   invalid(To,_),\n   direct_jump(From,To).\nin file code_inference.dl [225:1-233:7]" 
       (TIMER_ON @new_invalid "@t-recursive-rule;invalid;0;code_inference.dl [225:1-233:7];invalid(From,\\\"propagate from invalid\\\") :- \\n   invalid(To,_),\\n   direct_jump(From,To).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_invalid)) (NOT (ISEMPTY direct_jump)))
          (FOR_IN t0 @delta_invalid            (FOR t1 direct_jump (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (IF (NOT (EXISTS invalid ((TUPLE t1 0) (STRING "propagate from invalid"))))
             (INSERT ((TUPLE t1 0) (STRING "propagate from invalid")) @new_invalid)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "invalid(From,\"propagate from invalid\") :- \n   invalid(To,_),\n   direct_call(From,To).\nin file code_inference.dl [225:1-233:7]" 
       (TIMER_ON @new_invalid "@t-recursive-rule;invalid;0;code_inference.dl [225:1-233:7];invalid(From,\\\"propagate from invalid\\\") :- \\n   invalid(To,_),\\n   direct_call(From,To).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_invalid)) (NOT (ISEMPTY direct_call)))
          (FOR_IN t0 @delta_invalid            (FOR t1 direct_call (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (IF (NOT (EXISTS invalid ((TUPLE t1 0) (STRING "propagate from invalid"))))
             (INSERT ((TUPLE t1 0) (STRING "propagate from invalid")) @new_invalid)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "invalid(From,\"propagate from invalid\") :- \n   invalid(To,_),\n   pc_relative_jump(From,To).\nin file code_inference.dl [225:1-233:7]" 
       (TIMER_ON @new_invalid "@t-recursive-rule;invalid;0;code_inference.dl [225:1-233:7];invalid(From,\\\"propagate from invalid\\\") :- \\n   invalid(To,_),\\n   pc_relative_jump(From,To).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_invalid)) (NOT (ISEMPTY pc_relative_jump)))
          (FOR_IN t0 @delta_invalid            (FOR t1 pc_relative_jump (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (IF (NOT (EXISTS invalid ((TUPLE t1 0) (STRING "propagate from invalid"))))
             (INSERT ((TUPLE t1 0) (STRING "propagate from invalid")) @new_invalid)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "invalid(From,\"propagate from invalid\") :- \n   invalid(To,_),\n   pc_relative_call(From,To).\nin file code_inference.dl [225:1-233:7]" 
       (TIMER_ON @new_invalid "@t-recursive-rule;invalid;0;code_inference.dl [225:1-233:7];invalid(From,\\\"propagate from invalid\\\") :- \\n   invalid(To,_),\\n   pc_relative_call(From,To).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_invalid)) (NOT (ISEMPTY pc_relative_call)))
          (FOR_IN t0 @delta_invalid            (FOR t1 pc_relative_call (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (IF (NOT (EXISTS invalid ((TUPLE t1 0) (STRING "propagate from invalid"))))
             (INSERT ((TUPLE t1 0) (STRING "propagate from invalid")) @new_invalid)
            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_invalid "@t-recursive-relation;invalid;code_inference.dl [185:7-185:14];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_invalid))
 ) (STMTS      (TIMER_ON @new_invalid "@c-recursive-relation;invalid;code_inference.dl [185:7-185:14];"
(STMTS (QUERY
       (FOR_IN t0 @new_invalid         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) invalid)
)
      )
       (SWAP @delta_invalid @new_invalid)
       (CLEAR @new_invalid)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_invalid)
     (CLEAR @new_invalid)
 ) )  ) (STMTS     (CLEAR data_region)
     (CLEAR invalid_op_code)
     (CLEAR max_instruction_size)
 ) )  )
  (SUBROUTINE invalid_op_code
(STMTS (STMTS (STMTS     (TIMER_ON invalid_op_code "@t-relation-loadtime;invalid_op_code;/usr/local/src/ddisasm/src/datalog/main.dl [256:7-256:22];loadtime;"
     (IO invalid_op_code ((= IO "file") (= attributeNames "ea") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "invalid_op_code") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"ea\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE invalid_op_code "@n-nonrecursive-relation;invalid_op_code;/usr/local/src/ddisasm/src/datalog/main.dl [256:7-256:22];")
 )   )  )  )
  (SUBROUTINE is_padding
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON is_padding "@t-nonrecursive-relation;is_padding;/usr/local/src/ddisasm/src/datalog/main.dl [936:7-936:17];"
(STMTS      (DEBUG 
 "is_padding(EA) :- \n   binary_format(\"PE\"),\n   npad(EA,_),\n   !may_fallthrough(_,EA).\nin file pe_binaries.dl [170:1-173:28]" 
      (TIMER_ON is_padding "@t-nonrecursive-rule;is_padding;binary/pe/pe_binaries.dl [170:1-173:28];is_padding(EA) :- \\n   binary_format(\\\"PE\\\"),\\n   npad(EA,_),\\n   !may_fallthrough(_,EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY npad))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 npad           (IF (NOT (EXISTS may_fallthrough (UNDEF (TUPLE t0 0))))
           (INSERT ((TUPLE t0 0)) is_padding)
          ))
        )       )
      )
     )
      (DEBUG 
 "is_padding(EA) :- \n   arch.is_nop(EA).\nin file main.dl [938:1-939:21]" 
      (TIMER_ON is_padding "@t-nonrecursive-rule;is_padding;/usr/local/src/ddisasm/src/datalog/main.dl [938:1-939:21];is_padding(EA) :- \\n   arch.is_nop(EA).;"
(QUERY
        (IF (NOT (ISEMPTY arch.is_nop))
         (FOR_IN t0 arch.is_nop           (INSERT ((TUPLE t0 0)) is_padding)
)
        )       )
      )
     )
      (DEBUG 
 "is_padding((EA+1)) :- \n   binary_format(\"PE\"),\n   instruction(EA,_,_,<inlined_Operation_155>,_,_,_,_,_,_),\n   <inlined_Operation_155> = \"INT3\",\n   instruction(<inlined_EA_557>,_,_,<inlined_Operation_557>,_,_,_,_,_,_),\n   <inlined_EA_557> = (EA+1),\n   <inlined_Operation_557> = \"INT3\".\nin file pe_binaries.dl [119:1-122:44]" 
      (TIMER_ON is_padding "@t-nonrecursive-rule;is_padding;binary/pe/pe_binaries.dl [119:1-122:44];is_padding((EA+1)) :- \\n   binary_format(\\\"PE\\\"),\\n   instruction(EA,_,_,<inlined_Operation_155>,_,_,_,_,_,_),\\n   <inlined_Operation_155> = \\\"INT3\\\",\\n   instruction(<inlined_EA_557>,_,_,<inlined_Operation_557>,_,_,_,_,_,_),\\n   <inlined_EA_557> = (EA+1),\\n   <inlined_Operation_557> = \\\"INT3\\\".;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY instruction))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "INT3")))
          (IF (EXISTS instruction ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) UNDEF UNDEF (STRING "INT3") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1))) is_padding)
          ))        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 is_padding       (INSERT ((TUPLE t0 0)) @delta_is_padding)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_is_padding "@t-recursive-relation;is_padding;/usr/local/src/ddisasm/src/datalog/main.dl [936:7-936:17];"
(STMTS       (DEBUG 
 "is_padding(EA) :- \n   is_padding(Prev),\n   next(Prev,EA),\n   npad(EA,_).\nin file pe_binaries.dl [175:1-178:16]" 
       (TIMER_ON @new_is_padding "@t-recursive-rule;is_padding;0;binary/pe/pe_binaries.dl [175:1-178:16];is_padding(EA) :- \\n   is_padding(Prev),\\n   next(Prev,EA),\\n   npad(EA,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY npad)) (NOT (ISEMPTY @delta_is_padding))) (NOT (ISEMPTY next)))
          (FOR_IN t0 @delta_is_padding            (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (EXISTS npad ((TUPLE t1 1) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t1 1)))))
             (INSERT ((TUPLE t1 1)) @new_is_padding)
            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_is_padding "@t-recursive-relation;is_padding;/usr/local/src/ddisasm/src/datalog/main.dl [936:7-936:17];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_is_padding))
 ) (STMTS      (TIMER_ON @new_is_padding "@c-recursive-relation;is_padding;/usr/local/src/ddisasm/src/datalog/main.dl [936:7-936:17];"
(STMTS (QUERY
       (FOR_IN t0 @new_is_padding         (INSERT ((TUPLE t0 0)) is_padding)
)
      )
       (SWAP @delta_is_padding @new_is_padding)
       (CLEAR @new_is_padding)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_is_padding)
     (CLEAR @new_is_padding)
 ) )  )  )  )
  (SUBROUTINE is_xor_reset
(STMTS     (TIMER_ON is_xor_reset "@t-nonrecursive-relation;is_xor_reset;bitmasks.dl [42:7-42:19];"
(STMTS      (DEBUG 
 "is_xor_reset(EA) :- \n   instruction(EA,_,_,\"XOR\",Op1,Op2,0,0,_,_),\n   op_regdirect_contains_reg(Op1,Reg),\n   op_regdirect_contains_reg(Op2,Reg).\nin file bitmasks.dl [44:1-47:40]" 
      (TIMER_ON is_xor_reset "@t-nonrecursive-rule;is_xor_reset;bitmasks.dl [44:1-47:40];is_xor_reset(EA) :- \\n   instruction(EA,_,_,\\\"XOR\\\",Op1,Op2,0,0,_,_),\\n   op_regdirect_contains_reg(Op1,Reg),\\n   op_regdirect_contains_reg(Op2,Reg).;"
(QUERY
        (IF (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY instruction)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "XOR")) (= (TUPLE t0 6) (UNSIGNED 0)) (= (TUPLE t0 7) (UNSIGNED 0)))
          (INDEXED_IF_EXISTS t1 op_regdirect_contains_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 4))) (EXISTS op_regdirect_contains_reg ((TUPLE t0 5) (TUPLE t1 1)))
           (INSERT ((TUPLE t0 0)) is_xor_reset)
))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE jump_table
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON jump_table "@t-nonrecursive-relation;jump_table;cfg.dl [53:7-53:17];"
(STMTS      (DEBUG 
 "jump_table(EA,Initial_memory) :- \n   code_in_block(EA,_),\n   indirect_jump(EA),\n   Pt_size = 8,\n   data_access_pattern(Initial_memory,Pt_size, _tmp_63,EA),\n   symbolic_data(Initial_memory,Pt_size,Dest_block),\n   refined_block(Dest_block),\n    _tmp_63 = as(Pt_size, number).\nin file cfg.dl [56:1-62:31]" 
      (TIMER_ON jump_table "@t-nonrecursive-rule;jump_table;cfg.dl [56:1-62:31];jump_table(EA,Initial_memory) :- \\n   code_in_block(EA,_),\\n   indirect_jump(EA),\\n   Pt_size = 8,\\n   data_access_pattern(Initial_memory,Pt_size, _tmp_63,EA),\\n   symbolic_data(Initial_memory,Pt_size,Dest_block),\\n   refined_block(Dest_block),\\n    _tmp_63 = as(Pt_size, number).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY refined_block)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY data_access_pattern))) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY indirect_jump)))
         (FOR_IN t0 code_in_block           (IF (EXISTS indirect_jump ((TUPLE t0 0)))
           (FOR t1 data_access_pattern (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)) (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (CONSTRAINT = (TUPLE t1 2)  (TUPLE t1 1))
             (INDEXED_IF_EXISTS t2 symbolic_data (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1))) (EXISTS refined_block ((TUPLE t2 2)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 0)) jump_table)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "jump_table(EA,Initial_memory) :- \n   code_in_block(EA,_),\n   indirect_jump(EA),\n   symbolic_operand(EA,1,Initial_memory,\"data\"),\n   data_access(EA,1,_,RegBase,_,_,_,_),\n   RegBase != \"NONE\",\n   RegBase != \"RIP\",\n   Pt_size = 8,\n   symbolic_data(Initial_memory,Pt_size,Dest_block),\n   refined_block(Dest_block).\nin file cfg.dl [65:1-81:31]" 
      (TIMER_ON jump_table "@t-nonrecursive-rule;jump_table;cfg.dl [65:1-81:31];jump_table(EA,Initial_memory) :- \\n   code_in_block(EA,_),\\n   indirect_jump(EA),\\n   symbolic_operand(EA,1,Initial_memory,\\\"data\\\"),\\n   data_access(EA,1,_,RegBase,_,_,_,_),\\n   RegBase != \\\"NONE\\\",\\n   RegBase != \\\"RIP\\\",\\n   Pt_size = 8,\\n   symbolic_data(Initial_memory,Pt_size,Dest_block),\\n   refined_block(Dest_block).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY refined_block))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY indirect_jump)))
         (FOR_IN t0 code_in_block           (IF (EXISTS indirect_jump ((TUPLE t0 0)))
           (FOR t1 symbolic_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (UNSIGNED 1)) (= (TUPLE t1 3) (STRING "data")))
            (INDEXED_IF_EXISTS t2 data_access (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (UNSIGNED 1))) (AND (CONSTRAINT != (TUPLE t2 3)  (STRING "RIP")) (CONSTRAINT != (TUPLE t2 3)  (STRING "NONE")))
             (INDEXED_IF_EXISTS t3 symbolic_data (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)) (= (TUPLE t3 1) (UNSIGNED 8))) (EXISTS refined_block ((TUPLE t3 2)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 2)) jump_table)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "jump_table(EA,Initial_memory) :- \n   code_in_block(EA,_),\n   indirect_jump(EA),\n   symbolic_operand(EA,1,Initial_memory,\"data\"),\n   data_access(EA,1,_,_,RegIndex,_,_,_),\n   RegIndex != \"NONE\",\n   RegIndex != \"RIP\",\n   Pt_size = 8,\n   symbolic_data(Initial_memory,Pt_size,Dest_block),\n   refined_block(Dest_block).\nin file cfg.dl [65:1-81:31]" 
      (TIMER_ON jump_table "@t-nonrecursive-rule;jump_table;cfg.dl [65:1-81:31];jump_table(EA,Initial_memory) :- \\n   code_in_block(EA,_),\\n   indirect_jump(EA),\\n   symbolic_operand(EA,1,Initial_memory,\\\"data\\\"),\\n   data_access(EA,1,_,_,RegIndex,_,_,_),\\n   RegIndex != \\\"NONE\\\",\\n   RegIndex != \\\"RIP\\\",\\n   Pt_size = 8,\\n   symbolic_data(Initial_memory,Pt_size,Dest_block),\\n   refined_block(Dest_block).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY refined_block))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY indirect_jump)))
         (FOR_IN t0 code_in_block           (IF (EXISTS indirect_jump ((TUPLE t0 0)))
           (FOR t1 symbolic_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (UNSIGNED 1)) (= (TUPLE t1 3) (STRING "data")))
            (INDEXED_IF_EXISTS t2 data_access (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (UNSIGNED 1))) (AND (CONSTRAINT != (TUPLE t2 4)  (STRING "RIP")) (CONSTRAINT != (TUPLE t2 4)  (STRING "NONE")))
             (INDEXED_IF_EXISTS t3 symbolic_data (INDEX  (= (TUPLE t3 0) (TUPLE t1 2)) (= (TUPLE t3 1) (UNSIGNED 8))) (EXISTS refined_block ((TUPLE t3 2)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 2)) jump_table)
)))          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 jump_table       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_jump_table)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_jump_table "@t-recursive-relation;jump_table;cfg.dl [53:7-53:17];"
(STMTS (STMTS (STMTS       (DEBUG 
 "jump_table(EA,(Memory+Pt_size)) :- \n   jump_table(EA,Memory),\n   Pt_size = 8,\n   symbolic_data( _tmp_64,Pt_size,Dest_block),\n   refined_block(Dest_block),\n   !data_access_pattern((Memory+Pt_size),_,_,_),\n    _tmp_64 = (Memory+Pt_size).\nin file cfg.dl [83:1-88:48]" 
       (TIMER_ON @new_jump_table "@t-recursive-rule;jump_table;0;cfg.dl [83:1-88:48];jump_table(EA,(Memory+Pt_size)) :- \\n   jump_table(EA,Memory),\\n   Pt_size = 8,\\n   symbolic_data( _tmp_64,Pt_size,Dest_block),\\n   refined_block(Dest_block),\\n   !data_access_pattern((Memory+Pt_size),_,_,_),\\n    _tmp_64 = (Memory+Pt_size).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY refined_block)) (NOT (ISEMPTY @delta_jump_table))) (NOT (ISEMPTY symbolic_data)))
          (FOR_IN t0 @delta_jump_table            (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)))
            (IF (AND (AND (AND (CONSTRAINT = (TUPLE t1 0)  (INTRINSIC + (TUPLE t0 1) (TUPLE t1 1))) (NOT (EXISTS jump_table ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (TUPLE t1 1)))))) (EXISTS refined_block ((TUPLE t1 2)))) (NOT (EXISTS data_access_pattern ((INTRINSIC + (TUPLE t0 1) (TUPLE t1 1)) UNDEF UNDEF UNDEF))))
             (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (TUPLE t1 1))) @new_jump_table)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table(EA,(Memory+Pt_size)) :- \n   jump_table(EA,Memory),\n   Pt_size = 8,\n   symbolic_data(Memory,Pt_size,Content_prev),\n   symbolic_data( _tmp_65,Pt_size,Content_next),\n   refined_block(Content_next),\n   data_access_pattern( _tmp_65,Pt_size, _tmp_66,EA),\n   EA < Content_prev,\n   EA < Content_next,\n    _tmp_65 = (Memory+Pt_size),\n    _tmp_66 = as(Pt_size, number).\nin file cfg.dl [91:1-104:7]" 
       (TIMER_ON @new_jump_table "@t-recursive-rule;jump_table;0;cfg.dl [91:1-104:7];jump_table(EA,(Memory+Pt_size)) :- \\n   jump_table(EA,Memory),\\n   Pt_size = 8,\\n   symbolic_data(Memory,Pt_size,Content_prev),\\n   symbolic_data( _tmp_65,Pt_size,Content_next),\\n   refined_block(Content_next),\\n   data_access_pattern( _tmp_65,Pt_size, _tmp_66,EA),\\n   EA < Content_prev,\\n   EA < Content_next,\\n    _tmp_65 = (Memory+Pt_size),\\n    _tmp_66 = as(Pt_size, number).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY refined_block)) (NOT (ISEMPTY data_access_pattern))) (NOT (ISEMPTY @delta_jump_table))) (NOT (ISEMPTY symbolic_data)))
          (FOR_IN t0 @delta_jump_table            (FOR t1 data_access_pattern (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)) (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (AND (AND (CONSTRAINT = (TUPLE t1 0)  (INTRINSIC + (TUPLE t0 1) (TUPLE t1 1))) (CONSTRAINT = (TUPLE t1 2)  (TUPLE t1 1))) (NOT (EXISTS jump_table ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (TUPLE t1 1))))))
             (INDEXED_IF_EXISTS t2 symbolic_data (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (TUPLE t1 1))) (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 2)) (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t2 2)))
              (FOR t3 symbolic_data (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 1) (TUPLE t1 1)))
               (IF (AND (AND (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t3 2)) (CONSTRAINT != (TUPLE t0 0)  (TUPLE t3 2))) (EXISTS refined_block ((TUPLE t3 2))))
                (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (TUPLE t1 1))) @new_jump_table)
               )))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "jump_table(EA,(Memory+Pt_size)) :- \n   jump_table(EA,Memory),\n   Pt_size = 8,\n   symbolic_data(Memory,Pt_size,Content_prev),\n   symbolic_data( _tmp_67,Pt_size,Content_next),\n   refined_block(Content_next),\n   data_access_pattern( _tmp_67,Pt_size, _tmp_68,EA),\n   EA > Content_prev,\n   EA > Content_next,\n    _tmp_67 = (Memory+Pt_size),\n    _tmp_68 = as(Pt_size, number).\nin file cfg.dl [91:1-104:7]" 
       (TIMER_ON @new_jump_table "@t-recursive-rule;jump_table;0;cfg.dl [91:1-104:7];jump_table(EA,(Memory+Pt_size)) :- \\n   jump_table(EA,Memory),\\n   Pt_size = 8,\\n   symbolic_data(Memory,Pt_size,Content_prev),\\n   symbolic_data( _tmp_67,Pt_size,Content_next),\\n   refined_block(Content_next),\\n   data_access_pattern( _tmp_67,Pt_size, _tmp_68,EA),\\n   EA > Content_prev,\\n   EA > Content_next,\\n    _tmp_67 = (Memory+Pt_size),\\n    _tmp_68 = as(Pt_size, number).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY refined_block)) (NOT (ISEMPTY data_access_pattern))) (NOT (ISEMPTY @delta_jump_table))) (NOT (ISEMPTY symbolic_data)))
          (FOR_IN t0 @delta_jump_table            (FOR t1 data_access_pattern (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)) (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (AND (AND (CONSTRAINT = (TUPLE t1 0)  (INTRINSIC + (TUPLE t0 1) (TUPLE t1 1))) (CONSTRAINT = (TUPLE t1 2)  (TUPLE t1 1))) (NOT (EXISTS jump_table ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (TUPLE t1 1))))))
             (INDEXED_IF_EXISTS t2 symbolic_data (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)) (= (TUPLE t2 1) (TUPLE t1 1))) (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t2 2)) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t2 2)))
              (FOR t3 symbolic_data (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 1) (TUPLE t1 1)))
               (IF (AND (AND (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t3 2)) (CONSTRAINT != (TUPLE t0 0)  (TUPLE t3 2))) (EXISTS refined_block ((TUPLE t3 2))))
                (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (TUPLE t1 1))) @new_jump_table)
               )))            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_jump_table "@t-recursive-relation;jump_table;cfg.dl [53:7-53:17];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_jump_table))
 ) (STMTS      (TIMER_ON @new_jump_table "@c-recursive-relation;jump_table;cfg.dl [53:7-53:17];"
(STMTS (QUERY
       (FOR_IN t0 @new_jump_table         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) jump_table)
)
      )
       (SWAP @delta_jump_table @new_jump_table)
       (CLEAR @new_jump_table)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_jump_table)
     (CLEAR @new_jump_table)
 ) )  ) (STMTS     (CLEAR data_access_pattern)
 ) )  )
  (SUBROUTINE jump_table_prelude
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON jump_table_prelude "@t-nonrecursive-relation;jump_table_prelude;binary/pe/jump_tables.dl [28:7-28:25];"
(STMTS      (DEBUG 
 "jump_table_prelude(EA,0) :- \n   reg_jump(EA,_),\n   instruction(EA,_,_,_,_,_,_,_,_,_),\n   !invalid(EA,_).\nin file jump_tables.dl [30:1-32:21]" 
      (TIMER_ON jump_table_prelude "@t-nonrecursive-rule;jump_table_prelude;binary/pe/jump_tables.dl [30:1-32:21];jump_table_prelude(EA,0) :- \\n   reg_jump(EA,_),\\n   instruction(EA,_,_,_,_,_,_,_,_,_),\\n   !invalid(EA,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 reg_jump           (IF (AND (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (NOT (EXISTS invalid ((TUPLE t0 0) UNDEF))))
           (INSERT ((TUPLE t0 0) (UNSIGNED 0)) jump_table_prelude)
          ))
        )       )
      )
     )
      (DEBUG 
 "jump_table_prelude(EA,0) :- \n   reg_call(EA,_),\n   instruction(EA,_,_,_,_,_,_,_,_,_),\n   !invalid(EA,_).\nin file jump_tables.dl [34:1-36:21]" 
      (TIMER_ON jump_table_prelude "@t-nonrecursive-rule;jump_table_prelude;binary/pe/jump_tables.dl [34:1-36:21];jump_table_prelude(EA,0) :- \\n   reg_call(EA,_),\\n   instruction(EA,_,_,_,_,_,_,_,_,_),\\n   !invalid(EA,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY reg_call)) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 reg_call           (IF (AND (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (NOT (EXISTS invalid ((TUPLE t0 0) UNDEF))))
           (INSERT ((TUPLE t0 0) (UNSIGNED 0)) jump_table_prelude)
          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 jump_table_prelude       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_jump_table_prelude)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_jump_table_prelude "@t-recursive-relation;jump_table_prelude;binary/pe/jump_tables.dl [28:7-28:25];"
(STMTS       (DEBUG 
 "jump_table_prelude(EA_prev,(Steps+1)) :- \n   jump_table_prelude(EA,Steps),\n   Steps < 6,\n   must_fallthrough(EA_prev,EA).\nin file jump_tables.dl [38:1-40:34]" 
       (TIMER_ON @new_jump_table_prelude "@t-recursive-rule;jump_table_prelude;0;binary/pe/jump_tables.dl [38:1-40:34];jump_table_prelude(EA_prev,(Steps+1)) :- \\n   jump_table_prelude(EA,Steps),\\n   Steps < 6,\\n   must_fallthrough(EA_prev,EA).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_jump_table_prelude)) (NOT (ISEMPTY must_fallthrough)))
          (FOR_IN t0 @delta_jump_table_prelude            (IF (CONSTRAINT < (TUPLE t0 1)  (UNSIGNED 6))
            (FOR t1 must_fallthrough (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
             (IF (NOT (EXISTS jump_table_prelude ((TUPLE t1 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)))))
              (INSERT ((TUPLE t1 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1))) @new_jump_table_prelude)
             ))           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_jump_table_prelude "@t-recursive-relation;jump_table_prelude;binary/pe/jump_tables.dl [28:7-28:25];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_jump_table_prelude))
 ) (STMTS      (TIMER_ON @new_jump_table_prelude "@c-recursive-relation;jump_table_prelude;binary/pe/jump_tables.dl [28:7-28:25];"
(STMTS (QUERY
       (FOR_IN t0 @new_jump_table_prelude         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) jump_table_prelude)
)
      )
       (SWAP @delta_jump_table_prelude @new_jump_table_prelude)
       (CLEAR @new_jump_table_prelude)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_jump_table_prelude)
     (CLEAR @new_jump_table_prelude)
 ) )  )  )  )
  (SUBROUTINE known_block
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON known_block "@t-nonrecursive-relation;known_block;code_inference.dl [713:7-713:18];"
(STMTS      (DEBUG 
 "known_block(Block,\"data\",Size,\"object symbol\") :- \n   defined_symbol(Block,Size,\"OBJECT\",_,_,_,_,_,_),\n   Size > 0.\nin file code_inference.dl [564:1-567:14]" 
      (TIMER_ON known_block "@t-nonrecursive-rule;known_block;code_inference.dl [564:1-567:14];known_block(Block,\\\"data\\\",Size,\\\"object symbol\\\") :- \\n   defined_symbol(Block,Size,\\\"OBJECT\\\",_,_,_,_,_,_),\\n   Size > 0.;"
(QUERY
        (IF (NOT (ISEMPTY defined_symbol))
         (FOR t0 defined_symbol (INDEX  (= (TUPLE t0 2) (STRING "OBJECT")))
          (IF (AND (CONSTRAINT >= (TUPLE t0 1)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 1)  (UNSIGNED 0)))
           (INSERT ((TUPLE t0 0) (STRING "data") (TUPLE t0 1) (STRING "object symbol")) known_block)
          ))        )       )
      )
     )
      (DEBUG 
 "known_block(Block,\"data\",4,\"relocation\") :- \n   binary_format(\"PE\"),\n   relocation(Block,\"HIGHLOW\",_,_,_,_,_),\n   !instruction_has_relocation(_,Block),\n   address_in_data(Block,_).\nin file code_inference.dl [574:1-580:30]" 
      (TIMER_ON known_block "@t-nonrecursive-rule;known_block;code_inference.dl [574:1-580:30];known_block(Block,\\\"data\\\",4,\\\"relocation\\\") :- \\n   binary_format(\\\"PE\\\"),\\n   relocation(Block,\\\"HIGHLOW\\\",_,_,_,_,_),\\n   !instruction_has_relocation(_,Block),\\n   address_in_data(Block,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY address_in_data))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "HIGHLOW")))
          (IF (AND (EXISTS address_in_data ((TUPLE t0 0) UNDEF)) (NOT (EXISTS instruction_has_relocation (UNDEF (TUPLE t0 0)))))
           (INSERT ((TUPLE t0 0) (STRING "data") (UNSIGNED 4) (STRING "relocation")) known_block)
          ))        )       )
      )
     )
      (DEBUG 
 "known_block(Block,\"code\",(End-Beg),\"entry point\") :- \n   !binary_type(\"REL\"),\n   entry_point(Block),\n   block_candidate_boundaries(Block,\"code\",Beg,End).\nin file code_inference.dl [717:1-721:22]" 
      (TIMER_ON known_block "@t-nonrecursive-rule;known_block;code_inference.dl [717:1-721:22];known_block(Block,\\\"code\\\",(End-Beg),\\\"entry point\\\") :- \\n   !binary_type(\\\"REL\\\"),\\n   entry_point(Block),\\n   block_candidate_boundaries(Block,\\\"code\\\",Beg,End).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY entry_point)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (EXISTS binary_type ((STRING "REL")))))
         (FOR_IN t0 entry_point           (FOR t1 block_candidate_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (STRING "code")))
           (INSERT ((TUPLE t0 0) (STRING "code") (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2)) (STRING "entry point")) known_block)
))
        )       )
      )
     )
      (DEBUG 
 "known_block(Block,\"code\",(End-Beg),\"known code\") :- \n   known_code(Block),\n   block_candidate_boundaries(Block,\"code\",Beg,End).\nin file code_inference.dl [723:1-726:22]" 
      (TIMER_ON known_block "@t-nonrecursive-rule;known_block;code_inference.dl [723:1-726:22];known_block(Block,\\\"code\\\",(End-Beg),\\\"known code\\\") :- \\n   known_code(Block),\\n   block_candidate_boundaries(Block,\\\"code\\\",Beg,End).;"
(QUERY
        (IF (AND (NOT (ISEMPTY known_code)) (NOT (ISEMPTY block_candidate_boundaries)))
         (FOR_IN t0 known_code           (FOR t1 block_candidate_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (STRING "code")))
           (INSERT ((TUPLE t0 0) (STRING "code") (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2)) (STRING "known code")) known_block)
))
        )       )
      )
     )
      (DEBUG 
 "known_block(Block,\"code\",(End-Beg),cat(\"DT_\",Entry)) :- \n   Entry = \"INIT\",\n   dynamic_entry(Entry,Block),\n   block_candidate_boundaries(Block,\"code\",Beg,End).\nin file code_inference.dl [728:1-735:22]" 
      (TIMER_ON known_block "@t-nonrecursive-rule;known_block;code_inference.dl [728:1-735:22];known_block(Block,\\\"code\\\",(End-Beg),cat(\\\"DT_\\\",Entry)) :- \\n   Entry = \\\"INIT\\\",\\n   dynamic_entry(Entry,Block),\\n   block_candidate_boundaries(Block,\\\"code\\\",Beg,End).;"
(QUERY
        (IF (AND (NOT (ISEMPTY dynamic_entry)) (NOT (ISEMPTY block_candidate_boundaries)))
         (FOR t0 dynamic_entry (INDEX  (= (TUPLE t0 0) (STRING "INIT")))
          (FOR t1 block_candidate_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (STRING "code")))
           (INSERT ((TUPLE t0 1) (STRING "code") (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2)) (INTRINSIC cat (STRING "DT_") (TUPLE t0 0))) known_block)
))        )       )
      )
     )
      (DEBUG 
 "known_block(Block,\"code\",(End-Beg),cat(\"DT_\",Entry)) :- \n   Entry = \"FINI\",\n   dynamic_entry(Entry,Block),\n   block_candidate_boundaries(Block,\"code\",Beg,End).\nin file code_inference.dl [728:1-735:22]" 
      (TIMER_ON known_block "@t-nonrecursive-rule;known_block;code_inference.dl [728:1-735:22];known_block(Block,\\\"code\\\",(End-Beg),cat(\\\"DT_\\\",Entry)) :- \\n   Entry = \\\"FINI\\\",\\n   dynamic_entry(Entry,Block),\\n   block_candidate_boundaries(Block,\\\"code\\\",Beg,End).;"
(QUERY
        (IF (AND (NOT (ISEMPTY dynamic_entry)) (NOT (ISEMPTY block_candidate_boundaries)))
         (FOR t0 dynamic_entry (INDEX  (= (TUPLE t0 0) (STRING "FINI")))
          (FOR t1 block_candidate_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (STRING "code")))
           (INSERT ((TUPLE t0 1) (STRING "code") (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2)) (INTRINSIC cat (STRING "DT_") (TUPLE t0 0))) known_block)
))        )       )
      )
     )
      (DEBUG 
 "known_block(Block,\"code\",(End-Beg),\"function symbol\") :- \n   function_symbol(Block,_),\n   block_candidate_boundaries(Block,\"code\",Beg,End).\nin file code_inference.dl [737:1-740:22]" 
      (TIMER_ON known_block "@t-nonrecursive-rule;known_block;code_inference.dl [737:1-740:22];known_block(Block,\\\"code\\\",(End-Beg),\\\"function symbol\\\") :- \\n   function_symbol(Block,_),\\n   block_candidate_boundaries(Block,\\\"code\\\",Beg,End).;"
(QUERY
        (IF (AND (NOT (ISEMPTY function_symbol)) (NOT (ISEMPTY block_candidate_boundaries)))
         (FOR_IN t0 function_symbol           (FOR t1 block_candidate_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (STRING "code")))
           (INSERT ((TUPLE t0 0) (STRING "code") (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2)) (STRING "function symbol")) known_block)
))
        )       )
      )
     )
      (DEBUG 
 "known_block(Block,\"code\",(End-Start),\"fde-entry\") :- \n   fde_addresses(Block,_),\n   !misaligned_fde_start(Block,_),\n   block_candidate_boundaries(Block,\"code\",Start,End).\nin file code_inference.dl [742:1-746:24]" 
      (TIMER_ON known_block "@t-nonrecursive-rule;known_block;code_inference.dl [742:1-746:24];known_block(Block,\\\"code\\\",(End-Start),\\\"fde-entry\\\") :- \\n   fde_addresses(Block,_),\\n   !misaligned_fde_start(Block,_),\\n   block_candidate_boundaries(Block,\\\"code\\\",Start,End).;"
(QUERY
        (IF (AND (NOT (ISEMPTY fde_addresses)) (NOT (ISEMPTY block_candidate_boundaries)))
         (FOR_IN t0 fde_addresses           (IF (NOT (EXISTS misaligned_fde_start ((TUPLE t0 0) UNDEF)))
           (FOR t1 block_candidate_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (STRING "code")))
            (INSERT ((TUPLE t0 0) (STRING "code") (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2)) (STRING "fde-entry")) known_block)
)          ))
        )       )
      )
     )
      (DEBUG 
 "known_block(Block,\"code\",(End-Beg),\"pointer array section\") :- \n   binary_format(\"ELF\"),\n   function_pointer_section(SectionName),\n   section(SectionName,SectionSize,Start,_,_),\n   aligned_address_in_data(Entry,Block),\n   Start <= Entry,\n   Entry < (Start+SectionSize),\n   block_candidate_boundaries(Block,\"code\",Beg,End).\nin file code_inference.dl [748:1-756:22]" 
      (TIMER_ON known_block "@t-nonrecursive-rule;known_block;code_inference.dl [748:1-756:22];known_block(Block,\\\"code\\\",(End-Beg),\\\"pointer array section\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   function_pointer_section(SectionName),\\n   section(SectionName,SectionSize,Start,_,_),\\n   aligned_address_in_data(Entry,Block),\\n   Start <= Entry,\\n   Entry < (Start+SectionSize),\\n   block_candidate_boundaries(Block,\\\"code\\\",Beg,End).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY function_pointer_section)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY section))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY aligned_address_in_data))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 function_pointer_section           (FOR t1 section (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR_IN t2 aligned_address_in_data             (IF (AND (CONSTRAINT < (TUPLE t2 0)  (INTRINSIC + (TUPLE t1 2) (TUPLE t1 1))) (CONSTRAINT <= (TUPLE t1 2)  (TUPLE t2 0)))
             (FOR t3 block_candidate_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (= (TUPLE t3 1) (STRING "code")))
              (INSERT ((TUPLE t2 1) (STRING "code") (INTRINSIC - (TUPLE t3 3) (TUPLE t3 2)) (STRING "pointer array section")) known_block)
)            ))
))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 known_block       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) @delta_known_block)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_known_block "@t-recursive-relation;known_block;code_inference.dl [713:7-713:18];"
(STMTS       (DEBUG 
 "known_block(BlockB,TypeB,SizeB,\"propagated\") :- \n   known_block(BlockA,TypeA,SizeA,_),\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB).\nin file code_inference.dl [759:1-761:76]" 
       (TIMER_ON @new_known_block "@t-recursive-rule;known_block;0;code_inference.dl [759:1-761:76];known_block(BlockB,TypeB,SizeB,\\\"propagated\\\") :- \\n   known_block(BlockA,TypeA,SizeA,_),\\n   block_candidate_dependency_edge(BlockA,TypeA,SizeA,BlockB,TypeB,SizeB).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_known_block)) (NOT (ISEMPTY block_candidate_dependency_edge)))
          (FOR_IN t0 @delta_known_block            (FOR t1 block_candidate_dependency_edge (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
            (IF (NOT (EXISTS known_block ((TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5) (STRING "propagated"))))
             (INSERT ((TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5) (STRING "propagated")) @new_known_block)
            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_known_block "@t-recursive-relation;known_block;code_inference.dl [713:7-713:18];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_known_block))
 ) (STMTS      (TIMER_ON @new_known_block "@c-recursive-relation;known_block;code_inference.dl [713:7-713:18];"
(STMTS (QUERY
       (FOR_IN t0 @new_known_block         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) known_block)
)
      )
       (SWAP @delta_known_block @new_known_block)
       (CLEAR @new_known_block)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_known_block)
     (CLEAR @new_known_block)
 ) )  ) (STMTS     (CLEAR known_code)
 ) )  )
  (SUBROUTINE known_code
(STMTS (STMTS (STMTS     (TIMER_ON known_code "@t-relation-loadtime;known_code;code_inference.dl [276:7-276:17];loadtime;"
     (IO known_code ((= IO "file") (= attributeNames "EA") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "known_code") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"EA\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE known_code "@n-nonrecursive-relation;known_code;code_inference.dl [276:7-276:17];")
 )   )  )  )
  (SUBROUTINE label_conflict
(STMTS (STMTS     (TIMER_ON label_conflict "@t-nonrecursive-relation;label_conflict;symbolization.dl [714:7-714:21];"
(STMTS      (DEBUG 
 "label_conflict(EA,Pt_size,\"symbol\") :- \n   data_object_candidate(EA,Pt_size,\"symbol\"),\n   labeled_data_candidate(EA2),\n   EA2 > EA,\n   EA2 < (EA+Pt_size).\nin file symbolization.dl [716:1-719:32]" 
      (TIMER_ON label_conflict "@t-nonrecursive-rule;label_conflict;symbolization.dl [716:1-719:32];label_conflict(EA,Pt_size,\\\"symbol\\\") :- \\n   data_object_candidate(EA,Pt_size,\\\"symbol\\\"),\\n   labeled_data_candidate(EA2),\\n   EA2 > EA,\\n   EA2 < (EA+Pt_size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object_candidate)) (NOT (ISEMPTY labeled_data_candidate)))
         (FOR t0 data_object_candidate (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (IF_EXISTS t1 labeled_data_candidate (AND (CONSTRAINT > (TUPLE t1 0)  (TUPLE t0 0)) (CONSTRAINT < (TUPLE t1 0)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)))) 
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "symbol")) label_conflict)
))        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR labeled_data_candidate)
 ) )  )
  (SUBROUTINE labeled_data_candidate
(STMTS     (TIMER_ON labeled_data_candidate "@t-nonrecursive-relation;labeled_data_candidate;symbolization.dl [359:7-359:29];"
(STMTS      (DEBUG 
 "labeled_data_candidate((ImageBase+Dest)) :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(_,_,Dest).\nin file symbolization.dl [182:1-184:46]" 
      (TIMER_ON labeled_data_candidate "@t-nonrecursive-rule;labeled_data_candidate;binary/pe/symbolization.dl [182:1-184:46];labeled_data_candidate((ImageBase+Dest)) :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(_,_,Dest).;"
(QUERY
        (IF (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2))) labeled_data_candidate)
)
)
        )       )
      )
     )
      (DEBUG 
 "labeled_data_candidate(EA) :- \n   symbolic_operand(_,_,EA,\"data\").\nin file symbolization.dl [365:1-366:37]" 
      (TIMER_ON labeled_data_candidate "@t-nonrecursive-rule;labeled_data_candidate;symbolization.dl [365:1-366:37];labeled_data_candidate(EA) :- \\n   symbolic_operand(_,_,EA,\\\"data\\\").;"
(QUERY
        (IF (NOT (ISEMPTY symbolic_operand))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (INSERT ((TUPLE t0 2)) labeled_data_candidate)
)        )       )
      )
     )
      (DEBUG 
 "labeled_data_candidate(Val) :- \n   address_in_data_refined(EA,Val),\n   (EA%8) = 0.\nin file symbolization.dl [368:1-371:22]" 
      (TIMER_ON labeled_data_candidate "@t-nonrecursive-rule;labeled_data_candidate;symbolization.dl [368:1-371:22];labeled_data_candidate(Val) :- \\n   address_in_data_refined(EA,Val),\\n   (EA%8) = 0.;"
(QUERY
        (IF (NOT (ISEMPTY address_in_data_refined))
         (FOR_IN t0 address_in_data_refined           (IF (CONSTRAINT = (INTRINSIC % (TUPLE t0 0) (UNSIGNED 8))  (UNSIGNED 0))
           (INSERT ((TUPLE t0 1)) labeled_data_candidate)
          ))
        )       )
      )
     )
      (DEBUG 
 "labeled_data_candidate(EA) :- \n   symbol(EA,_,_,_,_,_,_,_,_).\nin file symbolization.dl [361:1-363:32]" 
      (TIMER_ON labeled_data_candidate "@t-nonrecursive-rule;labeled_data_candidate;symbolization.dl [361:1-363:32];labeled_data_candidate(EA) :- \\n   symbol(EA,_,_,_,_,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR_IN t0 symbol           (INSERT ((TUPLE t0 0)) labeled_data_candidate)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE labeled_ea
(STMTS     (TIMER_ON labeled_ea "@t-nonrecursive-relation;labeled_ea;symbolization.dl [167:7-167:17];"
(STMTS      (DEBUG 
 "labeled_ea(Lsda) :- \n   fde_entry(_,_,_,_,_,Lsda),\n   Lsda != 0.\nin file exceptions.dl [164:1-166:15]" 
      (TIMER_ON labeled_ea "@t-nonrecursive-rule;labeled_ea;exceptions.dl [164:1-166:15];labeled_ea(Lsda) :- \\n   fde_entry(_,_,_,_,_,Lsda),\\n   Lsda != 0.;"
(QUERY
        (IF (NOT (ISEMPTY fde_entry))
         (FOR_IN t0 fde_entry           (IF (CONSTRAINT != (TUPLE t0 5)  (UNSIGNED 0))
           (INSERT ((TUPLE t0 5)) labeled_ea)
          ))
        )       )
      )
     )
      (DEBUG 
 "labeled_ea(Personality) :- \n   cie_personality(_,Personality,_,_,_),\n   Personality != 0.\nin file exceptions.dl [168:1-170:22]" 
      (TIMER_ON labeled_ea "@t-nonrecursive-rule;labeled_ea;exceptions.dl [168:1-170:22];labeled_ea(Personality) :- \\n   cie_personality(_,Personality,_,_,_),\\n   Personality != 0.;"
(QUERY
        (IF (NOT (ISEMPTY cie_personality))
         (FOR_IN t0 cie_personality           (IF (CONSTRAINT != (TUPLE t0 1)  (UNSIGNED 0))
           (INSERT ((TUPLE t0 1)) labeled_ea)
          ))
        )       )
      )
     )
      (DEBUG 
 "labeled_ea(EA) :- \n   symbolic_operand(Src,_,EA,_),\n   !moved_label(Src,_,EA,_).\nin file symbolization.dl [864:1-866:30]" 
      (TIMER_ON labeled_ea "@t-nonrecursive-rule;labeled_ea;symbolization.dl [864:1-866:30];labeled_ea(EA) :- \\n   symbolic_operand(Src,_,EA,_),\\n   !moved_label(Src,_,EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY symbolic_operand))
         (FOR_IN t0 symbolic_operand           (IF (NOT (EXISTS moved_label ((TUPLE t0 0) UNDEF (TUPLE t0 2) UNDEF)))
           (INSERT ((TUPLE t0 2)) labeled_ea)
          ))
        )       )
      )
     )
      (DEBUG 
 "labeled_ea(EA) :- \n   symbolic_data(Src,_,EA),\n   !moved_data_label(Src,_,EA,_).\nin file symbolization.dl [868:1-870:35]" 
      (TIMER_ON labeled_ea "@t-nonrecursive-rule;labeled_ea;symbolization.dl [868:1-870:35];labeled_ea(EA) :- \\n   symbolic_data(Src,_,EA),\\n   !moved_data_label(Src,_,EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY symbolic_data))
         (FOR_IN t0 symbolic_data           (IF (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF (TUPLE t0 2) UNDEF)))
           (INSERT ((TUPLE t0 2)) labeled_ea)
          ))
        )       )
      )
     )
      (DEBUG 
 "labeled_ea(EA_moved) :- \n   moved_label(_,_,_,EA_moved).\nin file symbolization.dl [872:1-873:33]" 
      (TIMER_ON labeled_ea "@t-nonrecursive-rule;labeled_ea;symbolization.dl [872:1-873:33];labeled_ea(EA_moved) :- \\n   moved_label(_,_,_,EA_moved).;"
(QUERY
        (IF (NOT (ISEMPTY moved_label))
         (FOR_IN t0 moved_label           (INSERT ((TUPLE t0 3)) labeled_ea)
)
        )       )
      )
     )
      (DEBUG 
 "labeled_ea(New_dest) :- \n   moved_data_label(_,_,_,New_dest).\nin file symbolization.dl [875:1-876:38]" 
      (TIMER_ON labeled_ea "@t-nonrecursive-rule;labeled_ea;symbolization.dl [875:1-876:38];labeled_ea(New_dest) :- \\n   moved_data_label(_,_,_,New_dest).;"
(QUERY
        (IF (NOT (ISEMPTY moved_data_label))
         (FOR_IN t0 moved_data_label           (INSERT ((TUPLE t0 3)) labeled_ea)
)
        )       )
      )
     )
      (DEBUG 
 "labeled_ea(EA) :- \n   symbol_minus_symbol(Src,_,EA,_,_,_),\n   !moved_data_label(Src,_,EA,_).\nin file symbolization.dl [878:1-880:35]" 
      (TIMER_ON labeled_ea "@t-nonrecursive-rule;labeled_ea;symbolization.dl [878:1-880:35];labeled_ea(EA) :- \\n   symbol_minus_symbol(Src,_,EA,_,_,_),\\n   !moved_data_label(Src,_,EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY symbol_minus_symbol))
         (FOR_IN t0 symbol_minus_symbol           (IF (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF (TUPLE t0 2) UNDEF)))
           (INSERT ((TUPLE t0 2)) labeled_ea)
          ))
        )       )
      )
     )
      (DEBUG 
 "labeled_ea(EA) :- \n   symbol_minus_symbol(Src,_,_,EA,_,_),\n   !moved_data_label(Src,_,EA,_).\nin file symbolization.dl [882:1-884:35]" 
      (TIMER_ON labeled_ea "@t-nonrecursive-rule;labeled_ea;symbolization.dl [882:1-884:35];labeled_ea(EA) :- \\n   symbol_minus_symbol(Src,_,_,EA,_,_),\\n   !moved_data_label(Src,_,EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY symbol_minus_symbol))
         (FOR_IN t0 symbol_minus_symbol           (IF (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF (TUPLE t0 3) UNDEF)))
           (INSERT ((TUPLE t0 3)) labeled_ea)
          ))
        )       )
      )
     )
      (DEBUG 
 "labeled_ea(EA) :- \n   fde_entry(_,_,_,_,_,EA).\nin file symbolization.dl [886:1-887:29]" 
      (TIMER_ON labeled_ea "@t-nonrecursive-rule;labeled_ea;symbolization.dl [886:1-887:29];labeled_ea(EA) :- \\n   fde_entry(_,_,_,_,_,EA).;"
(QUERY
        (IF (NOT (ISEMPTY fde_entry))
         (FOR_IN t0 fde_entry           (INSERT ((TUPLE t0 5)) labeled_ea)
)
        )       )
      )
     )
      (DEBUG 
 "labeled_ea(TargetEA) :- \n   symbolic_expr_from_relocation(_,_,\"\",_,TargetEA).\nin file symbolization.dl [889:1-891:54]" 
      (TIMER_ON labeled_ea "@t-nonrecursive-rule;labeled_ea;symbolization.dl [889:1-891:54];labeled_ea(TargetEA) :- \\n   symbolic_expr_from_relocation(_,_,\\\"\\\",_,TargetEA).;"
(QUERY
        (IF (NOT (ISEMPTY symbolic_expr_from_relocation))
         (FOR t0 symbolic_expr_from_relocation (INDEX  (= (TUPLE t0 2) (STRING "")))
          (INSERT ((TUPLE t0 4)) labeled_ea)
)        )       )
      )
     )
      (DEBUG 
 "labeled_ea(EA) :- \n   defined_symbol(EA,_,Type,_,_,_,_,_,_),\n   Type != \"SECTION\",\n   EA != 0.\nin file symbolization.dl [858:1-862:13]" 
      (TIMER_ON labeled_ea "@t-nonrecursive-rule;labeled_ea;symbolization.dl [858:1-862:13];labeled_ea(EA) :- \\n   defined_symbol(EA,_,Type,_,_,_,_,_,_),\\n   Type != \\\"SECTION\\\",\\n   EA != 0.;"
(QUERY
        (IF (NOT (ISEMPTY defined_symbol))
         (FOR_IN t0 defined_symbol           (IF (AND (CONSTRAINT != (TUPLE t0 0)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 2)  (STRING "SECTION")))
           (INSERT ((TUPLE t0 0)) labeled_ea)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE last_fde
(STMTS     (TIMER_ON last_fde "@t-nonrecursive-relation;last_fde;exceptions.dl [61:7-61:15];"
(STMTS      (DEBUG 
 "last_fde(Addr) :- \n   fde_entry(Addr,Length,_,_,_,_),\n   !fde_entry(((Addr+Length)+4),_,_,_,_,_),\n   !cie_entry(((Addr+Length)+4),_,_,_).\nin file exceptions.dl [63:1-66:37]" 
      (TIMER_ON last_fde "@t-nonrecursive-rule;last_fde;exceptions.dl [63:1-66:37];last_fde(Addr) :- \\n   fde_entry(Addr,Length,_,_,_,_),\\n   !fde_entry(((Addr+Length)+4),_,_,_,_,_),\\n   !cie_entry(((Addr+Length)+4),_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY fde_entry))
         (FOR_IN t0 fde_entry           (IF (AND (NOT (EXISTS cie_entry ((INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (UNSIGNED 4)) UNDEF UNDEF UNDEF))) (NOT (EXISTS fde_entry ((INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (UNSIGNED 4)) UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (INSERT ((TUPLE t0 0)) last_fde)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE last_fde_instruction
(STMTS     (TIMER_ON last_fde_instruction "@t-nonrecursive-relation;last_fde_instruction;exceptions.dl [68:7-68:27];"
(STMTS      (DEBUG 
 "last_fde_instruction(FdeAddr,(Index+1)) :- \n   fde_instruction(FdeAddr,Index,_,_,_,_,_),\n   !fde_instruction(FdeAddr,(Index+1),_,_,_,_,_).\nin file exceptions.dl [70:1-72:49]" 
      (TIMER_ON last_fde_instruction "@t-nonrecursive-rule;last_fde_instruction;exceptions.dl [70:1-72:49];last_fde_instruction(FdeAddr,(Index+1)) :- \\n   fde_instruction(FdeAddr,Index,_,_,_,_,_),\\n   !fde_instruction(FdeAddr,(Index+1),_,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY fde_instruction))
         (FOR_IN t0 fde_instruction           (IF (NOT (EXISTS fde_instruction ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)) UNDEF UNDEF UNDEF UNDEF UNDEF)))
           (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1))) last_fde_instruction)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE limit_reg_op
(STMTS     (TIMER_ON limit_reg_op "@t-nonrecursive-relation;limit_reg_op;boundary_value_analysis.dl [318:7-318:19];"
(STMTS      (DEBUG 
 "limit_reg_op(EA,DstReg,SrcReg,0) :- \n   arch.move_reg_reg(EA,DstReg,SrcReg).\nin file boundary_value_analysis.dl [320:1-321:41]" 
      (TIMER_ON limit_reg_op "@t-nonrecursive-rule;limit_reg_op;boundary_value_analysis.dl [320:1-321:41];limit_reg_op(EA,DstReg,SrcReg,0) :- \\n   arch.move_reg_reg(EA,DstReg,SrcReg).;"
(QUERY
        (IF (NOT (ISEMPTY arch.move_reg_reg))
         (FOR_IN t0 arch.move_reg_reg           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (NUMBER 0)) limit_reg_op)
)
        )       )
      )
     )
      (DEBUG 
 "limit_reg_op(EA,Reg,Reg,Offset) :- \n   arch.reg_arithmetic_operation(EA,Reg,Reg,1,Offset).\nin file boundary_value_analysis.dl [323:1-324:56]" 
      (TIMER_ON limit_reg_op "@t-nonrecursive-rule;limit_reg_op;boundary_value_analysis.dl [323:1-324:56];limit_reg_op(EA,Reg,Reg,Offset) :- \\n   arch.reg_arithmetic_operation(EA,Reg,Reg,1,Offset).;"
(QUERY
        (IF (NOT (ISEMPTY arch.reg_arithmetic_operation))
         (FOR t0 arch.reg_arithmetic_operation (INDEX  (= (TUPLE t0 3) (NUMBER 1)))
          (IF (CONSTRAINT = (TUPLE t0 1)  (TUPLE t0 2))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 1) (TUPLE t0 4)) limit_reg_op)
          ))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE limit_type_map
(STMTS     (TIMER_ON limit_type_map "@t-nonrecursive-relation;limit_type_map;boundary_value_analysis.dl [124:7-124:21];"
(STMTS      (DEBUG 
 "limit_type_map(\"A\",\"MIN\",\"MAX\",1,0).\nin file boundary_value_analysis.dl [126:1-126:37]" 
      (TIMER_ON limit_type_map "@t-nonrecursive-rule;limit_type_map;boundary_value_analysis.dl [126:1-126:37];limit_type_map(\\\"A\\\",\\\"MIN\\\",\\\"MAX\\\",1,0).;"
(QUERY
        (INSERT ((STRING "A") (STRING "MIN") (STRING "MAX") (NUMBER 1) (NUMBER 0)) limit_type_map)
       )
      )
     )
      (DEBUG 
 "limit_type_map(\"G\",\"MIN\",\"MAX\",1,0).\nin file boundary_value_analysis.dl [127:1-127:37]" 
      (TIMER_ON limit_type_map "@t-nonrecursive-rule;limit_type_map;boundary_value_analysis.dl [127:1-127:37];limit_type_map(\\\"G\\\",\\\"MIN\\\",\\\"MAX\\\",1,0).;"
(QUERY
        (INSERT ((STRING "G") (STRING "MIN") (STRING "MAX") (NUMBER 1) (NUMBER 0)) limit_type_map)
       )
      )
     )
      (DEBUG 
 "limit_type_map(\"AE\",\"MIN\",\"MAX\",0,-1).\nin file boundary_value_analysis.dl [128:1-128:39]" 
      (TIMER_ON limit_type_map "@t-nonrecursive-rule;limit_type_map;boundary_value_analysis.dl [128:1-128:39];limit_type_map(\\\"AE\\\",\\\"MIN\\\",\\\"MAX\\\",0,-1).;"
(QUERY
        (INSERT ((STRING "AE") (STRING "MIN") (STRING "MAX") (NUMBER 0) (NUMBER -1)) limit_type_map)
       )
      )
     )
      (DEBUG 
 "limit_type_map(\"GE\",\"MIN\",\"MAX\",0,-1).\nin file boundary_value_analysis.dl [129:1-129:39]" 
      (TIMER_ON limit_type_map "@t-nonrecursive-rule;limit_type_map;boundary_value_analysis.dl [129:1-129:39];limit_type_map(\\\"GE\\\",\\\"MIN\\\",\\\"MAX\\\",0,-1).;"
(QUERY
        (INSERT ((STRING "GE") (STRING "MIN") (STRING "MAX") (NUMBER 0) (NUMBER -1)) limit_type_map)
       )
      )
     )
      (DEBUG 
 "limit_type_map(\"B\",\"MAX\",\"MIN\",-1,0).\nin file boundary_value_analysis.dl [130:1-130:38]" 
      (TIMER_ON limit_type_map "@t-nonrecursive-rule;limit_type_map;boundary_value_analysis.dl [130:1-130:38];limit_type_map(\\\"B\\\",\\\"MAX\\\",\\\"MIN\\\",-1,0).;"
(QUERY
        (INSERT ((STRING "B") (STRING "MAX") (STRING "MIN") (NUMBER -1) (NUMBER 0)) limit_type_map)
       )
      )
     )
      (DEBUG 
 "limit_type_map(\"L\",\"MAX\",\"MIN\",-1,0).\nin file boundary_value_analysis.dl [131:1-131:38]" 
      (TIMER_ON limit_type_map "@t-nonrecursive-rule;limit_type_map;boundary_value_analysis.dl [131:1-131:38];limit_type_map(\\\"L\\\",\\\"MAX\\\",\\\"MIN\\\",-1,0).;"
(QUERY
        (INSERT ((STRING "L") (STRING "MAX") (STRING "MIN") (NUMBER -1) (NUMBER 0)) limit_type_map)
       )
      )
     )
      (DEBUG 
 "limit_type_map(\"BE\",\"MAX\",\"MIN\",0,1).\nin file boundary_value_analysis.dl [132:1-132:38]" 
      (TIMER_ON limit_type_map "@t-nonrecursive-rule;limit_type_map;boundary_value_analysis.dl [132:1-132:38];limit_type_map(\\\"BE\\\",\\\"MAX\\\",\\\"MIN\\\",0,1).;"
(QUERY
        (INSERT ((STRING "BE") (STRING "MAX") (STRING "MIN") (NUMBER 0) (NUMBER 1)) limit_type_map)
       )
      )
     )
      (DEBUG 
 "limit_type_map(\"LE\",\"MAX\",\"MIN\",0,1).\nin file boundary_value_analysis.dl [133:1-133:38]" 
      (TIMER_ON limit_type_map "@t-nonrecursive-rule;limit_type_map;boundary_value_analysis.dl [133:1-133:38];limit_type_map(\\\"LE\\\",\\\"MAX\\\",\\\"MIN\\\",0,1).;"
(QUERY
        (INSERT ((STRING "LE") (STRING "MAX") (STRING "MIN") (NUMBER 0) (NUMBER 1)) limit_type_map)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE loaded_section
(STMTS     (TIMER_ON loaded_section "@t-nonrecursive-relation;loaded_section;/usr/local/src/ddisasm/src/datalog/main.dl [815:7-815:21];"
(STMTS      (DEBUG 
 "loaded_section(Beg,(Beg+Size),Name) :- \n   section(Name,Size,Beg,_,_),\n   section_property(Name,\"Loaded\").\nin file main.dl [825:1-827:37]" 
      (TIMER_ON loaded_section "@t-nonrecursive-rule;loaded_section;/usr/local/src/ddisasm/src/datalog/main.dl [825:1-827:37];loaded_section(Beg,(Beg+Size),Name) :- \\n   section(Name,Size,Beg,_,_),\\n   section_property(Name,\\\"Loaded\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY section)) (NOT (ISEMPTY section_property)))
         (FOR_IN t0 section           (IF (EXISTS section_property ((TUPLE t0 0) (STRING "Loaded")))
           (INSERT ((TUPLE t0 2) (INTRINSIC + (TUPLE t0 2) (TUPLE t0 1)) (TUPLE t0 0)) loaded_section)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE low_pass_filter
(STMTS (STMTS     (TIMER_ON low_pass_filter "@t-nonrecursive-relation;low_pass_filter;bitmasks.dl [35:7-35:22];"
(STMTS      (DEBUG 
 "low_pass_filter(EA) :- \n   code_in_block(EA,_),\n   op_immediate_and_reg(EA,\"AND\",_,_,Imm),\n   low_pass_mask(Imm).\nin file bitmasks.dl [37:1-40:24]" 
      (TIMER_ON low_pass_filter "@t-nonrecursive-rule;low_pass_filter;bitmasks.dl [37:1-40:24];low_pass_filter(EA) :- \\n   code_in_block(EA,_),\\n   op_immediate_and_reg(EA,\\\"AND\\\",_,_,Imm),\\n   low_pass_mask(Imm).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY low_pass_mask)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY op_immediate_and_reg)))
         (FOR_IN t0 code_in_block           (INDEXED_IF_EXISTS t1 op_immediate_and_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (STRING "AND"))) (EXISTS low_pass_mask ((TUPLE t1 4)))
           (INSERT ((TUPLE t0 0)) low_pass_filter)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR low_pass_mask)
 ) )  )
  (SUBROUTINE low_pass_mask
(STMTS     (TIMER_ON low_pass_mask "@t-nonrecursive-relation;low_pass_mask;bitmasks.dl [29:7-29:20];"
(STMTS      (DEBUG 
 "low_pass_mask(((2**@generator_0)-1)) :- \n   @generator_0 = range(1,(8*as(8, number))).\nin file bitmasks.dl [31:1-33:39]" 
      (TIMER_ON low_pass_mask "@t-nonrecursive-rule;low_pass_mask;bitmasks.dl [31:1-33:39];low_pass_mask(((2**@generator_0)-1)) :- \\n   @generator_0 = range(1,(8*as(8, number))).;"
(QUERY
        (INTRINSIC (RANGE (NUMBER 1) (INTRINSIC * (NUMBER 8) (NUMBER 8))) t0)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE lsda
(STMTS (STMTS (STMTS     (TIMER_ON lsda "@t-relation-loadtime;lsda;binary/elf/elf_binaries.dl [249:7-249:11];loadtime;"
     (IO lsda ((= IO "file") (= attributeNames "lsdaAddress\tcallsiteTable\tcallsiteTableEncoding\tcallSiteTableLength\ttypeTable\ttypeTableEncoding\tlandingPadBaseAddress") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "lsda") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 7, \"params\": [\"lsdaAddress\", \"callsiteTable\", \"callsiteTableEncoding\", \"callSiteTableLength\", \"typeTable\", \"typeTableEncoding\", \"landingPadBaseAddress\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 7, \"types\": [\"u:address\", \"u:address\", \"u:unsigned\", \"u:unsigned\", \"u:address\", \"u:unsigned\", \"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE lsda "@n-nonrecursive-relation;lsda;binary/elf/elf_binaries.dl [249:7-249:11];")
 )   )  )  )
  (SUBROUTINE lsda_callsite
(STMTS (STMTS (STMTS     (TIMER_ON lsda_callsite "@t-relation-loadtime;lsda_callsite;binary/elf/elf_binaries.dl [265:7-265:20];loadtime;"
     (IO lsda_callsite ((= IO "file") (= attributeNames "CallSiteTable_address\tEA_start\tStart\tEA_end\tEnd\tEA_landingPad\tLandingPad\tEA_endLandindPad") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "lsda_callsite") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 8, \"params\": [\"CallSiteTable_address\", \"EA_start\", \"Start\", \"EA_end\", \"End\", \"EA_landingPad\", \"LandingPad\", \"EA_endLandindPad\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 8, \"types\": [\"u:address\", \"u:address\", \"u:address\", \"u:address\", \"u:address\", \"u:address\", \"u:address\", \"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE lsda_callsite "@n-nonrecursive-relation;lsda_callsite;binary/elf/elf_binaries.dl [265:7-265:20];")
 )   )  )  )
  (SUBROUTINE lsda_callsite_addresses
(STMTS     (TIMER_ON lsda_callsite_addresses "@t-nonrecursive-relation;lsda_callsite_addresses;binary/elf/elf_binaries.dl [321:7-321:30];"
(STMTS      (DEBUG 
 "lsda_callsite_addresses(Start,End,LandingPad) :- \n   lsda_callsite(_,_,Start,_,End,_,LandingPad,_).\nin file elf_binaries.dl [323:1-324:51]" 
      (TIMER_ON lsda_callsite_addresses "@t-nonrecursive-rule;lsda_callsite_addresses;binary/elf/elf_binaries.dl [323:1-324:51];lsda_callsite_addresses(Start,End,LandingPad) :- \\n   lsda_callsite(_,_,Start,_,End,_,LandingPad,_).;"
(QUERY
        (IF (NOT (ISEMPTY lsda_callsite))
         (FOR_IN t0 lsda_callsite           (INSERT ((TUPLE t0 2) (TUPLE t0 4) (TUPLE t0 6)) lsda_callsite_addresses)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE lsda_pointer_locations
(STMTS (STMTS (STMTS     (TIMER_ON lsda_pointer_locations "@t-relation-loadtime;lsda_pointer_locations;binary/elf/elf_binaries.dl [256:7-256:29];loadtime;"
     (IO lsda_pointer_locations ((= IO "file") (= attributeNames "lsdaAddress\ttypeTablePointerLocation\tcallsiteTablePointerLoc") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "lsda_pointer_locations") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"lsdaAddress\", \"typeTablePointerLocation\", \"callsiteTablePointerLoc\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:address\", \"u:address\", \"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE lsda_pointer_locations "@n-nonrecursive-relation;lsda_pointer_locations;binary/elf/elf_binaries.dl [256:7-256:29];")
 )   )  )  )
  (SUBROUTINE lsda_type_entry
(STMTS (STMTS (STMTS     (TIMER_ON lsda_type_entry "@t-relation-loadtime;lsda_type_entry;binary/elf/elf_binaries.dl [277:7-277:22];loadtime;"
     (IO lsda_type_entry ((= IO "file") (= attributeNames "lsdaTypeTableAddress\tindex\taddress") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "lsda_type_entry") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"lsdaTypeTableAddress\", \"index\", \"address\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:address\", \"u:unsigned\", \"u:address\"]}}")))
    )
 ) (STMTS     (LOGSIZE lsda_type_entry "@n-nonrecursive-relation;lsda_type_entry;binary/elf/elf_binaries.dl [277:7-277:22];")
 )   )  )  )
  (SUBROUTINE main_function
(STMTS (STMTS     (TIMER_ON main_function "@t-nonrecursive-relation;main_function;/usr/local/src/ddisasm/src/datalog/main.dl [890:7-890:20];"
(STMTS      (DEBUG 
 "main_function(EA) :- \n   binary_format(\"ELF\"),\n   function_symbol(EA,\"main\").\nin file symbolization.dl [141:1-143:32]" 
      (TIMER_ON main_function "@t-nonrecursive-rule;main_function;binary/elf/symbolization.dl [141:1-143:32];main_function(EA) :- \\n   binary_format(\\\"ELF\\\"),\\n   function_symbol(EA,\\\"main\\\").;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY function_symbol))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 function_symbol (INDEX  (= (TUPLE t0 1) (STRING "main")))
          (INSERT ((TUPLE t0 0)) main_function)
)        )       )
      )
     )
      (DEBUG 
 "main_function(Main_location) :- \n   inferred_main_function(Main_location).\nin file symbolization.dl [233:1-234:43]" 
      (TIMER_ON main_function "@t-nonrecursive-rule;main_function;binary/elf/symbolization.dl [233:1-234:43];main_function(Main_location) :- \\n   inferred_main_function(Main_location).;"
(QUERY
        (IF (NOT (ISEMPTY inferred_main_function))
         (FOR_IN t0 inferred_main_function           (INSERT ((TUPLE t0 0)) main_function)
)
        )       )
      )
     )
      (DEBUG 
 "main_function(EA) :- \n   code_in_block(EA1,_),\n   direct_call(EA1,PLT_ARGC),\n   plt_block(PLT_ARGC,\"__p___argc\"),\n   next(EA1,Block),\n   code_in_refined_block(EA_call_main,Block),\n   direct_call(EA_call_main,EA).\nin file symbolization.dl [230:1-236:34]" 
      (TIMER_ON main_function "@t-nonrecursive-rule;main_function;binary/pe/symbolization.dl [230:1-236:34];main_function(EA) :- \\n   code_in_block(EA1,_),\\n   direct_call(EA1,PLT_ARGC),\\n   plt_block(PLT_ARGC,\\\"__p___argc\\\"),\\n   next(EA1,Block),\\n   code_in_refined_block(EA_call_main,Block),\\n   direct_call(EA_call_main,EA).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY next))) (NOT (ISEMPTY plt_block))) (NOT (ISEMPTY code_in_refined_block)))
         (FOR_IN t0 code_in_block           (INDEXED_IF_EXISTS t1 direct_call (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS plt_block ((TUPLE t1 1) (STRING "__p___argc")))
           (FOR t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
            (FOR t3 code_in_refined_block (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)))
             (FOR t4 direct_call (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
              (INSERT ((TUPLE t4 1)) main_function)
)))))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR inferred_main_function)
 ) )  )
  (SUBROUTINE max_instruction_size
(STMTS     (TIMER_ON max_instruction_size "@t-nonrecursive-relation;max_instruction_size;code_inference.dl [207:7-207:27];"
(STMTS      (DEBUG 
 "max_instruction_size(@generator_0) :- \n   @generator_0 = max Size : { instruction(+underscore_2017,Size,+underscore_2018,+underscore_2019,+underscore_2020,+underscore_2021,+underscore_2022,+underscore_2023,+underscore_2024,+underscore_2025) }.\nin file code_inference.dl [209:1-212:7]" 
      (TIMER_ON max_instruction_size "@t-nonrecursive-rule;max_instruction_size;code_inference.dl [209:1-212:7];max_instruction_size(@generator_0) :- \\n   @generator_0 = max Size : { instruction(+underscore_2017,Size,+underscore_2018,+underscore_2019,+underscore_2020,+underscore_2021,+underscore_2022,+underscore_2023,+underscore_2024,+underscore_2025) }.;"
(QUERY
        (AGGREGATE t0 max (TUPLE t0 1)  t0 instruction TRUE 
         (IF (CONSTRAINT = (TUPLE t0 0)  (TUPLE t0 0))
          (INSERT ((TUPLE t0 0)) max_instruction_size)
         ))       )
      )
     )
 )    )
 )  )
  (SUBROUTINE may_fallthrough
(STMTS (STMTS     (TIMER_ON may_fallthrough "@t-nonrecursive-relation;may_fallthrough;code_inference.dl [115:7-115:22];"
(STMTS      (DEBUG 
 "may_fallthrough(From,To) :- \n   next(From,To),\n   !unconditional_return(From),\n   !unconditional_jump(From),\n   !halt(From),\n   !no_return_call(From).\nin file code_inference.dl [131:1-137:27]" 
      (TIMER_ON may_fallthrough "@t-nonrecursive-rule;may_fallthrough;code_inference.dl [131:1-137:27];may_fallthrough(From,To) :- \\n   next(From,To),\\n   !unconditional_return(From),\\n   !unconditional_jump(From),\\n   !halt(From),\\n   !no_return_call(From).;"
(QUERY
        (IF (NOT (ISEMPTY next))
         (FOR_IN t0 next           (IF (AND (AND (AND (NOT (EXISTS no_return_call ((TUPLE t0 0)))) (NOT (EXISTS unconditional_return ((TUPLE t0 0))))) (NOT (EXISTS unconditional_jump ((TUPLE t0 0))))) (NOT (EXISTS halt ((TUPLE t0 0)))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) may_fallthrough)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR halt)
 ) )  )
  (SUBROUTINE may_have_symbolic_immediate
(STMTS     (TIMER_ON may_have_symbolic_immediate "@t-nonrecursive-relation;may_have_symbolic_immediate;code_inference.dl [162:7-162:34];"
(STMTS      (DEBUG 
 "may_have_symbolic_immediate(Src,as(Dest, address)) :- \n   instruction_immediate_offset(Src,Index,Offset,_),\n   instruction_get_op(Src,Index,Op),\n   op_immediate(Op,Dest),\n   binary_type(\"DYN\"),\n   relocation( _tmp_75,_,_,_,_,_,_),\n    _tmp_75 = (Src+Offset).\nin file code_inference.dl [164:1-180:7]" 
      (TIMER_ON may_have_symbolic_immediate "@t-nonrecursive-rule;may_have_symbolic_immediate;code_inference.dl [164:1-180:7];may_have_symbolic_immediate(Src,as(Dest, address)) :- \\n   instruction_immediate_offset(Src,Index,Offset,_),\\n   instruction_get_op(Src,Index,Op),\\n   op_immediate(Op,Dest),\\n   binary_type(\\\"DYN\\\"),\\n   relocation( _tmp_75,_,_,_,_,_,_),\\n    _tmp_75 = (Src+Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY instruction_immediate_offset)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY op_immediate))) (EXISTS binary_type ((STRING "DYN"))))
         (FOR_IN t0 instruction_immediate_offset           (IF (EXISTS relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 op_immediate (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1)) may_have_symbolic_immediate)
))          ))
        )       )
      )
     )
      (DEBUG 
 "may_have_symbolic_immediate(Src,as(Dest, address)) :- \n   instruction_immediate_offset(Src,Index,Offset,_),\n   instruction_get_op(Src,Index,Op),\n   op_immediate(Op,Dest),\n   binary_type(\"REL\"),\n   relocation( _tmp_76,_,_,_,_,_,_),\n    _tmp_76 = (Src+Offset).\nin file code_inference.dl [164:1-180:7]" 
      (TIMER_ON may_have_symbolic_immediate "@t-nonrecursive-rule;may_have_symbolic_immediate;code_inference.dl [164:1-180:7];may_have_symbolic_immediate(Src,as(Dest, address)) :- \\n   instruction_immediate_offset(Src,Index,Offset,_),\\n   instruction_get_op(Src,Index,Op),\\n   op_immediate(Op,Dest),\\n   binary_type(\\\"REL\\\"),\\n   relocation( _tmp_76,_,_,_,_,_,_),\\n    _tmp_76 = (Src+Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY instruction_immediate_offset)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY op_immediate))) (EXISTS binary_type ((STRING "REL"))))
         (FOR_IN t0 instruction_immediate_offset           (IF (EXISTS relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 op_immediate (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1)) may_have_symbolic_immediate)
))          ))
        )       )
      )
     )
      (DEBUG 
 "may_have_symbolic_immediate(Src,as(Dest, address)) :- \n   instruction_immediate_offset(Src,Index,_,_),\n   instruction_get_op(Src,Index,Op),\n   op_immediate(Op,Dest),\n   binary_type(\"EXEC\"),\n   instruction(Src,_,_,Operation,_,_,_,_,_,_),\n   !arch.logic_operation(Operation).\nin file code_inference.dl [164:1-180:7]" 
      (TIMER_ON may_have_symbolic_immediate "@t-nonrecursive-rule;may_have_symbolic_immediate;code_inference.dl [164:1-180:7];may_have_symbolic_immediate(Src,as(Dest, address)) :- \\n   instruction_immediate_offset(Src,Index,_,_),\\n   instruction_get_op(Src,Index,Op),\\n   op_immediate(Op,Dest),\\n   binary_type(\\\"EXEC\\\"),\\n   instruction(Src,_,_,Operation,_,_,_,_,_,_),\\n   !arch.logic_operation(Operation).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY instruction_immediate_offset)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY op_immediate))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 instruction_immediate_offset           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (FOR t2 op_immediate (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
            (INDEXED_IF_EXISTS t3 instruction (INDEX  (= (TUPLE t3 0) (TUPLE t0 0))) (NOT (EXISTS arch.logic_operation ((TUPLE t3 3))))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1)) may_have_symbolic_immediate)
))))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE merged_data_region
(STMTS     (TIMER_ON merged_data_region "@t-nonrecursive-relation;merged_data_region;binary/pe/pe_binaries.dl [220:7-220:25];"
(STMTS      (DEBUG 
 "merged_data_region(DataStart,(DataStart+DataSize)) :- \n   binary_format(\"PE\"),\n   !loaded_section(_,_,\".rdata\"),\n   pe_data_directory(_,DataStart,DataSize),\n   DataSize > 0,\n   loaded_section(SectionStart,SectionEnd,\".text\"),\n   DataStart > SectionStart,\n   DataStart < SectionEnd.\nin file pe_binaries.dl [222:1-231:28]" 
      (TIMER_ON merged_data_region "@t-nonrecursive-rule;merged_data_region;binary/pe/pe_binaries.dl [222:1-231:28];merged_data_region(DataStart,(DataStart+DataSize)) :- \\n   binary_format(\\\"PE\\\"),\\n   !loaded_section(_,_,\\\".rdata\\\"),\\n   pe_data_directory(_,DataStart,DataSize),\\n   DataSize > 0,\\n   loaded_section(SectionStart,SectionEnd,\\\".text\\\"),\\n   DataStart > SectionStart,\\n   DataStart < SectionEnd.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY pe_data_directory))) (NOT (ISEMPTY loaded_section))) (EXISTS binary_format ((STRING "PE")))) (NOT (EXISTS loaded_section (UNDEF UNDEF (STRING ".rdata")))))
         (FOR_IN t0 pe_data_directory           (IF (CONSTRAINT > (TUPLE t0 2)  (UNSIGNED 0))
           (INDEXED_IF_EXISTS t1 loaded_section (INDEX  (= (TUPLE t1 2) (STRING ".text"))) (AND (AND (AND (CONSTRAINT <= (TUPLE t0 1)  (TUPLE t1 1)) (CONSTRAINT != (TUPLE t0 1)  (TUPLE t1 1))) (CONSTRAINT != (TUPLE t0 1)  (TUPLE t1 0))) (CONSTRAINT >= (TUPLE t0 1)  (TUPLE t1 0)))
            (INSERT ((TUPLE t0 1) (INTRINSIC + (TUPLE t0 1) (TUPLE t0 2))) merged_data_region)
)          ))
        )       )
      )
     )
      (DEBUG 
 "merged_data_region(DataStart,(DataStart+DataSize)) :- \n   binary_format(\"PE\"),\n   !loaded_section(_,_,\".rdata\"),\n   pe_debug_data(_,DataStart,DataSize),\n   DataSize > 0,\n   loaded_section(SectionStart,SectionEnd,\".text\"),\n   DataStart > SectionStart,\n   DataStart < SectionEnd.\nin file pe_binaries.dl [222:1-231:28]" 
      (TIMER_ON merged_data_region "@t-nonrecursive-rule;merged_data_region;binary/pe/pe_binaries.dl [222:1-231:28];merged_data_region(DataStart,(DataStart+DataSize)) :- \\n   binary_format(\\\"PE\\\"),\\n   !loaded_section(_,_,\\\".rdata\\\"),\\n   pe_debug_data(_,DataStart,DataSize),\\n   DataSize > 0,\\n   loaded_section(SectionStart,SectionEnd,\\\".text\\\"),\\n   DataStart > SectionStart,\\n   DataStart < SectionEnd.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY pe_debug_data))) (NOT (ISEMPTY loaded_section))) (EXISTS binary_format ((STRING "PE")))) (NOT (EXISTS loaded_section (UNDEF UNDEF (STRING ".rdata")))))
         (FOR_IN t0 pe_debug_data           (IF (CONSTRAINT > (TUPLE t0 2)  (UNSIGNED 0))
           (INDEXED_IF_EXISTS t1 loaded_section (INDEX  (= (TUPLE t1 2) (STRING ".text"))) (AND (AND (AND (CONSTRAINT <= (TUPLE t0 1)  (TUPLE t1 1)) (CONSTRAINT != (TUPLE t0 1)  (TUPLE t1 1))) (CONSTRAINT != (TUPLE t0 1)  (TUPLE t1 0))) (CONSTRAINT >= (TUPLE t0 1)  (TUPLE t1 0)))
            (INSERT ((TUPLE t0 1) (INTRINSIC + (TUPLE t0 1) (TUPLE t0 2))) merged_data_region)
)          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE misaligned_fde_start
(STMTS (STMTS (STMTS     (TIMER_ON misaligned_fde_start "@t-nonrecursive-relation;misaligned_fde_start;binary/elf/elf_binaries.dl [307:7-307:27];"
(STMTS      (DEBUG 
 "misaligned_fde_start(Start,EA) :- \n   fde_addresses(Start,End),\n   EA = (Start+1),\n   instruction(EA,_,_,<inlined_Operation_900>,_,_,_,_,_,_),\n   <inlined_Operation_900> = \"MOV\",\n   next(EA,Next),\n   instruction(Next,NextSize,_,\"SYSCALL\",_,_,_,_,_,_),\n   End = (Next+NextSize).\nin file elf_binaries.dl [312:1-319:27]" 
      (TIMER_ON misaligned_fde_start "@t-nonrecursive-rule;misaligned_fde_start;binary/elf/elf_binaries.dl [312:1-319:27];misaligned_fde_start(Start,EA) :- \\n   fde_addresses(Start,End),\\n   EA = (Start+1),\\n   instruction(EA,_,_,<inlined_Operation_900>,_,_,_,_,_,_),\\n   <inlined_Operation_900> = \\\"MOV\\\",\\n   next(EA,Next),\\n   instruction(Next,NextSize,_,\\\"SYSCALL\\\",_,_,_,_,_,_),\\n   End = (Next+NextSize).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY fde_addresses)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY next)))
         (FOR_IN t0 fde_addresses           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1))) (= (TUPLE t1 3) (STRING "MOV")))
           (FOR t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
            (INDEXED_IF_EXISTS t3 instruction (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (= (TUPLE t3 3) (STRING "SYSCALL"))) (CONSTRAINT = (TUPLE t0 1)  (INTRINSIC + (TUPLE t2 1) (TUPLE t3 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 0)) misaligned_fde_start)
))))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON misaligned_fde_start "@t-relation-savetime;misaligned_fde_start;binary/elf/elf_binaries.dl [307:7-307:27];savetime;"
     (IO misaligned_fde_start ((= IO "file") (= attributeNames "start\tstart_adjusted") (= auxArity "0") (= name "misaligned_fde_start") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"start\", \"start_adjusted\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"u:address\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE missed_jump_table
(STMTS (STMTS (STMTS     (TIMER_ON missed_jump_table "@t-nonrecursive-relation;missed_jump_table;debug_stats.dl [54:7-54:24];"
(STMTS      (DEBUG 
 "missed_jump_table(EA) :- \n   reg_jump(EA,_),\n   code_in_block(EA,_),\n   reg_def_use.def_used(EA_base,Reg,EA,_),\n   arch.reg_reg_arithmetic_operation(EA_base,Reg,Reg,_,_,0),\n   !jump_table_start(EA,_,_,_,_).\nin file debug_stats.dl [57:1-62:35]" 
      (TIMER_ON missed_jump_table "@t-nonrecursive-rule;missed_jump_table;debug_stats.dl [57:1-62:35];missed_jump_table(EA) :- \\n   reg_jump(EA,_),\\n   code_in_block(EA,_),\\n   reg_def_use.def_used(EA_base,Reg,EA,_),\\n   arch.reg_reg_arithmetic_operation(EA_base,Reg,Reg,_,_,0),\\n   !jump_table_start(EA,_,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 reg_jump           (IF (AND (EXISTS code_in_block ((TUPLE t0 0) UNDEF)) (NOT (EXISTS jump_table_start ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF))))
           (INDEXED_IF_EXISTS t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0))) (EXISTS arch.reg_reg_arithmetic_operation ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 1) UNDEF UNDEF (NUMBER 0)))
            (INSERT ((TUPLE t0 0)) missed_jump_table)
)          ))
        )       )
      )
     )
      (DEBUG 
 "missed_jump_table(EA) :- \n   reg_call(EA,_),\n   code_in_block(EA,_),\n   reg_def_use.def_used(EA_base,Reg,EA,_),\n   arch.reg_reg_arithmetic_operation(EA_base,Reg,Reg,_,_,0),\n   !jump_table_start(EA,_,_,_,_).\nin file debug_stats.dl [64:1-69:35]" 
      (TIMER_ON missed_jump_table "@t-nonrecursive-rule;missed_jump_table;debug_stats.dl [64:1-69:35];missed_jump_table(EA) :- \\n   reg_call(EA,_),\\n   code_in_block(EA,_),\\n   reg_def_use.def_used(EA_base,Reg,EA,_),\\n   arch.reg_reg_arithmetic_operation(EA_base,Reg,Reg,_,_,0),\\n   !jump_table_start(EA,_,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY reg_call)) (NOT (ISEMPTY arch.reg_reg_arithmetic_operation))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 reg_call           (IF (AND (EXISTS code_in_block ((TUPLE t0 0) UNDEF)) (NOT (EXISTS jump_table_start ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF))))
           (INDEXED_IF_EXISTS t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 2) (TUPLE t0 0))) (EXISTS arch.reg_reg_arithmetic_operation ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 1) UNDEF UNDEF (NUMBER 0)))
            (INSERT ((TUPLE t0 0)) missed_jump_table)
)          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON missed_jump_table "@t-relation-savetime;missed_jump_table;debug_stats.dl [54:7-54:24];savetime;"
     (IO missed_jump_table ((= IO "file") (= attributeNames "EA_jump") (= auxArity "0") (= name "missed_jump_table") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"EA_jump\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) ) (STMTS     (CLEAR arch.reg_reg_arithmetic_operation)
 ) )  )
  (SUBROUTINE missing_relocation_handling
(STMTS (STMTS (STMTS     (TIMER_ON missing_relocation_handling "@t-nonrecursive-relation;missing_relocation_handling;debug_stats.dl [74:7-74:34];"
(STMTS      (DEBUG 
 "missing_relocation_handling(EA) :- \n   relocation(EA,Type,_,_,_,_,_),\n   !symbolic_expr(EA,_,_,_),\n   !got_reference(EA,_),\n   Type != \"ABSOLUTE\",\n   Type != \"COPY\".\nin file debug_stats.dl [78:1-83:20]" 
      (TIMER_ON missing_relocation_handling "@t-nonrecursive-rule;missing_relocation_handling;debug_stats.dl [78:1-83:20];missing_relocation_handling(EA) :- \\n   relocation(EA,Type,_,_,_,_,_),\\n   !symbolic_expr(EA,_,_,_),\\n   !got_reference(EA,_),\\n   Type != \\\"ABSOLUTE\\\",\\n   Type != \\\"COPY\\\".;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR_IN t0 relocation           (IF (AND (AND (AND (CONSTRAINT != (TUPLE t0 1)  (STRING "COPY")) (CONSTRAINT != (TUPLE t0 1)  (STRING "ABSOLUTE"))) (NOT (EXISTS symbolic_expr ((TUPLE t0 0) UNDEF UNDEF UNDEF)))) (NOT (EXISTS got_reference ((TUPLE t0 0) UNDEF))))
           (INSERT ((TUPLE t0 0)) missing_relocation_handling)
          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON missing_relocation_handling "@t-relation-savetime;missing_relocation_handling;debug_stats.dl [74:7-74:34];savetime;"
     (IO missing_relocation_handling ((= IO "file") (= attributeNames "EA") (= auxArity "0") (= name "missing_relocation_handling") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"EA\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE moved_data_label
(STMTS     (TIMER_ON moved_data_label "@t-nonrecursive-relation;moved_data_label;pointer_reattribution.dl [70:7-70:23];"
(STMTS      (DEBUG 
 "moved_data_label(EA,SizePointer,Dest,Address) :- \n   symbolic_data(EA,SizePointer,Dest),\n   overlapping_instruction(Dest,Address).\nin file pointer_reattribution.dl [108:1-110:43]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;pointer_reattribution.dl [108:1-110:43];moved_data_label(EA,SizePointer,Dest,Address) :- \\n   symbolic_data(EA,SizePointer,Dest),\\n   overlapping_instruction(Dest,Address).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY overlapping_instruction)))
         (FOR_IN t0 symbolic_data           (FOR t1 overlapping_instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 1)) moved_data_label)
))
        )       )
      )
     )
      (DEBUG 
 "moved_data_label(EA,SizePointer,Dest,Address) :- \n   symbolic_data(EA,SizePointer,Dest),\n   !code_in_block(Dest,_),\n   symbol(Address,Size,_,_,_,_,_,_,Name),\n   !function_symbol(Address,Name),\n   Address < Dest,\n   Dest < (Address+Size).\nin file pointer_reattribution.dl [99:1-105:25]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;pointer_reattribution.dl [99:1-105:25];moved_data_label(EA,SizePointer,Dest,Address) :- \\n   symbolic_data(EA,SizePointer,Dest),\\n   !code_in_block(Dest,_),\\n   symbol(Address,Size,_,_,_,_,_,_,Name),\\n   !function_symbol(Address,Name),\\n   Address < Dest,\\n   Dest < (Address+Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbol)))
         (FOR_IN t0 symbolic_data           (IF (NOT (EXISTS code_in_block ((TUPLE t0 2) UNDEF)))
           (FOR_IN t1 symbol             (IF (AND (AND (CONSTRAINT < (TUPLE t0 2)  (INTRINSIC + (TUPLE t1 0) (TUPLE t1 1))) (CONSTRAINT < (TUPLE t1 0)  (TUPLE t0 2))) (NOT (EXISTS function_symbol ((TUPLE t1 0) (TUPLE t1 8)))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0)) moved_data_label)
            ))
          ))
        )       )
      )
     )
      (DEBUG 
 "moved_data_label(EA,Size,Dest,NewDest) :- \n   symbolic_data(EA,Size,Dest),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_159),\n   NewDest = (Dest-1),\n   symbolic_data(NewDest,8,_),\n    _tmp_159 = (Dest-1).\nin file pointer_reattribution.dl [92:1-95:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;pointer_reattribution.dl [92:1-95:32];moved_data_label(EA,Size,Dest,NewDest) :- \\n   symbolic_data(EA,Size,Dest),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_159),\\n   NewDest = (Dest-1),\\n   symbolic_data(NewDest,8,_),\\n    _tmp_159 = (Dest-1).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY address_in_data_refined_range.in_ea)))
         (FOR_IN t0 symbolic_data           (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 1)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 1))) (= (TUPLE t1 1) (UNSIGNED 8)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0)) moved_data_label)
)          ))
        )       )
      )
     )
      (DEBUG 
 "moved_data_label(EA,Size,Dest,NewDest) :- \n   symbolic_data(EA,Size,Dest),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_160),\n   NewDest = (Dest-2),\n   symbolic_data(NewDest,8,_),\n    _tmp_160 = (Dest-2).\nin file pointer_reattribution.dl [92:1-95:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;pointer_reattribution.dl [92:1-95:32];moved_data_label(EA,Size,Dest,NewDest) :- \\n   symbolic_data(EA,Size,Dest),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_160),\\n   NewDest = (Dest-2),\\n   symbolic_data(NewDest,8,_),\\n    _tmp_160 = (Dest-2).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY address_in_data_refined_range.in_ea)))
         (FOR_IN t0 symbolic_data           (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 2)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 2))) (= (TUPLE t1 1) (UNSIGNED 8)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0)) moved_data_label)
)          ))
        )       )
      )
     )
      (DEBUG 
 "moved_data_label(EA,Size,Dest,NewDest) :- \n   symbolic_data(EA,Size,Dest),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_161),\n   NewDest = (Dest-3),\n   symbolic_data(NewDest,8,_),\n    _tmp_161 = (Dest-3).\nin file pointer_reattribution.dl [92:1-95:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;pointer_reattribution.dl [92:1-95:32];moved_data_label(EA,Size,Dest,NewDest) :- \\n   symbolic_data(EA,Size,Dest),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_161),\\n   NewDest = (Dest-3),\\n   symbolic_data(NewDest,8,_),\\n    _tmp_161 = (Dest-3).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY address_in_data_refined_range.in_ea)))
         (FOR_IN t0 symbolic_data           (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 3)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 3))) (= (TUPLE t1 1) (UNSIGNED 8)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0)) moved_data_label)
)          ))
        )       )
      )
     )
      (DEBUG 
 "moved_data_label(EA,Size,Dest,NewDest) :- \n   symbolic_data(EA,Size,Dest),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_162),\n   NewDest = (Dest-4),\n   symbolic_data(NewDest,8,_),\n    _tmp_162 = (Dest-4).\nin file pointer_reattribution.dl [92:1-95:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;pointer_reattribution.dl [92:1-95:32];moved_data_label(EA,Size,Dest,NewDest) :- \\n   symbolic_data(EA,Size,Dest),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_162),\\n   NewDest = (Dest-4),\\n   symbolic_data(NewDest,8,_),\\n    _tmp_162 = (Dest-4).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY address_in_data_refined_range.in_ea)))
         (FOR_IN t0 symbolic_data           (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 4)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 4))) (= (TUPLE t1 1) (UNSIGNED 8)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0)) moved_data_label)
)          ))
        )       )
      )
     )
      (DEBUG 
 "moved_data_label(EA,Size,Dest,NewDest) :- \n   symbolic_data(EA,Size,Dest),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_163),\n   NewDest = (Dest-5),\n   symbolic_data(NewDest,8,_),\n    _tmp_163 = (Dest-5).\nin file pointer_reattribution.dl [92:1-95:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;pointer_reattribution.dl [92:1-95:32];moved_data_label(EA,Size,Dest,NewDest) :- \\n   symbolic_data(EA,Size,Dest),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_163),\\n   NewDest = (Dest-5),\\n   symbolic_data(NewDest,8,_),\\n    _tmp_163 = (Dest-5).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY address_in_data_refined_range.in_ea)))
         (FOR_IN t0 symbolic_data           (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 5)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 5))) (= (TUPLE t1 1) (UNSIGNED 8)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0)) moved_data_label)
)          ))
        )       )
      )
     )
      (DEBUG 
 "moved_data_label(EA,Size,Dest,NewDest) :- \n   symbolic_data(EA,Size,Dest),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_164),\n   NewDest = (Dest-6),\n   symbolic_data(NewDest,8,_),\n    _tmp_164 = (Dest-6).\nin file pointer_reattribution.dl [92:1-95:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;pointer_reattribution.dl [92:1-95:32];moved_data_label(EA,Size,Dest,NewDest) :- \\n   symbolic_data(EA,Size,Dest),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_164),\\n   NewDest = (Dest-6),\\n   symbolic_data(NewDest,8,_),\\n    _tmp_164 = (Dest-6).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY address_in_data_refined_range.in_ea)))
         (FOR_IN t0 symbolic_data           (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 6)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 6))) (= (TUPLE t1 1) (UNSIGNED 8)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0)) moved_data_label)
)          ))
        )       )
      )
     )
      (DEBUG 
 "moved_data_label(EA,Size,Dest,NewDest) :- \n   symbolic_data(EA,Size,Dest),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_165),\n   NewDest = (Dest-7),\n   symbolic_data(NewDest,8,_),\n    _tmp_165 = (Dest-7).\nin file pointer_reattribution.dl [92:1-95:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;pointer_reattribution.dl [92:1-95:32];moved_data_label(EA,Size,Dest,NewDest) :- \\n   symbolic_data(EA,Size,Dest),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_165),\\n   NewDest = (Dest-7),\\n   symbolic_data(NewDest,8,_),\\n    _tmp_165 = (Dest-7).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY address_in_data_refined_range.in_ea)))
         (FOR_IN t0 symbolic_data           (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 7)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 7))) (= (TUPLE t1 1) (UNSIGNED 8)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0)) moved_data_label)
)          ))
        )       )
      )
     )
      (DEBUG 
 "moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_185),\n   NewDest = ((ImageBase+Dest)-1),\n   symbolic_data(NewDest,_,_),\n    _tmp_77 = (EA+Disp_offset),\n    _tmp_185 = ((ImageBase+Dest)-1).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;binary/pe/symbolization.dl [245:1-254:32];moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_185),\\n   NewDest = ((ImageBase+Dest)-1),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_77 = (EA+Disp_offset),\\n    _tmp_185 = ((ImageBase+Dest)-1).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (FOR t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 symbol_minus_symbol (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t1 0) (TUPLE t2 2))))
              (FOR t4 symbolic_data (INDEX  (= (TUPLE t4 0) (INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1))))
               (INSERT ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t4 0)) moved_data_label)
)))           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_186),\n   NewDest = ((ImageBase+Dest)-2),\n   symbolic_data(NewDest,_,_),\n    _tmp_77 = (EA+Disp_offset),\n    _tmp_186 = ((ImageBase+Dest)-2).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;binary/pe/symbolization.dl [245:1-254:32];moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_186),\\n   NewDest = ((ImageBase+Dest)-2),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_77 = (EA+Disp_offset),\\n    _tmp_186 = ((ImageBase+Dest)-2).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 2)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (FOR t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 symbol_minus_symbol (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t1 0) (TUPLE t2 2))))
              (FOR t4 symbolic_data (INDEX  (= (TUPLE t4 0) (INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 2))))
               (INSERT ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t4 0)) moved_data_label)
)))           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_187),\n   NewDest = ((ImageBase+Dest)-3),\n   symbolic_data(NewDest,_,_),\n    _tmp_77 = (EA+Disp_offset),\n    _tmp_187 = ((ImageBase+Dest)-3).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;binary/pe/symbolization.dl [245:1-254:32];moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_187),\\n   NewDest = ((ImageBase+Dest)-3),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_77 = (EA+Disp_offset),\\n    _tmp_187 = ((ImageBase+Dest)-3).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 3)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (FOR t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 symbol_minus_symbol (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t1 0) (TUPLE t2 2))))
              (FOR t4 symbolic_data (INDEX  (= (TUPLE t4 0) (INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 3))))
               (INSERT ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t4 0)) moved_data_label)
)))           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_188),\n   NewDest = ((ImageBase+Dest)-4),\n   symbolic_data(NewDest,_,_),\n    _tmp_77 = (EA+Disp_offset),\n    _tmp_188 = ((ImageBase+Dest)-4).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;binary/pe/symbolization.dl [245:1-254:32];moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_188),\\n   NewDest = ((ImageBase+Dest)-4),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_77 = (EA+Disp_offset),\\n    _tmp_188 = ((ImageBase+Dest)-4).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 4)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (FOR t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 symbol_minus_symbol (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t1 0) (TUPLE t2 2))))
              (FOR t4 symbolic_data (INDEX  (= (TUPLE t4 0) (INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 4))))
               (INSERT ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t4 0)) moved_data_label)
)))           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_189),\n   NewDest = ((ImageBase+Dest)-5),\n   symbolic_data(NewDest,_,_),\n    _tmp_77 = (EA+Disp_offset),\n    _tmp_189 = ((ImageBase+Dest)-5).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;binary/pe/symbolization.dl [245:1-254:32];moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_189),\\n   NewDest = ((ImageBase+Dest)-5),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_77 = (EA+Disp_offset),\\n    _tmp_189 = ((ImageBase+Dest)-5).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 5)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (FOR t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 symbol_minus_symbol (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t1 0) (TUPLE t2 2))))
              (FOR t4 symbolic_data (INDEX  (= (TUPLE t4 0) (INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 5))))
               (INSERT ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t4 0)) moved_data_label)
)))           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_190),\n   NewDest = ((ImageBase+Dest)-6),\n   symbolic_data(NewDest,_,_),\n    _tmp_77 = (EA+Disp_offset),\n    _tmp_190 = ((ImageBase+Dest)-6).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;binary/pe/symbolization.dl [245:1-254:32];moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_190),\\n   NewDest = ((ImageBase+Dest)-6),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_77 = (EA+Disp_offset),\\n    _tmp_190 = ((ImageBase+Dest)-6).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 6)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (FOR t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 symbol_minus_symbol (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t1 0) (TUPLE t2 2))))
              (FOR t4 symbolic_data (INDEX  (= (TUPLE t4 0) (INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 6))))
               (INSERT ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t4 0)) moved_data_label)
)))           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_191),\n   NewDest = ((ImageBase+Dest)-7),\n   symbolic_data(NewDest,_,_),\n    _tmp_77 = (EA+Disp_offset),\n    _tmp_191 = ((ImageBase+Dest)-7).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_data_label "@t-nonrecursive-rule;moved_data_label;binary/pe/symbolization.dl [245:1-254:32];moved_data_label((EA+Disp_offset),Size,(ImageBase+Dest),NewDest) :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_77,Size,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_191),\\n   NewDest = ((ImageBase+Dest)-7),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_77 = (EA+Disp_offset),\\n    _tmp_191 = ((ImageBase+Dest)-7).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 7)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (FOR t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 symbol_minus_symbol (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t1 0) (TUPLE t2 2))))
              (FOR t4 symbolic_data (INDEX  (= (TUPLE t4 0) (INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 7))))
               (INSERT ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t4 0)) moved_data_label)
)))           ))
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE moved_displacement_candidate
(STMTS     (TIMER_ON moved_displacement_candidate "@t-nonrecursive-relation;moved_displacement_candidate;pointer_reattribution.dl [292:7-292:35];"
(STMTS      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,Dest,0x7FFE0000,(Dest-0x7FFE0000)) :- \n   binary_format(\"PE\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   Dest > 0x7FFE0000,\n   Dest < 0x7FFE1000.\nin file symbolization.dl [27:1-32:40]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;binary/pe/symbolization.dl [27:1-32:40];moved_displacement_candidate(EA,Op_index,Dest,0x7FFE0000,(Dest-0x7FFE0000)) :- \\n   binary_format(\\\"PE\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   Dest > 0x7FFE0000,\\n   Dest < 0x7FFE1000.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY symbolic_operand))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (AND (AND (CONSTRAINT >= (TUPLE t0 2)  (UNSIGNED 2147352576)) (CONSTRAINT != (TUPLE t0 2)  (UNSIGNED 2147356672))) (CONSTRAINT != (TUPLE t0 2)  (UNSIGNED 2147352576))) (CONSTRAINT <= (TUPLE t0 2)  (UNSIGNED 2147356672)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (UNSIGNED 2147352576) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 2147352576))) moved_displacement_candidate)
          ))        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,Dest,Access_dest,(max(Access_dest,Dest)-min(Access_dest,Dest))) :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,_),\n   data_access(EA,Op_index,_,_,_,_,_,_),\n   data_access_pattern_candidate(Access_dest,_,Mult,EA),\n   Access_dest != Dest,\n   loaded_section(Base,End,Name),\n   Dest >= Base,\n   Dest <= End,\n   regular_data_section(Name2),\n   Name2 != Name,\n   loaded_section(Base2,End2,Name2),\n   Access_dest >= Base2,\n   Access_dest <= End2,\n   Dest != Base2,\n   Mult > 0,\n   Access_dest > Dest.\nin file pointer_reattribution.dl [295:1-322:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [295:1-322:7];moved_displacement_candidate(EA,Op_index,Dest,Access_dest,(max(Access_dest,Dest)-min(Access_dest,Dest))) :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,_),\\n   data_access(EA,Op_index,_,_,_,_,_,_),\\n   data_access_pattern_candidate(Access_dest,_,Mult,EA),\\n   Access_dest != Dest,\\n   loaded_section(Base,End,Name),\\n   Dest >= Base,\\n   Dest <= End,\\n   regular_data_section(Name2),\\n   Name2 != Name,\\n   loaded_section(Base2,End2,Name2),\\n   Access_dest >= Base2,\\n   Access_dest <= End2,\\n   Dest != Base2,\\n   Mult > 0,\\n   Access_dest > Dest.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY data_access_pattern_candidate))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY regular_data_section))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 symbolic_operand           (IF (EXISTS data_access ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 data_access_pattern_candidate (INDEX  (<= (NUMBER 0) (TUPLE t1 2) ) (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (AND (AND (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t0 2)) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 2))) (CONSTRAINT != (TUPLE t1 2)  (NUMBER 0)))
             (FOR_IN t2 loaded_section               (IF (AND (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t2 1)) (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t2 0)))
               (FOR_IN t3 regular_data_section                 (IF (CONSTRAINT != (TUPLE t3 0)  (TUPLE t2 2))
                 (INDEXED_IF_EXISTS t4 loaded_section (INDEX  (= (TUPLE t4 2) (TUPLE t3 0))) (AND (AND (CONSTRAINT != (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t4 1))) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t4 0)))
                  (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0) (INTRINSIC - (INTRINSIC max (TUPLE t1 0) (TUPLE t0 2)) (INTRINSIC min (TUPLE t1 0) (TUPLE t0 2)))) moved_displacement_candidate)
)                ))
              ))
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,Dest,Access_dest,(max(Access_dest,Dest)-min(Access_dest,Dest))) :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,_),\n   data_access(EA,Op_index,_,_,_,_,_,_),\n   data_access_pattern_candidate(Access_dest,_,Mult,EA),\n   Access_dest != Dest,\n   loaded_section(Base,End,Name),\n   Dest >= Base,\n   Dest <= End,\n   regular_data_section(Name2),\n   Name2 != Name,\n   loaded_section(Base2,End2,Name2),\n   Access_dest >= Base2,\n   Access_dest <= End2,\n   Dest != Base2,\n   Mult <= 0.\nin file pointer_reattribution.dl [295:1-322:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [295:1-322:7];moved_displacement_candidate(EA,Op_index,Dest,Access_dest,(max(Access_dest,Dest)-min(Access_dest,Dest))) :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,_),\\n   data_access(EA,Op_index,_,_,_,_,_,_),\\n   data_access_pattern_candidate(Access_dest,_,Mult,EA),\\n   Access_dest != Dest,\\n   loaded_section(Base,End,Name),\\n   Dest >= Base,\\n   Dest <= End,\\n   regular_data_section(Name2),\\n   Name2 != Name,\\n   loaded_section(Base2,End2,Name2),\\n   Access_dest >= Base2,\\n   Access_dest <= End2,\\n   Dest != Base2,\\n   Mult <= 0.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY data_access_pattern_candidate))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY regular_data_section))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 symbolic_operand           (IF (EXISTS data_access ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 data_access_pattern_candidate (INDEX  (<= (TUPLE t1 2) (NUMBER 0)) (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 2))
             (FOR_IN t2 loaded_section               (IF (AND (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t2 1)) (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t2 0)))
               (FOR_IN t3 regular_data_section                 (IF (CONSTRAINT != (TUPLE t3 0)  (TUPLE t2 2))
                 (INDEXED_IF_EXISTS t4 loaded_section (INDEX  (= (TUPLE t4 2) (TUPLE t3 0))) (AND (AND (CONSTRAINT != (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t4 1))) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t4 0)))
                  (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0) (INTRINSIC - (INTRINSIC max (TUPLE t1 0) (TUPLE t0 2)) (INTRINSIC min (TUPLE t1 0) (TUPLE t0 2)))) moved_displacement_candidate)
)                ))
              ))
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,as(Dest, address),Base,(Base-as(Dest, address))) :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",Reg,Reg,_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   regular_data_section(Name),\n   loaded_section(Base,_,Name),\n   as(Dest, address) < Base,\n   (10*as(Dest, address)) > Base.\nin file pointer_reattribution.dl [415:1-437:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [415:1-437:7];moved_displacement_candidate(EA,Op_index,as(Dest, address),Base,(Base-as(Dest, address))) :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",Reg,Reg,_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   regular_data_section(Name),\\n   loaded_section(Base,_,Name),\\n   as(Dest, address) < Base,\\n   (10*as(Dest, address)) > Base.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (CONSTRAINT = (TUPLE t0 3)  (TUPLE t0 4)) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (FOR_IN t1 regular_data_section             (FOR t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t0 6)  (TUPLE t2 0)) (CONSTRAINT != (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t2 0))) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t2 0))) (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t2 0)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 6) (TUPLE t2 0) (INTRINSIC - (TUPLE t2 0) (TUPLE t0 6))) moved_displacement_candidate)
             )))
          ))        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,as(Dest, address),End,(as(Dest, address)-End)) :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",Reg,Reg,_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   regular_data_section(Name),\n   loaded_section(_,End,Name),\n   as(Dest, address) > End.\nin file pointer_reattribution.dl [415:1-437:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [415:1-437:7];moved_displacement_candidate(EA,Op_index,as(Dest, address),End,(as(Dest, address)-End)) :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",Reg,Reg,_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   regular_data_section(Name),\\n   loaded_section(_,End,Name),\\n   as(Dest, address) > End.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (CONSTRAINT = (TUPLE t0 3)  (TUPLE t0 4)) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (FOR_IN t1 regular_data_section             (FOR t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (IF (AND (CONSTRAINT >= (TUPLE t0 6)  (TUPLE t2 1)) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t2 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 6) (TUPLE t2 1) (INTRINSIC - (TUPLE t0 6) (TUPLE t2 1))) moved_displacement_candidate)
             )))
          ))        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,as(Dest, address),AccessDest,1) :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,_,_,_,_,Dest,Size),\n   Dest >= 0,\n   Size != 0,\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   data_access_pattern_candidate(AccessDest,_,_,EA),\n   regular_data_section(Name),\n   loaded_section(Base,End,Name),\n   AccessDest >= Base,\n   AccessDest < End,\n   (10*as(Dest, address)) >= Base,\n   @functor_data_valid((max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))),1) = 0,\n   bss_section_limits(BssBeg,_),\n   (max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))) < BssBeg.\nin file pointer_reattribution.dl [324:1-352:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [324:1-352:7];moved_displacement_candidate(EA,Op_index,as(Dest, address),AccessDest,1) :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,_,_,_,_,Dest,Size),\\n   Dest >= 0,\\n   Size != 0,\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   data_access_pattern_candidate(AccessDest,_,_,EA),\\n   regular_data_section(Name),\\n   loaded_section(Base,End,Name),\\n   AccessDest >= Base,\\n   AccessDest < End,\\n   (10*as(Dest, address)) >= Base,\\n   @functor_data_valid((max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))),1) = 0,\\n   bss_section_limits(BssBeg,_),\\n   (max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))) < BssBeg.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY bss_section_limits)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY data_access_pattern_candidate))) (NOT (ISEMPTY regular_data_section))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY loaded_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (CONSTRAINT != (TUPLE t0 7)  (UNSIGNED 0)) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))))
           (FOR t1 data_access_pattern_candidate (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC - (INTRINSIC max (TUPLE t1 0) (TUPLE t0 6)) (INTRINSIC min (TUPLE t1 0) (TUPLE t0 6))) (UNSIGNED 1)))  (UNSIGNED 0))
             (FOR_IN t2 regular_data_section               (INDEXED_IF_EXISTS t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0))) (AND (AND (AND (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0)) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t3 1))) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t3 1))) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t3 0)))
               (IF_EXISTS t4 bss_section_limits (CONSTRAINT < (INTRINSIC - (INTRINSIC max (TUPLE t1 0) (TUPLE t0 6)) (INTRINSIC min (TUPLE t1 0) (TUPLE t0 6)))  (TUPLE t4 0)) 
                (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 6) (TUPLE t1 0) (UNSIGNED 1)) moved_displacement_candidate)
)))
            ))          ))        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,as(Dest, address),AccessDest,1) :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,_,_,_,_,Dest,Size),\n   Dest >= 0,\n   Size != 0,\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   data_access_pattern_candidate(AccessDest,_,_,EA),\n   regular_data_section(Name),\n   loaded_section(Base,End,Name),\n   AccessDest >= Base,\n   AccessDest < End,\n   (10*as(Dest, address)) >= Base,\n   @functor_data_valid((max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))),1) = 0,\n   bss_section_limits(_,BssEnd),\n   (max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))) > BssEnd.\nin file pointer_reattribution.dl [324:1-352:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [324:1-352:7];moved_displacement_candidate(EA,Op_index,as(Dest, address),AccessDest,1) :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,_,_,_,_,Dest,Size),\\n   Dest >= 0,\\n   Size != 0,\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   data_access_pattern_candidate(AccessDest,_,_,EA),\\n   regular_data_section(Name),\\n   loaded_section(Base,End,Name),\\n   AccessDest >= Base,\\n   AccessDest < End,\\n   (10*as(Dest, address)) >= Base,\\n   @functor_data_valid((max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))),1) = 0,\\n   bss_section_limits(_,BssEnd),\\n   (max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))) > BssEnd.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY bss_section_limits)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY data_access_pattern_candidate))) (NOT (ISEMPTY regular_data_section))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY loaded_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (CONSTRAINT != (TUPLE t0 7)  (UNSIGNED 0)) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))))
           (FOR t1 data_access_pattern_candidate (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC - (INTRINSIC max (TUPLE t1 0) (TUPLE t0 6)) (INTRINSIC min (TUPLE t1 0) (TUPLE t0 6))) (UNSIGNED 1)))  (UNSIGNED 0))
             (FOR_IN t2 regular_data_section               (INDEXED_IF_EXISTS t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0))) (AND (AND (AND (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0)) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t3 1))) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t3 1))) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t3 0)))
               (IF_EXISTS t4 bss_section_limits (CONSTRAINT > (INTRINSIC - (INTRINSIC max (TUPLE t1 0) (TUPLE t0 6)) (INTRINSIC min (TUPLE t1 0) (TUPLE t0 6)))  (TUPLE t4 1)) 
                (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 6) (TUPLE t1 0) (UNSIGNED 1)) moved_displacement_candidate)
)))
            ))          ))        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,as(Dest, address),Base,(Base-as(Dest, address))) :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",Reg,\"NONE\",_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,0,_),\n   Mult2 > 1,\n   regular_data_section(Name),\n   loaded_section(Base,_,Name),\n   as(Dest, address) < Base,\n   (10*as(Dest, address)) > Base.\nin file pointer_reattribution.dl [389:1-412:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [389:1-412:7];moved_displacement_candidate(EA,Op_index,as(Dest, address),Base,(Base-as(Dest, address))) :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",Reg,\\\"NONE\\\",_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,0,_),\\n   Mult2 > 1,\\n   regular_data_section(Name),\\n   loaded_section(Base,_,Name),\\n   as(Dest, address) < Base,\\n   (10*as(Dest, address)) > Base.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY value_reg_at_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 4) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))))
           (INDEXED_IF_EXISTS t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 3)) (<= (NUMBER 1) (TUPLE t1 4) ) (= (TUPLE t1 5) (NUMBER 0))) (CONSTRAINT != (TUPLE t1 4)  (NUMBER 1))
            (FOR_IN t2 regular_data_section              (FOR t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0)))
              (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t0 6)  (TUPLE t3 0)) (CONSTRAINT != (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0))) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t3 0))) (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0)))
               (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 6) (TUPLE t3 0) (INTRINSIC - (TUPLE t3 0) (TUPLE t0 6))) moved_displacement_candidate)
              )))
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,as(Dest, address),End,(as(Dest, address)-End)) :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",Reg,\"NONE\",_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,0,_),\n   Mult2 > 1,\n   regular_data_section(Name),\n   loaded_section(_,End,Name),\n   as(Dest, address) > End.\nin file pointer_reattribution.dl [389:1-412:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [389:1-412:7];moved_displacement_candidate(EA,Op_index,as(Dest, address),End,(as(Dest, address)-End)) :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",Reg,\\\"NONE\\\",_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,0,_),\\n   Mult2 > 1,\\n   regular_data_section(Name),\\n   loaded_section(_,End,Name),\\n   as(Dest, address) > End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY value_reg_at_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 4) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))))
           (INDEXED_IF_EXISTS t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 3)) (<= (NUMBER 1) (TUPLE t1 4) ) (= (TUPLE t1 5) (NUMBER 0))) (CONSTRAINT != (TUPLE t1 4)  (NUMBER 1))
            (FOR_IN t2 regular_data_section              (FOR t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0)))
              (IF (AND (CONSTRAINT >= (TUPLE t0 6)  (TUPLE t3 1)) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t3 1)))
               (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 6) (TUPLE t3 1) (INTRINSIC - (TUPLE t0 6) (TUPLE t3 1))) moved_displacement_candidate)
              )))
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,as(Dest, address),Base,(Base-as(Dest, address))) :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",\"NONE\",_,Mult,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   Mult > 1,\n   regular_data_section(Name),\n   loaded_section(Base,_,Name),\n   as(Dest, address) < Base,\n   (10*as(Dest, address)) > Base.\nin file pointer_reattribution.dl [356:1-386:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [356:1-386:7];moved_displacement_candidate(EA,Op_index,as(Dest, address),Base,(Base-as(Dest, address))) :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",\\\"NONE\\\",_,Mult,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   Mult > 1,\\n   regular_data_section(Name),\\n   loaded_section(Base,_,Name),\\n   as(Dest, address) < Base,\\n   (10*as(Dest, address)) > Base.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 3) (STRING "NONE")) (<= (NUMBER 1) (TUPLE t0 5) ))
          (IF (AND (AND (AND (AND (CONSTRAINT >= (TUPLE t0 6)  (NUMBER 0)) (CONSTRAINT != (TUPLE t0 5)  (NUMBER 1))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF)))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (FOR_IN t1 regular_data_section             (FOR t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t0 6)  (TUPLE t2 0)) (CONSTRAINT != (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t2 0))) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t2 0))) (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t2 0)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 6) (TUPLE t2 0) (INTRINSIC - (TUPLE t2 0) (TUPLE t0 6))) moved_displacement_candidate)
             )))
          ))        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,as(Dest, address),End,(as(Dest, address)-End)) :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",\"NONE\",_,Mult,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   Mult > 1,\n   regular_data_section(Name),\n   loaded_section(_,End,Name),\n   as(Dest, address) > End.\nin file pointer_reattribution.dl [356:1-386:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [356:1-386:7];moved_displacement_candidate(EA,Op_index,as(Dest, address),End,(as(Dest, address)-End)) :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",\\\"NONE\\\",_,Mult,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   Mult > 1,\\n   regular_data_section(Name),\\n   loaded_section(_,End,Name),\\n   as(Dest, address) > End.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 3) (STRING "NONE")) (<= (NUMBER 1) (TUPLE t0 5) ))
          (IF (AND (AND (AND (AND (CONSTRAINT >= (TUPLE t0 6)  (NUMBER 0)) (CONSTRAINT != (TUPLE t0 5)  (NUMBER 1))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF)))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (FOR_IN t1 regular_data_section             (FOR t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (IF (AND (CONSTRAINT >= (TUPLE t0 6)  (TUPLE t2 1)) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t2 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 6) (TUPLE t2 1) (INTRINSIC - (TUPLE t0 6) (TUPLE t2 1))) moved_displacement_candidate)
             )))
          ))        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,as(Dest, address),Base,(Base-as(Dest, address))) :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",\"NONE\",RegMult,_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,0,_),\n   Mult2 > 1,\n   regular_data_section(Name),\n   loaded_section(Base,_,Name),\n   as(Dest, address) < Base,\n   (10*as(Dest, address)) > Base.\nin file pointer_reattribution.dl [356:1-386:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [356:1-386:7];moved_displacement_candidate(EA,Op_index,as(Dest, address),Base,(Base-as(Dest, address))) :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",\\\"NONE\\\",RegMult,_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,0,_),\\n   Mult2 > 1,\\n   regular_data_section(Name),\\n   loaded_section(Base,_,Name),\\n   as(Dest, address) < Base,\\n   (10*as(Dest, address)) > Base.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY value_reg_at_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 3) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))))
           (INDEXED_IF_EXISTS t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 4)) (<= (NUMBER 1) (TUPLE t1 4) ) (= (TUPLE t1 5) (NUMBER 0))) (CONSTRAINT != (TUPLE t1 4)  (NUMBER 1))
            (FOR_IN t2 regular_data_section              (FOR t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0)))
              (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t0 6)  (TUPLE t3 0)) (CONSTRAINT != (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0))) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t3 0))) (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0)))
               (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 6) (TUPLE t3 0) (INTRINSIC - (TUPLE t3 0) (TUPLE t0 6))) moved_displacement_candidate)
              )))
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_displacement_candidate(EA,Op_index,as(Dest, address),End,(as(Dest, address)-End)) :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",\"NONE\",RegMult,_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,0,_),\n   Mult2 > 1,\n   regular_data_section(Name),\n   loaded_section(_,End,Name),\n   as(Dest, address) > End.\nin file pointer_reattribution.dl [356:1-386:7]" 
      (TIMER_ON moved_displacement_candidate "@t-nonrecursive-rule;moved_displacement_candidate;pointer_reattribution.dl [356:1-386:7];moved_displacement_candidate(EA,Op_index,as(Dest, address),End,(as(Dest, address)-End)) :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",\\\"NONE\\\",RegMult,_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,0,_),\\n   Mult2 > 1,\\n   regular_data_section(Name),\\n   loaded_section(_,End,Name),\\n   as(Dest, address) > End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY value_reg_at_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 3) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))))
           (INDEXED_IF_EXISTS t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 4)) (<= (NUMBER 1) (TUPLE t1 4) ) (= (TUPLE t1 5) (NUMBER 0))) (CONSTRAINT != (TUPLE t1 4)  (NUMBER 1))
            (FOR_IN t2 regular_data_section              (FOR t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0)))
              (IF (AND (CONSTRAINT >= (TUPLE t0 6)  (TUPLE t3 1)) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t3 1)))
               (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 6) (TUPLE t3 1) (INTRINSIC - (TUPLE t0 6) (TUPLE t3 1))) moved_displacement_candidate)
              )))
)          ))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE moved_immediate_candidate
(STMTS     (TIMER_ON moved_immediate_candidate "@t-nonrecursive-relation;moved_immediate_candidate;pointer_reattribution.dl [444:7-444:32];"
(STMTS      (DEBUG 
 "moved_immediate_candidate(EA,Op_index,Addr,AddrAccessed,(max(AddrAccessed,Addr)-min(AddrAccessed,Addr))) :- \n   binary_type(\"EXEC\"),\n   addr_outside_section_used_for_memory_access(EA,Reg,Addr,AddrAccessed),\n   arch.move_reg_imm(EA,Reg, _tmp_79,Op_index),\n    _tmp_79 = as(Addr, number).\nin file pointer_reattribution.dl [448:1-453:64]" 
      (TIMER_ON moved_immediate_candidate "@t-nonrecursive-rule;moved_immediate_candidate;pointer_reattribution.dl [448:1-453:64];moved_immediate_candidate(EA,Op_index,Addr,AddrAccessed,(max(AddrAccessed,Addr)-min(AddrAccessed,Addr))) :- \\n   binary_type(\\\"EXEC\\\"),\\n   addr_outside_section_used_for_memory_access(EA,Reg,Addr,AddrAccessed),\\n   arch.move_reg_imm(EA,Reg, _tmp_79,Op_index),\\n    _tmp_79 = as(Addr, number).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY addr_outside_section_used_for_memory_access)) (NOT (ISEMPTY arch.move_reg_imm))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 addr_outside_section_used_for_memory_access           (FOR t1 arch.move_reg_imm (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 3) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC - (INTRINSIC max (TUPLE t0 3) (TUPLE t0 2)) (INTRINSIC min (TUPLE t0 3) (TUPLE t0 2)))) moved_immediate_candidate)
))
        )       )
      )
     )
      (DEBUG 
 "moved_immediate_candidate(EA,Imm_index,as(Immediate, address),NewDest,(max(NewDest,as(Immediate, address))-min(NewDest,as(Immediate, address)))) :- \n   binary_type(\"EXEC\"),\n   cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate),\n   Immediate >= 0,\n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   dest_enlarged_data_section(EA_def,Reg,NewDest,Beg,End,OldBeg,_),\n   Beg <= as(Immediate, address),\n   as(Immediate, address) <= End,\n   OldBeg > as(Immediate, address).\nin file pointer_reattribution.dl [455:1-471:72]" 
      (TIMER_ON moved_immediate_candidate "@t-nonrecursive-rule;moved_immediate_candidate;pointer_reattribution.dl [455:1-471:72];moved_immediate_candidate(EA,Imm_index,as(Immediate, address),NewDest,(max(NewDest,as(Immediate, address))-min(NewDest,as(Immediate, address)))) :- \\n   binary_type(\\\"EXEC\\\"),\\n   cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate),\\n   Immediate >= 0,\\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   dest_enlarged_data_section(EA_def,Reg,NewDest,Beg,End,OldBeg,_),\\n   Beg <= as(Immediate, address),\\n   as(Immediate, address) <= End,\\n   OldBeg > as(Immediate, address).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY dest_enlarged_data_section)) (NOT (ISEMPTY cmp_immediate_to_reg))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY reg_def_use.def_used))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 cmp_immediate_to_reg (INDEX  (<= (NUMBER 0) (TUPLE t0 3) ))
          (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR t2 dest_enlarged_data_section (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t2 3)  (TUPLE t0 3)) (CONSTRAINT != (TUPLE t2 5)  (TUPLE t0 3))) (CONSTRAINT >= (TUPLE t2 5)  (TUPLE t0 3))) (CONSTRAINT <= (TUPLE t0 3)  (TUPLE t2 4)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t2 2) (INTRINSIC - (INTRINSIC max (TUPLE t2 2) (TUPLE t0 3)) (INTRINSIC min (TUPLE t2 2) (TUPLE t0 3)))) moved_immediate_candidate)
            ))))        )       )
      )
     )
      (DEBUG 
 "moved_immediate_candidate(EA,Imm_index,as(Immediate, address),NewDest,(max(NewDest,as(Immediate, address))-min(NewDest,as(Immediate, address)))) :- \n   binary_type(\"EXEC\"),\n   cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate),\n   Immediate >= 0,\n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   dest_enlarged_data_section(EA_def,Reg,NewDest,Beg,End,_,OldEnd),\n   Beg <= as(Immediate, address),\n   as(Immediate, address) <= End,\n   as(Immediate, address) > OldEnd.\nin file pointer_reattribution.dl [455:1-471:72]" 
      (TIMER_ON moved_immediate_candidate "@t-nonrecursive-rule;moved_immediate_candidate;pointer_reattribution.dl [455:1-471:72];moved_immediate_candidate(EA,Imm_index,as(Immediate, address),NewDest,(max(NewDest,as(Immediate, address))-min(NewDest,as(Immediate, address)))) :- \\n   binary_type(\\\"EXEC\\\"),\\n   cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate),\\n   Immediate >= 0,\\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   dest_enlarged_data_section(EA_def,Reg,NewDest,Beg,End,_,OldEnd),\\n   Beg <= as(Immediate, address),\\n   as(Immediate, address) <= End,\\n   as(Immediate, address) > OldEnd.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY dest_enlarged_data_section)) (NOT (ISEMPTY cmp_immediate_to_reg))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY reg_def_use.def_used))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 cmp_immediate_to_reg (INDEX  (<= (NUMBER 0) (TUPLE t0 3) ))
          (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR t2 dest_enlarged_data_section (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t2 3)  (TUPLE t0 3)) (CONSTRAINT != (TUPLE t0 3)  (TUPLE t2 6))) (CONSTRAINT >= (TUPLE t0 3)  (TUPLE t2 6))) (CONSTRAINT <= (TUPLE t0 3)  (TUPLE t2 4)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t2 2) (INTRINSIC - (INTRINSIC max (TUPLE t2 2) (TUPLE t0 3)) (INTRINSIC min (TUPLE t2 2) (TUPLE t0 3)))) moved_immediate_candidate)
            ))))        )       )
      )
     )
      (DEBUG 
 "moved_immediate_candidate(EA_def2,Imm_index,as(Immediate, address),NewDest,(max(NewDest,as(Immediate, address))-min(NewDest,as(Immediate, address)))) :- \n   binary_type(\"EXEC\"),\n   cmp_reg_to_reg(EA,Reg1,Reg2),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   dest_enlarged_data_section(EA_def1,Reg1,NewDest,Beg,End,OldBeg,_),\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   arch.move_reg_imm(EA_def2,Reg2,Immediate,Imm_index),\n   Immediate >= 0,\n   Beg <= as(Immediate, address),\n   as(Immediate, address) <= End,\n   OldBeg > as(Immediate, address).\nin file pointer_reattribution.dl [473:1-493:72]" 
      (TIMER_ON moved_immediate_candidate "@t-nonrecursive-rule;moved_immediate_candidate;pointer_reattribution.dl [473:1-493:72];moved_immediate_candidate(EA_def2,Imm_index,as(Immediate, address),NewDest,(max(NewDest,as(Immediate, address))-min(NewDest,as(Immediate, address)))) :- \\n   binary_type(\\\"EXEC\\\"),\\n   cmp_reg_to_reg(EA,Reg1,Reg2),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   dest_enlarged_data_section(EA_def1,Reg1,NewDest,Beg,End,OldBeg,_),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   arch.move_reg_imm(EA_def2,Reg2,Immediate,Imm_index),\\n   Immediate >= 0,\\n   Beg <= as(Immediate, address),\\n   as(Immediate, address) <= End,\\n   OldBeg > as(Immediate, address).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY arch.move_reg_imm)) (NOT (ISEMPTY cmp_reg_to_reg))) (NOT (ISEMPTY dest_enlarged_data_section))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 cmp_reg_to_reg           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR t2 dest_enlarged_data_section (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t0 2)) (= (TUPLE t3 2) (TUPLE t0 0)))
             (FOR t4 arch.move_reg_imm (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)) (= (TUPLE t4 1) (TUPLE t0 2)) (<= (NUMBER 0) (TUPLE t4 2) ))
              (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t2 3)  (TUPLE t4 2)) (CONSTRAINT != (TUPLE t2 5)  (TUPLE t4 2))) (CONSTRAINT >= (TUPLE t2 5)  (TUPLE t4 2))) (CONSTRAINT <= (TUPLE t4 2)  (TUPLE t2 4)))
               (INSERT ((TUPLE t3 0) (TUPLE t4 3) (TUPLE t4 2) (TUPLE t2 2) (INTRINSIC - (INTRINSIC max (TUPLE t2 2) (TUPLE t4 2)) (INTRINSIC min (TUPLE t2 2) (TUPLE t4 2)))) moved_immediate_candidate)
              ))))))
        )       )
      )
     )
      (DEBUG 
 "moved_immediate_candidate(EA_def2,Imm_index,as(Immediate, address),NewDest,(max(NewDest,as(Immediate, address))-min(NewDest,as(Immediate, address)))) :- \n   binary_type(\"EXEC\"),\n   cmp_reg_to_reg(EA,Reg1,Reg2),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   dest_enlarged_data_section(EA_def1,Reg1,NewDest,Beg,End,_,OldEnd),\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   arch.move_reg_imm(EA_def2,Reg2,Immediate,Imm_index),\n   Immediate >= 0,\n   Beg <= as(Immediate, address),\n   as(Immediate, address) <= End,\n   as(Immediate, address) > OldEnd.\nin file pointer_reattribution.dl [473:1-493:72]" 
      (TIMER_ON moved_immediate_candidate "@t-nonrecursive-rule;moved_immediate_candidate;pointer_reattribution.dl [473:1-493:72];moved_immediate_candidate(EA_def2,Imm_index,as(Immediate, address),NewDest,(max(NewDest,as(Immediate, address))-min(NewDest,as(Immediate, address)))) :- \\n   binary_type(\\\"EXEC\\\"),\\n   cmp_reg_to_reg(EA,Reg1,Reg2),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   dest_enlarged_data_section(EA_def1,Reg1,NewDest,Beg,End,_,OldEnd),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   arch.move_reg_imm(EA_def2,Reg2,Immediate,Imm_index),\\n   Immediate >= 0,\\n   Beg <= as(Immediate, address),\\n   as(Immediate, address) <= End,\\n   as(Immediate, address) > OldEnd.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY arch.move_reg_imm)) (NOT (ISEMPTY cmp_reg_to_reg))) (NOT (ISEMPTY dest_enlarged_data_section))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 cmp_reg_to_reg           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR t2 dest_enlarged_data_section (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t0 2)) (= (TUPLE t3 2) (TUPLE t0 0)))
             (FOR t4 arch.move_reg_imm (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)) (= (TUPLE t4 1) (TUPLE t0 2)) (<= (NUMBER 0) (TUPLE t4 2) ))
              (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t2 3)  (TUPLE t4 2)) (CONSTRAINT != (TUPLE t4 2)  (TUPLE t2 6))) (CONSTRAINT >= (TUPLE t4 2)  (TUPLE t2 6))) (CONSTRAINT <= (TUPLE t4 2)  (TUPLE t2 4)))
               (INSERT ((TUPLE t3 0) (TUPLE t4 3) (TUPLE t4 2) (TUPLE t2 2) (INTRINSIC - (INTRINSIC max (TUPLE t2 2) (TUPLE t4 2)) (INTRINSIC min (TUPLE t2 2) (TUPLE t4 2)))) moved_immediate_candidate)
              ))))))
        )       )
      )
     )
      (DEBUG 
 "moved_immediate_candidate(EAStop,ImmIndexStop,ImmediateStopAddr,ImmediateStartAddr,(ImmediateStartAddr-ImmediateStopAddr)) :- \n   arch.move_reg_imm(EAStart,_,ImmediateStart,_),\n   code_in_block(EAStart,_),\n   ImmediateStartAddr = as(ImmediateStart, address),\n   defined_symbol(ImmediateStartAddr,_,_,_,_,_,_,_,\"__start___libc_atexit\"),\n   next(EAStart,EAStop),\n   arch.move_reg_imm(EAStop,_,ImmediateStop,ImmIndexStop),\n   code_in_block(EAStop,_),\n   ImmediateStopAddr = as(ImmediateStop, address),\n   defined_symbol(ImmediateStopAddr,_,_,_,_,_,_,_,\"__stop___libc_atexit\").\nin file symbolization.dl [491:1-502:55]" 
      (TIMER_ON moved_immediate_candidate "@t-nonrecursive-rule;moved_immediate_candidate;binary/elf/symbolization.dl [491:1-502:55];moved_immediate_candidate(EAStop,ImmIndexStop,ImmediateStopAddr,ImmediateStartAddr,(ImmediateStartAddr-ImmediateStopAddr)) :- \\n   arch.move_reg_imm(EAStart,_,ImmediateStart,_),\\n   code_in_block(EAStart,_),\\n   ImmediateStartAddr = as(ImmediateStart, address),\\n   defined_symbol(ImmediateStartAddr,_,_,_,_,_,_,_,\\\"__start___libc_atexit\\\"),\\n   next(EAStart,EAStop),\\n   arch.move_reg_imm(EAStop,_,ImmediateStop,ImmIndexStop),\\n   code_in_block(EAStop,_),\\n   ImmediateStopAddr = as(ImmediateStop, address),\\n   defined_symbol(ImmediateStopAddr,_,_,_,_,_,_,_,\\\"__stop___libc_atexit\\\").;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.move_reg_imm))) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 arch.move_reg_imm           (IF (EXISTS code_in_block ((TUPLE t0 0) UNDEF))
           (FOR t1 defined_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 8) (STRING "__start___libc_atexit")))
            (FOR t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (EXISTS code_in_block ((TUPLE t2 1) UNDEF))
              (FOR t3 arch.move_reg_imm (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (FOR t4 defined_symbol (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)) (= (TUPLE t4 8) (STRING "__stop___libc_atexit")))
                (INSERT ((TUPLE t2 1) (TUPLE t3 3) (TUPLE t4 0) (TUPLE t1 0) (INTRINSIC - (TUPLE t1 0) (TUPLE t4 0))) moved_immediate_candidate)
))             )))          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE moved_label
(STMTS (STMTS     (TIMER_ON moved_label "@t-nonrecursive-relation;moved_label;pointer_reattribution.dl [77:7-77:18];"
(STMTS      (DEBUG 
 "moved_label(EA,Op_index,Dest,NewDest) :- \n   moved_label_candidate(EA,Op_index,Dest,NewDest,@generator_0),\n   @generator_0 = min P : { moved_label_candidate(EA,Op_index,+underscore_2235,+underscore_2236,P) }.\nin file pointer_reattribution.dl [507:1-509:64]" 
      (TIMER_ON moved_label "@t-nonrecursive-rule;moved_label;pointer_reattribution.dl [507:1-509:64];moved_label(EA,Op_index,Dest,NewDest) :- \\n   moved_label_candidate(EA,Op_index,Dest,NewDest,@generator_0),\\n   @generator_0 = min P : { moved_label_candidate(EA,Op_index,+underscore_2235,+underscore_2236,P) }.;"
(QUERY
        (IF (NOT (ISEMPTY moved_label_candidate))
         (FOR_IN t0 moved_label_candidate           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MIN  (TUPLE t1 4) ))  t1 moved_label_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1))) TRUE 
           (IF (CONSTRAINT = (TUPLE t0 4)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) moved_label)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR moved_label_candidate)
 ) )  )
  (SUBROUTINE moved_label_candidate
(STMTS (STMTS     (TIMER_ON moved_label_candidate "@t-nonrecursive-relation;moved_label_candidate;pointer_reattribution.dl [503:7-503:28];"
(STMTS      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,Block,1) :- \n   symbolic_operand(EA,Op_index,Dest,\"code\"),\n   overlapping_instruction(Dest,Block).\nin file pointer_reattribution.dl [531:1-534:41]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [531:1-534:41];moved_label_candidate(EA,Op_index,Dest,Block,1) :- \\n   symbolic_operand(EA,Op_index,Dest,\\\"code\\\"),\\n   overlapping_instruction(Dest,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY overlapping_instruction)))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "code")))
          (FOR t1 overlapping_instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 1) (UNSIGNED 1)) moved_label_candidate)
))        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,Address,2) :- \n   defined_symbol(Address,Size,_,_,_,_,_,_,Name),\n   !function_symbol(Address,Name),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   Address < Dest,\n   Dest < (Address+Size).\nin file pointer_reattribution.dl [537:1-546:25]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [537:1-546:25];moved_label_candidate(EA,Op_index,Dest,Address,2) :- \\n   defined_symbol(Address,Size,_,_,_,_,_,_,Name),\\n   !function_symbol(Address,Name),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   Address < Dest,\\n   Dest < (Address+Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY symbolic_operand)))
         (FOR_IN t0 defined_symbol           (IF (NOT (EXISTS function_symbol ((TUPLE t0 0) (TUPLE t0 8))))
           (FOR t1 symbolic_operand (INDEX  (= (TUPLE t1 3) (STRING "data")))
            (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t1 2)) (CONSTRAINT != (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)))) (CONSTRAINT != (TUPLE t0 0)  (TUPLE t1 2))) (CONSTRAINT <= (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 0) (UNSIGNED 2)) moved_label_candidate)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,Address,2) :- \n   defined_symbol(Address,Size,_,_,_,_,_,_,Name),\n   !function_symbol(Address,Name),\n   got_relative_operand(EA,Op_index,Dest),\n   Address < Dest,\n   Dest < (Address+Size).\nin file pointer_reattribution.dl [537:1-546:25]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [537:1-546:25];moved_label_candidate(EA,Op_index,Dest,Address,2) :- \\n   defined_symbol(Address,Size,_,_,_,_,_,_,Name),\\n   !function_symbol(Address,Name),\\n   got_relative_operand(EA,Op_index,Dest),\\n   Address < Dest,\\n   Dest < (Address+Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY got_relative_operand)))
         (FOR_IN t0 defined_symbol           (IF (NOT (EXISTS function_symbol ((TUPLE t0 0) (TUPLE t0 8))))
           (FOR_IN t1 got_relative_operand             (IF (AND (CONSTRAINT < (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))) (CONSTRAINT < (TUPLE t0 0)  (TUPLE t1 2)))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 0) (UNSIGNED 2)) moved_label_candidate)
            ))
          ))
        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Src,Dst,4) :- \n   first_synchronous_access(Dst,Src),\n   Dst != Src,\n   symbolic_operand(EA,Op_index,Src,\"data\"),\n   symbolic_operand(_,_,Dst,\"data\").\nin file pointer_reattribution.dl [560:1-565:38]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [560:1-565:38];moved_label_candidate(EA,Op_index,Src,Dst,4) :- \\n   first_synchronous_access(Dst,Src),\\n   Dst != Src,\\n   symbolic_operand(EA,Op_index,Src,\\\"data\\\"),\\n   symbolic_operand(_,_,Dst,\\\"data\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY first_synchronous_access)))
         (FOR_IN t0 first_synchronous_access           (IF (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t0 1)) (EXISTS symbolic_operand (UNDEF UNDEF (TUPLE t0 0) (STRING "data"))))
           (FOR t1 symbolic_operand (INDEX  (= (TUPLE t1 2) (TUPLE t0 1)) (= (TUPLE t1 3) (STRING "data")))
            (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 0) (UNSIGNED 4)) moved_label_candidate)
)          ))
        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,ImageBase,5) :- \n   binary_format(\"PE\"),\n   base_address(ImageBase),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   Dest >= ImageBase,\n   Dest <= (ImageBase+1024).\nin file pointer_reattribution.dl [569:1-574:49]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [569:1-574:49];moved_label_candidate(EA,Op_index,Dest,ImageBase,5) :- \\n   binary_format(\\\"PE\\\"),\\n   base_address(ImageBase),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   Dest >= ImageBase,\\n   Dest <= (ImageBase+1024).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 base_address           (FOR t1 symbolic_operand (INDEX  (= (TUPLE t1 3) (STRING "data")))
           (IF (AND (CONSTRAINT >= (TUPLE t1 2)  (TUPLE t0 0)) (CONSTRAINT <= (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1024))))
            (INSERT ((TUPLE t1 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t0 0) (UNSIGNED 5)) moved_label_candidate)
           )))
        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,NewDest,1) :- \n   moved_pc_relative_candidate(EA,Op_index,Dest,NewDest,@generator_0),\n   @generator_0 = min D : { moved_pc_relative_candidate(EA,Op_index,Dest,+underscore_2251,D) }.\nin file pointer_reattribution.dl [518:1-520:73]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [518:1-520:73];moved_label_candidate(EA,Op_index,Dest,NewDest,1) :- \\n   moved_pc_relative_candidate(EA,Op_index,Dest,NewDest,@generator_0),\\n   @generator_0 = min D : { moved_pc_relative_candidate(EA,Op_index,Dest,+underscore_2251,D) }.;"
(QUERY
        (IF (NOT (ISEMPTY moved_pc_relative_candidate))
         (FOR_IN t0 moved_pc_relative_candidate           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MIN  (TUPLE t1 4) ))  t1 moved_pc_relative_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2))) TRUE 
           (IF (CONSTRAINT = (TUPLE t0 4)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (UNSIGNED 1)) moved_label_candidate)
           )))
        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,NewDest,1) :- \n   moved_displacement_candidate(EA,Op_index,Dest,NewDest,@generator_0),\n   @generator_0 = min D : { moved_displacement_candidate(EA,Op_index,Dest,NewDest,D) }.\nin file pointer_reattribution.dl [522:1-524:82]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [522:1-524:82];moved_label_candidate(EA,Op_index,Dest,NewDest,1) :- \\n   moved_displacement_candidate(EA,Op_index,Dest,NewDest,@generator_0),\\n   @generator_0 = min D : { moved_displacement_candidate(EA,Op_index,Dest,NewDest,D) }.;"
(QUERY
        (IF (NOT (ISEMPTY moved_displacement_candidate))
         (FOR_IN t0 moved_displacement_candidate           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MIN  (TUPLE t1 4) ))  t1 moved_displacement_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)) (= (TUPLE t1 3) (TUPLE t0 3))) TRUE 
           (IF (CONSTRAINT = (TUPLE t0 4)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (UNSIGNED 1)) moved_label_candidate)
           )))
        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,NewDest,1) :- \n   moved_immediate_candidate(EA,Op_index,Dest,NewDest,@generator_0),\n   @generator_0 = min D : { moved_immediate_candidate(EA,Op_index,Dest,+underscore_2252,D) }.\nin file pointer_reattribution.dl [526:1-528:71]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [526:1-528:71];moved_label_candidate(EA,Op_index,Dest,NewDest,1) :- \\n   moved_immediate_candidate(EA,Op_index,Dest,NewDest,@generator_0),\\n   @generator_0 = min D : { moved_immediate_candidate(EA,Op_index,Dest,+underscore_2252,D) }.;"
(QUERY
        (IF (NOT (ISEMPTY moved_immediate_candidate))
         (FOR_IN t0 moved_immediate_candidate           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MIN  (TUPLE t1 4) ))  t1 moved_immediate_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2))) TRUE 
           (IF (CONSTRAINT = (TUPLE t0 4)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (UNSIGNED 1)) moved_label_candidate)
           )))
        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_211),\n   NewDest = (Dest-1),\n   symbolic_data(NewDest,_,_),\n    _tmp_211 = (Dest-1).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [549:1-556:32];moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_211),\\n   NewDest = (Dest-1),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_211 = (Dest-1).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 1)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 1))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0) (UNSIGNED 3)) moved_label_candidate)
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_212),\n   NewDest = (Dest-2),\n   symbolic_data(NewDest,_,_),\n    _tmp_212 = (Dest-2).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [549:1-556:32];moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_212),\\n   NewDest = (Dest-2),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_212 = (Dest-2).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 2)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 2))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0) (UNSIGNED 3)) moved_label_candidate)
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_213),\n   NewDest = (Dest-3),\n   symbolic_data(NewDest,_,_),\n    _tmp_213 = (Dest-3).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [549:1-556:32];moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_213),\\n   NewDest = (Dest-3),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_213 = (Dest-3).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 3)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 3))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0) (UNSIGNED 3)) moved_label_candidate)
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_214),\n   NewDest = (Dest-4),\n   symbolic_data(NewDest,_,_),\n    _tmp_214 = (Dest-4).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [549:1-556:32];moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_214),\\n   NewDest = (Dest-4),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_214 = (Dest-4).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 4)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 4))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0) (UNSIGNED 3)) moved_label_candidate)
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_215),\n   NewDest = (Dest-5),\n   symbolic_data(NewDest,_,_),\n    _tmp_215 = (Dest-5).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [549:1-556:32];moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_215),\\n   NewDest = (Dest-5),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_215 = (Dest-5).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 5)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 5))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0) (UNSIGNED 3)) moved_label_candidate)
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_216),\n   NewDest = (Dest-6),\n   symbolic_data(NewDest,_,_),\n    _tmp_216 = (Dest-6).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [549:1-556:32];moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_216),\\n   NewDest = (Dest-6),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_216 = (Dest-6).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 6)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 6))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0) (UNSIGNED 3)) moved_label_candidate)
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_217),\n   NewDest = (Dest-7),\n   symbolic_data(NewDest,_,_),\n    _tmp_217 = (Dest-7).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;pointer_reattribution.dl [549:1-556:32];moved_label_candidate(EA,Op_index,Dest,NewDest,3) :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_217),\\n   NewDest = (Dest-7),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_217 = (Dest-7).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 7)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 7))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t1 0) (UNSIGNED 3)) moved_label_candidate)
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_candidate(EA,OpIndex,as(Offset, address),as((Offset+<inlined_Mult_241>), address),6) :- \n   indirect_jump(EA),\n   instruction_get_op(EA,OpIndex,<inlined_Op_241>),\n   op_indirect(<inlined_Op_241>,\"NONE\",\"NONE\",_,<inlined_Mult_241>,Offset,_),\n   8 = as(<inlined_Mult_241>, unsigned),\n   !address_in_data(as(Offset, address),_),\n   @functor_data_valid(as((Offset+<inlined_Mult_241>), address),8) = 1,\n   @functor_data_valid((as((Offset+<inlined_Mult_241>), address)+8),8) = 1,\n   code_in_block( _tmp_233,_),\n   code_in_block( _tmp_234,_),\n    _tmp_233 = as(@functor_data_signed(as((Offset+<inlined_Mult_241>), address),8), address),\n    _tmp_234 = as(@functor_data_signed((as((Offset+<inlined_Mult_241>), address)+8),8), address).\nin file symbolization.dl [257:1-262:17]" 
      (TIMER_ON moved_label_candidate "@t-nonrecursive-rule;moved_label_candidate;binary/pe/symbolization.dl [257:1-262:17];moved_label_candidate(EA,OpIndex,as(Offset, address),as((Offset+<inlined_Mult_241>), address),6) :- \\n   indirect_jump(EA),\\n   instruction_get_op(EA,OpIndex,<inlined_Op_241>),\\n   op_indirect(<inlined_Op_241>,\\\"NONE\\\",\\\"NONE\\\",_,<inlined_Mult_241>,Offset,_),\\n   8 = as(<inlined_Mult_241>, unsigned),\\n   !address_in_data(as(Offset, address),_),\\n   @functor_data_valid(as((Offset+<inlined_Mult_241>), address),8) = 1,\\n   @functor_data_valid((as((Offset+<inlined_Mult_241>), address)+8),8) = 1,\\n   code_in_block( _tmp_233,_),\\n   code_in_block( _tmp_234,_),\\n    _tmp_233 = as(@functor_data_signed(as((Offset+<inlined_Mult_241>), address),8), address),\\n    _tmp_234 = as(@functor_data_signed((as((Offset+<inlined_Mult_241>), address)+8),8), address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY indirect_jump))) (NOT (ISEMPTY op_indirect)))
         (FOR_IN t0 indirect_jump           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 op_indirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (STRING "NONE")) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 4) (UNSIGNED 8)))
            (IF (AND (AND (AND (AND (EXISTS code_in_block ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8))) UNDEF)) (NOT (EXISTS address_in_data ((TUPLE t2 5) UNDEF)))) (EXISTS code_in_block ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)) (UNSIGNED 8))) UNDEF))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)) (UNSIGNED 8)))  (UNSIGNED 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 5) (INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 6)) moved_label_candidate)
            ))))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR moved_displacement_candidate)
     (CLEAR moved_immediate_candidate)
 ) )  )
  (SUBROUTINE moved_label_class
(STMTS (STMTS (STMTS     (TIMER_ON moved_label_class "@t-nonrecursive-relation;moved_label_class;pointer_reattribution.dl [87:7-87:24];"
(STMTS      (DEBUG 
 "moved_label_class(EA,Op_index,\"KUSER_SHARED_DATA\") :- \n   binary_format(\"PE\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   Dest > 0x7FFE0000,\n   Dest < 0x7FFE1000.\nin file symbolization.dl [27:1-32:40]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;binary/pe/symbolization.dl [27:1-32:40];moved_label_class(EA,Op_index,\\\"KUSER_SHARED_DATA\\\") :- \\n   binary_format(\\\"PE\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   Dest > 0x7FFE0000,\\n   Dest < 0x7FFE1000.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY symbolic_operand))) (EXISTS binary_format ((STRING "PE"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (AND (AND (CONSTRAINT >= (TUPLE t0 2)  (UNSIGNED 2147352576)) (CONSTRAINT != (TUPLE t0 2)  (UNSIGNED 2147356672))) (CONSTRAINT != (TUPLE t0 2)  (UNSIGNED 2147352576))) (CONSTRAINT <= (TUPLE t0 2)  (UNSIGNED 2147356672)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "KUSER_SHARED_DATA")) moved_label_class)
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"pc-relative\") :- \n   moved_pc_relative_candidate(EA,Op_index,_,_,_).\nin file pointer_reattribution.dl [515:1-516:52]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [515:1-516:52];moved_label_class(EA,Op_index,\\\"pc-relative\\\") :- \\n   moved_pc_relative_candidate(EA,Op_index,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY moved_pc_relative_candidate))
         (FOR_IN t0 moved_pc_relative_candidate           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "pc-relative")) moved_label_class)
)
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"overlapping instruction\") :- \n   symbolic_operand(EA,Op_index,Dest,\"code\"),\n   overlapping_instruction(Dest,_).\nin file pointer_reattribution.dl [531:1-534:41]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [531:1-534:41];moved_label_class(EA,Op_index,\\\"overlapping instruction\\\") :- \\n   symbolic_operand(EA,Op_index,Dest,\\\"code\\\"),\\n   overlapping_instruction(Dest,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY overlapping_instruction)))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "code")))
          (IF (EXISTS overlapping_instruction ((TUPLE t0 2) UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "overlapping instruction")) moved_label_class)
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"middle of symbol\") :- \n   defined_symbol(Address,Size,_,_,_,_,_,_,Name),\n   !function_symbol(Address,Name),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   Address < Dest,\n   Dest < (Address+Size).\nin file pointer_reattribution.dl [537:1-546:25]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [537:1-546:25];moved_label_class(EA,Op_index,\\\"middle of symbol\\\") :- \\n   defined_symbol(Address,Size,_,_,_,_,_,_,Name),\\n   !function_symbol(Address,Name),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   Address < Dest,\\n   Dest < (Address+Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY symbolic_operand)))
         (FOR_IN t0 defined_symbol           (IF (NOT (EXISTS function_symbol ((TUPLE t0 0) (TUPLE t0 8))))
           (FOR t1 symbolic_operand (INDEX  (= (TUPLE t1 3) (STRING "data")))
            (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t1 2)) (CONSTRAINT != (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)))) (CONSTRAINT != (TUPLE t0 0)  (TUPLE t1 2))) (CONSTRAINT <= (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (STRING "middle of symbol")) moved_label_class)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"middle of symbol\") :- \n   defined_symbol(Address,Size,_,_,_,_,_,_,Name),\n   !function_symbol(Address,Name),\n   got_relative_operand(EA,Op_index,Dest),\n   Address < Dest,\n   Dest < (Address+Size).\nin file pointer_reattribution.dl [537:1-546:25]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [537:1-546:25];moved_label_class(EA,Op_index,\\\"middle of symbol\\\") :- \\n   defined_symbol(Address,Size,_,_,_,_,_,_,Name),\\n   !function_symbol(Address,Name),\\n   got_relative_operand(EA,Op_index,Dest),\\n   Address < Dest,\\n   Dest < (Address+Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY got_relative_operand)))
         (FOR_IN t0 defined_symbol           (IF (NOT (EXISTS function_symbol ((TUPLE t0 0) (TUPLE t0 8))))
           (FOR_IN t1 got_relative_operand             (IF (AND (CONSTRAINT < (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))) (CONSTRAINT < (TUPLE t0 0)  (TUPLE t1 2)))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (STRING "middle of symbol")) moved_label_class)
            ))
          ))
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"synchronous access\") :- \n   first_synchronous_access(Dst,Src),\n   Dst != Src,\n   symbolic_operand(EA,Op_index,Src,\"data\"),\n   symbolic_operand(_,_,Dst,\"data\").\nin file pointer_reattribution.dl [560:1-565:38]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [560:1-565:38];moved_label_class(EA,Op_index,\\\"synchronous access\\\") :- \\n   first_synchronous_access(Dst,Src),\\n   Dst != Src,\\n   symbolic_operand(EA,Op_index,Src,\\\"data\\\"),\\n   symbolic_operand(_,_,Dst,\\\"data\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY first_synchronous_access)))
         (FOR_IN t0 first_synchronous_access           (IF (AND (CONSTRAINT != (TUPLE t0 0)  (TUPLE t0 1)) (EXISTS symbolic_operand (UNDEF UNDEF (TUPLE t0 0) (STRING "data"))))
           (FOR t1 symbolic_operand (INDEX  (= (TUPLE t1 2) (TUPLE t0 1)) (= (TUPLE t1 3) (STRING "data")))
            (INSERT ((TUPLE t1 0) (TUPLE t1 1) (STRING "synchronous access")) moved_label_class)
)          ))
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"pe header\") :- \n   binary_format(\"PE\"),\n   base_address(ImageBase),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   Dest >= ImageBase,\n   Dest <= (ImageBase+1024).\nin file pointer_reattribution.dl [569:1-574:49]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [569:1-574:49];moved_label_class(EA,Op_index,\\\"pe header\\\") :- \\n   binary_format(\\\"PE\\\"),\\n   base_address(ImageBase),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   Dest >= ImageBase,\\n   Dest <= (ImageBase+1024).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 base_address           (FOR t1 symbolic_operand (INDEX  (= (TUPLE t1 3) (STRING "data")))
           (IF (AND (CONSTRAINT >= (TUPLE t1 2)  (TUPLE t0 0)) (CONSTRAINT <= (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1024))))
            (INSERT ((TUPLE t1 0) (TUPLE t1 1) (STRING "pe header")) moved_label_class)
           )))
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"indirect wrong section\") :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,_),\n   data_access(EA,Op_index,_,_,_,_,_,_),\n   data_access_pattern_candidate(Access_dest,_,Mult,EA),\n   Access_dest != Dest,\n   loaded_section(Base,End,Name),\n   Dest >= Base,\n   Dest <= End,\n   regular_data_section(Name2),\n   Name2 != Name,\n   loaded_section(Base2,End2,Name2),\n   Access_dest >= Base2,\n   Access_dest <= End2,\n   Dest != Base2,\n   Mult > 0,\n   Access_dest > Dest.\nin file pointer_reattribution.dl [295:1-322:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [295:1-322:7];moved_label_class(EA,Op_index,\\\"indirect wrong section\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,_),\\n   data_access(EA,Op_index,_,_,_,_,_,_),\\n   data_access_pattern_candidate(Access_dest,_,Mult,EA),\\n   Access_dest != Dest,\\n   loaded_section(Base,End,Name),\\n   Dest >= Base,\\n   Dest <= End,\\n   regular_data_section(Name2),\\n   Name2 != Name,\\n   loaded_section(Base2,End2,Name2),\\n   Access_dest >= Base2,\\n   Access_dest <= End2,\\n   Dest != Base2,\\n   Mult > 0,\\n   Access_dest > Dest.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY data_access_pattern_candidate))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY regular_data_section))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 symbolic_operand           (IF (EXISTS data_access ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 data_access_pattern_candidate (INDEX  (<= (NUMBER 0) (TUPLE t1 2) ) (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (AND (AND (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t0 2)) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 2))) (CONSTRAINT != (TUPLE t1 2)  (NUMBER 0)))
             (FOR_IN t2 loaded_section               (IF (AND (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t2 1)) (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t2 0)))
               (FOR_IN t3 regular_data_section                 (IF (CONSTRAINT != (TUPLE t3 0)  (TUPLE t2 2))
                 (INDEXED_IF_EXISTS t4 loaded_section (INDEX  (= (TUPLE t4 2) (TUPLE t3 0))) (AND (AND (CONSTRAINT != (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t4 1))) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t4 0)))
                  (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "indirect wrong section")) moved_label_class)
)                ))
              ))
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"indirect wrong section\") :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,_),\n   data_access(EA,Op_index,_,_,_,_,_,_),\n   data_access_pattern_candidate(Access_dest,_,Mult,EA),\n   Access_dest != Dest,\n   loaded_section(Base,End,Name),\n   Dest >= Base,\n   Dest <= End,\n   regular_data_section(Name2),\n   Name2 != Name,\n   loaded_section(Base2,End2,Name2),\n   Access_dest >= Base2,\n   Access_dest <= End2,\n   Dest != Base2,\n   Mult <= 0.\nin file pointer_reattribution.dl [295:1-322:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [295:1-322:7];moved_label_class(EA,Op_index,\\\"indirect wrong section\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,_),\\n   data_access(EA,Op_index,_,_,_,_,_,_),\\n   data_access_pattern_candidate(Access_dest,_,Mult,EA),\\n   Access_dest != Dest,\\n   loaded_section(Base,End,Name),\\n   Dest >= Base,\\n   Dest <= End,\\n   regular_data_section(Name2),\\n   Name2 != Name,\\n   loaded_section(Base2,End2,Name2),\\n   Access_dest >= Base2,\\n   Access_dest <= End2,\\n   Dest != Base2,\\n   Mult <= 0.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY data_access_pattern_candidate))) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY regular_data_section))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 symbolic_operand           (IF (EXISTS data_access ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 data_access_pattern_candidate (INDEX  (<= (TUPLE t1 2) (NUMBER 0)) (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 2))
             (FOR_IN t2 loaded_section               (IF (AND (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t2 1)) (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t2 0)))
               (FOR_IN t3 regular_data_section                 (IF (CONSTRAINT != (TUPLE t3 0)  (TUPLE t2 2))
                 (INDEXED_IF_EXISTS t4 loaded_section (INDEX  (= (TUPLE t4 2) (TUPLE t3 0))) (AND (AND (CONSTRAINT != (TUPLE t0 2)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t4 1))) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t4 0)))
                  (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "indirect wrong section")) moved_label_class)
)                ))
              ))
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"immediate used to access memory\") :- \n   binary_type(\"EXEC\"),\n   addr_outside_section_used_for_memory_access(EA,Reg,Addr,_),\n   arch.move_reg_imm(EA,Reg, _tmp_82,Op_index),\n    _tmp_82 = as(Addr, number).\nin file pointer_reattribution.dl [448:1-453:64]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [448:1-453:64];moved_label_class(EA,Op_index,\\\"immediate used to access memory\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   addr_outside_section_used_for_memory_access(EA,Reg,Addr,_),\\n   arch.move_reg_imm(EA,Reg, _tmp_82,Op_index),\\n    _tmp_82 = as(Addr, number).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY addr_outside_section_used_for_memory_access)) (NOT (ISEMPTY arch.move_reg_imm))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 addr_outside_section_used_for_memory_access           (FOR t1 arch.move_reg_imm (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 3) (STRING "immediate used to access memory")) moved_label_class)
))
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Imm_index,\"immediate loop bound\") :- \n   binary_type(\"EXEC\"),\n   cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate),\n   Immediate >= 0,\n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   dest_enlarged_data_section(EA_def,Reg,_,Beg,End,OldBeg,_),\n   Beg <= as(Immediate, address),\n   as(Immediate, address) <= End,\n   OldBeg > as(Immediate, address).\nin file pointer_reattribution.dl [455:1-471:72]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [455:1-471:72];moved_label_class(EA,Imm_index,\\\"immediate loop bound\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate),\\n   Immediate >= 0,\\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   dest_enlarged_data_section(EA_def,Reg,_,Beg,End,OldBeg,_),\\n   Beg <= as(Immediate, address),\\n   as(Immediate, address) <= End,\\n   OldBeg > as(Immediate, address).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY dest_enlarged_data_section)) (NOT (ISEMPTY cmp_immediate_to_reg))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY reg_def_use.def_used))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 cmp_immediate_to_reg (INDEX  (<= (NUMBER 0) (TUPLE t0 3) ))
          (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 dest_enlarged_data_section (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1))) (AND (AND (AND (CONSTRAINT <= (TUPLE t0 3)  (TUPLE t2 4)) (CONSTRAINT != (TUPLE t2 5)  (TUPLE t0 3))) (CONSTRAINT >= (TUPLE t2 5)  (TUPLE t0 3))) (CONSTRAINT <= (TUPLE t2 3)  (TUPLE t0 3)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 2) (STRING "immediate loop bound")) moved_label_class)
)))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Imm_index,\"immediate loop bound\") :- \n   binary_type(\"EXEC\"),\n   cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate),\n   Immediate >= 0,\n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   dest_enlarged_data_section(EA_def,Reg,_,Beg,End,_,OldEnd),\n   Beg <= as(Immediate, address),\n   as(Immediate, address) <= End,\n   as(Immediate, address) > OldEnd.\nin file pointer_reattribution.dl [455:1-471:72]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [455:1-471:72];moved_label_class(EA,Imm_index,\\\"immediate loop bound\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   cmp_immediate_to_reg(EA,Reg,Imm_index,Immediate),\\n   Immediate >= 0,\\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   dest_enlarged_data_section(EA_def,Reg,_,Beg,End,_,OldEnd),\\n   Beg <= as(Immediate, address),\\n   as(Immediate, address) <= End,\\n   as(Immediate, address) > OldEnd.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY dest_enlarged_data_section)) (NOT (ISEMPTY cmp_immediate_to_reg))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY reg_def_use.def_used))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 cmp_immediate_to_reg (INDEX  (<= (NUMBER 0) (TUPLE t0 3) ))
          (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 dest_enlarged_data_section (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1))) (AND (AND (AND (CONSTRAINT <= (TUPLE t0 3)  (TUPLE t2 4)) (CONSTRAINT != (TUPLE t0 3)  (TUPLE t2 6))) (CONSTRAINT >= (TUPLE t0 3)  (TUPLE t2 6))) (CONSTRAINT <= (TUPLE t2 3)  (TUPLE t0 3)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 2) (STRING "immediate loop bound")) moved_label_class)
)))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA_def2,Imm_index,\"loaded immediate loop bound\") :- \n   binary_type(\"EXEC\"),\n   cmp_reg_to_reg(EA,Reg1,Reg2),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   dest_enlarged_data_section(EA_def1,Reg1,_,Beg,End,OldBeg,_),\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   arch.move_reg_imm(EA_def2,Reg2,Immediate,Imm_index),\n   Immediate >= 0,\n   Beg <= as(Immediate, address),\n   as(Immediate, address) <= End,\n   OldBeg > as(Immediate, address).\nin file pointer_reattribution.dl [473:1-493:72]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [473:1-493:72];moved_label_class(EA_def2,Imm_index,\\\"loaded immediate loop bound\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   cmp_reg_to_reg(EA,Reg1,Reg2),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   dest_enlarged_data_section(EA_def1,Reg1,_,Beg,End,OldBeg,_),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   arch.move_reg_imm(EA_def2,Reg2,Immediate,Imm_index),\\n   Immediate >= 0,\\n   Beg <= as(Immediate, address),\\n   as(Immediate, address) <= End,\\n   OldBeg > as(Immediate, address).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY arch.move_reg_imm)) (NOT (ISEMPTY cmp_reg_to_reg))) (NOT (ISEMPTY dest_enlarged_data_section))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 cmp_reg_to_reg           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR t2 dest_enlarged_data_section (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t0 2)) (= (TUPLE t3 2) (TUPLE t0 0)))
             (FOR t4 arch.move_reg_imm (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)) (= (TUPLE t4 1) (TUPLE t0 2)) (<= (NUMBER 0) (TUPLE t4 2) ))
              (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t2 3)  (TUPLE t4 2)) (CONSTRAINT != (TUPLE t2 5)  (TUPLE t4 2))) (CONSTRAINT >= (TUPLE t2 5)  (TUPLE t4 2))) (CONSTRAINT <= (TUPLE t4 2)  (TUPLE t2 4)))
               (INSERT ((TUPLE t3 0) (TUPLE t4 3) (STRING "loaded immediate loop bound")) moved_label_class)
              ))))))
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA_def2,Imm_index,\"loaded immediate loop bound\") :- \n   binary_type(\"EXEC\"),\n   cmp_reg_to_reg(EA,Reg1,Reg2),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   dest_enlarged_data_section(EA_def1,Reg1,_,Beg,End,_,OldEnd),\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   arch.move_reg_imm(EA_def2,Reg2,Immediate,Imm_index),\n   Immediate >= 0,\n   Beg <= as(Immediate, address),\n   as(Immediate, address) <= End,\n   as(Immediate, address) > OldEnd.\nin file pointer_reattribution.dl [473:1-493:72]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [473:1-493:72];moved_label_class(EA_def2,Imm_index,\\\"loaded immediate loop bound\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   cmp_reg_to_reg(EA,Reg1,Reg2),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   dest_enlarged_data_section(EA_def1,Reg1,_,Beg,End,_,OldEnd),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   arch.move_reg_imm(EA_def2,Reg2,Immediate,Imm_index),\\n   Immediate >= 0,\\n   Beg <= as(Immediate, address),\\n   as(Immediate, address) <= End,\\n   as(Immediate, address) > OldEnd.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY arch.move_reg_imm)) (NOT (ISEMPTY cmp_reg_to_reg))) (NOT (ISEMPTY dest_enlarged_data_section))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 cmp_reg_to_reg           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR t2 dest_enlarged_data_section (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t0 2)) (= (TUPLE t3 2) (TUPLE t0 0)))
             (FOR t4 arch.move_reg_imm (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)) (= (TUPLE t4 1) (TUPLE t0 2)) (<= (NUMBER 0) (TUPLE t4 2) ))
              (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t2 3)  (TUPLE t4 2)) (CONSTRAINT != (TUPLE t4 2)  (TUPLE t2 6))) (CONSTRAINT >= (TUPLE t4 2)  (TUPLE t2 6))) (CONSTRAINT <= (TUPLE t4 2)  (TUPLE t2 4)))
               (INSERT ((TUPLE t3 0) (TUPLE t4 3) (STRING "loaded immediate loop bound")) moved_label_class)
              ))))))
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EAStop,ImmIndexStop,\"libc atexit\") :- \n   arch.move_reg_imm(EAStart,_,ImmediateStart,_),\n   code_in_block(EAStart,_),\n   ImmediateStartAddr = as(ImmediateStart, address),\n   defined_symbol(ImmediateStartAddr,_,_,_,_,_,_,_,\"__start___libc_atexit\"),\n   next(EAStart,EAStop),\n   arch.move_reg_imm(EAStop,_,ImmediateStop,ImmIndexStop),\n   code_in_block(EAStop,_),\n   ImmediateStopAddr = as(ImmediateStop, address),\n   defined_symbol(ImmediateStopAddr,_,_,_,_,_,_,_,\"__stop___libc_atexit\").\nin file symbolization.dl [491:1-502:55]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;binary/elf/symbolization.dl [491:1-502:55];moved_label_class(EAStop,ImmIndexStop,\\\"libc atexit\\\") :- \\n   arch.move_reg_imm(EAStart,_,ImmediateStart,_),\\n   code_in_block(EAStart,_),\\n   ImmediateStartAddr = as(ImmediateStart, address),\\n   defined_symbol(ImmediateStartAddr,_,_,_,_,_,_,_,\\\"__start___libc_atexit\\\"),\\n   next(EAStart,EAStop),\\n   arch.move_reg_imm(EAStop,_,ImmediateStop,ImmIndexStop),\\n   code_in_block(EAStop,_),\\n   ImmediateStopAddr = as(ImmediateStop, address),\\n   defined_symbol(ImmediateStopAddr,_,_,_,_,_,_,_,\\\"__stop___libc_atexit\\\").;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.move_reg_imm))) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 arch.move_reg_imm           (IF (AND (EXISTS defined_symbol ((TUPLE t0 2) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (STRING "__start___libc_atexit"))) (EXISTS code_in_block ((TUPLE t0 0) UNDEF)))
           (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (EXISTS code_in_block ((TUPLE t1 1) UNDEF))
             (FOR t2 arch.move_reg_imm (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
              (IF (EXISTS defined_symbol ((TUPLE t2 2) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (STRING "__stop___libc_atexit")))
               (INSERT ((TUPLE t1 1) (TUPLE t2 3) (STRING "libc atexit")) moved_label_class)
              ))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"collides with pointer\") :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_239),\n   NewDest = (Dest-1),\n   symbolic_data(NewDest,_,_),\n    _tmp_239 = (Dest-1).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [549:1-556:32];moved_label_class(EA,Op_index,\\\"collides with pointer\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_239),\\n   NewDest = (Dest-1),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_239 = (Dest-1).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 1)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 1))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "collides with pointer")) moved_label_class)
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"collides with pointer\") :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_240),\n   NewDest = (Dest-2),\n   symbolic_data(NewDest,_,_),\n    _tmp_240 = (Dest-2).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [549:1-556:32];moved_label_class(EA,Op_index,\\\"collides with pointer\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_240),\\n   NewDest = (Dest-2),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_240 = (Dest-2).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 2)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 2))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "collides with pointer")) moved_label_class)
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"collides with pointer\") :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_241),\n   NewDest = (Dest-3),\n   symbolic_data(NewDest,_,_),\n    _tmp_241 = (Dest-3).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [549:1-556:32];moved_label_class(EA,Op_index,\\\"collides with pointer\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_241),\\n   NewDest = (Dest-3),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_241 = (Dest-3).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 3)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 3))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "collides with pointer")) moved_label_class)
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"collides with pointer\") :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_242),\n   NewDest = (Dest-4),\n   symbolic_data(NewDest,_,_),\n    _tmp_242 = (Dest-4).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [549:1-556:32];moved_label_class(EA,Op_index,\\\"collides with pointer\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_242),\\n   NewDest = (Dest-4),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_242 = (Dest-4).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 4)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 4))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "collides with pointer")) moved_label_class)
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"collides with pointer\") :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_243),\n   NewDest = (Dest-5),\n   symbolic_data(NewDest,_,_),\n    _tmp_243 = (Dest-5).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [549:1-556:32];moved_label_class(EA,Op_index,\\\"collides with pointer\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_243),\\n   NewDest = (Dest-5),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_243 = (Dest-5).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 5)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 5))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "collides with pointer")) moved_label_class)
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"collides with pointer\") :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_244),\n   NewDest = (Dest-6),\n   symbolic_data(NewDest,_,_),\n    _tmp_244 = (Dest-6).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [549:1-556:32];moved_label_class(EA,Op_index,\\\"collides with pointer\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_244),\\n   NewDest = (Dest-6),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_244 = (Dest-6).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 6)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 6))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "collides with pointer")) moved_label_class)
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"collides with pointer\") :- \n   binary_type(\"EXEC\"),\n   symbolic_operand(EA,Op_index,Dest,\"data\"),\n   @functor_data_valid(Dest,1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_245),\n   NewDest = (Dest-7),\n   symbolic_data(NewDest,_,_),\n    _tmp_245 = (Dest-7).\nin file pointer_reattribution.dl [549:1-556:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [549:1-556:32];moved_label_class(EA,Op_index,\\\"collides with pointer\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   symbolic_operand(EA,Op_index,Dest,\\\"data\\\"),\\n   @functor_data_valid(Dest,1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_245),\\n   NewDest = (Dest-7),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_245 = (Dest-7).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 symbolic_operand (INDEX  (= (TUPLE t0 3) (STRING "data")))
          (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 7)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (TUPLE t0 2) (UNSIGNED 7))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 2) (UNSIGNED 1)))  (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "collides with pointer")) moved_label_class)
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"base-relative collides with pointer\") :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_265),\n   NewDest = ((ImageBase+Dest)-1),\n   symbolic_data(NewDest,_,_),\n    _tmp_80 = (EA+Disp_offset),\n    _tmp_265 = ((ImageBase+Dest)-1).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;binary/pe/symbolization.dl [245:1-254:32];moved_label_class(EA,Op_index,\\\"base-relative collides with pointer\\\") :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_265),\\n   NewDest = ((ImageBase+Dest)-1),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_80 = (EA+Disp_offset),\\n    _tmp_265 = ((ImageBase+Dest)-1).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1))) (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (STRING "base-relative collides with pointer")) moved_label_class)
)           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"base-relative collides with pointer\") :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_266),\n   NewDest = ((ImageBase+Dest)-2),\n   symbolic_data(NewDest,_,_),\n    _tmp_80 = (EA+Disp_offset),\n    _tmp_266 = ((ImageBase+Dest)-2).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;binary/pe/symbolization.dl [245:1-254:32];moved_label_class(EA,Op_index,\\\"base-relative collides with pointer\\\") :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_266),\\n   NewDest = ((ImageBase+Dest)-2),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_80 = (EA+Disp_offset),\\n    _tmp_266 = ((ImageBase+Dest)-2).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 2)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 2))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1))) (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (STRING "base-relative collides with pointer")) moved_label_class)
)           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"base-relative collides with pointer\") :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_267),\n   NewDest = ((ImageBase+Dest)-3),\n   symbolic_data(NewDest,_,_),\n    _tmp_80 = (EA+Disp_offset),\n    _tmp_267 = ((ImageBase+Dest)-3).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;binary/pe/symbolization.dl [245:1-254:32];moved_label_class(EA,Op_index,\\\"base-relative collides with pointer\\\") :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_267),\\n   NewDest = ((ImageBase+Dest)-3),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_80 = (EA+Disp_offset),\\n    _tmp_267 = ((ImageBase+Dest)-3).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 3)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 3))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1))) (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (STRING "base-relative collides with pointer")) moved_label_class)
)           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"base-relative collides with pointer\") :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_268),\n   NewDest = ((ImageBase+Dest)-4),\n   symbolic_data(NewDest,_,_),\n    _tmp_80 = (EA+Disp_offset),\n    _tmp_268 = ((ImageBase+Dest)-4).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;binary/pe/symbolization.dl [245:1-254:32];moved_label_class(EA,Op_index,\\\"base-relative collides with pointer\\\") :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_268),\\n   NewDest = ((ImageBase+Dest)-4),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_80 = (EA+Disp_offset),\\n    _tmp_268 = ((ImageBase+Dest)-4).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 4)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 4))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1))) (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (STRING "base-relative collides with pointer")) moved_label_class)
)           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"base-relative collides with pointer\") :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_269),\n   NewDest = ((ImageBase+Dest)-5),\n   symbolic_data(NewDest,_,_),\n    _tmp_80 = (EA+Disp_offset),\n    _tmp_269 = ((ImageBase+Dest)-5).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;binary/pe/symbolization.dl [245:1-254:32];moved_label_class(EA,Op_index,\\\"base-relative collides with pointer\\\") :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_269),\\n   NewDest = ((ImageBase+Dest)-5),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_80 = (EA+Disp_offset),\\n    _tmp_269 = ((ImageBase+Dest)-5).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 5)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 5))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1))) (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (STRING "base-relative collides with pointer")) moved_label_class)
)           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"base-relative collides with pointer\") :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_270),\n   NewDest = ((ImageBase+Dest)-6),\n   symbolic_data(NewDest,_,_),\n    _tmp_80 = (EA+Disp_offset),\n    _tmp_270 = ((ImageBase+Dest)-6).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;binary/pe/symbolization.dl [245:1-254:32];moved_label_class(EA,Op_index,\\\"base-relative collides with pointer\\\") :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_270),\\n   NewDest = ((ImageBase+Dest)-6),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_80 = (EA+Disp_offset),\\n    _tmp_270 = ((ImageBase+Dest)-6).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 6)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 6))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1))) (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (STRING "base-relative collides with pointer")) moved_label_class)
)           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"base-relative collides with pointer\") :- \n   base_address(ImageBase),\n   base_relative_symbolic_operand(EA,Op_index,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\n   @functor_data_valid((ImageBase+Dest),1) = 1,\n   address_in_data_refined_range.in_ea( _tmp_271),\n   NewDest = ((ImageBase+Dest)-7),\n   symbolic_data(NewDest,_,_),\n    _tmp_80 = (EA+Disp_offset),\n    _tmp_271 = ((ImageBase+Dest)-7).\nin file symbolization.dl [245:1-254:32]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;binary/pe/symbolization.dl [245:1-254:32];moved_label_class(EA,Op_index,\\\"base-relative collides with pointer\\\") :- \\n   base_address(ImageBase),\\n   base_relative_symbolic_operand(EA,Op_index,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   symbol_minus_symbol( _tmp_80,_,_,_,_,_),\\n   @functor_data_valid((ImageBase+Dest),1) = 1,\\n   address_in_data_refined_range.in_ea( _tmp_271),\\n   NewDest = ((ImageBase+Dest)-7),\\n   symbolic_data(NewDest,_,_),\\n    _tmp_80 = (EA+Disp_offset),\\n    _tmp_271 = ((ImageBase+Dest)-7).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY address_in_data_refined_range.in_ea))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY base_relative_symbolic_operand)))
         (FOR_IN t0 base_address           (FOR_IN t1 base_relative_symbolic_operand            (IF (AND (AND (EXISTS symbolic_data ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 7)) UNDEF UNDEF)) (EXISTS address_in_data_refined_range.in_ea ((INTRINSIC - (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 7))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (UNSIGNED 1)))  (UNSIGNED 1)))
            (INDEXED_IF_EXISTS t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1))) (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t1 0) (TUPLE t1 1) (STRING "base-relative collides with pointer")) moved_label_class)
)           ))
)
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,OpIndex,\"relax basic jump-table-start\") :- \n   indirect_jump(EA),\n   instruction_get_op(EA,OpIndex,<inlined_Op_243>),\n   op_indirect(<inlined_Op_243>,\"NONE\",\"NONE\",_,<inlined_Mult_243>,Offset,_),\n   8 = as(<inlined_Mult_243>, unsigned),\n   !address_in_data(as(Offset, address),_),\n   @functor_data_valid(as((Offset+<inlined_Mult_243>), address),8) = 1,\n   @functor_data_valid((as((Offset+<inlined_Mult_243>), address)+8),8) = 1,\n   code_in_block( _tmp_287,_),\n   code_in_block( _tmp_288,_),\n    _tmp_287 = as(@functor_data_signed(as((Offset+<inlined_Mult_243>), address),8), address),\n    _tmp_288 = as(@functor_data_signed((as((Offset+<inlined_Mult_243>), address)+8),8), address).\nin file symbolization.dl [257:1-262:17]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;binary/pe/symbolization.dl [257:1-262:17];moved_label_class(EA,OpIndex,\\\"relax basic jump-table-start\\\") :- \\n   indirect_jump(EA),\\n   instruction_get_op(EA,OpIndex,<inlined_Op_243>),\\n   op_indirect(<inlined_Op_243>,\\\"NONE\\\",\\\"NONE\\\",_,<inlined_Mult_243>,Offset,_),\\n   8 = as(<inlined_Mult_243>, unsigned),\\n   !address_in_data(as(Offset, address),_),\\n   @functor_data_valid(as((Offset+<inlined_Mult_243>), address),8) = 1,\\n   @functor_data_valid((as((Offset+<inlined_Mult_243>), address)+8),8) = 1,\\n   code_in_block( _tmp_287,_),\\n   code_in_block( _tmp_288,_),\\n    _tmp_287 = as(@functor_data_signed(as((Offset+<inlined_Mult_243>), address),8), address),\\n    _tmp_288 = as(@functor_data_signed((as((Offset+<inlined_Mult_243>), address)+8),8), address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY indirect_jump))) (NOT (ISEMPTY op_indirect)))
         (FOR_IN t0 indirect_jump           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 op_indirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (STRING "NONE")) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 4) (UNSIGNED 8)))
            (IF (AND (AND (AND (AND (EXISTS code_in_block ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8))) UNDEF)) (NOT (EXISTS address_in_data ((TUPLE t2 5) UNDEF)))) (EXISTS code_in_block ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)) (UNSIGNED 8))) UNDEF))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)) (UNSIGNED 8)))  (UNSIGNED 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "relax basic jump-table-start")) moved_label_class)
            ))))
        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"constant + repeated reg\") :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",Reg,Reg,_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   regular_data_section(Name),\n   loaded_section(Base,_,Name),\n   as(Dest, address) < Base,\n   (10*as(Dest, address)) > Base.\nin file pointer_reattribution.dl [415:1-437:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [415:1-437:7];moved_label_class(EA,Op_index,\\\"constant + repeated reg\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",Reg,Reg,_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   regular_data_section(Name),\\n   loaded_section(Base,_,Name),\\n   as(Dest, address) < Base,\\n   (10*as(Dest, address)) > Base.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (CONSTRAINT = (TUPLE t0 3)  (TUPLE t0 4)) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (FOR_IN t1 regular_data_section             (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0))) (AND (AND (AND (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t2 0)) (CONSTRAINT != (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t2 0))) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t2 0))) (CONSTRAINT <= (TUPLE t0 6)  (TUPLE t2 0)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "constant + repeated reg")) moved_label_class)
))
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"constant + repeated reg\") :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",Reg,Reg,_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   regular_data_section(Name),\n   loaded_section(_,End,Name),\n   as(Dest, address) > End.\nin file pointer_reattribution.dl [415:1-437:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [415:1-437:7];moved_label_class(EA,Op_index,\\\"constant + repeated reg\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",Reg,Reg,_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   regular_data_section(Name),\\n   loaded_section(_,End,Name),\\n   as(Dest, address) > End.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (CONSTRAINT = (TUPLE t0 3)  (TUPLE t0 4)) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (FOR_IN t1 regular_data_section             (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0))) (AND (CONSTRAINT != (TUPLE t0 6)  (TUPLE t2 1)) (CONSTRAINT >= (TUPLE t0 6)  (TUPLE t2 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "constant + repeated reg")) moved_label_class)
))
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"miss section with access\") :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,_,_,_,_,Dest,Size),\n   Dest >= 0,\n   Size != 0,\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   data_access_pattern_candidate(AccessDest,_,_,EA),\n   regular_data_section(Name),\n   loaded_section(Base,End,Name),\n   AccessDest >= Base,\n   AccessDest < End,\n   (10*as(Dest, address)) >= Base,\n   @functor_data_valid((max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))),1) = 0,\n   bss_section_limits(BssBeg,_),\n   (max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))) < BssBeg.\nin file pointer_reattribution.dl [324:1-352:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [324:1-352:7];moved_label_class(EA,Op_index,\\\"miss section with access\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,_,_,_,_,Dest,Size),\\n   Dest >= 0,\\n   Size != 0,\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   data_access_pattern_candidate(AccessDest,_,_,EA),\\n   regular_data_section(Name),\\n   loaded_section(Base,End,Name),\\n   AccessDest >= Base,\\n   AccessDest < End,\\n   (10*as(Dest, address)) >= Base,\\n   @functor_data_valid((max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))),1) = 0,\\n   bss_section_limits(BssBeg,_),\\n   (max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))) < BssBeg.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY bss_section_limits)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY data_access_pattern_candidate))) (NOT (ISEMPTY regular_data_section))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY loaded_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (CONSTRAINT != (TUPLE t0 7)  (UNSIGNED 0)) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))))
           (FOR t1 data_access_pattern_candidate (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC - (INTRINSIC max (TUPLE t1 0) (TUPLE t0 6)) (INTRINSIC min (TUPLE t1 0) (TUPLE t0 6))) (UNSIGNED 1)))  (UNSIGNED 0))
             (FOR_IN t2 regular_data_section               (INDEXED_IF_EXISTS t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0))) (AND (AND (AND (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0)) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t3 1))) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t3 1))) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t3 0)))
               (IF_EXISTS t4 bss_section_limits (CONSTRAINT < (INTRINSIC - (INTRINSIC max (TUPLE t1 0) (TUPLE t0 6)) (INTRINSIC min (TUPLE t1 0) (TUPLE t0 6)))  (TUPLE t4 0)) 
                (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "miss section with access")) moved_label_class)
)))
            ))          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"miss section with access\") :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,_,_,_,_,Dest,Size),\n   Dest >= 0,\n   Size != 0,\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   data_access_pattern_candidate(AccessDest,_,_,EA),\n   regular_data_section(Name),\n   loaded_section(Base,End,Name),\n   AccessDest >= Base,\n   AccessDest < End,\n   (10*as(Dest, address)) >= Base,\n   @functor_data_valid((max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))),1) = 0,\n   bss_section_limits(_,BssEnd),\n   (max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))) > BssEnd.\nin file pointer_reattribution.dl [324:1-352:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [324:1-352:7];moved_label_class(EA,Op_index,\\\"miss section with access\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,_,_,_,_,Dest,Size),\\n   Dest >= 0,\\n   Size != 0,\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   data_access_pattern_candidate(AccessDest,_,_,EA),\\n   regular_data_section(Name),\\n   loaded_section(Base,End,Name),\\n   AccessDest >= Base,\\n   AccessDest < End,\\n   (10*as(Dest, address)) >= Base,\\n   @functor_data_valid((max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))),1) = 0,\\n   bss_section_limits(_,BssEnd),\\n   (max(AccessDest,as(Dest, address))-min(AccessDest,as(Dest, address))) > BssEnd.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY bss_section_limits)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY data_access_pattern_candidate))) (NOT (ISEMPTY regular_data_section))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY loaded_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (CONSTRAINT != (TUPLE t0 7)  (UNSIGNED 0)) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))))
           (FOR t1 data_access_pattern_candidate (INDEX  (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC - (INTRINSIC max (TUPLE t1 0) (TUPLE t0 6)) (INTRINSIC min (TUPLE t1 0) (TUPLE t0 6))) (UNSIGNED 1)))  (UNSIGNED 0))
             (FOR_IN t2 regular_data_section               (INDEXED_IF_EXISTS t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0))) (AND (AND (AND (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0)) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t3 1))) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t3 1))) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t3 0)))
               (IF_EXISTS t4 bss_section_limits (CONSTRAINT > (INTRINSIC - (INTRINSIC max (TUPLE t1 0) (TUPLE t0 6)) (INTRINSIC min (TUPLE t1 0) (TUPLE t0 6)))  (TUPLE t4 1)) 
                (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "miss section with access")) moved_label_class)
)))
            ))          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"constant + multiplied reg2\") :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",Reg,\"NONE\",_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,0,_),\n   Mult2 > 1,\n   regular_data_section(Name),\n   loaded_section(Base,_,Name),\n   as(Dest, address) < Base,\n   (10*as(Dest, address)) > Base.\nin file pointer_reattribution.dl [389:1-412:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [389:1-412:7];moved_label_class(EA,Op_index,\\\"constant + multiplied reg2\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",Reg,\\\"NONE\\\",_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,0,_),\\n   Mult2 > 1,\\n   regular_data_section(Name),\\n   loaded_section(Base,_,Name),\\n   as(Dest, address) < Base,\\n   (10*as(Dest, address)) > Base.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY value_reg_at_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 4) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))))
           (INDEXED_IF_EXISTS t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 3)) (<= (NUMBER 1) (TUPLE t1 4) ) (= (TUPLE t1 5) (NUMBER 0))) (CONSTRAINT != (TUPLE t1 4)  (NUMBER 1))
            (FOR_IN t2 regular_data_section              (INDEXED_IF_EXISTS t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0))) (AND (AND (AND (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0)) (CONSTRAINT != (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0))) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t3 0))) (CONSTRAINT <= (TUPLE t0 6)  (TUPLE t3 0)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "constant + multiplied reg2")) moved_label_class)
))
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"constant + multiplied reg2\") :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",Reg,\"NONE\",_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,0,_),\n   Mult2 > 1,\n   regular_data_section(Name),\n   loaded_section(_,End,Name),\n   as(Dest, address) > End.\nin file pointer_reattribution.dl [389:1-412:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [389:1-412:7];moved_label_class(EA,Op_index,\\\"constant + multiplied reg2\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",Reg,\\\"NONE\\\",_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   value_reg_at_operand(EA,Op_index,Reg,_,Mult2,0,_),\\n   Mult2 > 1,\\n   regular_data_section(Name),\\n   loaded_section(_,End,Name),\\n   as(Dest, address) > End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY value_reg_at_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 4) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))))
           (INDEXED_IF_EXISTS t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 3)) (<= (NUMBER 1) (TUPLE t1 4) ) (= (TUPLE t1 5) (NUMBER 0))) (CONSTRAINT != (TUPLE t1 4)  (NUMBER 1))
            (FOR_IN t2 regular_data_section              (INDEXED_IF_EXISTS t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0))) (AND (CONSTRAINT != (TUPLE t0 6)  (TUPLE t3 1)) (CONSTRAINT >= (TUPLE t0 6)  (TUPLE t3 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "constant + multiplied reg2")) moved_label_class)
))
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"constant + multiplied reg\") :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",\"NONE\",_,Mult,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   Mult > 1,\n   regular_data_section(Name),\n   loaded_section(Base,_,Name),\n   as(Dest, address) < Base,\n   (10*as(Dest, address)) > Base.\nin file pointer_reattribution.dl [356:1-386:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [356:1-386:7];moved_label_class(EA,Op_index,\\\"constant + multiplied reg\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",\\\"NONE\\\",_,Mult,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   Mult > 1,\\n   regular_data_section(Name),\\n   loaded_section(Base,_,Name),\\n   as(Dest, address) < Base,\\n   (10*as(Dest, address)) > Base.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 3) (STRING "NONE")) (<= (NUMBER 1) (TUPLE t0 5) ))
          (IF (AND (AND (AND (AND (CONSTRAINT >= (TUPLE t0 6)  (NUMBER 0)) (CONSTRAINT != (TUPLE t0 5)  (NUMBER 1))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF)))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (FOR_IN t1 regular_data_section             (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0))) (AND (AND (AND (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t2 0)) (CONSTRAINT != (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t2 0))) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t2 0))) (CONSTRAINT <= (TUPLE t0 6)  (TUPLE t2 0)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "constant + multiplied reg")) moved_label_class)
))
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"constant + multiplied reg\") :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",\"NONE\",_,Mult,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   Mult > 1,\n   regular_data_section(Name),\n   loaded_section(_,End,Name),\n   as(Dest, address) > End.\nin file pointer_reattribution.dl [356:1-386:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [356:1-386:7];moved_label_class(EA,Op_index,\\\"constant + multiplied reg\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",\\\"NONE\\\",_,Mult,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   Mult > 1,\\n   regular_data_section(Name),\\n   loaded_section(_,End,Name),\\n   as(Dest, address) > End.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 3) (STRING "NONE")) (<= (NUMBER 1) (TUPLE t0 5) ))
          (IF (AND (AND (AND (AND (CONSTRAINT >= (TUPLE t0 6)  (NUMBER 0)) (CONSTRAINT != (TUPLE t0 5)  (NUMBER 1))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF)))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (FOR_IN t1 regular_data_section             (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0))) (AND (CONSTRAINT != (TUPLE t0 6)  (TUPLE t2 1)) (CONSTRAINT >= (TUPLE t0 6)  (TUPLE t2 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "constant + multiplied reg")) moved_label_class)
))
          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"constant + multiplied reg\") :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",\"NONE\",RegMult,_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,0,_),\n   Mult2 > 1,\n   regular_data_section(Name),\n   loaded_section(Base,_,Name),\n   as(Dest, address) < Base,\n   (10*as(Dest, address)) > Base.\nin file pointer_reattribution.dl [356:1-386:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [356:1-386:7];moved_label_class(EA,Op_index,\\\"constant + multiplied reg\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",\\\"NONE\\\",RegMult,_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,0,_),\\n   Mult2 > 1,\\n   regular_data_section(Name),\\n   loaded_section(Base,_,Name),\\n   as(Dest, address) < Base,\\n   (10*as(Dest, address)) > Base.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY value_reg_at_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 3) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))))
           (INDEXED_IF_EXISTS t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 4)) (<= (NUMBER 1) (TUPLE t1 4) ) (= (TUPLE t1 5) (NUMBER 0))) (CONSTRAINT != (TUPLE t1 4)  (NUMBER 1))
            (FOR_IN t2 regular_data_section              (INDEXED_IF_EXISTS t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0))) (AND (AND (AND (CONSTRAINT >= (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0)) (CONSTRAINT != (INTRINSIC * (UNSIGNED 10) (TUPLE t0 6))  (TUPLE t3 0))) (CONSTRAINT != (TUPLE t0 6)  (TUPLE t3 0))) (CONSTRAINT <= (TUPLE t0 6)  (TUPLE t3 0)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "constant + multiplied reg")) moved_label_class)
))
)          ))        )       )
      )
     )
      (DEBUG 
 "moved_label_class(EA,Op_index,\"constant + multiplied reg\") :- \n   binary_type(\"EXEC\"),\n   data_access(EA,Op_index,\"NONE\",\"NONE\",RegMult,_,Dest,_),\n   Dest >= 0,\n   !instruction(EA,_,_,\"LEA\",_,_,_,_,_,_),\n   !symbolic_operand(EA,Op_index,_,_),\n   !pc_relative_operand(EA,Op_index,_),\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,0,_),\n   Mult2 > 1,\n   regular_data_section(Name),\n   loaded_section(_,End,Name),\n   as(Dest, address) > End.\nin file pointer_reattribution.dl [356:1-386:7]" 
      (TIMER_ON moved_label_class "@t-nonrecursive-rule;moved_label_class;pointer_reattribution.dl [356:1-386:7];moved_label_class(EA,Op_index,\\\"constant + multiplied reg\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   data_access(EA,Op_index,\\\"NONE\\\",\\\"NONE\\\",RegMult,_,Dest,_),\\n   Dest >= 0,\\n   !instruction(EA,_,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   value_reg_at_operand(EA,Op_index,RegMult,_,Mult2,0,_),\\n   Mult2 > 1,\\n   regular_data_section(Name),\\n   loaded_section(_,End,Name),\\n   as(Dest, address) > End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY value_reg_at_operand))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 3) (STRING "NONE")) (<= (NUMBER 0) (TUPLE t0 6) ))
          (IF (AND (AND (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF))) (NOT (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))))
           (INDEXED_IF_EXISTS t1 value_reg_at_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 4)) (<= (NUMBER 1) (TUPLE t1 4) ) (= (TUPLE t1 5) (NUMBER 0))) (CONSTRAINT != (TUPLE t1 4)  (NUMBER 1))
            (FOR_IN t2 regular_data_section              (INDEXED_IF_EXISTS t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0))) (AND (CONSTRAINT != (TUPLE t0 6)  (TUPLE t3 1)) (CONSTRAINT >= (TUPLE t0 6)  (TUPLE t3 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "constant + multiplied reg")) moved_label_class)
))
)          ))        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON moved_label_class "@t-relation-savetime;moved_label_class;pointer_reattribution.dl [87:7-87:24];savetime;"
     (IO moved_label_class ((= IO "file") (= attributeNames "EA\tIndex\tReason") (= auxArity "0") (= name "moved_label_class") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"EA\", \"Index\", \"Reason\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:address\", \"u:operand_index\", \"s:symbol\"]}}")))
    )
 ) ) (STMTS     (CLEAR addr_outside_section_used_for_memory_access)
     (CLEAR address_in_data)
     (CLEAR address_in_data_refined_range.in_ea)
     (CLEAR arch.move_reg_imm)
     (CLEAR base_address)
     (CLEAR base_relative_symbolic_operand)
     (CLEAR binary_format)
     (CLEAR binary_type)
     (CLEAR bss_section_limits)
     (CLEAR cmp_immediate_to_reg)
     (CLEAR cmp_reg_to_reg)
     (CLEAR code_in_block)
     (CLEAR data_access)
     (CLEAR data_access_pattern_candidate)
     (CLEAR defined_symbol)
     (CLEAR dest_enlarged_data_section)
     (CLEAR first_synchronous_access)
     (CLEAR function_symbol)
     (CLEAR got_relative_operand)
     (CLEAR indirect_jump)
     (CLEAR instruction)
     (CLEAR instruction_displacement_offset)
     (CLEAR instruction_get_op)
     (CLEAR loaded_section)
     (CLEAR moved_pc_relative_candidate)
     (CLEAR next)
     (CLEAR op_indirect)
     (CLEAR overlapping_instruction)
     (CLEAR pc_relative_operand)
     (CLEAR reg_def_use.def_used)
     (CLEAR regular_data_section)
     (CLEAR symbol_minus_symbol)
     (CLEAR symbolic_data)
     (CLEAR symbolic_operand)
     (CLEAR value_reg_at_operand)
 ) )  )
  (SUBROUTINE moved_pc_relative_candidate
(STMTS (STMTS     (TIMER_ON moved_pc_relative_candidate "@t-nonrecursive-relation;moved_pc_relative_candidate;pointer_reattribution.dl [217:7-217:34];"
(STMTS      (DEBUG 
 "moved_pc_relative_candidate(EA_def2,Op_index,Dest,NewDest,(max(NewDest,Dest)-min(NewDest,Dest))) :- \n   binary_format(\"ELF\"),\n   cmp_reg_to_reg(EA,Reg1,Reg2),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   dest_enlarged_data_section(EA_def1,Reg1,NewDest,Beg,End,OldBeg,_),\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   pc_relative_operand(EA_def2,Op_index,Dest),\n   instruction(EA_def2,_,_,<inlined_Operation_263>,_,_,_,_,_,_),\n   <inlined_Operation_263> = \"LEA\",\n   Beg <= Dest,\n   Dest <= End,\n   OldBeg > Dest.\nin file pointer_reattribution.dl [220:1-238:54]" 
      (TIMER_ON moved_pc_relative_candidate "@t-nonrecursive-rule;moved_pc_relative_candidate;pointer_reattribution.dl [220:1-238:54];moved_pc_relative_candidate(EA_def2,Op_index,Dest,NewDest,(max(NewDest,Dest)-min(NewDest,Dest))) :- \\n   binary_format(\\\"ELF\\\"),\\n   cmp_reg_to_reg(EA,Reg1,Reg2),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   dest_enlarged_data_section(EA_def1,Reg1,NewDest,Beg,End,OldBeg,_),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   pc_relative_operand(EA_def2,Op_index,Dest),\\n   instruction(EA_def2,_,_,<inlined_Operation_263>,_,_,_,_,_,_),\\n   <inlined_Operation_263> = \\\"LEA\\\",\\n   Beg <= Dest,\\n   Dest <= End,\\n   OldBeg > Dest.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY cmp_reg_to_reg)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY dest_enlarged_data_section))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 cmp_reg_to_reg           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR t2 dest_enlarged_data_section (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t0 2)) (= (TUPLE t3 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t3 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t4 pc_relative_operand (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
               (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t2 3)  (TUPLE t4 2)) (CONSTRAINT != (TUPLE t2 5)  (TUPLE t4 2))) (CONSTRAINT >= (TUPLE t2 5)  (TUPLE t4 2))) (CONSTRAINT <= (TUPLE t4 2)  (TUPLE t2 4)))
                (INSERT ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t4 2) (TUPLE t2 2) (INTRINSIC - (INTRINSIC max (TUPLE t2 2) (TUPLE t4 2)) (INTRINSIC min (TUPLE t2 2) (TUPLE t4 2)))) moved_pc_relative_candidate)
               ))             )))))
        )       )
      )
     )
      (DEBUG 
 "moved_pc_relative_candidate(EA_def2,Op_index,Dest,NewDest,(max(NewDest,Dest)-min(NewDest,Dest))) :- \n   binary_format(\"ELF\"),\n   cmp_reg_to_reg(EA,Reg1,Reg2),\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\n   dest_enlarged_data_section(EA_def1,Reg1,NewDest,Beg,End,_,OldEnd),\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\n   pc_relative_operand(EA_def2,Op_index,Dest),\n   instruction(EA_def2,_,_,<inlined_Operation_264>,_,_,_,_,_,_),\n   <inlined_Operation_264> = \"LEA\",\n   Beg <= Dest,\n   Dest <= End,\n   Dest > OldEnd.\nin file pointer_reattribution.dl [220:1-238:54]" 
      (TIMER_ON moved_pc_relative_candidate "@t-nonrecursive-rule;moved_pc_relative_candidate;pointer_reattribution.dl [220:1-238:54];moved_pc_relative_candidate(EA_def2,Op_index,Dest,NewDest,(max(NewDest,Dest)-min(NewDest,Dest))) :- \\n   binary_format(\\\"ELF\\\"),\\n   cmp_reg_to_reg(EA,Reg1,Reg2),\\n   reg_def_use.def_used(EA_def1,Reg1,EA,_),\\n   dest_enlarged_data_section(EA_def1,Reg1,NewDest,Beg,End,_,OldEnd),\\n   reg_def_use.def_used(EA_def2,Reg2,EA,_),\\n   pc_relative_operand(EA_def2,Op_index,Dest),\\n   instruction(EA_def2,_,_,<inlined_Operation_264>,_,_,_,_,_,_),\\n   <inlined_Operation_264> = \\\"LEA\\\",\\n   Beg <= Dest,\\n   Dest <= End,\\n   Dest > OldEnd.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY cmp_reg_to_reg)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY dest_enlarged_data_section))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 cmp_reg_to_reg           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR t2 dest_enlarged_data_section (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (FOR t3 reg_def_use.def_used (INDEX  (= (TUPLE t3 1) (TUPLE t0 2)) (= (TUPLE t3 2) (TUPLE t0 0)))
             (IF (EXISTS instruction ((TUPLE t3 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t4 pc_relative_operand (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
               (IF (AND (AND (AND (CONSTRAINT <= (TUPLE t2 3)  (TUPLE t4 2)) (CONSTRAINT != (TUPLE t4 2)  (TUPLE t2 6))) (CONSTRAINT >= (TUPLE t4 2)  (TUPLE t2 6))) (CONSTRAINT <= (TUPLE t4 2)  (TUPLE t2 4)))
                (INSERT ((TUPLE t3 0) (TUPLE t4 1) (TUPLE t4 2) (TUPLE t2 2) (INTRINSIC - (INTRINSIC max (TUPLE t2 2) (TUPLE t4 2)) (INTRINSIC min (TUPLE t2 2) (TUPLE t4 2)))) moved_pc_relative_candidate)
               ))             )))))
        )       )
      )
     )
      (DEBUG 
 "moved_pc_relative_candidate(EA,Op_index,Addr,AddrAccessed,(max(AddrAccessed,Addr)-min(AddrAccessed,Addr))) :- \n   addr_outside_section_used_for_memory_access(EA,Reg,Addr,AddrAccessed),\n   pc_relative_operand(EA,Op_index,Addr),\n   instruction(EA,_,_,<inlined_Operation_265>,_,_,_,_,_,_),\n   <inlined_Operation_265> = \"LEA\",\n   instruction_get_dest_op(EA,_,Op),\n   op_regdirect_contains_reg(Op,Reg).\nin file pointer_reattribution.dl [241:1-247:64]" 
      (TIMER_ON moved_pc_relative_candidate "@t-nonrecursive-rule;moved_pc_relative_candidate;pointer_reattribution.dl [241:1-247:64];moved_pc_relative_candidate(EA,Op_index,Addr,AddrAccessed,(max(AddrAccessed,Addr)-min(AddrAccessed,Addr))) :- \\n   addr_outside_section_used_for_memory_access(EA,Reg,Addr,AddrAccessed),\\n   pc_relative_operand(EA,Op_index,Addr),\\n   instruction(EA,_,_,<inlined_Operation_265>,_,_,_,_,_,_),\\n   <inlined_Operation_265> = \\\"LEA\\\",\\n   instruction_get_dest_op(EA,_,Op),\\n   op_regdirect_contains_reg(Op,Reg).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY addr_outside_section_used_for_memory_access))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY instruction_get_dest_op))) (NOT (ISEMPTY pc_relative_operand)))
         (FOR_IN t0 addr_outside_section_used_for_memory_access           (IF (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 2)))
            (INDEXED_IF_EXISTS t2 instruction_get_dest_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0))) (EXISTS op_regdirect_contains_reg ((TUPLE t2 2) (TUPLE t0 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC - (INTRINSIC max (TUPLE t0 3) (TUPLE t0 2)) (INTRINSIC min (TUPLE t0 3) (TUPLE t0 2)))) moved_pc_relative_candidate)
))          ))
        )       )
      )
     )
      (DEBUG 
 "moved_pc_relative_candidate(EA,Op_index,Dest,Base,(max(Base,Dest)-min(Base,Dest))) :- \n   code_in_block(EA,_),\n   pc_relative_operand(EA,Op_index,Dest),\n   !symbolic_operand(EA,Op_index,_,_),\n   exception_section(Name),\n   loaded_section(Base,_,Name),\n   cie_entry(Dest,_,_,_).\nin file pointer_reattribution.dl [271:1-282:54]" 
      (TIMER_ON moved_pc_relative_candidate "@t-nonrecursive-rule;moved_pc_relative_candidate;pointer_reattribution.dl [271:1-282:54];moved_pc_relative_candidate(EA,Op_index,Dest,Base,(max(Base,Dest)-min(Base,Dest))) :- \\n   code_in_block(EA,_),\\n   pc_relative_operand(EA,Op_index,Dest),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   exception_section(Name),\\n   loaded_section(Base,_,Name),\\n   cie_entry(Dest,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY cie_entry)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY exception_section))) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY pc_relative_operand)))
         (FOR_IN t0 code_in_block           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF UNDEF))) (EXISTS cie_entry ((TUPLE t1 2) UNDEF UNDEF UNDEF)))
            (FOR_IN t2 exception_section              (FOR t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t3 0) (INTRINSIC - (INTRINSIC max (TUPLE t3 0) (TUPLE t1 2)) (INTRINSIC min (TUPLE t3 0) (TUPLE t1 2)))) moved_pc_relative_candidate)
))
           )))
        )       )
      )
     )
      (DEBUG 
 "moved_pc_relative_candidate(EA,Op_index,Dest,Base,(max(Base,Dest)-min(Base,Dest))) :- \n   code_in_block(EA,_),\n   pc_relative_operand(EA,Op_index,Dest),\n   !symbolic_operand(EA,Op_index,_,_),\n   exception_section(Name),\n   loaded_section(Base,_,Name),\n   fde_entry(Dest,_,_,_,_,_).\nin file pointer_reattribution.dl [271:1-282:54]" 
      (TIMER_ON moved_pc_relative_candidate "@t-nonrecursive-rule;moved_pc_relative_candidate;pointer_reattribution.dl [271:1-282:54];moved_pc_relative_candidate(EA,Op_index,Dest,Base,(max(Base,Dest)-min(Base,Dest))) :- \\n   code_in_block(EA,_),\\n   pc_relative_operand(EA,Op_index,Dest),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   exception_section(Name),\\n   loaded_section(Base,_,Name),\\n   fde_entry(Dest,_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY fde_entry)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY exception_section))) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY pc_relative_operand)))
         (FOR_IN t0 code_in_block           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF UNDEF))) (EXISTS fde_entry ((TUPLE t1 2) UNDEF UNDEF UNDEF UNDEF UNDEF)))
            (FOR_IN t2 exception_section              (FOR t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t3 0) (INTRINSIC - (INTRINSIC max (TUPLE t3 0) (TUPLE t1 2)) (INTRINSIC min (TUPLE t3 0) (TUPLE t1 2)))) moved_pc_relative_candidate)
))
           )))
        )       )
      )
     )
      (DEBUG 
 "moved_pc_relative_candidate(EA,Op_index,Dest,Base,(max(Base,Dest)-min(Base,Dest))) :- \n   code_in_block(EA,_),\n   binary_format(\"ELF\"),\n   pc_relative_operand(EA,Op_index,Dest),\n   !symbolic_operand(EA,Op_index,_,_),\n   regular_data_section(Name),\n   loaded_section(Base,_,Name),\n   Base > Dest.\nin file pointer_reattribution.dl [251:1-268:54]" 
      (TIMER_ON moved_pc_relative_candidate "@t-nonrecursive-rule;moved_pc_relative_candidate;pointer_reattribution.dl [251:1-268:54];moved_pc_relative_candidate(EA,Op_index,Dest,Base,(max(Base,Dest)-min(Base,Dest))) :- \\n   code_in_block(EA,_),\\n   binary_format(\\\"ELF\\\"),\\n   pc_relative_operand(EA,Op_index,Dest),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   regular_data_section(Name),\\n   loaded_section(Base,_,Name),\\n   Base > Dest.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 code_in_block           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF UNDEF)))
            (FOR_IN t2 regular_data_section              (FOR t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0)))
              (IF (AND (CONSTRAINT >= (TUPLE t3 0)  (TUPLE t1 2)) (CONSTRAINT != (TUPLE t3 0)  (TUPLE t1 2)))
               (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t3 0) (INTRINSIC - (INTRINSIC max (TUPLE t3 0) (TUPLE t1 2)) (INTRINSIC min (TUPLE t3 0) (TUPLE t1 2)))) moved_pc_relative_candidate)
              )))
           )))
        )       )
      )
     )
      (DEBUG 
 "moved_pc_relative_candidate(EA,Op_index,Dest,End,(max(End,Dest)-min(End,Dest))) :- \n   code_in_block(EA,_),\n   binary_format(\"ELF\"),\n   pc_relative_operand(EA,Op_index,Dest),\n   !symbolic_operand(EA,Op_index,_,_),\n   regular_data_section(Name),\n   loaded_section(_,End,Name),\n   Dest > End.\nin file pointer_reattribution.dl [251:1-268:54]" 
      (TIMER_ON moved_pc_relative_candidate "@t-nonrecursive-rule;moved_pc_relative_candidate;pointer_reattribution.dl [251:1-268:54];moved_pc_relative_candidate(EA,Op_index,Dest,End,(max(End,Dest)-min(End,Dest))) :- \\n   code_in_block(EA,_),\\n   binary_format(\\\"ELF\\\"),\\n   pc_relative_operand(EA,Op_index,Dest),\\n   !symbolic_operand(EA,Op_index,_,_),\\n   regular_data_section(Name),\\n   loaded_section(_,End,Name),\\n   Dest > End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY regular_data_section))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 code_in_block           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (NOT (EXISTS symbolic_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF UNDEF)))
            (FOR_IN t2 regular_data_section              (FOR t3 loaded_section (INDEX  (= (TUPLE t3 2) (TUPLE t2 0)))
              (IF (AND (CONSTRAINT >= (TUPLE t1 2)  (TUPLE t3 1)) (CONSTRAINT != (TUPLE t1 2)  (TUPLE t3 1)))
               (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 2) (TUPLE t3 1) (INTRINSIC - (INTRINSIC max (TUPLE t3 1) (TUPLE t1 2)) (INTRINSIC min (TUPLE t3 1) (TUPLE t1 2)))) moved_pc_relative_candidate)
              )))
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR exception_section)
     (CLEAR instruction_get_dest_op)
     (CLEAR op_regdirect_contains_reg)
 ) )  )
  (SUBROUTINE must_fallthrough
(STMTS (STMTS     (TIMER_ON must_fallthrough "@t-nonrecursive-relation;must_fallthrough;code_inference.dl [139:7-139:23];"
(STMTS      (DEBUG 
 "must_fallthrough(From,To) :- \n   may_fallthrough(From,To),\n   instruction(From,_,_,Operation,_,_,_,_,_,_),\n   !arch.call_operation(Operation),\n   !arch.syscall_operation(Operation),\n   !arch.interrupt_operation(Operation),\n   !instruction_has_loop_prefix(From),\n   !conditional_jump(From),\n   !conditional_return(From).\nin file code_inference.dl [146:1-155:30]" 
      (TIMER_ON must_fallthrough "@t-nonrecursive-rule;must_fallthrough;code_inference.dl [146:1-155:30];must_fallthrough(From,To) :- \\n   may_fallthrough(From,To),\\n   instruction(From,_,_,Operation,_,_,_,_,_,_),\\n   !arch.call_operation(Operation),\\n   !arch.syscall_operation(Operation),\\n   !arch.interrupt_operation(Operation),\\n   !instruction_has_loop_prefix(From),\\n   !conditional_jump(From),\\n   !conditional_return(From).;"
(QUERY
        (IF (AND (NOT (ISEMPTY may_fallthrough)) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 may_fallthrough           (IF (AND (AND (NOT (EXISTS instruction_has_loop_prefix ((TUPLE t0 0)))) (NOT (EXISTS conditional_return ((TUPLE t0 0))))) (NOT (EXISTS conditional_jump ((TUPLE t0 0)))))
           (INDEXED_IF_EXISTS t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (AND (AND (NOT (EXISTS arch.interrupt_operation ((TUPLE t1 3)))) (NOT (EXISTS arch.syscall_operation ((TUPLE t1 3))))) (NOT (EXISTS arch.call_operation ((TUPLE t1 3)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1)) must_fallthrough)
)          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.call_operation)
     (CLEAR arch.interrupt_operation)
     (CLEAR arch.syscall_operation)
 ) )  )
  (SUBROUTINE negative_block_points
(STMTS (STMTS     (TIMER_ON negative_block_points "@t-nonrecursive-relation;negative_block_points;code_inference.dl [1185:7-1185:28];"
(STMTS      (DEBUG 
 "negative_block_points(Block,\"code\",(End-Start),0,-2,\"conditional jump/return: fallthrough to invalid\") :- \n   code_in_block_candidate_refined(EA,Block),\n   block_candidate_boundaries(Block,\"code\",Start,End),\n   conditional_jump(EA),\n   next(EA,Invalid),\n   invalid(Invalid,_).\nin file code_inference.dl [1431:1-1440:24]" 
      (TIMER_ON negative_block_points "@t-nonrecursive-rule;negative_block_points;code_inference.dl [1431:1-1440:24];negative_block_points(Block,\\\"code\\\",(End-Start),0,-2,\\\"conditional jump/return: fallthrough to invalid\\\") :- \\n   code_in_block_candidate_refined(EA,Block),\\n   block_candidate_boundaries(Block,\\\"code\\\",Start,End),\\n   conditional_jump(EA),\\n   next(EA,Invalid),\\n   invalid(Invalid,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY invalid)) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY next))) (NOT (ISEMPTY conditional_jump)))
         (FOR_IN t0 code_in_block_candidate_refined           (IF (EXISTS conditional_jump ((TUPLE t0 0)))
           (FOR t1 block_candidate_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (STRING "code")))
            (INDEXED_IF_EXISTS t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0))) (EXISTS invalid ((TUPLE t2 1) UNDEF))
             (INSERT ((TUPLE t0 1) (STRING "code") (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2)) (UNSIGNED 0) (NUMBER -2) (STRING "conditional jump/return: fallthrough to invalid")) negative_block_points)
))          ))
        )       )
      )
     )
      (DEBUG 
 "negative_block_points(Block,\"code\",(End-Start),0,-2,\"conditional jump/return: fallthrough to invalid\") :- \n   code_in_block_candidate_refined(EA,Block),\n   block_candidate_boundaries(Block,\"code\",Start,End),\n   conditional_return(EA),\n   next(EA,Invalid),\n   invalid(Invalid,_).\nin file code_inference.dl [1431:1-1440:24]" 
      (TIMER_ON negative_block_points "@t-nonrecursive-rule;negative_block_points;code_inference.dl [1431:1-1440:24];negative_block_points(Block,\\\"code\\\",(End-Start),0,-2,\\\"conditional jump/return: fallthrough to invalid\\\") :- \\n   code_in_block_candidate_refined(EA,Block),\\n   block_candidate_boundaries(Block,\\\"code\\\",Start,End),\\n   conditional_return(EA),\\n   next(EA,Invalid),\\n   invalid(Invalid,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY invalid)) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY next))) (NOT (ISEMPTY conditional_return)))
         (FOR_IN t0 code_in_block_candidate_refined           (IF (EXISTS conditional_return ((TUPLE t0 0)))
           (FOR t1 block_candidate_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)) (= (TUPLE t1 1) (STRING "code")))
            (INDEXED_IF_EXISTS t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0))) (EXISTS invalid ((TUPLE t2 1) UNDEF))
             (INSERT ((TUPLE t0 1) (STRING "code") (INTRINSIC - (TUPLE t1 3) (TUPLE t1 2)) (UNSIGNED 0) (NUMBER -2) (STRING "conditional jump/return: fallthrough to invalid")) negative_block_points)
))          ))
        )       )
      )
     )
      (DEBUG 
 "negative_block_points(Block,\"code\",(End-Start),0,-1,\"jump to string\") :- \n   ascii_string(Beg,End),\n   direct_jump(EA,Dest),\n   Dest >= Beg,\n   Dest < End,\n   symbol(Beg,_,_,_,_,_,_,_,_),\n   code_in_block_candidate_refined(EA,Block),\n   block_candidate_boundaries(Block,\"code\",Start,End).\nin file code_inference.dl [1442:1-1454:24]" 
      (TIMER_ON negative_block_points "@t-nonrecursive-rule;negative_block_points;code_inference.dl [1442:1-1454:24];negative_block_points(Block,\\\"code\\\",(End-Start),0,-1,\\\"jump to string\\\") :- \\n   ascii_string(Beg,End),\\n   direct_jump(EA,Dest),\\n   Dest >= Beg,\\n   Dest < End,\\n   symbol(Beg,_,_,_,_,_,_,_,_),\\n   code_in_block_candidate_refined(EA,Block),\\n   block_candidate_boundaries(Block,\\\"code\\\",Start,End).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY block_candidate_boundaries)) (NOT (ISEMPTY ascii_string))) (NOT (ISEMPTY symbol))) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY direct_jump)))
         (FOR_IN t0 ascii_string           (IF (EXISTS symbol ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR_IN t1 direct_jump             (IF (AND (CONSTRAINT < (TUPLE t1 1)  (TUPLE t0 1)) (CONSTRAINT >= (TUPLE t1 1)  (TUPLE t0 0)))
             (FOR t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
              (FOR t3 block_candidate_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (= (TUPLE t3 1) (STRING "code")) (= (TUPLE t3 3) (TUPLE t0 1)))
               (INSERT ((TUPLE t2 1) (STRING "code") (INTRINSIC - (TUPLE t0 1) (TUPLE t3 2)) (UNSIGNED 0) (NUMBER -1) (STRING "jump to string")) negative_block_points)
))            ))
          ))
        )       )
      )
     )
      (DEBUG 
 "negative_block_points(Block,\"code\",(End-Start),0,-1,\"jump to string\") :- \n   ascii_string(Beg,End),\n   direct_jump(EA,Dest),\n   Dest >= Beg,\n   Dest < End,\n   aligned_address_in_data(_,Beg),\n   code_in_block_candidate_refined(EA,Block),\n   block_candidate_boundaries(Block,\"code\",Start,End).\nin file code_inference.dl [1442:1-1454:24]" 
      (TIMER_ON negative_block_points "@t-nonrecursive-rule;negative_block_points;code_inference.dl [1442:1-1454:24];negative_block_points(Block,\\\"code\\\",(End-Start),0,-1,\\\"jump to string\\\") :- \\n   ascii_string(Beg,End),\\n   direct_jump(EA,Dest),\\n   Dest >= Beg,\\n   Dest < End,\\n   aligned_address_in_data(_,Beg),\\n   code_in_block_candidate_refined(EA,Block),\\n   block_candidate_boundaries(Block,\\\"code\\\",Start,End).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY block_candidate_boundaries)) (NOT (ISEMPTY ascii_string))) (NOT (ISEMPTY aligned_address_in_data))) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY direct_jump)))
         (FOR_IN t0 ascii_string           (IF (EXISTS aligned_address_in_data (UNDEF (TUPLE t0 0)))
           (FOR_IN t1 direct_jump             (IF (AND (CONSTRAINT < (TUPLE t1 1)  (TUPLE t0 1)) (CONSTRAINT >= (TUPLE t1 1)  (TUPLE t0 0)))
             (FOR t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
              (FOR t3 block_candidate_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (= (TUPLE t3 1) (STRING "code")) (= (TUPLE t3 3) (TUPLE t0 1)))
               (INSERT ((TUPLE t2 1) (STRING "code") (INTRINSIC - (TUPLE t0 1) (TUPLE t3 2)) (UNSIGNED 0) (NUMBER -1) (STRING "jump to string")) negative_block_points)
))            ))
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR invalid)
 ) )  )
  (SUBROUTINE next
(STMTS     (TIMER_ON next "@t-nonrecursive-relation;next;/usr/local/src/ddisasm/src/datalog/main.dl [455:7-455:11];"
(STMTS      (DEBUG 
 "next(EA,(EA+Size)) :- \n   instruction(EA,Size,_,_,_,_,_,_,_,_).\nin file main.dl [457:1-458:42]" 
      (TIMER_ON next "@t-nonrecursive-rule;next;/usr/local/src/ddisasm/src/datalog/main.dl [457:1-458:42];next(EA,(EA+Size)) :- \\n   instruction(EA,Size,_,_,_,_,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR_IN t0 instruction           (INSERT ((TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))) next)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE next_address_in_data
(STMTS (STMTS     (TIMER_ON next_address_in_data "@t-nonrecursive-relation;next_address_in_data;symbolization.dl [551:7-551:27];"
(STMTS      (DEBUG 
 "next_address_in_data(EA,EA_next) :- \n   address_in_data_refined(EA,_),\n   after_address_in_data(EA,EA_next),\n   address_in_data_refined(EA_next,_).\nin file symbolization.dl [554:1-557:40]" 
      (TIMER_ON next_address_in_data "@t-nonrecursive-rule;next_address_in_data;symbolization.dl [554:1-557:40];next_address_in_data(EA,EA_next) :- \\n   address_in_data_refined(EA,_),\\n   after_address_in_data(EA,EA_next),\\n   address_in_data_refined(EA_next,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY address_in_data_refined)) (NOT (ISEMPTY after_address_in_data)))
         (FOR_IN t0 address_in_data_refined           (FOR t1 after_address_in_data (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS address_in_data_refined ((TUPLE t1 1) UNDEF))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1)) next_address_in_data)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR after_address_in_data)
 ) )  )
  (SUBROUTINE next_block_in_byte_interval
(STMTS     (TIMER_ON next_block_in_byte_interval "@t-nonrecursive-relation;next_block_in_byte_interval;code_inference.dl [1609:7-1609:34];"
(STMTS      (DEBUG 
 "next_block_in_byte_interval(Block,NextBlock) :- \n   block_boundaries(Block,_,NextBlockBeg),\n   block_boundaries(NextBlock,NextBlockBeg,_).\nin file code_inference.dl [1613:1-1615:48]" 
      (TIMER_ON next_block_in_byte_interval "@t-nonrecursive-rule;next_block_in_byte_interval;code_inference.dl [1613:1-1615:48];next_block_in_byte_interval(Block,NextBlock) :- \\n   block_boundaries(Block,_,NextBlockBeg),\\n   block_boundaries(NextBlock,NextBlockBeg,_).;"
(QUERY
        (IF (NOT (ISEMPTY block_boundaries))
         (FOR_IN t0 block_boundaries           (FOR t1 block_boundaries (INDEX  (= (TUPLE t1 1) (TUPLE t0 2)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 0)) next_block_in_byte_interval)
))
        )       )
      )
     )
      (DEBUG 
 "next_block_in_byte_interval(Block,NextBlock) :- \n   block_boundaries(Block,_,BlockEndAddr),\n   data_in_code(BlockEndAddr,NextBlockBeg),\n   block_boundaries(NextBlock,NextBlockBeg,_).\nin file code_inference.dl [1617:1-1620:48]" 
      (TIMER_ON next_block_in_byte_interval "@t-nonrecursive-rule;next_block_in_byte_interval;code_inference.dl [1617:1-1620:48];next_block_in_byte_interval(Block,NextBlock) :- \\n   block_boundaries(Block,_,BlockEndAddr),\\n   data_in_code(BlockEndAddr,NextBlockBeg),\\n   block_boundaries(NextBlock,NextBlockBeg,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_boundaries)) (NOT (ISEMPTY data_in_code)))
         (FOR_IN t0 block_boundaries           (FOR t1 data_in_code (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
           (FOR t2 block_boundaries (INDEX  (= (TUPLE t2 1) (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 0)) next_block_in_byte_interval)
)))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE next_data_access
(STMTS     (TIMER_ON next_data_access "@t-nonrecursive-relation;next_data_access;data_access_analysis.dl [380:7-380:23];"
(STMTS      (DEBUG 
 "next_data_access(EA,@generator_0) :- \n   data_access_pattern(EA,_,_,_),\n   data_segment(Beg,End),\n   EA >= Beg,\n   EA < End,\n   @generator_0 <= End,\n   @generator_0 = min Next0 : { data_access_pattern(Next0,+underscore_2542,+underscore_2543,+underscore_2544),Next0 > EA }.\nin file data_access_analysis.dl [382:1-386:17]" 
      (TIMER_ON next_data_access "@t-nonrecursive-rule;next_data_access;data_access_analysis.dl [382:1-386:17];next_data_access(EA,@generator_0) :- \\n   data_access_pattern(EA,_,_,_),\\n   data_segment(Beg,End),\\n   EA >= Beg,\\n   EA < End,\\n   @generator_0 <= End,\\n   @generator_0 = min Next0 : { data_access_pattern(Next0,+underscore_2542,+underscore_2543,+underscore_2544),Next0 > EA }.;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_access_pattern)) (NOT (ISEMPTY data_segment)))
         (FOR_IN t0 data_access_pattern           (FOR_IN t1 data_segment            (IF (AND (CONSTRAINT < (TUPLE t0 0)  (TUPLE t1 1)) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t1 0)))
            (AGGREGATE t2 min (TUPLE t2 0)  t2 data_access_pattern (CONSTRAINT > (TUPLE t2 0)  (TUPLE t0 0))
             (IF (AND (CONSTRAINT = (TUPLE t2 0)  (TUPLE t2 0)) (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t1 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t2 0)) next_data_access)
             ))           ))
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE next_data_limit
(STMTS (STMTS     (TIMER_ON next_data_limit "@t-nonrecursive-relation;next_data_limit;data_access_analysis.dl [356:7-356:22];"
(STMTS      (DEBUG 
 "next_data_limit(EA,@generator_0) :- \n   data_limit(EA),\n   data_segment(Beg,End),\n   EA >= Beg,\n   EA < End,\n   @generator_0 <= End,\n   @generator_0 = min Next0 : { data_limit(Next0),Next0 > EA }.\nin file data_access_analysis.dl [358:1-362:17]" 
      (TIMER_ON next_data_limit "@t-nonrecursive-rule;next_data_limit;data_access_analysis.dl [358:1-362:17];next_data_limit(EA,@generator_0) :- \\n   data_limit(EA),\\n   data_segment(Beg,End),\\n   EA >= Beg,\\n   EA < End,\\n   @generator_0 <= End,\\n   @generator_0 = min Next0 : { data_limit(Next0),Next0 > EA }.;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_limit)) (NOT (ISEMPTY data_segment)))
         (FOR_IN t0 data_limit           (FOR_IN t1 data_segment            (IF (AND (CONSTRAINT < (TUPLE t0 0)  (TUPLE t1 1)) (CONSTRAINT >= (TUPLE t0 0)  (TUPLE t1 0)))
            (AGGREGATE t2 min (TUPLE t2 0)  t2 data_limit (CONSTRAINT > (TUPLE t2 0)  (TUPLE t0 0))
             (IF (AND (CONSTRAINT = (TUPLE t2 0)  (TUPLE t2 0)) (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t1 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t2 0)) next_data_limit)
             ))           ))
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR data_limit)
 ) )  )
  (SUBROUTINE next_dyssynchronous_data_access
(STMTS (STMTS     (TIMER_ON next_dyssynchronous_data_access "@t-nonrecursive-relation;next_dyssynchronous_data_access;data_access_analysis.dl [495:7-495:38];"
(STMTS      (DEBUG 
 "next_dyssynchronous_data_access(EA,Next) :- \n   data_access_pattern(EA,_,_,_),\n   synchronous_access(EA,End),\n   next_data_access(End,Next),\n   !synchronous_access(EA,Next).\nin file data_access_analysis.dl [497:1-506:7]" 
      (TIMER_ON next_dyssynchronous_data_access "@t-nonrecursive-rule;next_dyssynchronous_data_access;data_access_analysis.dl [497:1-506:7];next_dyssynchronous_data_access(EA,Next) :- \\n   data_access_pattern(EA,_,_,_),\\n   synchronous_access(EA,End),\\n   next_data_access(End,Next),\\n   !synchronous_access(EA,Next).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY next_data_access)) (NOT (ISEMPTY data_access_pattern))) (NOT (ISEMPTY synchronous_access)))
         (FOR_IN t0 data_access_pattern           (FOR t1 synchronous_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 next_data_access (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
            (IF (NOT (EXISTS synchronous_access ((TUPLE t0 0) (TUPLE t2 1))))
             (INSERT ((TUPLE t0 0) (TUPLE t2 1)) next_dyssynchronous_data_access)
            ))))
        )       )
      )
     )
      (DEBUG 
 "next_dyssynchronous_data_access(EA,Next) :- \n   data_access_pattern(EA,_,_,_),\n   !synchronous_access(EA,_),\n   next_data_access(EA,Next).\nin file data_access_analysis.dl [497:1-506:7]" 
      (TIMER_ON next_dyssynchronous_data_access "@t-nonrecursive-rule;next_dyssynchronous_data_access;data_access_analysis.dl [497:1-506:7];next_dyssynchronous_data_access(EA,Next) :- \\n   data_access_pattern(EA,_,_,_),\\n   !synchronous_access(EA,_),\\n   next_data_access(EA,Next).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_access_pattern)) (NOT (ISEMPTY next_data_access)))
         (FOR_IN t0 data_access_pattern           (IF (NOT (EXISTS synchronous_access ((TUPLE t0 0) UNDEF)))
           (FOR t1 next_data_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1)) next_dyssynchronous_data_access)
)          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR next_data_access)
     (CLEAR synchronous_access)
 ) )  )
  (SUBROUTINE next_refined_block_in_byte_interval
(STMTS (STMTS     (TIMER_ON next_refined_block_in_byte_interval "@t-nonrecursive-relation;next_refined_block_in_byte_interval;code_inference_postprocess.dl [163:7-163:42];"
(STMTS      (DEBUG 
 "next_refined_block_in_byte_interval(Block,NextBlock) :- \n   block_information(Block,_,_,End),\n   block_information(NextBlock,_,End,_).\nin file code_inference_postprocess.dl [165:1-167:42]" 
      (TIMER_ON next_refined_block_in_byte_interval "@t-nonrecursive-rule;next_refined_block_in_byte_interval;code_inference_postprocess.dl [165:1-167:42];next_refined_block_in_byte_interval(Block,NextBlock) :- \\n   block_information(Block,_,_,End),\\n   block_information(NextBlock,_,End,_).;"
(QUERY
        (IF (NOT (ISEMPTY block_information))
         (FOR_IN t0 block_information           (FOR t1 block_information (INDEX  (= (TUPLE t1 2) (TUPLE t0 3)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 0)) next_refined_block_in_byte_interval)
))
        )       )
      )
     )
      (DEBUG 
 "next_refined_block_in_byte_interval(Block,NextBlock) :- \n   block_information(Block,_,_,End),\n   data_in_code(End,DataEnd),\n   block_information(NextBlock,_,DataEnd,_).\nin file code_inference_postprocess.dl [169:1-172:46]" 
      (TIMER_ON next_refined_block_in_byte_interval "@t-nonrecursive-rule;next_refined_block_in_byte_interval;code_inference_postprocess.dl [169:1-172:46];next_refined_block_in_byte_interval(Block,NextBlock) :- \\n   block_information(Block,_,_,End),\\n   data_in_code(End,DataEnd),\\n   block_information(NextBlock,_,DataEnd,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_information)) (NOT (ISEMPTY data_in_code)))
         (FOR_IN t0 block_information           (FOR t1 data_in_code (INDEX  (= (TUPLE t1 0) (TUPLE t0 3)))
           (FOR t2 block_information (INDEX  (= (TUPLE t2 2) (TUPLE t1 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 0)) next_refined_block_in_byte_interval)
)))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR data_in_code)
 ) )  )
  (SUBROUTINE no_return_block
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON no_return_block "@t-nonrecursive-relation;no_return_block;noreturn.dl [115:7-115:22];"
(STMTS      (DEBUG 
 "no_return_block(Func) :- \n   direct_call(Call,Func),\n   may_fallthrough(Call,Fallthrough),\n   candidate_block_is_padding(Fallthrough),\n   block_last_instruction(Fallthrough,From),\n   may_fallthrough(From,Next),\n   inter_procedural_edge(From,Next).\nin file noreturn.dl [138:1-150:38]" 
      (TIMER_ON no_return_block "@t-nonrecursive-rule;no_return_block;noreturn.dl [138:1-150:38];no_return_block(Func) :- \\n   direct_call(Call,Func),\\n   may_fallthrough(Call,Fallthrough),\\n   candidate_block_is_padding(Fallthrough),\\n   block_last_instruction(Fallthrough,From),\\n   may_fallthrough(From,Next),\\n   inter_procedural_edge(From,Next).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY direct_call)) (NOT (ISEMPTY inter_procedural_edge))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY candidate_block_is_padding))) (NOT (ISEMPTY may_fallthrough)))
         (FOR_IN t0 direct_call           (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS candidate_block_is_padding ((TUPLE t1 1)))
            (FOR t2 block_last_instruction (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
             (INDEXED_IF_EXISTS t3 may_fallthrough (INDEX  (= (TUPLE t3 0) (TUPLE t2 1))) (EXISTS inter_procedural_edge ((TUPLE t2 1) (TUPLE t3 1)))
              (INSERT ((TUPLE t0 1)) no_return_block)
))           )))
        )       )
      )
     )
      (DEBUG 
 "no_return_block(Block) :- \n   no_return_call_refined(BlockEnd),\n   block_last_instruction(Block,BlockEnd).\nin file noreturn.dl [167:1-169:44]" 
      (TIMER_ON no_return_block "@t-nonrecursive-rule;no_return_block;noreturn.dl [167:1-169:44];no_return_block(Block) :- \\n   no_return_call_refined(BlockEnd),\\n   block_last_instruction(Block,BlockEnd).;"
(QUERY
        (IF (AND (NOT (ISEMPTY no_return_call_refined)) (NOT (ISEMPTY block_last_instruction)))
         (FOR_IN t0 no_return_call_refined           (FOR t1 block_last_instruction (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 0)) no_return_block)
))
        )       )
      )
     )
      (DEBUG 
 "no_return_block(Func) :- \n   direct_call(Call,Func),\n   may_fallthrough(Call,Fallthrough),\n   !candidate_block_is_padding(Fallthrough),\n   inter_procedural_edge(Call,Fallthrough).\nin file noreturn.dl [138:1-150:38]" 
      (TIMER_ON no_return_block "@t-nonrecursive-rule;no_return_block;noreturn.dl [138:1-150:38];no_return_block(Func) :- \\n   direct_call(Call,Func),\\n   may_fallthrough(Call,Fallthrough),\\n   !candidate_block_is_padding(Fallthrough),\\n   inter_procedural_edge(Call,Fallthrough).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY inter_procedural_edge)) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY may_fallthrough)))
         (FOR_IN t0 direct_call           (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (EXISTS inter_procedural_edge ((TUPLE t0 0) (TUPLE t1 1))) (NOT (EXISTS candidate_block_is_padding ((TUPLE t1 1)))))
            (INSERT ((TUPLE t0 1)) no_return_block)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (TIMER_ON no_return_call_propagated "@t-nonrecursive-relation;no_return_call_propagated;noreturn.dl [174:7-174:32];"
(STMTS      (DEBUG 
 "no_return_call_propagated(EA) :- \n   no_return_call_refined(EA).\nin file noreturn.dl [176:1-177:32]" 
      (TIMER_ON no_return_call_propagated "@t-nonrecursive-rule;no_return_call_propagated;noreturn.dl [176:1-177:32];no_return_call_propagated(EA) :- \\n   no_return_call_refined(EA).;"
(QUERY
        (IF (NOT (ISEMPTY no_return_call_refined))
         (FOR_IN t0 no_return_call_refined           (INSERT ((TUPLE t0 0)) no_return_call_propagated)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (TIMER_ON segment_target_range "@t-nonrecursive-relation;segment_target_range;noreturn.dl [56:7-56:27];"
(STMTS      (DEBUG 
 "segment_target_range(Beg,End,MaxTgt) :- \n   function_inference.function_entry_initial(Block),\n   !incomplete_block(Block),\n   block_boundaries(Block,Beg,End),\n   block_last_instruction(Block,BlockEnd),\n   direct_or_pcrel_jump(BlockEnd,MaxTgt),\n   MaxTgt >= Beg.\nin file noreturn.dl [59:1-70:19]" 
      (TIMER_ON segment_target_range "@t-nonrecursive-rule;segment_target_range;noreturn.dl [59:1-70:19];segment_target_range(Beg,End,MaxTgt) :- \\n   function_inference.function_entry_initial(Block),\\n   !incomplete_block(Block),\\n   block_boundaries(Block,Beg,End),\\n   block_last_instruction(Block,BlockEnd),\\n   direct_or_pcrel_jump(BlockEnd,MaxTgt),\\n   MaxTgt >= Beg.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY function_inference.function_entry_initial)) (NOT (ISEMPTY direct_or_pcrel_jump))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY block_boundaries)))
         (FOR_IN t0 function_inference.function_entry_initial           (IF (NOT (EXISTS incomplete_block ((TUPLE t0 0))))
           (FOR t1 block_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 block_last_instruction (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (FOR t3 direct_or_pcrel_jump (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
              (IF (CONSTRAINT >= (TUPLE t3 1)  (TUPLE t1 1))
               (INSERT ((TUPLE t1 1) (TUPLE t1 2) (TUPLE t3 1)) segment_target_range)
              ))))          ))
        )       )
      )
     )
      (DEBUG 
 "segment_target_range(Beg,End,Beg) :- \n   function_inference.function_entry_initial(Block),\n   !incomplete_block(Block),\n   block_boundaries(Block,Beg,End),\n   block_last_instruction(Block,BlockEnd),\n   !direct_or_pcrel_jump(BlockEnd,_),\n   Beg >= Beg.\nin file noreturn.dl [59:1-70:19]" 
      (TIMER_ON segment_target_range "@t-nonrecursive-rule;segment_target_range;noreturn.dl [59:1-70:19];segment_target_range(Beg,End,Beg) :- \\n   function_inference.function_entry_initial(Block),\\n   !incomplete_block(Block),\\n   block_boundaries(Block,Beg,End),\\n   block_last_instruction(Block,BlockEnd),\\n   !direct_or_pcrel_jump(BlockEnd,_),\\n   Beg >= Beg.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY function_inference.function_entry_initial))) (NOT (ISEMPTY block_boundaries)))
         (FOR_IN t0 function_inference.function_entry_initial           (IF (NOT (EXISTS incomplete_block ((TUPLE t0 0))))
           (FOR t1 block_boundaries (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (CONSTRAINT >= (TUPLE t1 1)  (TUPLE t1 1))
             (INDEXED_IF_EXISTS t2 block_last_instruction (INDEX  (= (TUPLE t2 0) (TUPLE t0 0))) (NOT (EXISTS direct_or_pcrel_jump ((TUPLE t2 1) UNDEF)))
              (INSERT ((TUPLE t1 1) (TUPLE t1 2) (TUPLE t1 1)) segment_target_range)
)            ))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (LOGSIZE self_contained_segment "@n-nonrecursive-relation;self_contained_segment;noreturn.dl [99:7-99:29];")
 )  (QUERY
     (FOR_IN t0 no_return_block       (INSERT ((TUPLE t0 0)) @delta_no_return_block)
)
    )
 (QUERY
     (FOR_IN t0 no_return_call_propagated       (INSERT ((TUPLE t0 0)) @delta_no_return_call_propagated)
)
    )
 (QUERY
     (FOR_IN t0 segment_target_range       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_segment_target_range)
)
    )
 (QUERY
     (FOR_IN t0 self_contained_segment       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_self_contained_segment)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_no_return_block "@t-recursive-relation;no_return_block;noreturn.dl [115:7-115:22];"
(STMTS (STMTS (STMTS       (DEBUG 
 "no_return_block(Block) :- \n   self_contained_segment(Beg,End),\n   block_boundaries(LastBlock,_,End),\n   block_last_instruction(LastBlock,BlockEnd),\n   !may_fallthrough(BlockEnd,_),\n   block_boundaries(Block,Beg,EndBlock),\n   EndBlock <= End.\nin file noreturn.dl [122:1-131:21]" 
       (TIMER_ON @new_no_return_block "@t-recursive-rule;no_return_block;0;noreturn.dl [122:1-131:21];no_return_block(Block) :- \\n   self_contained_segment(Beg,End),\\n   block_boundaries(LastBlock,_,End),\\n   block_last_instruction(LastBlock,BlockEnd),\\n   !may_fallthrough(BlockEnd,_),\\n   block_boundaries(Block,Beg,EndBlock),\\n   EndBlock <= End.;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_self_contained_segment)) (NOT (ISEMPTY block_boundaries))) (NOT (ISEMPTY block_last_instruction)))
          (FOR_IN t0 @delta_self_contained_segment            (FOR t1 block_boundaries (INDEX  (= (TUPLE t1 2) (TUPLE t0 1)))
            (INDEXED_IF_EXISTS t2 block_last_instruction (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (NOT (EXISTS may_fallthrough ((TUPLE t2 1) UNDEF)))
             (FOR t3 block_boundaries (INDEX  (= (TUPLE t3 1) (TUPLE t0 0)))
              (IF (AND (CONSTRAINT <= (TUPLE t3 2)  (TUPLE t0 1)) (NOT (EXISTS no_return_block ((TUPLE t3 0)))))
               (INSERT ((TUPLE t3 0)) @new_no_return_block)
              )))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_return_block(Block) :- \n   self_contained_segment(Beg,End),\n   block_boundaries(LastBlock,_,End),\n   block_last_instruction(LastBlock,BlockEnd),\n   no_return_call_propagated(BlockEnd),\n   block_boundaries(Block,Beg,EndBlock),\n   EndBlock <= End.\nin file noreturn.dl [122:1-131:21]" 
       (TIMER_ON @new_no_return_block "@t-recursive-rule;no_return_block;0;noreturn.dl [122:1-131:21];no_return_block(Block) :- \\n   self_contained_segment(Beg,End),\\n   block_boundaries(LastBlock,_,End),\\n   block_last_instruction(LastBlock,BlockEnd),\\n   no_return_call_propagated(BlockEnd),\\n   block_boundaries(Block,Beg,EndBlock),\\n   EndBlock <= End.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY block_boundaries)) (NOT (ISEMPTY @delta_self_contained_segment))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY no_return_call_propagated)))
          (FOR_IN t0 @delta_self_contained_segment            (FOR t1 block_boundaries (INDEX  (= (TUPLE t1 2) (TUPLE t0 1)))
            (FOR t2 block_last_instruction (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (IF (AND (EXISTS no_return_call_propagated ((TUPLE t2 1))) (NOT (EXISTS @delta_no_return_call_propagated ((TUPLE t2 1)))))
              (FOR t3 block_boundaries (INDEX  (= (TUPLE t3 1) (TUPLE t0 0)))
               (IF (AND (CONSTRAINT <= (TUPLE t3 2)  (TUPLE t0 1)) (NOT (EXISTS no_return_block ((TUPLE t3 0)))))
                (INSERT ((TUPLE t3 0)) @new_no_return_block)
               ))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "no_return_block(Block) :- \n   self_contained_segment(Beg,End),\n   block_boundaries(LastBlock,_,End),\n   block_last_instruction(LastBlock,BlockEnd),\n   no_return_call_propagated(BlockEnd),\n   block_boundaries(Block,Beg,EndBlock),\n   EndBlock <= End.\nin file noreturn.dl [122:1-131:21]" 
       (TIMER_ON @new_no_return_block "@t-recursive-rule;no_return_block;1;noreturn.dl [122:1-131:21];no_return_block(Block) :- \\n   self_contained_segment(Beg,End),\\n   block_boundaries(LastBlock,_,End),\\n   block_last_instruction(LastBlock,BlockEnd),\\n   no_return_call_propagated(BlockEnd),\\n   block_boundaries(Block,Beg,EndBlock),\\n   EndBlock <= End.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY block_boundaries)) (NOT (ISEMPTY self_contained_segment))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY @delta_no_return_call_propagated)))
          (FOR_IN t0 self_contained_segment            (FOR t1 block_boundaries (INDEX  (= (TUPLE t1 2) (TUPLE t0 1)))
            (INDEXED_IF_EXISTS t2 block_last_instruction (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (EXISTS @delta_no_return_call_propagated ((TUPLE t2 1)))
             (FOR t3 block_boundaries (INDEX  (= (TUPLE t3 1) (TUPLE t0 0)))
              (IF (AND (CONSTRAINT <= (TUPLE t3 2)  (TUPLE t0 1)) (NOT (EXISTS no_return_block ((TUPLE t3 0)))))
               (INSERT ((TUPLE t3 0)) @new_no_return_block)
              )))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_no_return_call_propagated "@t-recursive-relation;no_return_call_propagated;noreturn.dl [174:7-174:32];"
(STMTS       (DEBUG 
 "no_return_call_propagated(EA) :- \n   direct_call(EA,Block),\n   no_return_block(Block),\n   !pc_load_call(EA,Block).\nin file noreturn.dl [179:1-182:29]" 
       (TIMER_ON @new_no_return_call_propagated "@t-recursive-rule;no_return_call_propagated;0;noreturn.dl [179:1-182:29];no_return_call_propagated(EA) :- \\n   direct_call(EA,Block),\\n   no_return_block(Block),\\n   !pc_load_call(EA,Block).;"
(QUERY
         (IF (AND (NOT (ISEMPTY direct_call)) (NOT (ISEMPTY @delta_no_return_block)))
          (FOR_IN t0 direct_call            (IF (AND (AND (EXISTS @delta_no_return_block ((TUPLE t0 1))) (NOT (EXISTS no_return_call_propagated ((TUPLE t0 0))))) (NOT (EXISTS pc_load_call ((TUPLE t0 0) (TUPLE t0 1)))))
            (INSERT ((TUPLE t0 0)) @new_no_return_call_propagated)
           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_segment_target_range "@t-recursive-relation;segment_target_range;noreturn.dl [56:7-56:27];"
(STMTS (STMTS (STMTS       (DEBUG 
 "segment_target_range(Beg,End,PrevMaxTgt) :- \n   segment_target_range(Beg,PrevEnd,PrevMaxTgt),\n   block_boundaries(PrevBlock,_,PrevEnd),\n   next_block_in_byte_interval(PrevBlock,Block),\n   block_boundaries(Block,_,End),\n   !incomplete_block(Block),\n   !function_inference.function_entry_initial(Block),\n   block_last_instruction(Block,BlockEnd),\n   !direct_or_pcrel_jump(BlockEnd,_),\n   PrevMaxTgt >= Beg.\nin file noreturn.dl [72:1-96:19]" 
       (TIMER_ON @new_segment_target_range "@t-recursive-rule;segment_target_range;0;noreturn.dl [72:1-96:19];segment_target_range(Beg,End,PrevMaxTgt) :- \\n   segment_target_range(Beg,PrevEnd,PrevMaxTgt),\\n   block_boundaries(PrevBlock,_,PrevEnd),\\n   next_block_in_byte_interval(PrevBlock,Block),\\n   block_boundaries(Block,_,End),\\n   !incomplete_block(Block),\\n   !function_inference.function_entry_initial(Block),\\n   block_last_instruction(Block,BlockEnd),\\n   !direct_or_pcrel_jump(BlockEnd,_),\\n   PrevMaxTgt >= Beg.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY @delta_segment_target_range))) (NOT (ISEMPTY next_block_in_byte_interval))) (NOT (ISEMPTY block_boundaries)))
          (FOR_IN t0 @delta_segment_target_range            (IF (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t0 0))
            (FOR t1 block_boundaries (INDEX  (= (TUPLE t1 2) (TUPLE t0 1)))
             (FOR t2 next_block_in_byte_interval (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
              (IF (AND (NOT (EXISTS incomplete_block ((TUPLE t2 1)))) (NOT (EXISTS function_inference.function_entry_initial ((TUPLE t2 1)))))
               (FOR t3 block_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS segment_target_range ((TUPLE t0 0) (TUPLE t3 2) (TUPLE t0 2))))
                 (INDEXED_IF_EXISTS t4 block_last_instruction (INDEX  (= (TUPLE t4 0) (TUPLE t2 1))) (NOT (EXISTS direct_or_pcrel_jump ((TUPLE t4 1) UNDEF)))
                  (INSERT ((TUPLE t0 0) (TUPLE t3 2) (TUPLE t0 2)) @new_segment_target_range)
)                ))              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "segment_target_range(Beg,End,max(PrevMaxTgt,MaxTgt2)) :- \n   segment_target_range(Beg,PrevEnd,PrevMaxTgt),\n   block_boundaries(PrevBlock,_,PrevEnd),\n   next_block_in_byte_interval(PrevBlock,Block),\n   block_boundaries(Block,_,End),\n   !incomplete_block(Block),\n   !function_inference.function_entry_initial(Block),\n   block_last_instruction(Block,BlockEnd),\n   direct_or_pcrel_jump(BlockEnd,MaxTgt2),\n   !inter_procedural_edge(BlockEnd,_),\n   MaxTgt2 >= Beg,\n   max(PrevMaxTgt,MaxTgt2) >= Beg.\nin file noreturn.dl [72:1-96:19]" 
       (TIMER_ON @new_segment_target_range "@t-recursive-rule;segment_target_range;0;noreturn.dl [72:1-96:19];segment_target_range(Beg,End,max(PrevMaxTgt,MaxTgt2)) :- \\n   segment_target_range(Beg,PrevEnd,PrevMaxTgt),\\n   block_boundaries(PrevBlock,_,PrevEnd),\\n   next_block_in_byte_interval(PrevBlock,Block),\\n   block_boundaries(Block,_,End),\\n   !incomplete_block(Block),\\n   !function_inference.function_entry_initial(Block),\\n   block_last_instruction(Block,BlockEnd),\\n   direct_or_pcrel_jump(BlockEnd,MaxTgt2),\\n   !inter_procedural_edge(BlockEnd,_),\\n   MaxTgt2 >= Beg,\\n   max(PrevMaxTgt,MaxTgt2) >= Beg.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY @delta_segment_target_range)) (NOT (ISEMPTY direct_or_pcrel_jump))) (NOT (ISEMPTY block_boundaries))) (NOT (ISEMPTY next_block_in_byte_interval))) (NOT (ISEMPTY block_last_instruction)))
          (FOR_IN t0 @delta_segment_target_range            (FOR t1 block_boundaries (INDEX  (= (TUPLE t1 2) (TUPLE t0 1)))
            (FOR t2 next_block_in_byte_interval (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (IF (AND (NOT (EXISTS incomplete_block ((TUPLE t2 1)))) (NOT (EXISTS function_inference.function_entry_initial ((TUPLE t2 1)))))
              (FOR t3 block_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (FOR t4 block_last_instruction (INDEX  (= (TUPLE t4 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS inter_procedural_edge ((TUPLE t4 1) UNDEF)))
                 (FOR t5 direct_or_pcrel_jump (INDEX  (= (TUPLE t5 0) (TUPLE t4 1)))
                  (IF (AND (AND (CONSTRAINT >= (TUPLE t5 1)  (TUPLE t0 0)) (CONSTRAINT >= (INTRINSIC max (TUPLE t0 2) (TUPLE t5 1))  (TUPLE t0 0))) (NOT (EXISTS segment_target_range ((TUPLE t0 0) (TUPLE t3 2) (INTRINSIC max (TUPLE t0 2) (TUPLE t5 1))))))
                   (INSERT ((TUPLE t0 0) (TUPLE t3 2) (INTRINSIC max (TUPLE t0 2) (TUPLE t5 1))) @new_segment_target_range)
                  ))                )))             ))))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "segment_target_range(Beg,End,PrevMaxTgt) :- \n   segment_target_range(Beg,PrevEnd,PrevMaxTgt),\n   block_boundaries(PrevBlock,_,PrevEnd),\n   next_block_in_byte_interval(PrevBlock,Block),\n   block_boundaries(Block,_,End),\n   !incomplete_block(Block),\n   !function_inference.function_entry_initial(Block),\n   block_last_instruction(Block,BlockEnd),\n   direct_or_pcrel_jump(BlockEnd,InterTarget),\n   inter_procedural_edge(BlockEnd,_),\n   no_return_block(InterTarget),\n   PrevMaxTgt >= Beg.\nin file noreturn.dl [72:1-96:19]" 
       (TIMER_ON @new_segment_target_range "@t-recursive-rule;segment_target_range;0;noreturn.dl [72:1-96:19];segment_target_range(Beg,End,PrevMaxTgt) :- \\n   segment_target_range(Beg,PrevEnd,PrevMaxTgt),\\n   block_boundaries(PrevBlock,_,PrevEnd),\\n   next_block_in_byte_interval(PrevBlock,Block),\\n   block_boundaries(Block,_,End),\\n   !incomplete_block(Block),\\n   !function_inference.function_entry_initial(Block),\\n   block_last_instruction(Block,BlockEnd),\\n   direct_or_pcrel_jump(BlockEnd,InterTarget),\\n   inter_procedural_edge(BlockEnd,_),\\n   no_return_block(InterTarget),\\n   PrevMaxTgt >= Beg.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY @delta_segment_target_range)) (NOT (ISEMPTY inter_procedural_edge))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY block_boundaries))) (NOT (ISEMPTY direct_or_pcrel_jump))) (NOT (ISEMPTY next_block_in_byte_interval))) (NOT (ISEMPTY no_return_block)))
          (FOR_IN t0 @delta_segment_target_range            (IF (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t0 0))
            (FOR t1 block_boundaries (INDEX  (= (TUPLE t1 2) (TUPLE t0 1)))
             (FOR t2 next_block_in_byte_interval (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
              (IF (AND (NOT (EXISTS incomplete_block ((TUPLE t2 1)))) (NOT (EXISTS function_inference.function_entry_initial ((TUPLE t2 1)))))
               (FOR t3 block_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS segment_target_range ((TUPLE t0 0) (TUPLE t3 2) (TUPLE t0 2))))
                 (FOR t4 block_last_instruction (INDEX  (= (TUPLE t4 0) (TUPLE t2 1)))
                  (IF (EXISTS inter_procedural_edge ((TUPLE t4 1) UNDEF))
                   (FOR t5 direct_or_pcrel_jump (INDEX  (= (TUPLE t5 0) (TUPLE t4 1)))
                    (IF (AND (EXISTS no_return_block ((TUPLE t5 1))) (NOT (EXISTS @delta_no_return_block ((TUPLE t5 1)))))
                     (INSERT ((TUPLE t0 0) (TUPLE t3 2) (TUPLE t0 2)) @new_segment_target_range)
                    ))                  ))                ))              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "segment_target_range(Beg,End,PrevMaxTgt) :- \n   segment_target_range(Beg,PrevEnd,PrevMaxTgt),\n   block_boundaries(PrevBlock,_,PrevEnd),\n   next_block_in_byte_interval(PrevBlock,Block),\n   block_boundaries(Block,_,End),\n   !incomplete_block(Block),\n   !function_inference.function_entry_initial(Block),\n   block_last_instruction(Block,BlockEnd),\n   direct_or_pcrel_jump(BlockEnd,InterTarget),\n   inter_procedural_edge(BlockEnd,_),\n   no_return_block(InterTarget),\n   PrevMaxTgt >= Beg.\nin file noreturn.dl [72:1-96:19]" 
       (TIMER_ON @new_segment_target_range "@t-recursive-rule;segment_target_range;1;noreturn.dl [72:1-96:19];segment_target_range(Beg,End,PrevMaxTgt) :- \\n   segment_target_range(Beg,PrevEnd,PrevMaxTgt),\\n   block_boundaries(PrevBlock,_,PrevEnd),\\n   next_block_in_byte_interval(PrevBlock,Block),\\n   block_boundaries(Block,_,End),\\n   !incomplete_block(Block),\\n   !function_inference.function_entry_initial(Block),\\n   block_last_instruction(Block,BlockEnd),\\n   direct_or_pcrel_jump(BlockEnd,InterTarget),\\n   inter_procedural_edge(BlockEnd,_),\\n   no_return_block(InterTarget),\\n   PrevMaxTgt >= Beg.;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY segment_target_range)) (NOT (ISEMPTY inter_procedural_edge))) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY block_boundaries))) (NOT (ISEMPTY direct_or_pcrel_jump))) (NOT (ISEMPTY next_block_in_byte_interval))) (NOT (ISEMPTY @delta_no_return_block)))
          (FOR_IN t0 segment_target_range            (IF (CONSTRAINT >= (TUPLE t0 2)  (TUPLE t0 0))
            (FOR t1 block_boundaries (INDEX  (= (TUPLE t1 2) (TUPLE t0 1)))
             (FOR t2 next_block_in_byte_interval (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
              (IF (AND (NOT (EXISTS incomplete_block ((TUPLE t2 1)))) (NOT (EXISTS function_inference.function_entry_initial ((TUPLE t2 1)))))
               (FOR t3 block_boundaries (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
                (IF (NOT (EXISTS segment_target_range ((TUPLE t0 0) (TUPLE t3 2) (TUPLE t0 2))))
                 (FOR t4 block_last_instruction (INDEX  (= (TUPLE t4 0) (TUPLE t2 1)))
                  (IF (EXISTS inter_procedural_edge ((TUPLE t4 1) UNDEF))
                   (INDEXED_IF_EXISTS t5 direct_or_pcrel_jump (INDEX  (= (TUPLE t5 0) (TUPLE t4 1))) (EXISTS @delta_no_return_block ((TUPLE t5 1)))
                    (INSERT ((TUPLE t0 0) (TUPLE t3 2) (TUPLE t0 2)) @new_segment_target_range)
)                  ))                ))              )))           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_self_contained_segment "@t-recursive-relation;self_contained_segment;noreturn.dl [99:7-99:29];"
(STMTS       (DEBUG 
 "self_contained_segment(Beg,End) :- \n   segment_target_range(Beg,End,MaxTgt),\n   MaxTgt < End.\nin file noreturn.dl [101:1-103:18]" 
       (TIMER_ON @new_self_contained_segment "@t-recursive-rule;self_contained_segment;0;noreturn.dl [101:1-103:18];self_contained_segment(Beg,End) :- \\n   segment_target_range(Beg,End,MaxTgt),\\n   MaxTgt < End.;"
(QUERY
         (IF (NOT (ISEMPTY @delta_segment_target_range))
          (FOR_IN t0 @delta_segment_target_range            (IF (AND (CONSTRAINT < (TUPLE t0 2)  (TUPLE t0 1)) (NOT (EXISTS self_contained_segment ((TUPLE t0 0) (TUPLE t0 1)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @new_self_contained_segment)
           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_no_return_block "@t-recursive-relation;no_return_block;noreturn.dl [115:7-115:22];"
     )
 ) (STMTS      (TIMER_ON @new_no_return_call_propagated "@t-recursive-relation;no_return_call_propagated;noreturn.dl [174:7-174:32];"
     )
 ) (STMTS      (TIMER_ON @new_segment_target_range "@t-recursive-relation;segment_target_range;noreturn.dl [56:7-56:27];"
     )
 ) (STMTS      (TIMER_ON @new_self_contained_segment "@t-recursive-relation;self_contained_segment;noreturn.dl [99:7-99:29];"
     )
 ) )  (STMTS      (EXIT (AND (AND (AND (ISEMPTY @new_no_return_block) (ISEMPTY @new_no_return_call_propagated)) (ISEMPTY @new_segment_target_range)) (ISEMPTY @new_self_contained_segment)))
 ) (STMTS      (TIMER_ON @new_no_return_block "@c-recursive-relation;no_return_block;noreturn.dl [115:7-115:22];"
(STMTS (QUERY
       (FOR_IN t0 @new_no_return_block         (INSERT ((TUPLE t0 0)) no_return_block)
)
      )
       (SWAP @delta_no_return_block @new_no_return_block)
       (CLEAR @new_no_return_block)
 )     )
      (TIMER_ON @new_no_return_call_propagated "@c-recursive-relation;no_return_call_propagated;noreturn.dl [174:7-174:32];"
(STMTS (QUERY
       (FOR_IN t0 @new_no_return_call_propagated         (INSERT ((TUPLE t0 0)) no_return_call_propagated)
)
      )
       (SWAP @delta_no_return_call_propagated @new_no_return_call_propagated)
       (CLEAR @new_no_return_call_propagated)
 )     )
      (TIMER_ON @new_segment_target_range "@c-recursive-relation;segment_target_range;noreturn.dl [56:7-56:27];"
(STMTS (QUERY
       (FOR_IN t0 @new_segment_target_range         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) segment_target_range)
)
      )
       (SWAP @delta_segment_target_range @new_segment_target_range)
       (CLEAR @new_segment_target_range)
 )     )
      (TIMER_ON @new_self_contained_segment "@c-recursive-relation;self_contained_segment;noreturn.dl [99:7-99:29];"
(STMTS (QUERY
       (FOR_IN t0 @new_self_contained_segment         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) self_contained_segment)
)
      )
       (SWAP @delta_self_contained_segment @new_self_contained_segment)
       (CLEAR @new_self_contained_segment)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_no_return_block)
     (CLEAR @new_no_return_block)
     (CLEAR @delta_no_return_call_propagated)
     (CLEAR @new_no_return_call_propagated)
     (CLEAR @delta_segment_target_range)
     (CLEAR @new_segment_target_range)
     (CLEAR @delta_self_contained_segment)
     (CLEAR @new_self_contained_segment)
 ) )  ) (STMTS     (CLEAR candidate_block_is_padding)
     (CLEAR direct_or_pcrel_jump)
     (CLEAR incomplete_block)
     (CLEAR next_block_in_byte_interval)
     (CLEAR no_return_block)
     (CLEAR no_return_call_refined)
     (CLEAR segment_target_range)
     (CLEAR self_contained_segment)
 ) )  )
  (SUBROUTINE no_return_call
(STMTS     (TIMER_ON no_return_call "@t-nonrecursive-relation;no_return_call;/usr/local/src/ddisasm/src/datalog/main.dl [910:7-910:21];"
(STMTS      (DEBUG 
 "no_return_call(EA) :- \n   direct_call(EA,Dest),\n   plt_entry(Dest,Function),\n   no_return_function(Pattern),\n   match(Pattern, Function).\nin file main.dl [916:1-920:29]" 
      (TIMER_ON no_return_call "@t-nonrecursive-rule;no_return_call;/usr/local/src/ddisasm/src/datalog/main.dl [916:1-920:29];no_return_call(EA) :- \\n   direct_call(EA,Dest),\\n   plt_entry(Dest,Function),\\n   no_return_function(Pattern),\\n   match(Pattern, Function).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY no_return_function)) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY plt_entry)))
         (FOR_IN t0 direct_call           (FOR t1 plt_entry (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (IF_EXISTS t2 no_return_function (CONSTRAINT match (TUPLE t2 0)  (TUPLE t1 1)) 
            (INSERT ((TUPLE t0 0)) no_return_call)
)))
        )       )
      )
     )
      (DEBUG 
 "no_return_call(EA) :- \n   direct_call(EA,Dest),\n   defined_symbol(Dest,_,_,_,_,_,_,_,Name),\n   no_return_function(Pattern),\n   match(Pattern, Name).\nin file main.dl [922:1-926:25]" 
      (TIMER_ON no_return_call "@t-nonrecursive-rule;no_return_call;/usr/local/src/ddisasm/src/datalog/main.dl [922:1-926:25];no_return_call(EA) :- \\n   direct_call(EA,Dest),\\n   defined_symbol(Dest,_,_,_,_,_,_,_,Name),\\n   no_return_function(Pattern),\\n   match(Pattern, Name).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY no_return_function)) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY defined_symbol)))
         (FOR_IN t0 direct_call           (FOR t1 defined_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (IF_EXISTS t2 no_return_function (CONSTRAINT match (TUPLE t2 0)  (TUPLE t1 8)) 
            (INSERT ((TUPLE t0 0)) no_return_call)
)))
        )       )
      )
     )
      (DEBUG 
 "no_return_call(EA) :- \n   direct_call(EA,_),\n   instruction_immediate_offset(EA,_,Offset,_),\n   relocation( _tmp_83,_,_,_,SymbolIndex,_,_),\n   symbol(_,_,_,_,_,_,_,SymbolIndex,Name),\n   no_return_function(Pattern),\n   match(Pattern, Name),\n    _tmp_83 = (EA+Offset).\nin file main.dl [928:1-934:25]" 
      (TIMER_ON no_return_call "@t-nonrecursive-rule;no_return_call;/usr/local/src/ddisasm/src/datalog/main.dl [928:1-934:25];no_return_call(EA) :- \\n   direct_call(EA,_),\\n   instruction_immediate_offset(EA,_,Offset,_),\\n   relocation( _tmp_83,_,_,_,SymbolIndex,_,_),\\n   symbol(_,_,_,_,_,_,_,SymbolIndex,Name),\\n   no_return_function(Pattern),\\n   match(Pattern, Name),\\n    _tmp_83 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY no_return_function)) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY symbol))) (NOT (ISEMPTY instruction_immediate_offset)))
         (FOR_IN t0 direct_call           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 relocation (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2))))
            (FOR t3 symbol (INDEX  (= (TUPLE t3 7) (TUPLE t2 4)))
             (IF_EXISTS t4 no_return_function (CONSTRAINT match (TUPLE t4 0)  (TUPLE t3 8)) 
              (INSERT ((TUPLE t0 0)) no_return_call)
)))))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE no_return_call_refined
(STMTS (STMTS     (TIMER_ON no_return_call_refined "@t-nonrecursive-relation;no_return_call_refined;noreturn.dl [155:7-155:29];"
(STMTS      (DEBUG 
 "no_return_call_refined(EA) :- \n   no_return_call(EA).\nin file noreturn.dl [157:1-158:24]" 
      (TIMER_ON no_return_call_refined "@t-nonrecursive-rule;no_return_call_refined;noreturn.dl [157:1-158:24];no_return_call_refined(EA) :- \\n   no_return_call(EA).;"
(QUERY
        (IF (NOT (ISEMPTY no_return_call))
         (FOR_IN t0 no_return_call           (INSERT ((TUPLE t0 0)) no_return_call_refined)
)
        )       )
      )
     )
      (DEBUG 
 "no_return_call_refined(EA) :- \n   direct_call(EA,Dest),\n   plt_block(Dest,Function),\n   no_return_function(Pattern),\n   match(Pattern, Function).\nin file noreturn.dl [161:1-165:29]" 
      (TIMER_ON no_return_call_refined "@t-nonrecursive-rule;no_return_call_refined;noreturn.dl [161:1-165:29];no_return_call_refined(EA) :- \\n   direct_call(EA,Dest),\\n   plt_block(Dest,Function),\\n   no_return_function(Pattern),\\n   match(Pattern, Function).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY no_return_function)) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY plt_block)))
         (FOR_IN t0 direct_call           (FOR t1 plt_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (IF_EXISTS t2 no_return_function (CONSTRAINT match (TUPLE t2 0)  (TUPLE t1 1)) 
            (INSERT ((TUPLE t0 0)) no_return_call_refined)
)))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR no_return_call)
     (CLEAR no_return_function)
 ) )  )
  (SUBROUTINE no_return_function
(STMTS     (TIMER_ON no_return_function "@t-nonrecursive-relation;no_return_function;/usr/local/src/ddisasm/src/datalog/main.dl [914:7-914:25];"
(STMTS      (DEBUG 
 "no_return_function(\"abort(@.*)?\") :- \n   binary_format(\"ELF\").\nin file elf_binaries.dl [178:1-178:58]" 
      (TIMER_ON no_return_function "@t-nonrecursive-rule;no_return_function;binary/elf/elf_binaries.dl [178:1-178:58];no_return_function(\\\"abort(@.*)?\\\") :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "abort(@.*)?")) no_return_function)
        )       )
      )
     )
      (DEBUG 
 "no_return_function(\"_?exit(@.*)?\") :- \n   binary_format(\"ELF\").\nin file elf_binaries.dl [179:1-179:59]" 
      (TIMER_ON no_return_function "@t-nonrecursive-rule;no_return_function;binary/elf/elf_binaries.dl [179:1-179:59];no_return_function(\\\"_?exit(@.*)?\\\") :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "_?exit(@.*)?")) no_return_function)
        )       )
      )
     )
      (DEBUG 
 "no_return_function(\"__chk_fail(@.*)?\") :- \n   binary_format(\"ELF\").\nin file elf_binaries.dl [180:1-180:63]" 
      (TIMER_ON no_return_function "@t-nonrecursive-rule;no_return_function;binary/elf/elf_binaries.dl [180:1-180:63];no_return_function(\\\"__chk_fail(@.*)?\\\") :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "__chk_fail(@.*)?")) no_return_function)
        )       )
      )
     )
      (DEBUG 
 "no_return_function(\"__stack_chk_fail(@.*)?\") :- \n   binary_format(\"ELF\").\nin file elf_binaries.dl [181:1-181:69]" 
      (TIMER_ON no_return_function "@t-nonrecursive-rule;no_return_function;binary/elf/elf_binaries.dl [181:1-181:69];no_return_function(\\\"__stack_chk_fail(@.*)?\\\") :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "__stack_chk_fail(@.*)?")) no_return_function)
        )       )
      )
     )
      (DEBUG 
 "no_return_function(\"__assert_fail(@.*)?\") :- \n   binary_format(\"ELF\").\nin file elf_binaries.dl [182:1-182:66]" 
      (TIMER_ON no_return_function "@t-nonrecursive-rule;no_return_function;binary/elf/elf_binaries.dl [182:1-182:66];no_return_function(\\\"__assert_fail(@.*)?\\\") :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "__assert_fail(@.*)?")) no_return_function)
        )       )
      )
     )
      (DEBUG 
 "no_return_function(\"longjmp(@.*)?\") :- \n   binary_format(\"ELF\").\nin file elf_binaries.dl [183:1-183:60]" 
      (TIMER_ON no_return_function "@t-nonrecursive-rule;no_return_function;binary/elf/elf_binaries.dl [183:1-183:60];no_return_function(\\\"longjmp(@.*)?\\\") :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "longjmp(@.*)?")) no_return_function)
        )       )
      )
     )
      (DEBUG 
 "no_return_function(\"__clang_call_terminate\") :- \n   binary_format(\"ELF\").\nin file elf_binaries.dl [184:1-184:69]" 
      (TIMER_ON no_return_function "@t-nonrecursive-rule;no_return_function;binary/elf/elf_binaries.dl [184:1-184:69];no_return_function(\\\"__clang_call_terminate\\\") :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "__clang_call_terminate")) no_return_function)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE non_zero_data_section
(STMTS     (TIMER_ON non_zero_data_section "@t-nonrecursive-relation;non_zero_data_section;/usr/local/src/ddisasm/src/datalog/main.dl [841:7-841:28];"
(STMTS      (DEBUG 
 "non_zero_data_section(Name) :- \n   data_section(Name),\n   !bss_section(Name),\n   Name != \".dynamic\".\nin file elf_binaries.dl [115:1-118:24]" 
      (TIMER_ON non_zero_data_section "@t-nonrecursive-rule;non_zero_data_section;binary/elf/elf_binaries.dl [115:1-118:24];non_zero_data_section(Name) :- \\n   data_section(Name),\\n   !bss_section(Name),\\n   Name != \\\".dynamic\\\".;"
(QUERY
        (IF (NOT (ISEMPTY data_section))
         (FOR_IN t0 data_section           (IF (AND (CONSTRAINT != (TUPLE t0 0)  (STRING ".dynamic")) (NOT (EXISTS bss_section ((TUPLE t0 0)))))
           (INSERT ((TUPLE t0 0)) non_zero_data_section)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE nop_block
(STMTS (STMTS     (TIMER_ON nop_block "@t-nonrecursive-relation;nop_block;code_inference_postprocess.dl [200:7-200:16];"
(STMTS      (DEBUG 
 "nop_block(Block) :- \n   refined_block(Block),\n   !block_has_non_nop(Block).\nin file code_inference_postprocess.dl [202:1-204:31]" 
      (TIMER_ON nop_block "@t-nonrecursive-rule;nop_block;code_inference_postprocess.dl [202:1-204:31];nop_block(Block) :- \\n   refined_block(Block),\\n   !block_has_non_nop(Block).;"
(QUERY
        (IF (NOT (ISEMPTY refined_block))
         (FOR_IN t0 refined_block           (IF (NOT (EXISTS block_has_non_nop ((TUPLE t0 0))))
           (INSERT ((TUPLE t0 0)) nop_block)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR block_has_non_nop)
 ) )  )
  (SUBROUTINE nop_in_padding_candidate
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON nop_in_padding_candidate "@t-nonrecursive-relation;nop_in_padding_candidate;code_inference.dl [430:7-430:31];"
(STMTS      (DEBUG 
 "nop_in_padding_candidate(EA,EA) :- \n   is_padding(EA),\n   next(Prev,EA),\n   !is_padding(Prev).\nin file code_inference.dl [432:1-435:23]" 
      (TIMER_ON nop_in_padding_candidate "@t-nonrecursive-rule;nop_in_padding_candidate;code_inference.dl [432:1-435:23];nop_in_padding_candidate(EA,EA) :- \\n   is_padding(EA),\\n   next(Prev,EA),\\n   !is_padding(Prev).;"
(QUERY
        (IF (AND (NOT (ISEMPTY is_padding)) (NOT (ISEMPTY next)))
         (FOR_IN t0 is_padding           (INDEXED_IF_EXISTS t1 next (INDEX  (= (TUPLE t1 1) (TUPLE t0 0))) (NOT (EXISTS is_padding ((TUPLE t1 0))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 0)) nop_in_padding_candidate)
))
        )       )
      )
     )
      (DEBUG 
 "nop_in_padding_candidate(EA,EA) :- \n   padding_block_limit(EA),\n   is_padding(EA).\nin file code_inference.dl [437:1-439:20]" 
      (TIMER_ON nop_in_padding_candidate "@t-nonrecursive-rule;nop_in_padding_candidate;code_inference.dl [437:1-439:20];nop_in_padding_candidate(EA,EA) :- \\n   padding_block_limit(EA),\\n   is_padding(EA).;"
(QUERY
        (IF (AND (NOT (ISEMPTY padding_block_limit)) (NOT (ISEMPTY is_padding)))
         (FOR_IN t0 padding_block_limit           (IF (EXISTS is_padding ((TUPLE t0 0)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 0)) nop_in_padding_candidate)
          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 nop_in_padding_candidate       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_nop_in_padding_candidate)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_nop_in_padding_candidate "@t-recursive-relation;nop_in_padding_candidate;code_inference.dl [430:7-430:31];"
(STMTS       (DEBUG 
 "nop_in_padding_candidate(Next,Start) :- \n   nop_in_padding_candidate(EA,Start),\n   next(EA,Next),\n   is_padding(Next),\n   !padding_block_limit(Next).\nin file code_inference.dl [441:1-445:32]" 
       (TIMER_ON @new_nop_in_padding_candidate "@t-recursive-rule;nop_in_padding_candidate;0;code_inference.dl [441:1-445:32];nop_in_padding_candidate(Next,Start) :- \\n   nop_in_padding_candidate(EA,Start),\\n   next(EA,Next),\\n   is_padding(Next),\\n   !padding_block_limit(Next).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY is_padding)) (NOT (ISEMPTY @delta_nop_in_padding_candidate))) (NOT (ISEMPTY next)))
          (FOR_IN t0 @delta_nop_in_padding_candidate            (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (AND (EXISTS is_padding ((TUPLE t1 1))) (NOT (EXISTS padding_block_limit ((TUPLE t1 1))))) (NOT (EXISTS nop_in_padding_candidate ((TUPLE t1 1) (TUPLE t0 1)))))
             (INSERT ((TUPLE t1 1) (TUPLE t0 1)) @new_nop_in_padding_candidate)
            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_nop_in_padding_candidate "@t-recursive-relation;nop_in_padding_candidate;code_inference.dl [430:7-430:31];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_nop_in_padding_candidate))
 ) (STMTS      (TIMER_ON @new_nop_in_padding_candidate "@c-recursive-relation;nop_in_padding_candidate;code_inference.dl [430:7-430:31];"
(STMTS (QUERY
       (FOR_IN t0 @new_nop_in_padding_candidate         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) nop_in_padding_candidate)
)
      )
       (SWAP @delta_nop_in_padding_candidate @new_nop_in_padding_candidate)
       (CLEAR @new_nop_in_padding_candidate)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_nop_in_padding_candidate)
     (CLEAR @new_nop_in_padding_candidate)
 ) )  ) (STMTS     (CLEAR padding_block_limit)
 ) )  )
  (SUBROUTINE npad
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON npad "@t-nonrecursive-relation;npad;binary/pe/pe_binaries.dl [127:7-127:11];"
(STMTS      (DEBUG 
 "npad(EA,2) :- \n   instruction(EA,2,_,\"MOV\",Op,Op,_,_,_,_),\n   op_regdirect(Op,\"EDI\").\nin file pe_binaries.dl [130:1-132:28]" 
      (TIMER_ON npad "@t-nonrecursive-rule;npad;binary/pe/pe_binaries.dl [130:1-132:28];npad(EA,2) :- \\n   instruction(EA,2,_,\\\"MOV\\\",Op,Op,_,_,_,_),\\n   op_regdirect(Op,\\\"EDI\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY op_regdirect)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 1) (UNSIGNED 2)) (= (TUPLE t0 3) (STRING "MOV")))
          (IF (AND (CONSTRAINT = (TUPLE t0 4)  (TUPLE t0 5)) (EXISTS op_regdirect ((TUPLE t0 4) (STRING "EDI"))))
           (INSERT ((TUPLE t0 0) (UNSIGNED 2)) npad)
          ))        )       )
      )
     )
      (DEBUG 
 "npad(EA,3) :- \n   instruction(EA,3,_,\"LEA\",_,_,_,_,_,_),\n   @functor_data_valid(EA,4) = 1,\n   (@functor_data_unsigned(EA,4)&0x00FFFFFF) = 0x498D.\nin file pe_binaries.dl [136:1-139:36]" 
      (TIMER_ON npad "@t-nonrecursive-rule;npad;binary/pe/pe_binaries.dl [136:1-139:36];npad(EA,3) :- \\n   instruction(EA,3,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   @functor_data_valid(EA,4) = 1,\\n   (@functor_data_unsigned(EA,4)&0x00FFFFFF) = 0x498D.;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 1) (UNSIGNED 3)) (= (TUPLE t0 3) (STRING "LEA")))
          (IF (AND (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 4)))  (UNSIGNED 1)) (CONSTRAINT = (INTRINSIC band (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 4))) (UNSIGNED 16777215))  (UNSIGNED 18829)))
           (INSERT ((TUPLE t0 0) (UNSIGNED 3)) npad)
          ))        )       )
      )
     )
      (DEBUG 
 "npad(EA,4) :- \n   instruction(EA,4,_,\"LEA\",_,_,_,_,_,_),\n   @functor_data_valid(EA,4) = 1,\n   0x0024648D = @functor_data_unsigned(EA,4).\nin file pe_binaries.dl [143:1-145:33]" 
      (TIMER_ON npad "@t-nonrecursive-rule;npad;binary/pe/pe_binaries.dl [143:1-145:33];npad(EA,4) :- \\n   instruction(EA,4,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   @functor_data_valid(EA,4) = 1,\\n   0x0024648D = @functor_data_unsigned(EA,4).;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 1) (UNSIGNED 4)) (= (TUPLE t0 3) (STRING "LEA")))
          (IF (AND (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 4)))  (UNSIGNED 1)) (CONSTRAINT = (UNSIGNED 2385037)  (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 4)))))
           (INSERT ((TUPLE t0 0) (UNSIGNED 4)) npad)
          ))        )       )
      )
     )
      (DEBUG 
 "npad(EA,6) :- \n   instruction(EA,6,_,\"LEA\",_,_,_,_,_,_),\n   @functor_data_valid(EA,8) = 1,\n   (@functor_data_unsigned(EA,8)&0x0000FFFFFFFFFFFF) = 0x9B8D.\nin file pe_binaries.dl [149:1-152:44]" 
      (TIMER_ON npad "@t-nonrecursive-rule;npad;binary/pe/pe_binaries.dl [149:1-152:44];npad(EA,6) :- \\n   instruction(EA,6,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   @functor_data_valid(EA,8) = 1,\\n   (@functor_data_unsigned(EA,8)&0x0000FFFFFFFFFFFF) = 0x9B8D.;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 1) (UNSIGNED 6)) (= (TUPLE t0 3) (STRING "LEA")))
          (IF (AND (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 8)))  (UNSIGNED 1)) (CONSTRAINT = (INTRINSIC band (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 8))) (UNSIGNED 281474976710655))  (UNSIGNED 39821)))
           (INSERT ((TUPLE t0 0) (UNSIGNED 6)) npad)
          ))        )       )
      )
     )
      (DEBUG 
 "npad(EA,7) :- \n   instruction(EA,7,_,\"LEA\",_,_,_,_,_,_),\n   @functor_data_valid(EA,8) = 1,\n   (@functor_data_unsigned(EA,8)&0x00FFFFFFFFFFFFFF) = 0x24A48D.\nin file pe_binaries.dl [156:1-159:46]" 
      (TIMER_ON npad "@t-nonrecursive-rule;npad;binary/pe/pe_binaries.dl [156:1-159:46];npad(EA,7) :- \\n   instruction(EA,7,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   @functor_data_valid(EA,8) = 1,\\n   (@functor_data_unsigned(EA,8)&0x00FFFFFFFFFFFFFF) = 0x24A48D.;"
(QUERY
        (IF (NOT (ISEMPTY instruction))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 1) (UNSIGNED 7)) (= (TUPLE t0 3) (STRING "LEA")))
          (IF (AND (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 8)))  (UNSIGNED 1)) (CONSTRAINT = (INTRINSIC band (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 8))) (UNSIGNED 72057594037927935))  (UNSIGNED 2401421)))
           (INSERT ((TUPLE t0 0) (UNSIGNED 7)) npad)
          ))        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 npad       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_npad)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_npad "@t-recursive-relation;npad;binary/pe/pe_binaries.dl [127:7-127:11];"
(STMTS       (DEBUG 
 "npad(EA,(Dest-EA)) :- \n   unconditional_jump(EA),\n   direct_jump(EA,Dest),\n   (Dest-EA) <= 15,\n   npad( _tmp_84,_),\n    _tmp_84 = (EA+2).\nin file pe_binaries.dl [163:1-168:18]" 
       (TIMER_ON @new_npad "@t-recursive-rule;npad;0;binary/pe/pe_binaries.dl [163:1-168:18];npad(EA,(Dest-EA)) :- \\n   unconditional_jump(EA),\\n   direct_jump(EA,Dest),\\n   (Dest-EA) <= 15,\\n   npad( _tmp_84,_),\\n    _tmp_84 = (EA+2).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_npad)) (NOT (ISEMPTY unconditional_jump))) (NOT (ISEMPTY direct_jump)))
          (FOR_IN t0 unconditional_jump            (IF (EXISTS @delta_npad ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 2)) UNDEF))
            (FOR t1 direct_jump (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (AND (CONSTRAINT <= (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))  (UNSIGNED 15)) (NOT (EXISTS npad ((TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))))))
              (INSERT ((TUPLE t0 0) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0))) @new_npad)
             ))           ))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_npad "@t-recursive-relation;npad;binary/pe/pe_binaries.dl [127:7-127:11];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_npad))
 ) (STMTS      (TIMER_ON @new_npad "@c-recursive-relation;npad;binary/pe/pe_binaries.dl [127:7-127:11];"
(STMTS (QUERY
       (FOR_IN t0 @new_npad         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) npad)
)
      )
       (SWAP @delta_npad @new_npad)
       (CLEAR @new_npad)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_npad)
     (CLEAR @new_npad)
 ) )  )  )  )
  (SUBROUTINE op_immediate
(STMTS (STMTS (STMTS     (TIMER_ON op_immediate "@t-relation-loadtime;op_immediate;/usr/local/src/ddisasm/src/datalog/main.dl [266:7-266:19];loadtime;"
     (IO op_immediate ((= IO "file") (= attributeNames "code\toffset") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "op_immediate") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"code\", \"offset\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:operand_code\", \"i:number\"]}}")))
    )
 ) (STMTS     (LOGSIZE op_immediate "@n-nonrecursive-relation;op_immediate;/usr/local/src/ddisasm/src/datalog/main.dl [266:7-266:19];")
 )   (STMTS     (TIMER_ON op_immediate "@t-relation-savetime;op_immediate;/usr/local/src/ddisasm/src/datalog/main.dl [266:7-266:19];savetime;"
     (IO op_immediate ((= IO "file") (= attributeNames "code\toffset") (= auxArity "0") (= name "op_immediate") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"code\", \"offset\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:operand_code\", \"i:number\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE op_immediate_and_reg
(STMTS     (TIMER_ON op_immediate_and_reg "@t-nonrecursive-relation;op_immediate_and_reg;/usr/local/src/ddisasm/src/datalog/main.dl [729:7-729:27];"
(STMTS      (DEBUG 
 "op_immediate_and_reg(EA,Operation,Reg,Imm_index,Immediate) :- \n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   instruction_get_op(EA,Imm_index,Op),\n   op_immediate(Op,Immediate),\n   instruction_get_op(EA,_,Op2),\n   op_regdirect_contains_reg(Op2,Reg).\nin file main.dl [731:1-736:40]" 
      (TIMER_ON op_immediate_and_reg "@t-nonrecursive-rule;op_immediate_and_reg;/usr/local/src/ddisasm/src/datalog/main.dl [731:1-736:40];op_immediate_and_reg(EA,Operation,Reg,Imm_index,Immediate) :- \\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   instruction_get_op(EA,Imm_index,Op),\\n   op_immediate(Op,Immediate),\\n   instruction_get_op(EA,_,Op2),\\n   op_regdirect_contains_reg(Op2,Reg).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 instruction           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 op_immediate (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
            (FOR t3 instruction_get_op (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)))
             (FOR t4 op_regdirect_contains_reg (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 3) (TUPLE t4 1) (TUPLE t1 1) (TUPLE t2 1)) op_immediate_and_reg)
)))))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE op_indirect
(STMTS (STMTS (STMTS     (TIMER_ON op_indirect "@t-relation-loadtime;op_indirect;/usr/local/src/ddisasm/src/datalog/main.dl [273:7-273:18];loadtime;"
     (IO op_indirect ((= IO "file") (= attributeNames "code\treg1\treg2\treg3\tmultiplier\toffset\tsize_value") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "op_indirect") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 7, \"params\": [\"code\", \"reg1\", \"reg2\", \"reg3\", \"multiplier\", \"offset\", \"size_value\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 7, \"types\": [\"u:operand_code\", \"s:input_reg\", \"s:input_reg\", \"s:input_reg\", \"i:number\", \"i:number\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE op_indirect "@n-nonrecursive-relation;op_indirect;/usr/local/src/ddisasm/src/datalog/main.dl [273:7-273:18];")
 )   (STMTS     (TIMER_ON op_indirect "@t-relation-savetime;op_indirect;/usr/local/src/ddisasm/src/datalog/main.dl [273:7-273:18];savetime;"
     (IO op_indirect ((= IO "file") (= attributeNames "code\treg1\treg2\treg3\tmultiplier\toffset\tsize_value") (= auxArity "0") (= name "op_indirect") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 7, \"params\": [\"code\", \"reg1\", \"reg2\", \"reg3\", \"multiplier\", \"offset\", \"size_value\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 7, \"types\": [\"u:operand_code\", \"s:input_reg\", \"s:input_reg\", \"s:input_reg\", \"i:number\", \"i:number\", \"u:unsigned\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE op_indirect_contains_reg
(STMTS     (TIMER_ON op_indirect_contains_reg "@t-nonrecursive-relation;op_indirect_contains_reg;/usr/local/src/ddisasm/src/datalog/main.dl [699:7-699:31];"
(STMTS      (DEBUG 
 "op_indirect_contains_reg(Op,Reg) :- \n   op_indirect(Op,_,RegIn,_,_,_,_),\n   reg_map(RegIn,Reg).\nin file main.dl [702:1-704:24]" 
      (TIMER_ON op_indirect_contains_reg "@t-nonrecursive-rule;op_indirect_contains_reg;/usr/local/src/ddisasm/src/datalog/main.dl [702:1-704:24];op_indirect_contains_reg(Op,Reg) :- \\n   op_indirect(Op,_,RegIn,_,_,_,_),\\n   reg_map(RegIn,Reg).;"
(QUERY
        (IF (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY reg_map)))
         (FOR_IN t0 op_indirect           (FOR t1 reg_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 1)) op_indirect_contains_reg)
))
        )       )
      )
     )
      (DEBUG 
 "op_indirect_contains_reg(Op,Reg) :- \n   op_indirect(Op,_,_,RegIn,_,_,_),\n   reg_map(RegIn,Reg).\nin file main.dl [706:1-708:24]" 
      (TIMER_ON op_indirect_contains_reg "@t-nonrecursive-rule;op_indirect_contains_reg;/usr/local/src/ddisasm/src/datalog/main.dl [706:1-708:24];op_indirect_contains_reg(Op,Reg) :- \\n   op_indirect(Op,_,_,RegIn,_,_,_),\\n   reg_map(RegIn,Reg).;"
(QUERY
        (IF (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY reg_map)))
         (FOR_IN t0 op_indirect           (FOR t1 reg_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 3)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 1)) op_indirect_contains_reg)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE op_indirect_mapped
(STMTS (STMTS     (TIMER_ON op_indirect_mapped "@t-nonrecursive-relation;op_indirect_mapped;/usr/local/src/ddisasm/src/datalog/main.dl [710:7-710:25];"
(STMTS      (DEBUG 
 "op_indirect_mapped(Op,Reg1,Reg2,Reg3,Mult,Offset,Size) :- \n   op_indirect(Op,RegIn1,RegIn2,RegIn3,Mult,Offset,Size),\n   reg_map_nullable(RegIn1,Reg1),\n   reg_map_nullable(RegIn2,Reg2),\n   reg_map_nullable(RegIn3,Reg3).\nin file main.dl [712:1-716:35]" 
      (TIMER_ON op_indirect_mapped "@t-nonrecursive-rule;op_indirect_mapped;/usr/local/src/ddisasm/src/datalog/main.dl [712:1-716:35];op_indirect_mapped(Op,Reg1,Reg2,Reg3,Mult,Offset,Size) :- \\n   op_indirect(Op,RegIn1,RegIn2,RegIn3,Mult,Offset,Size),\\n   reg_map_nullable(RegIn1,Reg1),\\n   reg_map_nullable(RegIn2,Reg2),\\n   reg_map_nullable(RegIn3,Reg3).;"
(QUERY
        (IF (AND (NOT (ISEMPTY reg_map_nullable)) (NOT (ISEMPTY op_indirect)))
         (FOR_IN t0 op_indirect           (FOR t1 reg_map_nullable (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (FOR t2 reg_map_nullable (INDEX  (= (TUPLE t2 0) (TUPLE t0 2)))
            (FOR t3 reg_map_nullable (INDEX  (= (TUPLE t3 0) (TUPLE t0 3)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 1) (TUPLE t3 1) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) op_indirect_mapped)
))))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR reg_map_nullable)
 ) )  )
  (SUBROUTINE op_regdirect
(STMTS (STMTS (STMTS     (TIMER_ON op_regdirect "@t-relation-loadtime;op_regdirect;/usr/local/src/ddisasm/src/datalog/main.dl [260:7-260:19];loadtime;"
     (IO op_regdirect ((= IO "file") (= attributeNames "code\tregister_name") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "op_regdirect") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"code\", \"register_name\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:operand_code\", \"s:input_reg\"]}}")))
    )
 ) (STMTS     (LOGSIZE op_regdirect "@n-nonrecursive-relation;op_regdirect;/usr/local/src/ddisasm/src/datalog/main.dl [260:7-260:19];")
 )   )  )  )
  (SUBROUTINE op_regdirect_contains_reg
(STMTS (STMTS     (TIMER_ON op_regdirect_contains_reg "@t-nonrecursive-relation;op_regdirect_contains_reg;/usr/local/src/ddisasm/src/datalog/main.dl [718:7-718:32];"
(STMTS      (DEBUG 
 "op_regdirect_contains_reg(Op,Reg) :- \n   op_regdirect(Op,RegIn),\n   reg_map(RegIn,Reg).\nin file main.dl [720:1-726:24]" 
      (TIMER_ON op_regdirect_contains_reg "@t-nonrecursive-rule;op_regdirect_contains_reg;/usr/local/src/ddisasm/src/datalog/main.dl [720:1-726:24];op_regdirect_contains_reg(Op,Reg) :- \\n   op_regdirect(Op,RegIn),\\n   reg_map(RegIn,Reg).;"
(QUERY
        (IF (AND (NOT (ISEMPTY op_regdirect)) (NOT (ISEMPTY reg_map)))
         (FOR_IN t0 op_regdirect           (FOR t1 reg_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 1)) op_regdirect_contains_reg)
))
        )       )
      )
     )
      (DEBUG 
 "op_regdirect_contains_reg(Op,Reg) :- \n   op_register_bitfield(Op,_,RegIn),\n   reg_map(RegIn,Reg).\nin file main.dl [720:1-726:24]" 
      (TIMER_ON op_regdirect_contains_reg "@t-nonrecursive-rule;op_regdirect_contains_reg;/usr/local/src/ddisasm/src/datalog/main.dl [720:1-726:24];op_regdirect_contains_reg(Op,Reg) :- \\n   op_register_bitfield(Op,_,RegIn),\\n   reg_map(RegIn,Reg).;"
(QUERY
        (IF (AND (NOT (ISEMPTY op_register_bitfield)) (NOT (ISEMPTY reg_map)))
         (FOR_IN t0 op_register_bitfield           (FOR t1 reg_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 1)) op_regdirect_contains_reg)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR op_register_bitfield)
 ) )  )
  (SUBROUTINE op_register_bitfield
(STMTS (STMTS (STMTS     (TIMER_ON op_register_bitfield "@t-relation-loadtime;op_register_bitfield;/usr/local/src/ddisasm/src/datalog/main.dl [253:7-253:27];loadtime;"
     (IO op_register_bitfield ((= IO "file") (= attributeNames "code\tIndex\tregister_name") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "op_register_bitfield") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"code\", \"Index\", \"register_name\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:operand_code\", \"u:unsigned\", \"s:input_reg\"]}}")))
    )
 ) (STMTS     (LOGSIZE op_register_bitfield "@n-nonrecursive-relation;op_register_bitfield;/usr/local/src/ddisasm/src/datalog/main.dl [253:7-253:27];")
 )   )  )  )
  (SUBROUTINE op_shifted_w_reg
(STMTS (STMTS (STMTS     (TIMER_ON op_shifted_w_reg "@t-relation-loadtime;op_shifted_w_reg;/usr/local/src/ddisasm/src/datalog/main.dl [291:7-291:23];loadtime;"
     (IO op_shifted_w_reg ((= IO "file") (= attributeNames "EA\tIndex\tReg\tType") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "op_shifted_w_reg") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"EA\", \"Index\", \"Reg\", \"Type\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"u:address\", \"u:operand_index\", \"s:input_reg\", \"s:symbol\"]}}")))
    )
 ) (STMTS     (LOGSIZE op_shifted_w_reg "@n-nonrecursive-relation;op_shifted_w_reg;/usr/local/src/ddisasm/src/datalog/main.dl [291:7-291:23];")
 )   )  )  )
  (SUBROUTINE option
(STMTS (STMTS (STMTS     (TIMER_ON option "@t-relation-loadtime;option;/usr/local/src/ddisasm/src/datalog/main.dl [208:7-208:13];loadtime;"
     (IO option ((= IO "file") (= attributeNames "Option") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "option") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"Option\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"s:symbol\"]}}")))
    )
 ) (STMTS     (LOGSIZE option "@n-nonrecursive-relation;option;/usr/local/src/ddisasm/src/datalog/main.dl [208:7-208:13];")
 )   )  )  )
  (SUBROUTINE overlapping_instruction
(STMTS     (TIMER_ON overlapping_instruction "@t-nonrecursive-relation;overlapping_instruction;code_inference.dl [93:7-93:30];"
(STMTS      (DEBUG 
 "overlapping_instruction(Block2,Block) :- \n   block_overlap(Block,\"code\",_,Block2,\"code\",_),\n   instruction(Block,Size,\"LOCK\",OpCode,Op1,Op2,Op3,Op4,_,_),\n   Block2 = (Block+1),\n   instruction(Block2,Size2,\"\",OpCode,Op1,Op2,Op3,Op4,_,_),\n   (Block2-Block) = (Size-Size2).\nin file code_inference.dl [1140:1-1147:35]" 
      (TIMER_ON overlapping_instruction "@t-nonrecursive-rule;overlapping_instruction;code_inference.dl [1140:1-1147:35];overlapping_instruction(Block2,Block) :- \\n   block_overlap(Block,\\\"code\\\",_,Block2,\\\"code\\\",_),\\n   instruction(Block,Size,\\\"LOCK\\\",OpCode,Op1,Op2,Op3,Op4,_,_),\\n   Block2 = (Block+1),\\n   instruction(Block2,Size2,\\\"\\\",OpCode,Op1,Op2,Op3,Op4,_,_),\\n   (Block2-Block) = (Size-Size2).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY block_overlap)))
         (FOR t0 block_overlap (INDEX  (= (TUPLE t0 1) (STRING "code")) (= (TUPLE t0 4) (STRING "code")))
          (IF (CONSTRAINT = (TUPLE t0 3)  (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)))
           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (STRING "LOCK")))
            (INDEXED_IF_EXISTS t2 instruction (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)) (= (TUPLE t2 2) (STRING "")) (= (TUPLE t2 3) (TUPLE t1 3)) (= (TUPLE t2 4) (TUPLE t1 4)) (= (TUPLE t2 5) (TUPLE t1 5)) (= (TUPLE t2 6) (TUPLE t1 6)) (= (TUPLE t2 7) (TUPLE t1 7))) (CONSTRAINT = (INTRINSIC - (TUPLE t0 3) (TUPLE t0 0))  (INTRINSIC - (TUPLE t1 1) (TUPLE t2 1)))
             (INSERT ((TUPLE t0 3) (TUPLE t0 0)) overlapping_instruction)
))          ))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE padding
(STMTS (STMTS (STMTS     (TIMER_ON padding "@t-nonrecursive-relation;padding;code_inference_postprocess.dl [177:7-177:14];"
(STMTS      (DEBUG 
 "padding(EA,Size) :- \n   nop_block(EA),\n   block_information(EA,Size,_,_).\nin file code_inference_postprocess.dl [181:1-183:36]" 
      (TIMER_ON padding "@t-nonrecursive-rule;padding;code_inference_postprocess.dl [181:1-183:36];padding(EA,Size) :- \\n   nop_block(EA),\\n   block_information(EA,Size,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY nop_block)) (NOT (ISEMPTY block_information)))
         (FOR_IN t0 nop_block           (FOR t1 block_information (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 1)) padding)
))
        )       )
      )
     )
      (DEBUG 
 "padding(EA,(NonNop-EA)) :- \n   after_end(NonNop,End),\n   !is_padding(NonNop),\n   next(End,EA),\n   (NonNop-EA) > 0.\nin file code_inference_postprocess.dl [186:1-192:14]" 
      (TIMER_ON padding "@t-nonrecursive-rule;padding;code_inference_postprocess.dl [186:1-192:14];padding(EA,(NonNop-EA)) :- \\n   after_end(NonNop,End),\\n   !is_padding(NonNop),\\n   next(End,EA),\\n   (NonNop-EA) > 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY after_end)) (NOT (ISEMPTY next)))
         (FOR_IN t0 after_end           (IF (NOT (EXISTS is_padding ((TUPLE t0 0))))
           (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (CONSTRAINT > (INTRINSIC - (TUPLE t0 0) (TUPLE t1 1))  (UNSIGNED 0))
             (INSERT ((TUPLE t1 1) (INTRINSIC - (TUPLE t0 0) (TUPLE t1 1))) padding)
            ))          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON padding "@t-relation-savetime;padding;code_inference_postprocess.dl [177:7-177:14];savetime;"
     (IO padding ((= IO "file") (= attributeNames "EA\tSize") (= auxArity "0") (= name "padding") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"EA\", \"Size\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"u:unsigned\"]}}")))
    )
 ) ) (STMTS     (CLEAR after_end)
     (CLEAR is_padding)
 ) )  )
  (SUBROUTINE padding_block_candidate
(STMTS (STMTS     (TIMER_ON padding_block_candidate "@t-nonrecursive-relation;padding_block_candidate;code_inference.dl [451:7-451:30];"
(STMTS      (DEBUG 
 "padding_block_candidate(Start,(Next-Start)) :- \n   nop_in_padding_candidate(EA,Start),\n   next(EA,Next),\n   !nop_in_padding_candidate(Next,Start).\nin file code_inference.dl [453:1-456:43]" 
      (TIMER_ON padding_block_candidate "@t-nonrecursive-rule;padding_block_candidate;code_inference.dl [453:1-456:43];padding_block_candidate(Start,(Next-Start)) :- \\n   nop_in_padding_candidate(EA,Start),\\n   next(EA,Next),\\n   !nop_in_padding_candidate(Next,Start).;"
(QUERY
        (IF (AND (NOT (ISEMPTY nop_in_padding_candidate)) (NOT (ISEMPTY next)))
         (FOR_IN t0 nop_in_padding_candidate           (FOR t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (NOT (EXISTS nop_in_padding_candidate ((TUPLE t1 1) (TUPLE t0 1))))
            (INSERT ((TUPLE t0 1) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 1))) padding_block_candidate)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR nop_in_padding_candidate)
 ) )  )
  (SUBROUTINE padding_block_limit
(STMTS (STMTS     (TIMER_ON padding_block_limit "@t-nonrecursive-relation;padding_block_limit;code_inference.dl [412:7-412:26];"
(STMTS      (DEBUG 
 "padding_block_limit(Start) :- \n   block_limit(Start).\nin file code_inference.dl [414:1-415:24]" 
      (TIMER_ON padding_block_limit "@t-nonrecursive-rule;padding_block_limit;code_inference.dl [414:1-415:24];padding_block_limit(Start) :- \\n   block_limit(Start).;"
(QUERY
        (IF (NOT (ISEMPTY block_limit))
         (FOR_IN t0 block_limit           (INSERT ((TUPLE t0 0)) padding_block_limit)
)
        )       )
      )
     )
      (DEBUG 
 "padding_block_limit(Inst) :- \n   data_block_candidate(Start,_),\n   arch.instruction_at(Start,Inst).\nin file code_inference.dl [417:1-419:37]" 
      (TIMER_ON padding_block_limit "@t-nonrecursive-rule;padding_block_limit;code_inference.dl [417:1-419:37];padding_block_limit(Inst) :- \\n   data_block_candidate(Start,_),\\n   arch.instruction_at(Start,Inst).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_block_candidate)) (NOT (ISEMPTY arch.instruction_at)))
         (FOR_IN t0 data_block_candidate           (FOR t1 arch.instruction_at (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 1)) padding_block_limit)
))
        )       )
      )
     )
      (DEBUG 
 "padding_block_limit(Inst) :- \n   data_block_candidate(Start,Size),\n   arch.instruction_at( _tmp_85,Inst),\n    _tmp_85 = (Start+Size).\nin file code_inference.dl [421:1-423:42]" 
      (TIMER_ON padding_block_limit "@t-nonrecursive-rule;padding_block_limit;code_inference.dl [421:1-423:42];padding_block_limit(Inst) :- \\n   data_block_candidate(Start,Size),\\n   arch.instruction_at( _tmp_85,Inst),\\n    _tmp_85 = (Start+Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_block_candidate)) (NOT (ISEMPTY arch.instruction_at)))
         (FOR_IN t0 data_block_candidate           (FOR t1 arch.instruction_at (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1))))
           (INSERT ((TUPLE t1 1)) padding_block_limit)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR block_limit)
 ) )  )
  (SUBROUTINE pc_load_call
(STMTS     (TIMER_ON pc_load_call "@t-nonrecursive-relation;pc_load_call;/usr/local/src/ddisasm/src/datalog/main.dl [668:7-668:19];"
(STMTS      (DEBUG 
 "pc_load_call(Src,Dest) :- \n   direct_call(Src,Dest),\n   next(Src,Dest),\n   instruction(Dest,_,_,<inlined_Operation_1060>,_,_,_,_,_,_),\n   <inlined_Operation_1060> = \"POP\".\nin file main.dl [671:1-680:43]" 
      (TIMER_ON pc_load_call "@t-nonrecursive-rule;pc_load_call;/usr/local/src/ddisasm/src/datalog/main.dl [671:1-680:43];pc_load_call(Src,Dest) :- \\n   direct_call(Src,Dest),\\n   next(Src,Dest),\\n   instruction(Dest,_,_,<inlined_Operation_1060>,_,_,_,_,_,_),\\n   <inlined_Operation_1060> = \\\"POP\\\".;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY next)))
         (FOR_IN t0 direct_call           (IF (AND (EXISTS instruction ((TUPLE t0 1) UNDEF UNDEF (STRING "POP") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (EXISTS next ((TUPLE t0 0) (TUPLE t0 1))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) pc_load_call)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE pc_relative_call
(STMTS     (TIMER_ON pc_relative_call "@t-nonrecursive-relation;pc_relative_call;/usr/local/src/ddisasm/src/datalog/main.dl [634:7-634:23];"
(STMTS      (DEBUG 
 "pc_relative_call(Src,DataPointer) :- \n   arch.call(Src,_),\n   pc_relative_operand(Src,1,DataPointer).\nin file main.dl [636:1-638:44]" 
      (TIMER_ON pc_relative_call "@t-nonrecursive-rule;pc_relative_call;/usr/local/src/ddisasm/src/datalog/main.dl [636:1-638:44];pc_relative_call(Src,DataPointer) :- \\n   arch.call(Src,_),\\n   pc_relative_operand(Src,1,DataPointer).;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.call)) (NOT (ISEMPTY pc_relative_operand)))
         (FOR_IN t0 arch.call           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 2)) pc_relative_call)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE pc_relative_jump
(STMTS     (TIMER_ON pc_relative_jump "@t-nonrecursive-relation;pc_relative_jump;/usr/local/src/ddisasm/src/datalog/main.dl [563:7-563:23];"
(STMTS      (DEBUG 
 "pc_relative_jump(EA,DataPointer) :- \n   arch.jump(EA),\n   pc_relative_operand(EA,1,DataPointer).\nin file main.dl [565:1-567:43]" 
      (TIMER_ON pc_relative_jump "@t-nonrecursive-rule;pc_relative_jump;/usr/local/src/ddisasm/src/datalog/main.dl [565:1-567:43];pc_relative_jump(EA,DataPointer) :- \\n   arch.jump(EA),\\n   pc_relative_operand(EA,1,DataPointer).;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.jump)) (NOT (ISEMPTY pc_relative_operand)))
         (FOR_IN t0 arch.jump           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t1 2)) pc_relative_jump)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE pc_relative_operand
(STMTS     (TIMER_ON pc_relative_operand "@t-nonrecursive-relation;pc_relative_operand;/usr/local/src/ddisasm/src/datalog/main.dl [460:7-460:26];"
(STMTS      (DEBUG 
 "pc_relative_operand(EA,Index,(Base+as((as((Size-Offset), number)+Addend), unsigned))) :- \n   instruction_displacement_offset(EA,Index,Offset,_),\n   relocation( _tmp_86,\"PC32\",_,Addend,SymbolIndex,_,_),\n   symbol(Base,_,\"SECTION\",_,_,_,_,SymbolIndex,_),\n   instruction(EA,Size,_,_,_,_,_,_,_,_),\n    _tmp_86 = (EA+Offset).\nin file main.dl [471:1-477:62]" 
      (TIMER_ON pc_relative_operand "@t-nonrecursive-rule;pc_relative_operand;/usr/local/src/ddisasm/src/datalog/main.dl [471:1-477:62];pc_relative_operand(EA,Index,(Base+as((as((Size-Offset), number)+Addend), unsigned))) :- \\n   instruction_displacement_offset(EA,Index,Offset,_),\\n   relocation( _tmp_86,\\\"PC32\\\",_,Addend,SymbolIndex,_,_),\\n   symbol(Base,_,\\\"SECTION\\\",_,_,_,_,SymbolIndex,_),\\n   instruction(EA,Size,_,_,_,_,_,_,_,_),\\n    _tmp_86 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction_displacement_offset)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY symbol))) (NOT (ISEMPTY relocation)))
         (FOR_IN t0 instruction_displacement_offset           (FOR t1 relocation (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (= (TUPLE t1 1) (STRING "PC32")))
           (FOR t2 symbol (INDEX  (= (TUPLE t2 2) (STRING "SECTION")) (= (TUPLE t2 7) (TUPLE t1 4)))
            (FOR t3 instruction (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (INTRINSIC + (TUPLE t2 0) (INTRINSIC + (INTRINSIC - (TUPLE t3 1) (TUPLE t0 2)) (TUPLE t1 3)))) pc_relative_operand)
))))
        )       )
      )
     )
      (DEBUG 
 "pc_relative_operand(EA,Index,as((as(EANext, number)+Offset), address)) :- \n   instruction_get_op(EA,Index,Op),\n   op_indirect_mapped(Op,\"NONE\",Reg,\"NONE\",1,Offset,_),\n   Reg = \"RIP\",\n   next(EA,EANext),\n   !instruction_has_relocation(EA,_).\nin file main.dl [462:1-469:39]" 
      (TIMER_ON pc_relative_operand "@t-nonrecursive-rule;pc_relative_operand;/usr/local/src/ddisasm/src/datalog/main.dl [462:1-469:39];pc_relative_operand(EA,Index,as((as(EANext, number)+Offset), address)) :- \\n   instruction_get_op(EA,Index,Op),\\n   op_indirect_mapped(Op,\\\"NONE\\\",Reg,\\\"NONE\\\",1,Offset,_),\\n   Reg = \\\"RIP\\\",\\n   next(EA,EANext),\\n   !instruction_has_relocation(EA,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY next)) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY op_indirect_mapped)))
         (FOR_IN t0 instruction_get_op           (IF (NOT (EXISTS instruction_has_relocation ((TUPLE t0 0) UNDEF)))
           (FOR t1 op_indirect_mapped (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 1) (STRING "NONE")) (= (TUPLE t1 2) (STRING "RIP")) (= (TUPLE t1 3) (STRING "NONE")) (= (TUPLE t1 4) (NUMBER 1)))
            (FOR t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (INTRINSIC + (TUPLE t2 1) (TUPLE t1 5))) pc_relative_operand)
))          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE pe_data_directory
(STMTS (STMTS (STMTS     (TIMER_ON pe_data_directory "@t-relation-loadtime;pe_data_directory;binary/pe/pe_binaries.dl [29:7-29:24];loadtime;"
     (IO pe_data_directory ((= IO "file") (= attributeNames "Type\tAddress\tSize") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "pe_data_directory") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"Type\", \"Address\", \"Size\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:symbol\", \"u:address\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE pe_data_directory "@n-nonrecursive-relation;pe_data_directory;binary/pe/pe_binaries.dl [29:7-29:24];")
 )   )  )  )
  (SUBROUTINE pe_debug_data
(STMTS (STMTS (STMTS     (TIMER_ON pe_debug_data "@t-relation-loadtime;pe_debug_data;binary/pe/pe_binaries.dl [38:7-38:20];loadtime;"
     (IO pe_debug_data ((= IO "file") (= attributeNames "Type\tAddress\tSize") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "pe_debug_data") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"Type\", \"Address\", \"Size\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"s:symbol\", \"u:address\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE pe_debug_data "@n-nonrecursive-relation;pe_debug_data;binary/pe/pe_binaries.dl [38:7-38:20];")
 )   )  )  )
  (SUBROUTINE pe_exception_handler
(STMTS (STMTS (STMTS     (LOGSIZE pe_exception_handler "@n-nonrecursive-relation;pe_exception_handler;exceptions.dl [76:7-76:27];")
 )   (STMTS     (TIMER_ON pe_exception_handler "@t-relation-savetime;pe_exception_handler;exceptions.dl [76:7-76:27];savetime;"
     (IO pe_exception_handler ((= IO "file") (= attributeNames "EA") (= auxArity "0") (= name "pe_exception_handler") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"EA\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE pe_export_entry
(STMTS (STMTS (STMTS     (TIMER_ON pe_export_entry "@t-relation-loadtime;pe_export_entry;binary/pe/pe_binaries.dl [35:7-35:22];loadtime;"
     (IO pe_export_entry ((= IO "file") (= attributeNames "Address\tOrdinal\tName") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "pe_export_entry") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"Address\", \"Ordinal\", \"Name\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:address\", \"i:number\", \"s:symbol\"]}}")))
    )
 ) (STMTS     (LOGSIZE pe_export_entry "@n-nonrecursive-relation;pe_export_entry;binary/pe/pe_binaries.dl [35:7-35:22];")
 )   )  )  )
  (SUBROUTINE pe_import_entry
(STMTS (STMTS (STMTS     (TIMER_ON pe_import_entry "@t-relation-loadtime;pe_import_entry;binary/pe/pe_binaries.dl [32:7-32:22];loadtime;"
     (IO pe_import_entry ((= IO "file") (= attributeNames "Address\tOrdinal\tFunction\tLibrary") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "pe_import_entry") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"Address\", \"Ordinal\", \"Function\", \"Library\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"u:address\", \"i:number\", \"s:symbol\", \"s:symbol\"]}}")))
    )
 ) (STMTS     (LOGSIZE pe_import_entry "@n-nonrecursive-relation;pe_import_entry;binary/pe/pe_binaries.dl [32:7-32:22];")
 )   )  )  )
  (SUBROUTINE pe_load_config
(STMTS (STMTS (STMTS     (TIMER_ON pe_load_config "@t-relation-loadtime;pe_load_config;binary/pe/pe_binaries.dl [41:7-41:21];loadtime;"
     (IO pe_load_config ((= IO "file") (= attributeNames "Name\tValue") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "pe_load_config") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"Name\", \"Value\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:symbol\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE pe_load_config "@n-nonrecursive-relation;pe_load_config;binary/pe/pe_binaries.dl [41:7-41:21];")
 )   (STMTS     (TIMER_ON pe_load_config "@t-relation-savetime;pe_load_config;binary/pe/pe_binaries.dl [41:7-41:21];savetime;"
     (IO pe_load_config ((= IO "file") (= attributeNames "Name\tValue") (= auxArity "0") (= name "pe_load_config") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"Name\", \"Value\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:symbol\", \"u:unsigned\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE pe_relocation_size
(STMTS     (TIMER_ON pe_relocation_size "@t-nonrecursive-relation;pe_relocation_size;relocations.dl [27:7-27:25];"
(STMTS      (DEBUG 
 "pe_relocation_size(\"LOW\",16).\nin file relocations.dl [29:1-29:31]" 
      (TIMER_ON pe_relocation_size "@t-nonrecursive-rule;pe_relocation_size;relocations.dl [29:1-29:31];pe_relocation_size(\\\"LOW\\\",16).;"
(QUERY
        (INSERT ((STRING "LOW") (UNSIGNED 16)) pe_relocation_size)
       )
      )
     )
      (DEBUG 
 "pe_relocation_size(\"HIGH\",16).\nin file relocations.dl [30:1-30:32]" 
      (TIMER_ON pe_relocation_size "@t-nonrecursive-rule;pe_relocation_size;relocations.dl [30:1-30:32];pe_relocation_size(\\\"HIGH\\\",16).;"
(QUERY
        (INSERT ((STRING "HIGH") (UNSIGNED 16)) pe_relocation_size)
       )
      )
     )
      (DEBUG 
 "pe_relocation_size(\"HIGHADJ\",16).\nin file relocations.dl [31:1-31:35]" 
      (TIMER_ON pe_relocation_size "@t-nonrecursive-rule;pe_relocation_size;relocations.dl [31:1-31:35];pe_relocation_size(\\\"HIGHADJ\\\",16).;"
(QUERY
        (INSERT ((STRING "HIGHADJ") (UNSIGNED 16)) pe_relocation_size)
       )
      )
     )
      (DEBUG 
 "pe_relocation_size(\"HIGHLOW\",32).\nin file relocations.dl [32:1-32:35]" 
      (TIMER_ON pe_relocation_size "@t-nonrecursive-rule;pe_relocation_size;relocations.dl [32:1-32:35];pe_relocation_size(\\\"HIGHLOW\\\",32).;"
(QUERY
        (INSERT ((STRING "HIGHLOW") (UNSIGNED 32)) pe_relocation_size)
       )
      )
     )
      (DEBUG 
 "pe_relocation_size(\"DIR64\",64).\nin file relocations.dl [33:1-33:33]" 
      (TIMER_ON pe_relocation_size "@t-nonrecursive-rule;pe_relocation_size;relocations.dl [33:1-33:33];pe_relocation_size(\\\"DIR64\\\",64).;"
(QUERY
        (INSERT ((STRING "DIR64") (UNSIGNED 64)) pe_relocation_size)
       )
      )
     )
      (DEBUG 
 "pe_relocation_size(\"ABSOLUTE\",0).\nin file relocations.dl [34:1-34:35]" 
      (TIMER_ON pe_relocation_size "@t-nonrecursive-rule;pe_relocation_size;relocations.dl [34:1-34:35];pe_relocation_size(\\\"ABSOLUTE\\\",0).;"
(QUERY
        (INSERT ((STRING "ABSOLUTE") (UNSIGNED 0)) pe_relocation_size)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE plt_block
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON plt_block "@t-nonrecursive-relation;plt_block;/usr/local/src/ddisasm/src/datalog/main.dl [883:7-883:16];"
(STMTS      (DEBUG 
 "plt_block(Block,Function) :- \n   plt_entry(EA,Function),\n   code_in_block(EA,Block).\nin file elf_binaries.dl [146:1-148:29]" 
      (TIMER_ON plt_block "@t-nonrecursive-rule;plt_block;binary/elf/elf_binaries.dl [146:1-148:29];plt_block(Block,Function) :- \\n   plt_entry(EA,Function),\\n   code_in_block(EA,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY plt_entry)) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 plt_entry           (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 1) (TUPLE t0 1)) plt_block)
))
        )       )
      )
     )
      (DEBUG 
 "plt_block(EA,Function) :- \n   binary_format(\"PE\"),\n   pc_relative_jump(EA,Got_entry),\n   unconditional_jump(EA),\n   pe_import_entry(Got_entry,_,Function,_),\n   code_in_block(EA,EA).\nin file symbolization.dl [39:1-44:26]" 
      (TIMER_ON plt_block "@t-nonrecursive-rule;plt_block;binary/pe/symbolization.dl [39:1-44:26];plt_block(EA,Function) :- \\n   binary_format(\\\"PE\\\"),\\n   pc_relative_jump(EA,Got_entry),\\n   unconditional_jump(EA),\\n   pe_import_entry(Got_entry,_,Function,_),\\n   code_in_block(EA,EA).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY pc_relative_jump)) (NOT (ISEMPTY pe_import_entry))) (NOT (ISEMPTY unconditional_jump))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY code_in_block))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 pc_relative_jump           (IF (AND (EXISTS code_in_block ((TUPLE t0 0) (TUPLE t0 0))) (EXISTS unconditional_jump ((TUPLE t0 0))))
           (FOR t1 pe_import_entry (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 2)) plt_block)
)          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 plt_block       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_plt_block)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_plt_block "@t-recursive-relation;plt_block;/usr/local/src/ddisasm/src/datalog/main.dl [883:7-883:16];"
(STMTS       (DEBUG 
 "plt_block(Block,Function) :- \n   plt_block(NextBlock,Function),\n   must_fallthrough(EA,NextBlock),\n   code_in_block(EA,Block),\n   plt_section(SecName),\n   loaded_section(Beg,End,SecName),\n   Block >= Beg,\n   EA < End.\nin file elf_binaries.dl [152:1-159:14]" 
       (TIMER_ON @new_plt_block "@t-recursive-rule;plt_block;0;binary/elf/elf_binaries.dl [152:1-159:14];plt_block(Block,Function) :- \\n   plt_block(NextBlock,Function),\\n   must_fallthrough(EA,NextBlock),\\n   code_in_block(EA,Block),\\n   plt_section(SecName),\\n   loaded_section(Beg,End,SecName),\\n   Block >= Beg,\\n   EA < End.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY @delta_plt_block))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY plt_section))) (NOT (ISEMPTY must_fallthrough)))
          (FOR_IN t0 @delta_plt_block            (FOR t1 must_fallthrough (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (IF (NOT (EXISTS plt_block ((TUPLE t2 1) (TUPLE t0 1))))
              (FOR_IN t3 plt_section                (INDEXED_IF_EXISTS t4 loaded_section (INDEX  (= (TUPLE t4 2) (TUPLE t3 0))) (AND (AND (CONSTRAINT != (TUPLE t1 0)  (TUPLE t4 1)) (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t4 1))) (CONSTRAINT >= (TUPLE t2 1)  (TUPLE t4 0)))
                (INSERT ((TUPLE t2 1) (TUPLE t0 1)) @new_plt_block)
))
             ))))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_plt_block "@t-recursive-relation;plt_block;/usr/local/src/ddisasm/src/datalog/main.dl [883:7-883:16];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_plt_block))
 ) (STMTS      (TIMER_ON @new_plt_block "@c-recursive-relation;plt_block;/usr/local/src/ddisasm/src/datalog/main.dl [883:7-883:16];"
(STMTS (QUERY
       (FOR_IN t0 @new_plt_block         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) plt_block)
)
      )
       (SWAP @delta_plt_block @new_plt_block)
       (CLEAR @new_plt_block)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_plt_block)
     (CLEAR @new_plt_block)
 ) )  (STMTS     (TIMER_ON plt_block "@t-relation-savetime;plt_block;/usr/local/src/ddisasm/src/datalog/main.dl [883:7-883:16];savetime;"
     (IO plt_block ((= IO "file") (= attributeNames "block\tfunction") (= auxArity "0") (= name "plt_block") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"block\", \"function\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"s:symbol\"]}}")))
    )
 ) ) (STMTS     (CLEAR pc_relative_jump)
     (CLEAR plt_section)
 ) )  )
  (SUBROUTINE plt_entry
(STMTS (STMTS     (TIMER_ON plt_entry "@t-nonrecursive-relation;plt_entry;binary/elf/elf_binaries.dl [126:7-126:16];"
(STMTS      (DEBUG 
 "plt_entry(EA,Function) :- \n   plt_section(SecName),\n   loaded_section(Beg,End,SecName),\n   EA >= Beg,\n   EA < End,\n   pc_relative_jump(EA,Got_entry),\n   relocation(Got_entry,_,Function,_,_,_,_),\n   Function != \"\".\nin file elf_binaries.dl [128:1-135:20]" 
      (TIMER_ON plt_entry "@t-nonrecursive-rule;plt_entry;binary/elf/elf_binaries.dl [128:1-135:20];plt_entry(EA,Function) :- \\n   plt_section(SecName),\\n   loaded_section(Beg,End,SecName),\\n   EA >= Beg,\\n   EA < End,\\n   pc_relative_jump(EA,Got_entry),\\n   relocation(Got_entry,_,Function,_,_,_,_),\\n   Function != \\\"\\\".;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY plt_section)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY pc_relative_jump))) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 plt_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR_IN t2 pc_relative_jump             (IF (AND (CONSTRAINT < (TUPLE t2 0)  (TUPLE t1 1)) (CONSTRAINT >= (TUPLE t2 0)  (TUPLE t1 0)))
             (FOR t3 relocation (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
              (IF (CONSTRAINT != (TUPLE t3 2)  (STRING ""))
               (INSERT ((TUPLE t2 0) (TUPLE t3 2)) plt_entry)
              ))            ))
))
        )       )
      )
     )
      (DEBUG 
 "plt_entry(EA,Name) :- \n   plt_section(SecName),\n   loaded_section(Beg,End,SecName),\n   EA >= Beg,\n   EA < End,\n   pc_relative_jump(EA,Got_entry),\n   relocation(Got_entry,\"IRELATIVE\",\"\",Dest,_,_,_),\n   best_ifunc_symbol( _tmp_87,Name),\n    _tmp_87 = as(Dest, address).\nin file elf_binaries.dl [137:1-144:46]" 
      (TIMER_ON plt_entry "@t-nonrecursive-rule;plt_entry;binary/elf/elf_binaries.dl [137:1-144:46];plt_entry(EA,Name) :- \\n   plt_section(SecName),\\n   loaded_section(Beg,End,SecName),\\n   EA >= Beg,\\n   EA < End,\\n   pc_relative_jump(EA,Got_entry),\\n   relocation(Got_entry,\\\"IRELATIVE\\\",\\\"\\\",Dest,_,_,_),\\n   best_ifunc_symbol( _tmp_87,Name),\\n    _tmp_87 = as(Dest, address).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY best_ifunc_symbol)) (NOT (ISEMPTY plt_section))) (NOT (ISEMPTY pc_relative_jump))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY loaded_section)))
         (FOR_IN t0 plt_section           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR_IN t2 pc_relative_jump             (IF (AND (CONSTRAINT < (TUPLE t2 0)  (TUPLE t1 1)) (CONSTRAINT >= (TUPLE t2 0)  (TUPLE t1 0)))
             (FOR t3 relocation (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (= (TUPLE t3 1) (STRING "IRELATIVE")) (= (TUPLE t3 2) (STRING "")))
              (FOR t4 best_ifunc_symbol (INDEX  (= (TUPLE t4 0) (TUPLE t3 3)))
               (INSERT ((TUPLE t2 0) (TUPLE t4 1)) plt_entry)
))            ))
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR best_ifunc_symbol)
 ) )  )
  (SUBROUTINE plt_section
(STMTS     (TIMER_ON plt_section "@t-nonrecursive-relation;plt_section;binary/elf/elf_binaries.dl [99:7-99:18];"
(STMTS      (DEBUG 
 "plt_section(\".plt\").\nin file elf_binaries.dl [101:1-101:21]" 
      (TIMER_ON plt_section "@t-nonrecursive-rule;plt_section;binary/elf/elf_binaries.dl [101:1-101:21];plt_section(\\\".plt\\\").;"
(QUERY
        (INSERT ((STRING ".plt")) plt_section)
       )
      )
     )
      (DEBUG 
 "plt_section(\".plt.got\").\nin file elf_binaries.dl [102:1-102:25]" 
      (TIMER_ON plt_section "@t-nonrecursive-rule;plt_section;binary/elf/elf_binaries.dl [102:1-102:25];plt_section(\\\".plt.got\\\").;"
(QUERY
        (INSERT ((STRING ".plt.got")) plt_section)
       )
      )
     )
      (DEBUG 
 "plt_section(\".plt.sec\").\nin file elf_binaries.dl [103:1-103:25]" 
      (TIMER_ON plt_section "@t-nonrecursive-rule;plt_section;binary/elf/elf_binaries.dl [103:1-103:25];plt_section(\\\".plt.sec\\\").;"
(QUERY
        (INSERT ((STRING ".plt.sec")) plt_section)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE pointer_to_external_symbol
(STMTS (STMTS     (TIMER_ON pointer_to_external_symbol "@t-nonrecursive-relation;pointer_to_external_symbol;cfg.dl [187:7-187:33];"
(STMTS      (DEBUG 
 "pointer_to_external_symbol(DataPointer,Symbol) :- \n   symbolic_expr(DataPointer,_,Symbol,0),\n   !inferred_symbol(_,Symbol,_,_,_,_),\n   !defined_symbol(_,_,_,_,_,_,_,_,Symbol).\nin file cfg.dl [189:1-192:45]" 
      (TIMER_ON pointer_to_external_symbol "@t-nonrecursive-rule;pointer_to_external_symbol;cfg.dl [189:1-192:45];pointer_to_external_symbol(DataPointer,Symbol) :- \\n   symbolic_expr(DataPointer,_,Symbol,0),\\n   !inferred_symbol(_,Symbol,_,_,_,_),\\n   !defined_symbol(_,_,_,_,_,_,_,_,Symbol).;"
(QUERY
        (IF (NOT (ISEMPTY symbolic_expr))
         (FOR t0 symbolic_expr (INDEX  (= (TUPLE t0 3) (NUMBER 0)))
          (IF (AND (NOT (EXISTS inferred_symbol (UNDEF (TUPLE t0 2) UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS defined_symbol (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (TUPLE t0 2)))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 2)) pointer_to_external_symbol)
          ))        )       )
      )
     )
      (DEBUG 
 "pointer_to_external_symbol(DataPointer,Symbol) :- \n   pe_import_entry(DataPointer,_,Symbol,_).\nin file cfg.dl [196:1-197:45]" 
      (TIMER_ON pointer_to_external_symbol "@t-nonrecursive-rule;pointer_to_external_symbol;cfg.dl [196:1-197:45];pointer_to_external_symbol(DataPointer,Symbol) :- \\n   pe_import_entry(DataPointer,_,Symbol,_).;"
(QUERY
        (IF (NOT (ISEMPTY pe_import_entry))
         (FOR_IN t0 pe_import_entry           (INSERT ((TUPLE t0 0) (TUPLE t0 2)) pointer_to_external_symbol)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR pe_import_entry)
     (CLEAR symbolic_expr)
 ) )  )
  (SUBROUTINE possible_rva_operand
(STMTS     (TIMER_ON possible_rva_operand "@t-nonrecursive-relation;possible_rva_operand;binary/pe/symbolization.dl [74:7-74:27];"
(STMTS      (DEBUG 
 "possible_rva_operand(EA,Op_index,as(Value, address)) :- \n   instruction_get_op(EA,Op_index,Op),\n   op_indirect(Op,_,_,_,_,Value,_),\n   Value >= 0,\n   base_address(ImageBase),\n   loaded_section(Begin,End,_),\n   (ImageBase+as(Value, address)) >= Begin,\n   (ImageBase+as(Value, address)) < End.\nin file symbolization.dl [76:1-83:29]" 
      (TIMER_ON possible_rva_operand "@t-nonrecursive-rule;possible_rva_operand;binary/pe/symbolization.dl [76:1-83:29];possible_rva_operand(EA,Op_index,as(Value, address)) :- \\n   instruction_get_op(EA,Op_index,Op),\\n   op_indirect(Op,_,_,_,_,Value,_),\\n   Value >= 0,\\n   base_address(ImageBase),\\n   loaded_section(Begin,End,_),\\n   (ImageBase+as(Value, address)) >= Begin,\\n   (ImageBase+as(Value, address)) < End.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction_get_op)) (NOT (ISEMPTY loaded_section))) (NOT (ISEMPTY base_address))) (NOT (ISEMPTY op_indirect)))
         (FOR_IN t0 instruction_get_op           (FOR t1 op_indirect (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (<= (NUMBER 0) (TUPLE t1 5) ))
           (FOR_IN t2 base_address             (IF_EXISTS t3 loaded_section (AND (CONSTRAINT >= (INTRINSIC + (TUPLE t2 0) (TUPLE t1 5))  (TUPLE t3 0)) (CONSTRAINT < (INTRINSIC + (TUPLE t2 0) (TUPLE t1 5))  (TUPLE t3 1))) 
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 5)) possible_rva_operand)
))
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE preferred_data_access
(STMTS (STMTS     (TIMER_ON preferred_data_access "@t-nonrecursive-relation;preferred_data_access;data_access_analysis.dl [184:7-184:28];"
(STMTS      (DEBUG 
 "preferred_data_access(EA,Size,EA) :- \n   data_access_pattern(EA,Size,0,_),\n   @functor_data_valid(EA,1) = 1.\nin file data_access_analysis.dl [512:1-514:21]" 
      (TIMER_ON preferred_data_access "@t-nonrecursive-rule;preferred_data_access;data_access_analysis.dl [512:1-514:21];preferred_data_access(EA,Size,EA) :- \\n   data_access_pattern(EA,Size,0,_),\\n   @functor_data_valid(EA,1) = 1.;"
(QUERY
        (IF (NOT (ISEMPTY data_access_pattern))
         (FOR t0 data_access_pattern (INDEX  (= (TUPLE t0 2) (NUMBER 0)))
          (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 1)))  (UNSIGNED 1))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0)) preferred_data_access)
          ))        )       )
      )
     )
      (DEBUG 
 "preferred_data_access(@generator_0,Size,EA_access) :- \n   data_access_pattern_non_zero(EA_access,Size,Mult,_),\n   @functor_data_valid(EA_access,1) = 1,\n   next_dyssynchronous_data_access(EA_access,Next_access),\n   data_limit_after_access(EA_access,Next_limit),\n   @generator_0 = range(EA_access,min(Next_access,Next_limit),Mult).\nin file data_access_analysis.dl [520:1-531:43]" 
      (TIMER_ON preferred_data_access "@t-nonrecursive-rule;preferred_data_access;data_access_analysis.dl [520:1-531:43];preferred_data_access(@generator_0,Size,EA_access) :- \\n   data_access_pattern_non_zero(EA_access,Size,Mult,_),\\n   @functor_data_valid(EA_access,1) = 1,\\n   next_dyssynchronous_data_access(EA_access,Next_access),\\n   data_limit_after_access(EA_access,Next_limit),\\n   @generator_0 = range(EA_access,min(Next_access,Next_limit),Mult).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_limit_after_access)) (NOT (ISEMPTY data_access_pattern_non_zero))) (NOT (ISEMPTY next_dyssynchronous_data_access)))
         (FOR_IN t0 data_access_pattern_non_zero           (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 1)))  (UNSIGNED 1))
           (FOR t1 next_dyssynchronous_data_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 data_limit_after_access (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (INTRINSIC (URANGE (TUPLE t0 0) (INTRINSIC min (TUPLE t1 1) (TUPLE t2 1)) (TUPLE t0 2)) t3)
))          ))
        )       )
      )
     )
      (DEBUG 
 "preferred_data_access(@generator_0,Size,EA_access) :- \n   data_access_pattern_non_zero(EA_access,Size,Mult,_),\n   @functor_data_valid(EA_access,1) = 1,\n   !next_dyssynchronous_data_access(EA_access,_),\n   data_limit_after_access(EA_access,Next_limit),\n   @generator_0 = range(EA_access,Next_limit,Mult).\nin file data_access_analysis.dl [520:1-531:43]" 
      (TIMER_ON preferred_data_access "@t-nonrecursive-rule;preferred_data_access;data_access_analysis.dl [520:1-531:43];preferred_data_access(@generator_0,Size,EA_access) :- \\n   data_access_pattern_non_zero(EA_access,Size,Mult,_),\\n   @functor_data_valid(EA_access,1) = 1,\\n   !next_dyssynchronous_data_access(EA_access,_),\\n   data_limit_after_access(EA_access,Next_limit),\\n   @generator_0 = range(EA_access,Next_limit,Mult).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_access_pattern_non_zero)) (NOT (ISEMPTY data_limit_after_access)))
         (FOR_IN t0 data_access_pattern_non_zero           (IF (AND (NOT (EXISTS next_dyssynchronous_data_access ((TUPLE t0 0) UNDEF))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 1)))  (UNSIGNED 1)))
           (FOR t1 data_limit_after_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (INTRINSIC (URANGE (TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 2)) t2)
)          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR data_access_pattern_non_zero)
     (CLEAR data_limit_after_access)
     (CLEAR next_dyssynchronous_data_access)
 ) )  )
  (SUBROUTINE refined_block
(STMTS (STMTS (STMTS     (TIMER_ON refined_block "@t-nonrecursive-relation;refined_block;code_inference_postprocess.dl [35:7-35:20];"
(STMTS      (DEBUG 
 "refined_block(Block) :- \n   split_block(Block),\n   !block_needs_merging(Block).\nin file code_inference_postprocess.dl [121:1-123:33]" 
      (TIMER_ON refined_block "@t-nonrecursive-rule;refined_block;code_inference_postprocess.dl [121:1-123:33];refined_block(Block) :- \\n   split_block(Block),\\n   !block_needs_merging(Block).;"
(QUERY
        (IF (NOT (ISEMPTY split_block))
         (FOR_IN t0 split_block           (IF (NOT (EXISTS block_needs_merging ((TUPLE t0 0))))
           (INSERT ((TUPLE t0 0)) refined_block)
          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON refined_block "@t-relation-savetime;refined_block;code_inference_postprocess.dl [35:7-35:20];savetime;"
     (IO refined_block ((= IO "file") (= attributeNames "block") (= auxArity "0") (= name "refined_block") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 1, \"params\": [\"block\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 1, \"types\": [\"u:address\"]}}")))
    )
 ) ) (STMTS     (CLEAR split_block)
 ) )  )
  (SUBROUTINE refined_block_last_instruction
(STMTS     (TIMER_ON refined_block_last_instruction "@t-nonrecursive-relation;refined_block_last_instruction;code_inference_postprocess.dl [44:7-44:37];"
(STMTS      (DEBUG 
 "refined_block_last_instruction(Block,EA) :- \n   code_in_refined_block(EA,Block),\n   next(EA,Next),\n   !code_in_refined_block(Next,Block).\nin file code_inference_postprocess.dl [138:1-141:40]" 
      (TIMER_ON refined_block_last_instruction "@t-nonrecursive-rule;refined_block_last_instruction;code_inference_postprocess.dl [138:1-141:40];refined_block_last_instruction(Block,EA) :- \\n   code_in_refined_block(EA,Block),\\n   next(EA,Next),\\n   !code_in_refined_block(Next,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY code_in_refined_block)) (NOT (ISEMPTY next)))
         (FOR_IN t0 code_in_refined_block           (INDEXED_IF_EXISTS t1 next (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (NOT (EXISTS code_in_refined_block ((TUPLE t1 1) (TUPLE t0 1))))
           (INSERT ((TUPLE t0 1) (TUPLE t0 0)) refined_block_last_instruction)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reg_call
(STMTS     (TIMER_ON reg_call "@t-nonrecursive-relation;reg_call;/usr/local/src/ddisasm/src/datalog/main.dl [645:7-645:15];"
(STMTS      (DEBUG 
 "reg_call(EA,Reg) :- \n   arch.call(EA,TargetOpIndex),\n   instruction_get_op(EA,TargetOpIndex,TargetOp),\n   op_regdirect_contains_reg(TargetOp,Reg).\nin file main.dl [647:1-650:45]" 
      (TIMER_ON reg_call "@t-nonrecursive-rule;reg_call;/usr/local/src/ddisasm/src/datalog/main.dl [647:1-650:45];reg_call(EA,Reg) :- \\n   arch.call(EA,TargetOpIndex),\\n   instruction_get_op(EA,TargetOpIndex,TargetOp),\\n   op_regdirect_contains_reg(TargetOp,Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY arch.call))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 arch.call           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (FOR t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 1)) reg_call)
)))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reg_def_use.block_last_def
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON reg_def_use.block_last_def "@t-nonrecursive-relation;reg_def_use.block_last_def;use_def_analysis.dl [159:11-159:25];"
(STMTS      (DEBUG 
 "reg_def_use.block_last_def(EA_next,EA,Var) :- \n   reg_def_use.def(EA,Var),\n   code_in_block(EA,<inlined_Block_285>),\n   may_fallthrough(EA,EA_next),\n   code_in_block(EA_next,<inlined_Block_285>).\nin file use_def_analysis.dl [161:5-163:32]" 
      (TIMER_ON reg_def_use.block_last_def "@t-nonrecursive-rule;reg_def_use.block_last_def;use_def_analysis.dl [161:5-163:32];reg_def_use.block_last_def(EA_next,EA,Var) :- \\n   reg_def_use.def(EA,Var),\\n   code_in_block(EA,<inlined_Block_285>),\\n   may_fallthrough(EA,EA_next),\\n   code_in_block(EA_next,<inlined_Block_285>).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY reg_def_use.def)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY may_fallthrough)))
         (FOR_IN t0 reg_def_use.def           (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 may_fallthrough (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
            (IF (EXISTS code_in_block ((TUPLE t2 1) (TUPLE t1 1)))
             (INSERT ((TUPLE t2 1) (TUPLE t0 0) (TUPLE t0 1)) reg_def_use.block_last_def)
            ))))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 reg_def_use.block_last_def       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_reg_def_use.block_last_def)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_reg_def_use.block_last_def "@t-recursive-relation;reg_def_use.block_last_def;use_def_analysis.dl [159:11-159:25];"
(STMTS (STMTS (STMTS       (DEBUG 
 "reg_def_use.block_last_def(EA_next,EA_def,Var) :- \n   reg_def_use.block_last_def(EA,EA_def,Var),\n   !reg_def_use.def(EA,Var),\n   code_in_block(EA,<inlined_Block_1062>),\n   may_fallthrough(EA,EA_next),\n   code_in_block(EA_next,<inlined_Block_1062>).\nin file use_def_analysis.dl [165:5-169:32]" 
       (TIMER_ON @new_reg_def_use.block_last_def "@t-recursive-rule;reg_def_use.block_last_def;0;use_def_analysis.dl [165:5-169:32];reg_def_use.block_last_def(EA_next,EA_def,Var) :- \\n   reg_def_use.block_last_def(EA,EA_def,Var),\\n   !reg_def_use.def(EA,Var),\\n   code_in_block(EA,<inlined_Block_1062>),\\n   may_fallthrough(EA,EA_next),\\n   code_in_block(EA_next,<inlined_Block_1062>).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_reg_def_use.block_last_def)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY may_fallthrough)))
          (FOR_IN t0 @delta_reg_def_use.block_last_def            (IF (NOT (EXISTS reg_def_use.def ((TUPLE t0 0) (TUPLE t0 2))))
            (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (FOR t2 may_fallthrough (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
              (IF (AND (EXISTS code_in_block ((TUPLE t2 1) (TUPLE t1 1))) (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t2 1) (TUPLE t0 1) (TUPLE t0 2)))))
               (INSERT ((TUPLE t2 1) (TUPLE t0 1) (TUPLE t0 2)) @new_reg_def_use.block_last_def)
              )))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "reg_def_use.block_last_def(EA_next,EA_def,Var) :- \n   reg_def_use.block_last_def(EA,EA_def,Var),\n   arch.conditional(EA,_),\n   code_in_block(EA,<inlined_Block_1063>),\n   may_fallthrough(EA,EA_next),\n   code_in_block(EA_next,<inlined_Block_1063>).\nin file use_def_analysis.dl [165:5-169:32]" 
       (TIMER_ON @new_reg_def_use.block_last_def "@t-recursive-rule;reg_def_use.block_last_def;0;use_def_analysis.dl [165:5-169:32];reg_def_use.block_last_def(EA_next,EA_def,Var) :- \\n   reg_def_use.block_last_def(EA,EA_def,Var),\\n   arch.conditional(EA,_),\\n   code_in_block(EA,<inlined_Block_1063>),\\n   may_fallthrough(EA,EA_next),\\n   code_in_block(EA_next,<inlined_Block_1063>).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY @delta_reg_def_use.block_last_def))) (NOT (ISEMPTY may_fallthrough)))
          (FOR_IN t0 @delta_reg_def_use.block_last_def            (IF (EXISTS arch.conditional ((TUPLE t0 0) UNDEF))
            (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (FOR t2 may_fallthrough (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
              (IF (AND (EXISTS code_in_block ((TUPLE t2 1) (TUPLE t1 1))) (NOT (EXISTS reg_def_use.block_last_def ((TUPLE t2 1) (TUPLE t0 1) (TUPLE t0 2)))))
               (INSERT ((TUPLE t2 1) (TUPLE t0 1) (TUPLE t0 2)) @new_reg_def_use.block_last_def)
              )))           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_reg_def_use.block_last_def "@t-recursive-relation;reg_def_use.block_last_def;use_def_analysis.dl [159:11-159:25];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_reg_def_use.block_last_def))
 ) (STMTS      (TIMER_ON @new_reg_def_use.block_last_def "@c-recursive-relation;reg_def_use.block_last_def;use_def_analysis.dl [159:11-159:25];"
(STMTS (QUERY
       (FOR_IN t0 @new_reg_def_use.block_last_def         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) reg_def_use.block_last_def)
)
      )
       (SWAP @delta_reg_def_use.block_last_def @new_reg_def_use.block_last_def)
       (CLEAR @new_reg_def_use.block_last_def)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_reg_def_use.block_last_def)
     (CLEAR @new_reg_def_use.block_last_def)
 ) )  )  )  )
  (SUBROUTINE reg_def_use.def
(STMTS     (TIMER_ON reg_def_use.def "@t-nonrecursive-relation;reg_def_use.def;basic_def_used.dl [45:11-45:14];"
(STMTS      (DEBUG 
 "reg_def_use.def(EA,Reg) :- \n   arch.call(EA,_),\n   arch.return_reg(Reg).\nin file basic_def_used.dl [75:5-78:30]" 
      (TIMER_ON reg_def_use.def "@t-nonrecursive-rule;reg_def_use.def;basic_def_used.dl [75:5-78:30];reg_def_use.def(EA,Reg) :- \\n   arch.call(EA,_),\\n   arch.return_reg(Reg).;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.call)) (NOT (ISEMPTY arch.return_reg)))
         (FOR_IN t0 arch.call           (FOR_IN t1 arch.return_reg            (INSERT ((TUPLE t0 0) (TUPLE t1 0)) reg_def_use.def)
)
)
        )       )
      )
     )
      (DEBUG 
 "reg_def_use.def(EA,Reg) :- \n   register_access(EA,RegIn,\"W\"),\n   reg_map(RegIn,Reg),\n   track_register(Reg).\nin file basic_def_used.dl [64:5-72:29]" 
      (TIMER_ON reg_def_use.def "@t-nonrecursive-rule;reg_def_use.def;basic_def_used.dl [64:5-72:29];reg_def_use.def(EA,Reg) :- \\n   register_access(EA,RegIn,\\\"W\\\"),\\n   reg_map(RegIn,Reg),\\n   track_register(Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY track_register)) (NOT (ISEMPTY register_access))) (NOT (ISEMPTY reg_map)))
         (FOR t0 register_access (INDEX  (= (TUPLE t0 2) (STRING "W")))
          (FOR t1 reg_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (IF (EXISTS track_register ((TUPLE t1 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1)) reg_def_use.def)
           )))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reg_def_use.defined_in_block
(STMTS     (TIMER_ON reg_def_use.defined_in_block "@t-nonrecursive-relation;reg_def_use.defined_in_block;use_def_analysis.dl [141:11-141:27];"
(STMTS      (DEBUG 
 "reg_def_use.defined_in_block(Block,Var) :- \n   reg_def_use.def(EA,Var),\n   code_in_block(EA,Block).\nin file use_def_analysis.dl [143:5-145:33]" 
      (TIMER_ON reg_def_use.defined_in_block "@t-nonrecursive-rule;reg_def_use.defined_in_block;use_def_analysis.dl [143:5-145:33];reg_def_use.defined_in_block(Block,Var) :- \\n   reg_def_use.def(EA,Var),\\n   code_in_block(EA,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY reg_def_use.def)) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 reg_def_use.def           (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 1) (TUPLE t0 1)) reg_def_use.defined_in_block)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reg_def_use.flow_def
(STMTS     (TIMER_ON reg_def_use.flow_def "@t-nonrecursive-relation;reg_def_use.flow_def;use_def_analysis.dl [124:11-124:19];"
(STMTS      (DEBUG 
 "reg_def_use.flow_def(EA_jump,Reg,EA_target,Immediate) :- \n   code_in_block(EA,_),\n   cmp_immediate_to_reg(EA,Reg,_,Immediate),\n   track_register(Reg),\n   next(EA,EA_jump),\n   direct_jump(EA_jump,EA_target),\n   arch.jump(EA_jump),\n   arch.conditional(EA_jump,\"E\").\nin file use_def_analysis.dl [296:5-303:39]" 
      (TIMER_ON reg_def_use.flow_def "@t-nonrecursive-rule;reg_def_use.flow_def;use_def_analysis.dl [296:5-303:39];reg_def_use.flow_def(EA_jump,Reg,EA_target,Immediate) :- \\n   code_in_block(EA,_),\\n   cmp_immediate_to_reg(EA,Reg,_,Immediate),\\n   track_register(Reg),\\n   next(EA,EA_jump),\\n   direct_jump(EA_jump,EA_target),\\n   arch.jump(EA_jump),\\n   arch.conditional(EA_jump,\\\"E\\\").;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY direct_jump)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY track_register))) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY cmp_immediate_to_reg)))
         (FOR_IN t0 code_in_block           (FOR t1 cmp_immediate_to_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS track_register ((TUPLE t1 1)))
            (FOR t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (AND (EXISTS arch.conditional ((TUPLE t2 1) (STRING "E"))) (EXISTS arch.jump ((TUPLE t2 1))))
              (FOR t3 direct_jump (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (INSERT ((TUPLE t2 1) (TUPLE t1 1) (TUPLE t3 1) (TUPLE t1 3)) reg_def_use.flow_def)
)             ))           )))
        )       )
      )
     )
      (DEBUG 
 "reg_def_use.flow_def(EA_jump,Reg,EA_target,Immediate) :- \n   code_in_block(EA,_),\n   cmp_immediate_to_reg(EA,Reg,_,Immediate),\n   track_register(Reg),\n   next(EA,EA_jump),\n   direct_jump(EA_jump,_),\n   next(EA_jump,EA_target),\n   arch.jump(EA_jump),\n   arch.conditional(EA_jump,\"NE\").\nin file use_def_analysis.dl [305:5-313:40]" 
      (TIMER_ON reg_def_use.flow_def "@t-nonrecursive-rule;reg_def_use.flow_def;use_def_analysis.dl [305:5-313:40];reg_def_use.flow_def(EA_jump,Reg,EA_target,Immediate) :- \\n   code_in_block(EA,_),\\n   cmp_immediate_to_reg(EA,Reg,_,Immediate),\\n   track_register(Reg),\\n   next(EA,EA_jump),\\n   direct_jump(EA_jump,_),\\n   next(EA_jump,EA_target),\\n   arch.jump(EA_jump),\\n   arch.conditional(EA_jump,\\\"NE\\\").;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY cmp_immediate_to_reg)) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY track_register))) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY direct_jump)))
         (FOR_IN t0 code_in_block           (FOR t1 cmp_immediate_to_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS track_register ((TUPLE t1 1)))
            (FOR t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (AND (AND (EXISTS direct_jump ((TUPLE t2 1) UNDEF)) (EXISTS arch.conditional ((TUPLE t2 1) (STRING "NE")))) (EXISTS arch.jump ((TUPLE t2 1))))
              (FOR t3 next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (INSERT ((TUPLE t2 1) (TUPLE t1 1) (TUPLE t3 1) (TUPLE t1 3)) reg_def_use.flow_def)
)             ))           )))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reg_def_use.last_def_in_block
(STMTS     (TIMER_ON reg_def_use.last_def_in_block "@t-nonrecursive-relation;reg_def_use.last_def_in_block;use_def_analysis.dl [176:11-176:28];"
(STMTS      (DEBUG 
 "reg_def_use.last_def_in_block(Block,BlockEnd,Var) :- \n   block_last_instruction(Block,BlockEnd),\n   reg_def_use.def(BlockEnd,Var).\nin file use_def_analysis.dl [178:5-187:11]" 
      (TIMER_ON reg_def_use.last_def_in_block "@t-nonrecursive-rule;reg_def_use.last_def_in_block;use_def_analysis.dl [178:5-187:11];reg_def_use.last_def_in_block(Block,BlockEnd,Var) :- \\n   block_last_instruction(Block,BlockEnd),\\n   reg_def_use.def(BlockEnd,Var).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY reg_def_use.def)))
         (FOR_IN t0 block_last_instruction           (FOR t1 reg_def_use.def (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1)) reg_def_use.last_def_in_block)
))
        )       )
      )
     )
      (DEBUG 
 "reg_def_use.last_def_in_block(Block,EA_def,Var) :- \n   block_last_instruction(Block,BlockEnd),\n   !reg_def_use.def(BlockEnd,Var),\n   reg_def_use.block_last_def(BlockEnd,EA_def,Var).\nin file use_def_analysis.dl [178:5-187:11]" 
      (TIMER_ON reg_def_use.last_def_in_block "@t-nonrecursive-rule;reg_def_use.last_def_in_block;use_def_analysis.dl [178:5-187:11];reg_def_use.last_def_in_block(Block,EA_def,Var) :- \\n   block_last_instruction(Block,BlockEnd),\\n   !reg_def_use.def(BlockEnd,Var),\\n   reg_def_use.block_last_def(BlockEnd,EA_def,Var).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY reg_def_use.block_last_def)))
         (FOR_IN t0 block_last_instruction           (FOR t1 reg_def_use.block_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (IF (NOT (EXISTS reg_def_use.def ((TUPLE t0 1) (TUPLE t1 2))))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 2)) reg_def_use.last_def_in_block)
           )))
        )       )
      )
     )
      (DEBUG 
 "reg_def_use.last_def_in_block(Block,EA_def,Var) :- \n   block_last_instruction(Block,BlockEnd),\n   arch.conditional(BlockEnd,_),\n   reg_def_use.block_last_def(BlockEnd,EA_def,Var).\nin file use_def_analysis.dl [178:5-187:11]" 
      (TIMER_ON reg_def_use.last_def_in_block "@t-nonrecursive-rule;reg_def_use.last_def_in_block;use_def_analysis.dl [178:5-187:11];reg_def_use.last_def_in_block(Block,EA_def,Var) :- \\n   block_last_instruction(Block,BlockEnd),\\n   arch.conditional(BlockEnd,_),\\n   reg_def_use.block_last_def(BlockEnd,EA_def,Var).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY reg_def_use.block_last_def)) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY arch.conditional)))
         (FOR_IN t0 block_last_instruction           (IF (EXISTS arch.conditional ((TUPLE t0 1) UNDEF))
           (FOR t1 reg_def_use.block_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 2)) reg_def_use.last_def_in_block)
)          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reg_def_use.live_var_def
(STMTS (STMTS     (TIMER_ON reg_def_use.live_var_def "@t-nonrecursive-relation;reg_def_use.live_var_def;use_def_analysis.dl [204:11-204:23];"
(STMTS      (DEBUG 
 "reg_def_use.live_var_def(Block,Var,Var,EA_def) :- \n   reg_def_use.last_def_in_block(Block,EA_def,Var).\nin file use_def_analysis.dl [206:5-207:45]" 
      (TIMER_ON reg_def_use.live_var_def "@t-nonrecursive-rule;reg_def_use.live_var_def;use_def_analysis.dl [206:5-207:45];reg_def_use.live_var_def(Block,Var,Var,EA_def) :- \\n   reg_def_use.last_def_in_block(Block,EA_def,Var).;"
(QUERY
        (IF (NOT (ISEMPTY reg_def_use.last_def_in_block))
         (FOR_IN t0 reg_def_use.last_def_in_block           (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1)) reg_def_use.live_var_def)
)
        )       )
      )
     )
      (DEBUG 
 "reg_def_use.live_var_def(Block,Var,Var,EA_def) :- \n   reg_def_use.flow_def(EA_def,Var,Block,_),\n   !reg_def_use.defined_in_block(Block,Var).\nin file use_def_analysis.dl [209:5-212:41]" 
      (TIMER_ON reg_def_use.live_var_def "@t-nonrecursive-rule;reg_def_use.live_var_def;use_def_analysis.dl [209:5-212:41];reg_def_use.live_var_def(Block,Var,Var,EA_def) :- \\n   reg_def_use.flow_def(EA_def,Var,Block,_),\\n   !reg_def_use.defined_in_block(Block,Var).;"
(QUERY
        (IF (NOT (ISEMPTY reg_def_use.flow_def))
         (FOR_IN t0 reg_def_use.flow_def           (IF (NOT (EXISTS reg_def_use.defined_in_block ((TUPLE t0 2) (TUPLE t0 1))))
           (INSERT ((TUPLE t0 2) (TUPLE t0 1) (TUPLE t0 1) (TUPLE t0 0)) reg_def_use.live_var_def)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR reg_def_use.last_def_in_block)
 ) )  )
  (SUBROUTINE reg_def_use.ref_in_block
(STMTS     (TIMER_ON reg_def_use.ref_in_block "@t-nonrecursive-relation;reg_def_use.ref_in_block;use_def_analysis.dl [192:11-192:23];"
(STMTS      (DEBUG 
 "reg_def_use.ref_in_block(Block,Var) :- \n   reg_def_use.defined_in_block(Block,Var).\nin file use_def_analysis.dl [194:5-196:38]" 
      (TIMER_ON reg_def_use.ref_in_block "@t-nonrecursive-rule;reg_def_use.ref_in_block;use_def_analysis.dl [194:5-196:38];reg_def_use.ref_in_block(Block,Var) :- \\n   reg_def_use.defined_in_block(Block,Var).;"
(QUERY
        (IF (NOT (ISEMPTY reg_def_use.defined_in_block))
         (FOR_IN t0 reg_def_use.defined_in_block           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) reg_def_use.ref_in_block)
)
        )       )
      )
     )
      (DEBUG 
 "reg_def_use.ref_in_block(Block,Var) :- \n   reg_def_use.used_in_block(Block,_,Var,_).\nin file use_def_analysis.dl [194:5-196:38]" 
      (TIMER_ON reg_def_use.ref_in_block "@t-nonrecursive-rule;reg_def_use.ref_in_block;use_def_analysis.dl [194:5-196:38];reg_def_use.ref_in_block(Block,Var) :- \\n   reg_def_use.used_in_block(Block,_,Var,_).;"
(QUERY
        (IF (NOT (ISEMPTY reg_def_use.used_in_block))
         (FOR_IN t0 reg_def_use.used_in_block           (INSERT ((TUPLE t0 0) (TUPLE t0 2)) reg_def_use.ref_in_block)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reg_def_use.return_block_end
(STMTS (STMTS     (TIMER_ON reg_def_use.return_block_end "@t-nonrecursive-relation;reg_def_use.return_block_end;use_def_analysis.dl [338:11-338:27];"
(STMTS      (DEBUG 
 "reg_def_use.return_block_end(Callee,CalleeEnd,Block,BlockEnd) :- \n   direct_call(_,Callee),\n   fde_addresses(Callee,CalleeEnd),\n   arch.return(CalleeReturn),\n   Callee <= CalleeReturn,\n   CalleeReturn < CalleeEnd,\n   code_in_block(CalleeReturn,Block),\n   block_last_instruction(Block,BlockEnd).\nin file use_def_analysis.dl [340:5-347:48]" 
      (TIMER_ON reg_def_use.return_block_end "@t-nonrecursive-rule;reg_def_use.return_block_end;use_def_analysis.dl [340:5-347:48];reg_def_use.return_block_end(Callee,CalleeEnd,Block,BlockEnd) :- \\n   direct_call(_,Callee),\\n   fde_addresses(Callee,CalleeEnd),\\n   arch.return(CalleeReturn),\\n   Callee <= CalleeReturn,\\n   CalleeReturn < CalleeEnd,\\n   code_in_block(CalleeReturn,Block),\\n   block_last_instruction(Block,BlockEnd).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY arch.return))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY fde_addresses)))
         (FOR_IN t0 direct_call           (FOR t1 fde_addresses (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (FOR_IN t2 arch.return             (IF (AND (CONSTRAINT < (TUPLE t2 0)  (TUPLE t1 1)) (CONSTRAINT <= (TUPLE t0 1)  (TUPLE t2 0)))
             (FOR t3 code_in_block (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
              (FOR t4 block_last_instruction (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)))
               (INSERT ((TUPLE t0 1) (TUPLE t1 1) (TUPLE t3 1) (TUPLE t4 1)) reg_def_use.return_block_end)
))            ))
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.return)
 ) )  )
  (SUBROUTINE reg_def_use.used
(STMTS (STMTS     (TIMER_ON reg_def_use.used "@t-nonrecursive-relation;reg_def_use.used;basic_def_used.dl [50:11-50:15];"
(STMTS      (DEBUG 
 "reg_def_use.used(EA,Reg,0) :- \n   inferred_main_in_reg(EA,Reg).\nin file symbolization.dl [229:1-231:34]" 
      (TIMER_ON reg_def_use.used "@t-nonrecursive-rule;reg_def_use.used;binary/elf/symbolization.dl [229:1-231:34];reg_def_use.used(EA,Reg,0) :- \\n   inferred_main_in_reg(EA,Reg).;"
(QUERY
        (IF (NOT (ISEMPTY inferred_main_in_reg))
         (FOR_IN t0 inferred_main_in_reg           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (UNSIGNED 0)) reg_def_use.used)
)
        )       )
      )
     )
      (DEBUG 
 "reg_def_use.used(EA,Reg,Index) :- \n   reg_def_use.used_explicit(EA,Reg,Index).\nin file basic_def_used.dl [107:5-108:37]" 
      (TIMER_ON reg_def_use.used "@t-nonrecursive-rule;reg_def_use.used;basic_def_used.dl [107:5-108:37];reg_def_use.used(EA,Reg,Index) :- \\n   reg_def_use.used_explicit(EA,Reg,Index).;"
(QUERY
        (IF (NOT (ISEMPTY reg_def_use.used_explicit))
         (FOR_IN t0 reg_def_use.used_explicit           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) reg_def_use.used)
)
        )       )
      )
     )
      (DEBUG 
 "reg_def_use.used(EA,Reg,0) :- \n   call_tls_get_addr(EA,Reg).\nin file use_def_analysis.dl [355:5-356:31]" 
      (TIMER_ON reg_def_use.used "@t-nonrecursive-rule;reg_def_use.used;use_def_analysis.dl [355:5-356:31];reg_def_use.used(EA,Reg,0) :- \\n   call_tls_get_addr(EA,Reg).;"
(QUERY
        (IF (NOT (ISEMPTY call_tls_get_addr))
         (FOR_IN t0 call_tls_get_addr           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (UNSIGNED 0)) reg_def_use.used)
)
        )       )
      )
     )
      (DEBUG 
 "reg_def_use.used(EA,Reg,0) :- \n   register_access(EA,RegIn,\"R\"),\n   reg_map(RegIn,Reg),\n   track_register(Reg),\n   !reg_def_use.used_explicit(EA,Reg,_),\n   !is_xor_reset(EA).\nin file basic_def_used.dl [111:5-121:27]" 
      (TIMER_ON reg_def_use.used "@t-nonrecursive-rule;reg_def_use.used;basic_def_used.dl [111:5-121:27];reg_def_use.used(EA,Reg,0) :- \\n   register_access(EA,RegIn,\\\"R\\\"),\\n   reg_map(RegIn,Reg),\\n   track_register(Reg),\\n   !reg_def_use.used_explicit(EA,Reg,_),\\n   !is_xor_reset(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY track_register)) (NOT (ISEMPTY register_access))) (NOT (ISEMPTY reg_map)))
         (FOR t0 register_access (INDEX  (= (TUPLE t0 2) (STRING "R")))
          (IF (NOT (EXISTS is_xor_reset ((TUPLE t0 0))))
           (FOR t1 reg_map (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (AND (EXISTS track_register ((TUPLE t1 1))) (NOT (EXISTS reg_def_use.used_explicit ((TUPLE t0 0) (TUPLE t1 1) UNDEF))))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (UNSIGNED 0)) reg_def_use.used)
            ))          ))        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR reg_def_use.used_explicit)
 ) )  )
  (SUBROUTINE reg_def_use.used_explicit
(STMTS     (TIMER_ON reg_def_use.used_explicit "@t-nonrecursive-relation;reg_def_use.used_explicit;basic_def_used.dl [94:11-94:24];"
(STMTS      (DEBUG 
 "reg_def_use.used_explicit(EA,Reg,Index) :- \n   instruction_get_src_op(EA,Index,Op),\n   op_regdirect_contains_reg(Op,Reg),\n   track_register(Reg),\n   !is_xor_reset(EA).\nin file basic_def_used.dl [96:5-100:27]" 
      (TIMER_ON reg_def_use.used_explicit "@t-nonrecursive-rule;reg_def_use.used_explicit;basic_def_used.dl [96:5-100:27];reg_def_use.used_explicit(EA,Reg,Index) :- \\n   instruction_get_src_op(EA,Index,Op),\\n   op_regdirect_contains_reg(Op,Reg),\\n   track_register(Reg),\\n   !is_xor_reset(EA).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY track_register)) (NOT (ISEMPTY instruction_get_src_op))) (NOT (ISEMPTY op_regdirect_contains_reg)))
         (FOR_IN t0 instruction_get_src_op           (IF (NOT (EXISTS is_xor_reset ((TUPLE t0 0))))
           (FOR t1 op_regdirect_contains_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (IF (EXISTS track_register ((TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 1)) reg_def_use.used_explicit)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "reg_def_use.used_explicit(EA,Reg,Index) :- \n   instruction_get_op(EA,Index,Op),\n   op_indirect_contains_reg(Op,Reg),\n   track_register(Reg).\nin file basic_def_used.dl [102:5-105:29]" 
      (TIMER_ON reg_def_use.used_explicit "@t-nonrecursive-rule;reg_def_use.used_explicit;basic_def_used.dl [102:5-105:29];reg_def_use.used_explicit(EA,Reg,Index) :- \\n   instruction_get_op(EA,Index,Op),\\n   op_indirect_contains_reg(Op,Reg),\\n   track_register(Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY track_register)) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY op_indirect_contains_reg)))
         (FOR_IN t0 instruction_get_op           (FOR t1 op_indirect_contains_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
           (IF (EXISTS track_register ((TUPLE t1 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t0 1)) reg_def_use.used_explicit)
           )))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reg_def_use.used_in_block
(STMTS     (TIMER_ON reg_def_use.used_in_block "@t-nonrecursive-relation;reg_def_use.used_in_block;use_def_analysis.dl [150:11-150:24];"
(STMTS      (DEBUG 
 "reg_def_use.used_in_block(Block,EA_used,Var,Index) :- \n   reg_def_use.used(EA_used,Var,Index),\n   code_in_block(EA_used,Block).\nin file use_def_analysis.dl [152:5-154:38]" 
      (TIMER_ON reg_def_use.used_in_block "@t-nonrecursive-rule;reg_def_use.used_in_block;use_def_analysis.dl [152:5-154:38];reg_def_use.used_in_block(Block,EA_used,Var,Index) :- \\n   reg_def_use.used(EA_used,Var,Index),\\n   code_in_block(EA_used,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY reg_def_use.used)) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 reg_def_use.used           (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) reg_def_use.used_in_block)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reg_jump
(STMTS     (TIMER_ON reg_jump "@t-nonrecursive-relation;reg_jump;/usr/local/src/ddisasm/src/datalog/main.dl [574:7-574:15];"
(STMTS      (DEBUG 
 "reg_jump(EA,Reg) :- \n   arch.jump(EA),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.jump_operation_op_index(Operation,TargetOpIndex),\n   instruction_get_op(EA,TargetOpIndex,TargetOp),\n   op_regdirect_contains_reg(TargetOp,Reg),\n   Reg != \"RIP\".\nin file main.dl [576:1-582:23]" 
      (TIMER_ON reg_jump "@t-nonrecursive-rule;reg_jump;/usr/local/src/ddisasm/src/datalog/main.dl [576:1-582:23];reg_jump(EA,Reg) :- \\n   arch.jump(EA),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.jump_operation_op_index(Operation,TargetOpIndex),\\n   instruction_get_op(EA,TargetOpIndex,TargetOp),\\n   op_regdirect_contains_reg(TargetOp,Reg),\\n   Reg != \\\"RIP\\\".;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY op_regdirect_contains_reg)) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY arch.jump_operation_op_index))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 arch.jump           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 arch.jump_operation_op_index (INDEX  (= (TUPLE t2 0) (TUPLE t1 3)))
            (FOR t3 instruction_get_op (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)) (= (TUPLE t3 1) (TUPLE t2 1)))
             (FOR t4 op_regdirect_contains_reg (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)))
              (IF (CONSTRAINT != (TUPLE t4 1)  (STRING "RIP"))
               (INSERT ((TUPLE t0 0) (TUPLE t4 1)) reg_jump)
              ))))))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reg_map
(STMTS     (TIMER_ON reg_map "@t-nonrecursive-relation;reg_map;/usr/local/src/ddisasm/src/datalog/main.dl [347:7-347:14];"
(STMTS      (DEBUG 
 "reg_map(RegIn,as(RegNullable, register)) :- \n   reg_map_nullable(RegIn,RegNullable),\n   RegNullable != \"NONE\".\nin file main.dl [349:1-351:34]" 
      (TIMER_ON reg_map "@t-nonrecursive-rule;reg_map;/usr/local/src/ddisasm/src/datalog/main.dl [349:1-351:34];reg_map(RegIn,as(RegNullable, register)) :- \\n   reg_map_nullable(RegIn,RegNullable),\\n   RegNullable != \\\"NONE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY reg_map_nullable))
         (FOR_IN t0 reg_map_nullable           (IF (CONSTRAINT != (TUPLE t0 1)  (STRING "NONE"))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) reg_map)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reg_map_nullable
(STMTS (STMTS     (TIMER_ON reg_map_nullable "@t-nonrecursive-relation;reg_map_nullable;/usr/local/src/ddisasm/src/datalog/main.dl [324:7-324:23];"
(STMTS      (DEBUG 
 "reg_map_nullable(RegIn,Reg) :- \n   arch.reg_map_rule(RegIn,Reg).\nin file main.dl [326:1-327:34]" 
      (TIMER_ON reg_map_nullable "@t-nonrecursive-rule;reg_map_nullable;/usr/local/src/ddisasm/src/datalog/main.dl [326:1-327:34];reg_map_nullable(RegIn,Reg) :- \\n   arch.reg_map_rule(RegIn,Reg).;"
(QUERY
        (IF (NOT (ISEMPTY arch.reg_map_rule))
         (FOR_IN t0 arch.reg_map_rule           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) reg_map_nullable)
)
        )       )
      )
     )
      (DEBUG 
 "reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \n   op_regdirect(_,Reg),\n   !arch.reg_map_rule(Reg,_).\nin file main.dl [330:1-339:31]" 
      (TIMER_ON reg_map_nullable "@t-nonrecursive-rule;reg_map_nullable;/usr/local/src/ddisasm/src/datalog/main.dl [330:1-339:31];reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \\n   op_regdirect(_,Reg),\\n   !arch.reg_map_rule(Reg,_).;"
(QUERY
        (IF (NOT (ISEMPTY op_regdirect))
         (FOR_IN t0 op_regdirect           (IF (NOT (EXISTS arch.reg_map_rule ((TUPLE t0 1) UNDEF)))
           (INSERT ((TUPLE t0 1) (TUPLE t0 1)) reg_map_nullable)
          ))
        )       )
      )
     )
      (DEBUG 
 "reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \n   op_register_bitfield(_,_,Reg),\n   !arch.reg_map_rule(Reg,_).\nin file main.dl [330:1-339:31]" 
      (TIMER_ON reg_map_nullable "@t-nonrecursive-rule;reg_map_nullable;/usr/local/src/ddisasm/src/datalog/main.dl [330:1-339:31];reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \\n   op_register_bitfield(_,_,Reg),\\n   !arch.reg_map_rule(Reg,_).;"
(QUERY
        (IF (NOT (ISEMPTY op_register_bitfield))
         (FOR_IN t0 op_register_bitfield           (IF (NOT (EXISTS arch.reg_map_rule ((TUPLE t0 2) UNDEF)))
           (INSERT ((TUPLE t0 2) (TUPLE t0 2)) reg_map_nullable)
          ))
        )       )
      )
     )
      (DEBUG 
 "reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \n   op_indirect(_,_,Reg,_,_,_,_),\n   !arch.reg_map_rule(Reg,_).\nin file main.dl [330:1-339:31]" 
      (TIMER_ON reg_map_nullable "@t-nonrecursive-rule;reg_map_nullable;/usr/local/src/ddisasm/src/datalog/main.dl [330:1-339:31];reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \\n   op_indirect(_,_,Reg,_,_,_,_),\\n   !arch.reg_map_rule(Reg,_).;"
(QUERY
        (IF (NOT (ISEMPTY op_indirect))
         (FOR_IN t0 op_indirect           (IF (NOT (EXISTS arch.reg_map_rule ((TUPLE t0 2) UNDEF)))
           (INSERT ((TUPLE t0 2) (TUPLE t0 2)) reg_map_nullable)
          ))
        )       )
      )
     )
      (DEBUG 
 "reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \n   op_indirect(_,_,_,Reg,_,_,_),\n   !arch.reg_map_rule(Reg,_).\nin file main.dl [330:1-339:31]" 
      (TIMER_ON reg_map_nullable "@t-nonrecursive-rule;reg_map_nullable;/usr/local/src/ddisasm/src/datalog/main.dl [330:1-339:31];reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \\n   op_indirect(_,_,_,Reg,_,_,_),\\n   !arch.reg_map_rule(Reg,_).;"
(QUERY
        (IF (NOT (ISEMPTY op_indirect))
         (FOR_IN t0 op_indirect           (IF (NOT (EXISTS arch.reg_map_rule ((TUPLE t0 3) UNDEF)))
           (INSERT ((TUPLE t0 3) (TUPLE t0 3)) reg_map_nullable)
          ))
        )       )
      )
     )
      (DEBUG 
 "reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \n   register_access(_,Reg,_),\n   !arch.reg_map_rule(Reg,_).\nin file main.dl [330:1-339:31]" 
      (TIMER_ON reg_map_nullable "@t-nonrecursive-rule;reg_map_nullable;/usr/local/src/ddisasm/src/datalog/main.dl [330:1-339:31];reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \\n   register_access(_,Reg,_),\\n   !arch.reg_map_rule(Reg,_).;"
(QUERY
        (IF (NOT (ISEMPTY register_access))
         (FOR_IN t0 register_access           (IF (NOT (EXISTS arch.reg_map_rule ((TUPLE t0 1) UNDEF)))
           (INSERT ((TUPLE t0 1) (TUPLE t0 1)) reg_map_nullable)
          ))
        )       )
      )
     )
      (DEBUG 
 "reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \n   op_shifted_w_reg(_,_,Reg,_),\n   !arch.reg_map_rule(Reg,_).\nin file main.dl [330:1-339:31]" 
      (TIMER_ON reg_map_nullable "@t-nonrecursive-rule;reg_map_nullable;/usr/local/src/ddisasm/src/datalog/main.dl [330:1-339:31];reg_map_nullable(Reg,as(Reg, reg_nullable)) :- \\n   op_shifted_w_reg(_,_,Reg,_),\\n   !arch.reg_map_rule(Reg,_).;"
(QUERY
        (IF (NOT (ISEMPTY op_shifted_w_reg))
         (FOR_IN t0 op_shifted_w_reg           (IF (NOT (EXISTS arch.reg_map_rule ((TUPLE t0 2) UNDEF)))
           (INSERT ((TUPLE t0 2) (TUPLE t0 2)) reg_map_nullable)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.reg_map_rule)
     (CLEAR op_shifted_w_reg)
 ) )  )
  (SUBROUTINE reg_used_for
(STMTS     (TIMER_ON reg_used_for "@t-nonrecursive-relation;reg_used_for;use_def_analysis.dl [550:7-550:19];"
(STMTS      (DEBUG 
 "reg_used_for(EA,Reg,\"InferredMain\") :- \n   inferred_main_in_reg(EA,Reg).\nin file symbolization.dl [229:1-231:34]" 
      (TIMER_ON reg_used_for "@t-nonrecursive-rule;reg_used_for;binary/elf/symbolization.dl [229:1-231:34];reg_used_for(EA,Reg,\\\"InferredMain\\\") :- \\n   inferred_main_in_reg(EA,Reg).;"
(QUERY
        (IF (NOT (ISEMPTY inferred_main_in_reg))
         (FOR_IN t0 inferred_main_in_reg           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "InferredMain")) reg_used_for)
)
        )       )
      )
     )
      (DEBUG 
 "reg_used_for(EA,Reg,\"Memory\") :- \n   reg_def_use.used(EA,Reg,Index),\n   instruction_get_op(EA,Index,Op),\n   op_indirect_contains_reg(Op,Reg).\nin file use_def_analysis.dl [552:1-555:38]" 
      (TIMER_ON reg_used_for "@t-nonrecursive-rule;reg_used_for;use_def_analysis.dl [552:1-555:38];reg_used_for(EA,Reg,\\\"Memory\\\") :- \\n   reg_def_use.used(EA,Reg,Index),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect_contains_reg(Op,Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY op_indirect_contains_reg)) (NOT (ISEMPTY reg_def_use.used))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 reg_def_use.used           (INDEXED_IF_EXISTS t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 2))) (EXISTS op_indirect_contains_reg ((TUPLE t1 2) (TUPLE t0 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "Memory")) reg_used_for)
))
        )       )
      )
     )
      (DEBUG 
 "reg_used_for(EA,Reg,\"Jump\") :- \n   reg_jump(EA,Reg),\n   reg_def_use.used(EA,Reg,_).\nin file use_def_analysis.dl [557:1-559:32]" 
      (TIMER_ON reg_used_for "@t-nonrecursive-rule;reg_used_for;use_def_analysis.dl [557:1-559:32];reg_used_for(EA,Reg,\\\"Jump\\\") :- \\n   reg_jump(EA,Reg),\\n   reg_def_use.used(EA,Reg,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY reg_def_use.used)))
         (FOR_IN t0 reg_jump           (IF (EXISTS reg_def_use.used ((TUPLE t0 0) (TUPLE t0 1) UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "Jump")) reg_used_for)
          ))
        )       )
      )
     )
      (DEBUG 
 "reg_used_for(EA,Reg,\"Call\") :- \n   reg_call(EA,Reg),\n   reg_def_use.used(EA,Reg,_).\nin file use_def_analysis.dl [561:1-563:32]" 
      (TIMER_ON reg_used_for "@t-nonrecursive-rule;reg_used_for;use_def_analysis.dl [561:1-563:32];reg_used_for(EA,Reg,\\\"Call\\\") :- \\n   reg_call(EA,Reg),\\n   reg_def_use.used(EA,Reg,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY reg_call)) (NOT (ISEMPTY reg_def_use.used)))
         (FOR_IN t0 reg_call           (IF (EXISTS reg_def_use.used ((TUPLE t0 0) (TUPLE t0 1) UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "Call")) reg_used_for)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE register_access
(STMTS (STMTS (STMTS     (TIMER_ON register_access "@t-relation-loadtime;register_access;/usr/local/src/ddisasm/src/datalog/main.dl [241:7-241:22];loadtime;"
     (IO register_access ((= IO "file") (= attributeNames "EA\tRegister\tAccessMode") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "register_access") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"EA\", \"Register\", \"AccessMode\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:address\", \"s:input_reg\", \"s:access_mode\"]}}")))
    )
 ) (STMTS     (LOGSIZE register_access "@n-nonrecursive-relation;register_access;/usr/local/src/ddisasm/src/datalog/main.dl [241:7-241:22];")
 )   )  )  )
  (SUBROUTINE regular_data_section
(STMTS (STMTS     (TIMER_ON regular_data_section "@t-nonrecursive-relation;regular_data_section;/usr/local/src/ddisasm/src/datalog/main.dl [819:7-819:27];"
(STMTS      (DEBUG 
 "regular_data_section(Name) :- \n   data_section(Name),\n   !special_data_section(Name).\nin file main.dl [837:1-839:33]" 
      (TIMER_ON regular_data_section "@t-nonrecursive-rule;regular_data_section;/usr/local/src/ddisasm/src/datalog/main.dl [837:1-839:33];regular_data_section(Name) :- \\n   data_section(Name),\\n   !special_data_section(Name).;"
(QUERY
        (IF (NOT (ISEMPTY data_section))
         (FOR_IN t0 data_section           (IF (NOT (EXISTS special_data_section ((TUPLE t0 0))))
           (INSERT ((TUPLE t0 0)) regular_data_section)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR data_section)
 ) )  )
  (SUBROUTINE relative_address
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON relative_address "@t-nonrecursive-relation;relative_address;relative_jump_tables.dl [43:7-43:23];"
(STMTS      (DEBUG 
 "relative_address(EA,Size,EA,Ref,Dest,DestIsFirstOrSecond) :- \n   relative_address_start(EA,Size,Ref,Dest,DestIsFirstOrSecond).\nin file relative_jump_tables.dl [78:1-79:66]" 
      (TIMER_ON relative_address "@t-nonrecursive-rule;relative_address;relative_jump_tables.dl [78:1-79:66];relative_address(EA,Size,EA,Ref,Dest,DestIsFirstOrSecond) :- \\n   relative_address_start(EA,Size,Ref,Dest,DestIsFirstOrSecond).;"
(QUERY
        (IF (NOT (ISEMPTY relative_address_start))
         (FOR_IN t0 relative_address_start           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) relative_address)
)
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 relative_address       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) @delta_relative_address)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_relative_address "@t-recursive-relation;relative_address;relative_jump_tables.dl [43:7-43:23];"
(STMTS (STMTS (STMTS       (DEBUG 
 "relative_address((EA+Size),Size,TableStart,Ref,as((as(Ref, number)-@functor_data_signed((EA+Size),Size)), address),DestIsFirstOrSecond) :- \n   relative_address(EA,Size,TableStart,Ref,_,DestIsFirstOrSecond),\n   Size != 1,\n   @functor_data_valid((EA+Size),Size) = 1,\n   @functor_data_signed((EA+Size),Size) != 0,\n   DestIsFirstOrSecond = \"second\",\n   Size >= 4,\n   instruction( _tmp_289,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(Ref, number)-@functor_data_signed((EA+Size),Size)), address),_),\n   !relative_address_start((EA+Size),_,_,_,_),\n    _tmp_289 = as((as(Ref, number)-@functor_data_signed((EA+Size),Size)), address).\nin file relative_jump_tables.dl [81:1-92:46]" 
       (TIMER_ON @new_relative_address "@t-recursive-rule;relative_address;0;relative_jump_tables.dl [81:1-92:46];relative_address((EA+Size),Size,TableStart,Ref,as((as(Ref, number)-@functor_data_signed((EA+Size),Size)), address),DestIsFirstOrSecond) :- \\n   relative_address(EA,Size,TableStart,Ref,_,DestIsFirstOrSecond),\\n   Size != 1,\\n   @functor_data_valid((EA+Size),Size) = 1,\\n   @functor_data_signed((EA+Size),Size) != 0,\\n   DestIsFirstOrSecond = \\\"second\\\",\\n   Size >= 4,\\n   instruction( _tmp_289,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(Ref, number)-@functor_data_signed((EA+Size),Size)), address),_),\\n   !relative_address_start((EA+Size),_,_,_,_),\\n    _tmp_289 = as((as(Ref, number)-@functor_data_signed((EA+Size),Size)), address).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_relative_address)) (NOT (ISEMPTY instruction)))
          (FOR t0 @delta_relative_address (INDEX  (= (TUPLE t0 5) (STRING "second")))
           (IF (AND (AND (AND (AND (AND (AND (AND (CONSTRAINT != (TUPLE t0 1)  (UNSIGNED 1)) (CONSTRAINT >= (TUPLE t0 1)  (UNSIGNED 4))) (NOT (EXISTS relative_address_start ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS relative_address ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC - (TUPLE t0 3) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))) (TUPLE t0 5))))) (EXISTS instruction ((INTRINSIC - (TUPLE t0 3) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC - (TUPLE t0 3) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))) UNDEF)))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))  (NUMBER 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))  (UNSIGNED 1)))
            (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC - (TUPLE t0 3) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))) (TUPLE t0 5)) @new_relative_address)
           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_address((EA+Size),Size,TableStart,Ref,as((as(Ref, number)+@functor_data_signed((EA+Size),Size)), address),DestIsFirstOrSecond) :- \n   relative_address(EA,Size,TableStart,Ref,_,DestIsFirstOrSecond),\n   Size != 1,\n   @functor_data_valid((EA+Size),Size) = 1,\n   @functor_data_signed((EA+Size),Size) != 0,\n   DestIsFirstOrSecond = \"first\",\n   instruction( _tmp_290,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(Ref, number)+@functor_data_signed((EA+Size),Size)), address),_),\n   !relative_address_start((EA+Size),_,_,_,_),\n    _tmp_290 = as((as(Ref, number)+@functor_data_signed((EA+Size),Size)), address).\nin file relative_jump_tables.dl [81:1-92:46]" 
       (TIMER_ON @new_relative_address "@t-recursive-rule;relative_address;0;relative_jump_tables.dl [81:1-92:46];relative_address((EA+Size),Size,TableStart,Ref,as((as(Ref, number)+@functor_data_signed((EA+Size),Size)), address),DestIsFirstOrSecond) :- \\n   relative_address(EA,Size,TableStart,Ref,_,DestIsFirstOrSecond),\\n   Size != 1,\\n   @functor_data_valid((EA+Size),Size) = 1,\\n   @functor_data_signed((EA+Size),Size) != 0,\\n   DestIsFirstOrSecond = \\\"first\\\",\\n   instruction( _tmp_290,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(Ref, number)+@functor_data_signed((EA+Size),Size)), address),_),\\n   !relative_address_start((EA+Size),_,_,_,_),\\n    _tmp_290 = as((as(Ref, number)+@functor_data_signed((EA+Size),Size)), address).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_relative_address)) (NOT (ISEMPTY instruction)))
          (FOR t0 @delta_relative_address (INDEX  (= (TUPLE t0 5) (STRING "first")))
           (IF (AND (AND (AND (AND (AND (AND (CONSTRAINT != (TUPLE t0 1)  (UNSIGNED 1)) (NOT (EXISTS relative_address_start ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS relative_address ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))) (TUPLE t0 5))))) (EXISTS instruction ((INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))) UNDEF)))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))  (NUMBER 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))  (UNSIGNED 1)))
            (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (TUPLE t0 1)))) (TUPLE t0 5)) @new_relative_address)
           ))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_address((EA+1),1,IndexTable,AddressTable,(AddressTable+(@functor_data_unsigned((EA+1),1)*4)),\"first\") :- \n   base_address(ImageBase),\n   relative_address(EA,1,IndexTable,AddressTable,_,\"first\"),\n   @functor_data_valid((EA+1),1) = 1,\n   @functor_data_valid((AddressTable+(@functor_data_unsigned((EA+1),1)*4)),4) = 1,\n   instruction(<inlined_EA_1308>,_,_,_,_,_,_,_,_,_),\n   !invalid(<inlined_EA_1308>,_),\n   <inlined_EA_1308> = (ImageBase+as(@functor_data_signed((AddressTable+(@functor_data_unsigned((EA+1),1)*4)),4), unsigned)),\n   !relative_address_start((EA+1),_,_,_,_).\nin file jump_tables.dl [201:1-209:43]" 
       (TIMER_ON @new_relative_address "@t-recursive-rule;relative_address;0;binary/pe/jump_tables.dl [201:1-209:43];relative_address((EA+1),1,IndexTable,AddressTable,(AddressTable+(@functor_data_unsigned((EA+1),1)*4)),\\\"first\\\") :- \\n   base_address(ImageBase),\\n   relative_address(EA,1,IndexTable,AddressTable,_,\\\"first\\\"),\\n   @functor_data_valid((EA+1),1) = 1,\\n   @functor_data_valid((AddressTable+(@functor_data_unsigned((EA+1),1)*4)),4) = 1,\\n   instruction(<inlined_EA_1308>,_,_,_,_,_,_,_,_,_),\\n   !invalid(<inlined_EA_1308>,_),\\n   <inlined_EA_1308> = (ImageBase+as(@functor_data_signed((AddressTable+(@functor_data_unsigned((EA+1),1)*4)),4), unsigned)),\\n   !relative_address_start((EA+1),_,_,_,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY base_address))) (NOT (ISEMPTY @delta_relative_address)))
          (FOR_IN t0 base_address            (FOR t1 @delta_relative_address (INDEX  (= (TUPLE t1 1) (UNSIGNED 1)) (= (TUPLE t1 5) (STRING "first")))
            (IF (AND (AND (AND (NOT (EXISTS relative_address ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 1)) (UNSIGNED 1) (TUPLE t1 2) (TUPLE t1 3) (INTRINSIC + (TUPLE t1 3) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 1)) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")))) (NOT (EXISTS relative_address_start ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 1)) UNDEF UNDEF UNDEF UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 1)) (UNSIGNED 1)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t1 3) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 1)) (UNSIGNED 1))) (UNSIGNED 4))) (UNSIGNED 4)))  (UNSIGNED 1)))
             (INDEXED_IF_EXISTS t2 instruction (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t1 3) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 1)) (UNSIGNED 1))) (UNSIGNED 4))) (UNSIGNED 4)))))) (NOT (EXISTS invalid ((TUPLE t2 0) UNDEF)))
              (INSERT ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 1)) (UNSIGNED 1) (TUPLE t1 2) (TUPLE t1 3) (INTRINSIC + (TUPLE t1 3) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 1)) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")) @new_relative_address)
)            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_relative_address "@t-recursive-relation;relative_address;relative_jump_tables.dl [43:7-43:23];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_relative_address))
 ) (STMTS      (TIMER_ON @new_relative_address "@c-recursive-relation;relative_address;relative_jump_tables.dl [43:7-43:23];"
(STMTS (QUERY
       (FOR_IN t0 @new_relative_address         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) relative_address)
)
      )
       (SWAP @delta_relative_address @new_relative_address)
       (CLEAR @new_relative_address)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_relative_address)
     (CLEAR @new_relative_address)
 ) )  )  )  )
  (SUBROUTINE relative_address_start
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON relative_address_start "@t-nonrecursive-relation;relative_address_start;relative_jump_tables.dl [45:7-45:29];"
(STMTS      (DEBUG 
 "relative_address_start(Table,8,Ref,as((as(Ref, number)+@functor_data_signed(Table,8)), address),\"first\") :- \n   jump_table_prelude(EA1,_),\n   take_address(EA1,Table),\n   next(EA1,EA2),\n   arch.memory_access(\"LOAD\",EA2,_,_,_,_,_,_,_),\n   next(EA2,EA3),\n   take_address(EA3,Ref),\n   @functor_data_valid(Table,8) = 1,\n   instruction( _tmp_291,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(Ref, number)+@functor_data_signed(Table,8)), address),_),\n    _tmp_291 = as((as(Ref, number)+@functor_data_signed(Table,8)), address).\nin file jump_tables.dl [48:1-61:23]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;binary/pe/jump_tables.dl [48:1-61:23];relative_address_start(Table,8,Ref,as((as(Ref, number)+@functor_data_signed(Table,8)), address),\\\"first\\\") :- \\n   jump_table_prelude(EA1,_),\\n   take_address(EA1,Table),\\n   next(EA1,EA2),\\n   arch.memory_access(\\\"LOAD\\\",EA2,_,_,_,_,_,_,_),\\n   next(EA2,EA3),\\n   take_address(EA3,Ref),\\n   @functor_data_valid(Table,8) = 1,\\n   instruction( _tmp_291,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(Ref, number)+@functor_data_signed(Table,8)), address),_),\\n    _tmp_291 = as((as(Ref, number)+@functor_data_signed(Table,8)), address).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY jump_table_prelude)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY take_address)))
         (FOR_IN t0 jump_table_prelude           (FOR t1 take_address (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t1 1) (UNSIGNED 8)))  (UNSIGNED 1))
            (FOR t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t2 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (FOR t3 next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (FOR t4 take_address (INDEX  (= (TUPLE t4 0) (TUPLE t3 1)))
                (IF (AND (EXISTS instruction ((INTRINSIC + (TUPLE t4 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t1 1) (UNSIGNED 8)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t4 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t1 1) (UNSIGNED 8)))) UNDEF))))
                 (INSERT ((TUPLE t1 1) (UNSIGNED 8) (TUPLE t4 1) (INTRINSIC + (TUPLE t4 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t1 1) (UNSIGNED 8)))) (STRING "first")) relative_address_start)
                )))             ))           )))
        )       )
      )
     )
      (DEBUG 
 "relative_address_start((ImageBase+as(Offset, unsigned)),4,ImageBase,as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),4)), address),\"first\") :- \n   base_address(ImageBase),\n   jump_table_prelude(EA,_),\n   instruction(EA,_,_,<inlined_Operation_305>,_,_,_,_,_,_),\n   <inlined_Operation_305> = \"MOV\",\n   instruction_get_src_op(EA,_,Op),\n   op_indirect_mapped(Op,_,RegBase,RegIndex,Mult,Offset,Size),\n   Offset > 0,\n   4 = as(Mult, unsigned),\n   (4*8) = Size,\n   RegBase != \"NONE\",\n   RegIndex != \"NONE\",\n   @functor_data_valid((ImageBase+as(Offset, unsigned)),4) = 1,\n   instruction( _tmp_292,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),4)), address),_),\n    _tmp_292 = as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),4)), address).\nin file jump_tables.dl [64:1-78:23]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;binary/pe/jump_tables.dl [64:1-78:23];relative_address_start((ImageBase+as(Offset, unsigned)),4,ImageBase,as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),4)), address),\\\"first\\\") :- \\n   base_address(ImageBase),\\n   jump_table_prelude(EA,_),\\n   instruction(EA,_,_,<inlined_Operation_305>,_,_,_,_,_,_),\\n   <inlined_Operation_305> = \\\"MOV\\\",\\n   instruction_get_src_op(EA,_,Op),\\n   op_indirect_mapped(Op,_,RegBase,RegIndex,Mult,Offset,Size),\\n   Offset > 0,\\n   4 = as(Mult, unsigned),\\n   (4*8) = Size,\\n   RegBase != \\\"NONE\\\",\\n   RegIndex != \\\"NONE\\\",\\n   @functor_data_valid((ImageBase+as(Offset, unsigned)),4) = 1,\\n   instruction( _tmp_292,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),4)), address),_),\\n    _tmp_292 = as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),4)), address).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY jump_table_prelude)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY instruction_get_src_op))) (NOT (ISEMPTY base_address))) (NOT (ISEMPTY op_indirect_mapped)))
         (FOR_IN t0 base_address           (FOR_IN t1 jump_table_prelude            (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "MOV") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
            (FOR t2 instruction_get_src_op (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (FOR t3 op_indirect_mapped (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 4) (UNSIGNED 4)) (<= (NUMBER 0) (TUPLE t3 5) ) (= (TUPLE t3 6) (INTRINSIC * (UNSIGNED 4) (UNSIGNED 8))))
              (IF (AND (AND (AND (AND (AND (CONSTRAINT != (TUPLE t3 5)  (NUMBER 0)) (CONSTRAINT != (TUPLE t3 3)  (STRING "NONE"))) (CONSTRAINT != (TUPLE t3 2)  (STRING "NONE"))) (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t0 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 4)))) UNDEF)))) (EXISTS instruction ((INTRINSIC + (TUPLE t0 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 4)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 4)))  (UNSIGNED 1)))
               (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 4) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 4)))) (STRING "first")) relative_address_start)
              )))           ))
)
        )       )
      )
     )
      (DEBUG 
 "relative_address_start((ImageBase+as(Offset, unsigned)),8,ImageBase,as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),8)), address),\"first\") :- \n   base_address(ImageBase),\n   jump_table_prelude(EA,_),\n   instruction(EA,_,_,<inlined_Operation_306>,_,_,_,_,_,_),\n   <inlined_Operation_306> = \"MOV\",\n   instruction_get_src_op(EA,_,Op),\n   op_indirect_mapped(Op,_,RegBase,RegIndex,Mult,Offset,Size),\n   Offset > 0,\n   8 = as(Mult, unsigned),\n   (8*8) = Size,\n   RegBase != \"NONE\",\n   RegIndex != \"NONE\",\n   @functor_data_valid((ImageBase+as(Offset, unsigned)),8) = 1,\n   instruction( _tmp_293,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),8)), address),_),\n    _tmp_293 = as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),8)), address).\nin file jump_tables.dl [64:1-78:23]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;binary/pe/jump_tables.dl [64:1-78:23];relative_address_start((ImageBase+as(Offset, unsigned)),8,ImageBase,as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),8)), address),\\\"first\\\") :- \\n   base_address(ImageBase),\\n   jump_table_prelude(EA,_),\\n   instruction(EA,_,_,<inlined_Operation_306>,_,_,_,_,_,_),\\n   <inlined_Operation_306> = \\\"MOV\\\",\\n   instruction_get_src_op(EA,_,Op),\\n   op_indirect_mapped(Op,_,RegBase,RegIndex,Mult,Offset,Size),\\n   Offset > 0,\\n   8 = as(Mult, unsigned),\\n   (8*8) = Size,\\n   RegBase != \\\"NONE\\\",\\n   RegIndex != \\\"NONE\\\",\\n   @functor_data_valid((ImageBase+as(Offset, unsigned)),8) = 1,\\n   instruction( _tmp_293,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),8)), address),_),\\n    _tmp_293 = as((as(ImageBase, number)+@functor_data_signed((ImageBase+as(Offset, unsigned)),8)), address).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY jump_table_prelude)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY instruction_get_src_op))) (NOT (ISEMPTY base_address))) (NOT (ISEMPTY op_indirect_mapped)))
         (FOR_IN t0 base_address           (FOR_IN t1 jump_table_prelude            (IF (EXISTS instruction ((TUPLE t1 0) UNDEF UNDEF (STRING "MOV") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
            (FOR t2 instruction_get_src_op (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (FOR t3 op_indirect_mapped (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 4) (UNSIGNED 8)) (<= (NUMBER 0) (TUPLE t3 5) ) (= (TUPLE t3 6) (INTRINSIC * (UNSIGNED 8) (UNSIGNED 8))))
              (IF (AND (AND (AND (AND (AND (CONSTRAINT != (TUPLE t3 5)  (NUMBER 0)) (CONSTRAINT != (TUPLE t3 3)  (STRING "NONE"))) (CONSTRAINT != (TUPLE t3 2)  (STRING "NONE"))) (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t0 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 8)))) UNDEF)))) (EXISTS instruction ((INTRINSIC + (TUPLE t0 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 8)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 8)))  (UNSIGNED 1)))
               (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 8) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 8)))) (STRING "first")) relative_address_start)
              )))           ))
)
        )       )
      )
     )
      (DEBUG 
 "relative_address_start((ImageBase+as(Offset1, unsigned)),1,(ImageBase+as(Offset2, unsigned)),((ImageBase+as(Offset2, unsigned))+@functor_data_unsigned((ImageBase+as(Offset1, unsigned)),1)),\"first\") :- \n   base_address(ImageBase),\n   arch.memory_access(\"LOAD\",EA1,_,_,_,_,_,_,_),\n   instruction_get_src_op(EA1,_,Op1),\n   op_indirect(Op1,_,_,_,1,Offset1,8),\n   Offset1 > 0,\n   @functor_data_valid((ImageBase+as(Offset1, unsigned)),1) = 1,\n   next(EA1,EA2),\n   instruction_get_src_op(EA2,_,Op2),\n   op_indirect(Op2,_,_,_,4,Offset2,32),\n   Offset2 > 0.\nin file jump_tables.dl [135:1-148:23]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;binary/pe/jump_tables.dl [135:1-148:23];relative_address_start((ImageBase+as(Offset1, unsigned)),1,(ImageBase+as(Offset2, unsigned)),((ImageBase+as(Offset2, unsigned))+@functor_data_unsigned((ImageBase+as(Offset1, unsigned)),1)),\\\"first\\\") :- \\n   base_address(ImageBase),\\n   arch.memory_access(\\\"LOAD\\\",EA1,_,_,_,_,_,_,_),\\n   instruction_get_src_op(EA1,_,Op1),\\n   op_indirect(Op1,_,_,_,1,Offset1,8),\\n   Offset1 > 0,\\n   @functor_data_valid((ImageBase+as(Offset1, unsigned)),1) = 1,\\n   next(EA1,EA2),\\n   instruction_get_src_op(EA2,_,Op2),\\n   op_indirect(Op2,_,_,_,4,Offset2,32),\\n   Offset2 > 0.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY arch.memory_access)) (NOT (ISEMPTY op_indirect))) (NOT (ISEMPTY next))) (NOT (ISEMPTY base_address))) (NOT (ISEMPTY instruction_get_src_op)))
         (FOR_IN t0 base_address           (FOR t1 arch.memory_access (INDEX  (= (TUPLE t1 0) (STRING "LOAD")))
           (FOR t2 instruction_get_src_op (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
            (FOR t3 op_indirect (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 4) (NUMBER 1)) (<= (NUMBER 0) (TUPLE t3 5) ) (= (TUPLE t3 6) (UNSIGNED 8)))
             (IF (AND (CONSTRAINT != (TUPLE t3 5)  (NUMBER 0)) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 1)))  (UNSIGNED 1)))
              (FOR t4 next (INDEX  (= (TUPLE t4 0) (TUPLE t1 1)))
               (FOR t5 instruction_get_src_op (INDEX  (= (TUPLE t5 0) (TUPLE t4 1)))
                (FOR t6 op_indirect (INDEX  (= (TUPLE t6 0) (TUPLE t5 2)) (= (TUPLE t6 4) (NUMBER 4)) (<= (NUMBER 0) (TUPLE t6 5) ) (= (TUPLE t6 6) (UNSIGNED 32)))
                 (IF (CONSTRAINT != (TUPLE t6 5)  (NUMBER 0))
                  (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t6 5)) (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t6 5)) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t3 5)) (UNSIGNED 1)))) (STRING "first")) relative_address_start)
                 ))))             )))))
        )       )
      )
     )
      (DEBUG 
 "relative_address_start(EA,4,EA,as((as(EA, number)-@functor_data_signed(EA,4)), address),\"second\") :- \n   take_address(_,EA),\n   @functor_data_valid(EA,4) = 1,\n   @functor_data_signed(EA,4) != 0,\n   binary_format(\"PE\"),\n   @functor_data_valid((EA+4),4) = 1,\n   @functor_data_signed((EA+4),4) != 0,\n   @functor_data_signed(EA,4) <= 0,\n   @functor_data_signed((EA+4),4) <= 0,\n   instruction( _tmp_294,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)-@functor_data_signed(EA,4)), address),_),\n   instruction( _tmp_295,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)-@functor_data_signed((EA+4),4)), address),_),\n    _tmp_294 = as((as(EA, number)-@functor_data_signed(EA,4)), address),\n    _tmp_295 = as((as(EA, number)-@functor_data_signed((EA+4),4)), address).\nin file relative_jump_tables.dl [47:1-76:24]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;relative_jump_tables.dl [47:1-76:24];relative_address_start(EA,4,EA,as((as(EA, number)-@functor_data_signed(EA,4)), address),\\\"second\\\") :- \\n   take_address(_,EA),\\n   @functor_data_valid(EA,4) = 1,\\n   @functor_data_signed(EA,4) != 0,\\n   binary_format(\\\"PE\\\"),\\n   @functor_data_valid((EA+4),4) = 1,\\n   @functor_data_signed((EA+4),4) != 0,\\n   @functor_data_signed(EA,4) <= 0,\\n   @functor_data_signed((EA+4),4) <= 0,\\n   instruction( _tmp_294,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)-@functor_data_signed(EA,4)), address),_),\\n   instruction( _tmp_295,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)-@functor_data_signed((EA+4),4)), address),_),\\n    _tmp_294 = as((as(EA, number)-@functor_data_signed(EA,4)), address),\\n    _tmp_295 = as((as(EA, number)-@functor_data_signed((EA+4),4)), address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY take_address))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 take_address           (IF (AND (AND (AND (AND (AND (AND (AND (AND (AND (NOT (EXISTS invalid ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) UNDEF))) (EXISTS instruction ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (EXISTS instruction ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))) UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (UNSIGNED 1))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT <= (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (UNSIGNED 1))) (CONSTRAINT <= (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (NUMBER 0)))
           (INSERT ((TUPLE t0 1) (UNSIGNED 4) (TUPLE t0 1) (INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) (STRING "second")) relative_address_start)
          ))
        )       )
      )
     )
      (DEBUG 
 "relative_address_start(EA,4,EA,as((as(EA, number)+@functor_data_signed(EA,4)), address),\"first\") :- \n   take_address(_,EA),\n   @functor_data_valid(EA,4) = 1,\n   @functor_data_signed(EA,4) != 0,\n   binary_format(\"PE\"),\n   @functor_data_valid((EA+4),4) = 1,\n   @functor_data_signed((EA+4),4) != 0,\n   @functor_data_signed(EA,4) <= 0,\n   @functor_data_signed((EA+4),4) <= 0,\n   instruction( _tmp_296,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)+@functor_data_signed(EA,4)), address),_),\n   instruction( _tmp_297,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)+@functor_data_signed((EA+4),4)), address),_),\n    _tmp_296 = as((as(EA, number)+@functor_data_signed(EA,4)), address),\n    _tmp_297 = as((as(EA, number)+@functor_data_signed((EA+4),4)), address).\nin file relative_jump_tables.dl [47:1-76:24]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;relative_jump_tables.dl [47:1-76:24];relative_address_start(EA,4,EA,as((as(EA, number)+@functor_data_signed(EA,4)), address),\\\"first\\\") :- \\n   take_address(_,EA),\\n   @functor_data_valid(EA,4) = 1,\\n   @functor_data_signed(EA,4) != 0,\\n   binary_format(\\\"PE\\\"),\\n   @functor_data_valid((EA+4),4) = 1,\\n   @functor_data_signed((EA+4),4) != 0,\\n   @functor_data_signed(EA,4) <= 0,\\n   @functor_data_signed((EA+4),4) <= 0,\\n   instruction( _tmp_296,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)+@functor_data_signed(EA,4)), address),_),\\n   instruction( _tmp_297,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)+@functor_data_signed((EA+4),4)), address),_),\\n    _tmp_296 = as((as(EA, number)+@functor_data_signed(EA,4)), address),\\n    _tmp_297 = as((as(EA, number)+@functor_data_signed((EA+4),4)), address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY take_address))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 take_address           (IF (AND (AND (AND (AND (AND (AND (AND (AND (AND (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) UNDEF))) (EXISTS instruction ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (EXISTS instruction ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))) UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (UNSIGNED 1))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT <= (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (UNSIGNED 1))) (CONSTRAINT <= (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (NUMBER 0)))
           (INSERT ((TUPLE t0 1) (UNSIGNED 4) (TUPLE t0 1) (INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) (STRING "first")) relative_address_start)
          ))
        )       )
      )
     )
      (DEBUG 
 "relative_address_start(EA,8,EA,as((as(EA, number)-@functor_data_signed(EA,8)), address),\"second\") :- \n   take_address(_,EA),\n   @functor_data_valid(EA,8) = 1,\n   @functor_data_signed(EA,8) != 0,\n   binary_format(\"PE\"),\n   @functor_data_valid((EA+8),8) = 1,\n   @functor_data_signed((EA+8),8) != 0,\n   !relocation(EA,_,_,_,_,_,_),\n   instruction( _tmp_298,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)-@functor_data_signed(EA,8)), address),_),\n   instruction( _tmp_299,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)-@functor_data_signed((EA+8),8)), address),_),\n    _tmp_298 = as((as(EA, number)-@functor_data_signed(EA,8)), address),\n    _tmp_299 = as((as(EA, number)-@functor_data_signed((EA+8),8)), address).\nin file relative_jump_tables.dl [47:1-76:24]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;relative_jump_tables.dl [47:1-76:24];relative_address_start(EA,8,EA,as((as(EA, number)-@functor_data_signed(EA,8)), address),\\\"second\\\") :- \\n   take_address(_,EA),\\n   @functor_data_valid(EA,8) = 1,\\n   @functor_data_signed(EA,8) != 0,\\n   binary_format(\\\"PE\\\"),\\n   @functor_data_valid((EA+8),8) = 1,\\n   @functor_data_signed((EA+8),8) != 0,\\n   !relocation(EA,_,_,_,_,_,_),\\n   instruction( _tmp_298,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)-@functor_data_signed(EA,8)), address),_),\\n   instruction( _tmp_299,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)-@functor_data_signed((EA+8),8)), address),_),\\n    _tmp_298 = as((as(EA, number)-@functor_data_signed(EA,8)), address),\\n    _tmp_299 = as((as(EA, number)-@functor_data_signed((EA+8),8)), address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY take_address))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 take_address           (IF (AND (AND (AND (AND (AND (AND (AND (AND (EXISTS instruction ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (NOT (EXISTS invalid ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))) UNDEF)))) (NOT (EXISTS relocation ((TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (EXISTS instruction ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) UNDEF)))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))  (NUMBER 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))  (NUMBER 0)))
           (INSERT ((TUPLE t0 1) (UNSIGNED 8) (TUPLE t0 1) (INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) (STRING "second")) relative_address_start)
          ))
        )       )
      )
     )
      (DEBUG 
 "relative_address_start(EA,8,EA,as((as(EA, number)+@functor_data_signed(EA,8)), address),\"first\") :- \n   take_address(_,EA),\n   @functor_data_valid(EA,8) = 1,\n   @functor_data_signed(EA,8) != 0,\n   binary_format(\"PE\"),\n   @functor_data_valid((EA+8),8) = 1,\n   @functor_data_signed((EA+8),8) != 0,\n   !relocation(EA,_,_,_,_,_,_),\n   instruction( _tmp_300,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)+@functor_data_signed(EA,8)), address),_),\n   instruction( _tmp_301,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)+@functor_data_signed((EA+8),8)), address),_),\n    _tmp_300 = as((as(EA, number)+@functor_data_signed(EA,8)), address),\n    _tmp_301 = as((as(EA, number)+@functor_data_signed((EA+8),8)), address).\nin file relative_jump_tables.dl [47:1-76:24]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;relative_jump_tables.dl [47:1-76:24];relative_address_start(EA,8,EA,as((as(EA, number)+@functor_data_signed(EA,8)), address),\\\"first\\\") :- \\n   take_address(_,EA),\\n   @functor_data_valid(EA,8) = 1,\\n   @functor_data_signed(EA,8) != 0,\\n   binary_format(\\\"PE\\\"),\\n   @functor_data_valid((EA+8),8) = 1,\\n   @functor_data_signed((EA+8),8) != 0,\\n   !relocation(EA,_,_,_,_,_,_),\\n   instruction( _tmp_300,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)+@functor_data_signed(EA,8)), address),_),\\n   instruction( _tmp_301,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)+@functor_data_signed((EA+8),8)), address),_),\\n    _tmp_300 = as((as(EA, number)+@functor_data_signed(EA,8)), address),\\n    _tmp_301 = as((as(EA, number)+@functor_data_signed((EA+8),8)), address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY take_address))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 take_address           (IF (AND (AND (AND (AND (AND (AND (AND (AND (EXISTS instruction ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))) UNDEF)))) (NOT (EXISTS relocation ((TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (EXISTS instruction ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) UNDEF)))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))  (NUMBER 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))  (NUMBER 0)))
           (INSERT ((TUPLE t0 1) (UNSIGNED 8) (TUPLE t0 1) (INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) (STRING "first")) relative_address_start)
          ))
        )       )
      )
     )
      (DEBUG 
 "relative_address_start(EA,4,EA,as((as(EA, number)-@functor_data_signed(EA,4)), address),\"second\") :- \n   take_address(_,EA),\n   @functor_data_valid(EA,4) = 1,\n   @functor_data_signed(EA,4) != 0,\n   (EA%4) = 0,\n   @functor_data_valid((EA+4),4) = 1,\n   @functor_data_signed((EA+4),4) != 0,\n   @functor_data_signed(EA,4) <= 0,\n   @functor_data_signed((EA+4),4) <= 0,\n   instruction( _tmp_302,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)-@functor_data_signed(EA,4)), address),_),\n   instruction( _tmp_303,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)-@functor_data_signed((EA+4),4)), address),_),\n    _tmp_302 = as((as(EA, number)-@functor_data_signed(EA,4)), address),\n    _tmp_303 = as((as(EA, number)-@functor_data_signed((EA+4),4)), address).\nin file relative_jump_tables.dl [47:1-76:24]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;relative_jump_tables.dl [47:1-76:24];relative_address_start(EA,4,EA,as((as(EA, number)-@functor_data_signed(EA,4)), address),\\\"second\\\") :- \\n   take_address(_,EA),\\n   @functor_data_valid(EA,4) = 1,\\n   @functor_data_signed(EA,4) != 0,\\n   (EA%4) = 0,\\n   @functor_data_valid((EA+4),4) = 1,\\n   @functor_data_signed((EA+4),4) != 0,\\n   @functor_data_signed(EA,4) <= 0,\\n   @functor_data_signed((EA+4),4) <= 0,\\n   instruction( _tmp_302,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)-@functor_data_signed(EA,4)), address),_),\\n   instruction( _tmp_303,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)-@functor_data_signed((EA+4),4)), address),_),\\n    _tmp_302 = as((as(EA, number)-@functor_data_signed(EA,4)), address),\\n    _tmp_303 = as((as(EA, number)-@functor_data_signed((EA+4),4)), address).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY take_address)))
         (FOR_IN t0 take_address           (IF (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (CONSTRAINT = (INTRINSIC % (TUPLE t0 1) (UNSIGNED 4))  (UNSIGNED 0)) (EXISTS instruction ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))) UNDEF)))) (EXISTS instruction ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (UNSIGNED 1))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT <= (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (UNSIGNED 1))) (CONSTRAINT <= (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (NUMBER 0)))
           (INSERT ((TUPLE t0 1) (UNSIGNED 4) (TUPLE t0 1) (INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) (STRING "second")) relative_address_start)
          ))
        )       )
      )
     )
      (DEBUG 
 "relative_address_start(EA,4,EA,as((as(EA, number)+@functor_data_signed(EA,4)), address),\"first\") :- \n   take_address(_,EA),\n   @functor_data_valid(EA,4) = 1,\n   @functor_data_signed(EA,4) != 0,\n   (EA%4) = 0,\n   @functor_data_valid((EA+4),4) = 1,\n   @functor_data_signed((EA+4),4) != 0,\n   @functor_data_signed(EA,4) <= 0,\n   @functor_data_signed((EA+4),4) <= 0,\n   instruction( _tmp_304,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)+@functor_data_signed(EA,4)), address),_),\n   instruction( _tmp_305,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)+@functor_data_signed((EA+4),4)), address),_),\n    _tmp_304 = as((as(EA, number)+@functor_data_signed(EA,4)), address),\n    _tmp_305 = as((as(EA, number)+@functor_data_signed((EA+4),4)), address).\nin file relative_jump_tables.dl [47:1-76:24]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;relative_jump_tables.dl [47:1-76:24];relative_address_start(EA,4,EA,as((as(EA, number)+@functor_data_signed(EA,4)), address),\\\"first\\\") :- \\n   take_address(_,EA),\\n   @functor_data_valid(EA,4) = 1,\\n   @functor_data_signed(EA,4) != 0,\\n   (EA%4) = 0,\\n   @functor_data_valid((EA+4),4) = 1,\\n   @functor_data_signed((EA+4),4) != 0,\\n   @functor_data_signed(EA,4) <= 0,\\n   @functor_data_signed((EA+4),4) <= 0,\\n   instruction( _tmp_304,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)+@functor_data_signed(EA,4)), address),_),\\n   instruction( _tmp_305,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)+@functor_data_signed((EA+4),4)), address),_),\\n    _tmp_304 = as((as(EA, number)+@functor_data_signed(EA,4)), address),\\n    _tmp_305 = as((as(EA, number)+@functor_data_signed((EA+4),4)), address).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY take_address)))
         (FOR_IN t0 take_address           (IF (AND (AND (AND (AND (AND (AND (AND (AND (AND (AND (CONSTRAINT = (INTRINSIC % (TUPLE t0 1) (UNSIGNED 4))  (UNSIGNED 0)) (EXISTS instruction ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))) UNDEF)))) (EXISTS instruction ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (UNSIGNED 1))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT <= (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (NUMBER 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))  (UNSIGNED 1))) (CONSTRAINT <= (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 4)) (UNSIGNED 4)))  (NUMBER 0)))
           (INSERT ((TUPLE t0 1) (UNSIGNED 4) (TUPLE t0 1) (INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 4)))) (STRING "first")) relative_address_start)
          ))
        )       )
      )
     )
      (DEBUG 
 "relative_address_start(EA,8,EA,as((as(EA, number)-@functor_data_signed(EA,8)), address),\"second\") :- \n   take_address(_,EA),\n   @functor_data_valid(EA,8) = 1,\n   @functor_data_signed(EA,8) != 0,\n   (EA%8) = 0,\n   @functor_data_valid((EA+8),8) = 1,\n   @functor_data_signed((EA+8),8) != 0,\n   !relocation(EA,_,_,_,_,_,_),\n   instruction( _tmp_306,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)-@functor_data_signed(EA,8)), address),_),\n   instruction( _tmp_307,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)-@functor_data_signed((EA+8),8)), address),_),\n    _tmp_306 = as((as(EA, number)-@functor_data_signed(EA,8)), address),\n    _tmp_307 = as((as(EA, number)-@functor_data_signed((EA+8),8)), address).\nin file relative_jump_tables.dl [47:1-76:24]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;relative_jump_tables.dl [47:1-76:24];relative_address_start(EA,8,EA,as((as(EA, number)-@functor_data_signed(EA,8)), address),\\\"second\\\") :- \\n   take_address(_,EA),\\n   @functor_data_valid(EA,8) = 1,\\n   @functor_data_signed(EA,8) != 0,\\n   (EA%8) = 0,\\n   @functor_data_valid((EA+8),8) = 1,\\n   @functor_data_signed((EA+8),8) != 0,\\n   !relocation(EA,_,_,_,_,_,_),\\n   instruction( _tmp_306,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)-@functor_data_signed(EA,8)), address),_),\\n   instruction( _tmp_307,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)-@functor_data_signed((EA+8),8)), address),_),\\n    _tmp_306 = as((as(EA, number)-@functor_data_signed(EA,8)), address),\\n    _tmp_307 = as((as(EA, number)-@functor_data_signed((EA+8),8)), address).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY take_address)))
         (FOR_IN t0 take_address           (IF (AND (AND (AND (AND (AND (AND (AND (AND (AND (CONSTRAINT = (INTRINSIC % (TUPLE t0 1) (UNSIGNED 8))  (UNSIGNED 0)) (NOT (EXISTS relocation ((TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (EXISTS instruction ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))) UNDEF)))) (EXISTS instruction ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) UNDEF)))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))  (NUMBER 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))  (NUMBER 0)))
           (INSERT ((TUPLE t0 1) (UNSIGNED 8) (TUPLE t0 1) (INTRINSIC - (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) (STRING "second")) relative_address_start)
          ))
        )       )
      )
     )
      (DEBUG 
 "relative_address_start(EA,8,EA,as((as(EA, number)+@functor_data_signed(EA,8)), address),\"first\") :- \n   take_address(_,EA),\n   @functor_data_valid(EA,8) = 1,\n   @functor_data_signed(EA,8) != 0,\n   (EA%8) = 0,\n   @functor_data_valid((EA+8),8) = 1,\n   @functor_data_signed((EA+8),8) != 0,\n   !relocation(EA,_,_,_,_,_,_),\n   instruction( _tmp_308,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)+@functor_data_signed(EA,8)), address),_),\n   instruction( _tmp_309,_,_,_,_,_,_,_,_,_),\n   !invalid(as((as(EA, number)+@functor_data_signed((EA+8),8)), address),_),\n    _tmp_308 = as((as(EA, number)+@functor_data_signed(EA,8)), address),\n    _tmp_309 = as((as(EA, number)+@functor_data_signed((EA+8),8)), address).\nin file relative_jump_tables.dl [47:1-76:24]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;relative_jump_tables.dl [47:1-76:24];relative_address_start(EA,8,EA,as((as(EA, number)+@functor_data_signed(EA,8)), address),\\\"first\\\") :- \\n   take_address(_,EA),\\n   @functor_data_valid(EA,8) = 1,\\n   @functor_data_signed(EA,8) != 0,\\n   (EA%8) = 0,\\n   @functor_data_valid((EA+8),8) = 1,\\n   @functor_data_signed((EA+8),8) != 0,\\n   !relocation(EA,_,_,_,_,_,_),\\n   instruction( _tmp_308,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)+@functor_data_signed(EA,8)), address),_),\\n   instruction( _tmp_309,_,_,_,_,_,_,_,_,_),\\n   !invalid(as((as(EA, number)+@functor_data_signed((EA+8),8)), address),_),\\n    _tmp_308 = as((as(EA, number)+@functor_data_signed(EA,8)), address),\\n    _tmp_309 = as((as(EA, number)+@functor_data_signed((EA+8),8)), address).;"
(QUERY
        (IF (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY take_address)))
         (FOR_IN t0 take_address           (IF (AND (AND (AND (AND (AND (AND (AND (AND (AND (CONSTRAINT = (INTRINSIC % (TUPLE t0 1) (UNSIGNED 8))  (UNSIGNED 0)) (NOT (EXISTS relocation ((TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (EXISTS instruction ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))) UNDEF)))) (EXISTS instruction ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) UNDEF)))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))  (NUMBER 0))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT != (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 1) (UNSIGNED 8)) (UNSIGNED 8)))  (NUMBER 0)))
           (INSERT ((TUPLE t0 1) (UNSIGNED 8) (TUPLE t0 1) (INTRINSIC + (TUPLE t0 1) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 1) (UNSIGNED 8)))) (STRING "first")) relative_address_start)
          ))
        )       )
      )
     )
      (DEBUG 
 "relative_address_start(as(Offset, address),8,0,as(@functor_data_signed(as(Offset, address),8), address),\"first\") :- \n   indirect_jump(EA),\n   instruction_get_op(EA,_,Op),\n   op_indirect(Op,\"NONE\",\"NONE\",_,Mult,Offset,_),\n   8 = as(Mult, unsigned),\n   @functor_data_valid(as(Offset, address),8) = 1,\n   instruction( _tmp_310,_,_,_,_,_,_,_,_,_),\n   !invalid(as(@functor_data_signed(as(Offset, address),8), address),_),\n   @functor_data_valid((as(Offset, address)+8),8) = 1,\n   instruction( _tmp_311,_,_,_,_,_,_,_,_,_),\n   !invalid(as(@functor_data_signed((as(Offset, address)+8),8), address),_),\n    _tmp_310 = as(@functor_data_signed(as(Offset, address),8), address),\n    _tmp_311 = as(@functor_data_signed((as(Offset, address)+8),8), address).\nin file jump_tables.dl [152:1-169:24]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;binary/pe/jump_tables.dl [152:1-169:24];relative_address_start(as(Offset, address),8,0,as(@functor_data_signed(as(Offset, address),8), address),\\\"first\\\") :- \\n   indirect_jump(EA),\\n   instruction_get_op(EA,_,Op),\\n   op_indirect(Op,\\\"NONE\\\",\\\"NONE\\\",_,Mult,Offset,_),\\n   8 = as(Mult, unsigned),\\n   @functor_data_valid(as(Offset, address),8) = 1,\\n   instruction( _tmp_310,_,_,_,_,_,_,_,_,_),\\n   !invalid(as(@functor_data_signed(as(Offset, address),8), address),_),\\n   @functor_data_valid((as(Offset, address)+8),8) = 1,\\n   instruction( _tmp_311,_,_,_,_,_,_,_,_,_),\\n   !invalid(as(@functor_data_signed((as(Offset, address)+8),8), address),_),\\n    _tmp_310 = as(@functor_data_signed(as(Offset, address),8), address),\\n    _tmp_311 = as(@functor_data_signed((as(Offset, address)+8),8), address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY indirect_jump))) (NOT (ISEMPTY op_indirect)))
         (FOR_IN t0 indirect_jump           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 op_indirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (STRING "NONE")) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 4) (UNSIGNED 8)))
            (IF (AND (AND (AND (AND (AND (NOT (EXISTS invalid ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t2 5) (UNSIGNED 8))) UNDEF))) (EXISTS instruction ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t2 5) (UNSIGNED 8))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (EXISTS instruction ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t2 5) (UNSIGNED 8)) (UNSIGNED 8))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t2 5) (UNSIGNED 8)) (UNSIGNED 8))) UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t2 5) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t2 5) (UNSIGNED 8)) (UNSIGNED 8)))  (UNSIGNED 1)))
             (INSERT ((TUPLE t2 5) (UNSIGNED 8) (UNSIGNED 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t2 5) (UNSIGNED 8))) (STRING "first")) relative_address_start)
            ))))
        )       )
      )
     )
      (DEBUG 
 "relative_address_start(as(Offset, address),4,0,as(@functor_data_signed(as(Offset, address),4), address),\"first\") :- \n   instruction(EA_load,_,_,\"LEA\",Op,_,_,_,_,_),\n   op_indirect(Op,\"NONE\",\"NONE\",\"NONE\",_,Offset,_),\n   @functor_data_valid(as(Offset, address),4) = 1,\n   instruction( _tmp_312,_,_,_,_,_,_,_,_,_),\n   !invalid(as(@functor_data_signed(as(Offset, address),4), address),_),\n   @functor_data_valid((as(Offset, address)+4),4) = 1,\n   instruction( _tmp_313,_,_,_,_,_,_,_,_,_),\n   !invalid(as(@functor_data_signed((as(Offset, address)+4),4), address),_),\n   next(EA_load,EA_mov),\n   arch.memory_access(\"LOAD\",EA_mov,_,_,_,_,_,_,_),\n   next(EA_mov,EA_call),\n   reg_call(EA_call,_),\n    _tmp_312 = as(@functor_data_signed(as(Offset, address),4), address),\n    _tmp_313 = as(@functor_data_signed((as(Offset, address)+4),4), address).\nin file jump_tables.dl [182:1-199:25]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;binary/pe/jump_tables.dl [182:1-199:25];relative_address_start(as(Offset, address),4,0,as(@functor_data_signed(as(Offset, address),4), address),\\\"first\\\") :- \\n   instruction(EA_load,_,_,\\\"LEA\\\",Op,_,_,_,_,_),\\n   op_indirect(Op,\\\"NONE\\\",\\\"NONE\\\",\\\"NONE\\\",_,Offset,_),\\n   @functor_data_valid(as(Offset, address),4) = 1,\\n   instruction( _tmp_312,_,_,_,_,_,_,_,_,_),\\n   !invalid(as(@functor_data_signed(as(Offset, address),4), address),_),\\n   @functor_data_valid((as(Offset, address)+4),4) = 1,\\n   instruction( _tmp_313,_,_,_,_,_,_,_,_,_),\\n   !invalid(as(@functor_data_signed((as(Offset, address)+4),4), address),_),\\n   next(EA_load,EA_mov),\\n   arch.memory_access(\\\"LOAD\\\",EA_mov,_,_,_,_,_,_,_),\\n   next(EA_mov,EA_call),\\n   reg_call(EA_call,_),\\n    _tmp_312 = as(@functor_data_signed(as(Offset, address),4), address),\\n    _tmp_313 = as(@functor_data_signed((as(Offset, address)+4),4), address).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY reg_call))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY next)))
         (FOR t0 instruction (INDEX  (= (TUPLE t0 3) (STRING "LEA")))
          (FOR t1 op_indirect (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)) (= (TUPLE t1 1) (STRING "NONE")) (= (TUPLE t1 2) (STRING "NONE")) (= (TUPLE t1 3) (STRING "NONE")))
           (IF (AND (AND (AND (AND (AND (NOT (EXISTS invalid ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t1 5) (UNSIGNED 4))) UNDEF))) (EXISTS instruction ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t1 5) (UNSIGNED 4))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (EXISTS instruction ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t1 5) (UNSIGNED 4)) (UNSIGNED 4))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t1 5) (UNSIGNED 4)) (UNSIGNED 4))) UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t1 5) (UNSIGNED 4)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t1 5) (UNSIGNED 4)) (UNSIGNED 4)))  (UNSIGNED 1)))
            (FOR t2 next (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t2 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
              (INDEXED_IF_EXISTS t3 next (INDEX  (= (TUPLE t3 0) (TUPLE t2 1))) (EXISTS reg_call ((TUPLE t3 1) UNDEF))
               (INSERT ((TUPLE t1 5) (UNSIGNED 4) (UNSIGNED 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t1 5) (UNSIGNED 4))) (STRING "first")) relative_address_start)
)             ))           )))        )       )
      )
     )
      (DEBUG 
 "relative_address_start(as((<underscore_116>+<inlined_Mult_303>), address),8,0,as(@functor_data_signed(as((<underscore_116>+<inlined_Mult_303>), address),8), address),\"first\") :- \n   indirect_jump(<underscore_114>),\n   instruction_get_op(<underscore_114>,_,<inlined_Op_303>),\n   op_indirect(<inlined_Op_303>,\"NONE\",\"NONE\",_,<inlined_Mult_303>,<underscore_116>,_),\n   8 = as(<inlined_Mult_303>, unsigned),\n   !address_in_data(as(<underscore_116>, address),_),\n   @functor_data_valid(as((<underscore_116>+<inlined_Mult_303>), address),8) = 1,\n   @functor_data_valid((as((<underscore_116>+<inlined_Mult_303>), address)+8),8) = 1,\n   instruction( _tmp_314,_,_,_,_,_,_,_,_,_),\n   !invalid(as(@functor_data_signed(as((<underscore_116>+<inlined_Mult_303>), address),8), address),_),\n   instruction( _tmp_315,_,_,_,_,_,_,_,_,_),\n   !invalid(as(@functor_data_signed((as((<underscore_116>+<inlined_Mult_303>), address)+8),8), address),_),\n    _tmp_314 = as(@functor_data_signed(as((<underscore_116>+<inlined_Mult_303>), address),8), address),\n    _tmp_315 = as(@functor_data_signed((as((<underscore_116>+<inlined_Mult_303>), address)+8),8), address).\nin file jump_tables.dl [173:1-177:24]" 
      (TIMER_ON relative_address_start "@t-nonrecursive-rule;relative_address_start;binary/pe/jump_tables.dl [173:1-177:24];relative_address_start(as((<underscore_116>+<inlined_Mult_303>), address),8,0,as(@functor_data_signed(as((<underscore_116>+<inlined_Mult_303>), address),8), address),\\\"first\\\") :- \\n   indirect_jump(<underscore_114>),\\n   instruction_get_op(<underscore_114>,_,<inlined_Op_303>),\\n   op_indirect(<inlined_Op_303>,\\\"NONE\\\",\\\"NONE\\\",_,<inlined_Mult_303>,<underscore_116>,_),\\n   8 = as(<inlined_Mult_303>, unsigned),\\n   !address_in_data(as(<underscore_116>, address),_),\\n   @functor_data_valid(as((<underscore_116>+<inlined_Mult_303>), address),8) = 1,\\n   @functor_data_valid((as((<underscore_116>+<inlined_Mult_303>), address)+8),8) = 1,\\n   instruction( _tmp_314,_,_,_,_,_,_,_,_,_),\\n   !invalid(as(@functor_data_signed(as((<underscore_116>+<inlined_Mult_303>), address),8), address),_),\\n   instruction( _tmp_315,_,_,_,_,_,_,_,_,_),\\n   !invalid(as(@functor_data_signed((as((<underscore_116>+<inlined_Mult_303>), address)+8),8), address),_),\\n    _tmp_314 = as(@functor_data_signed(as((<underscore_116>+<inlined_Mult_303>), address),8), address),\\n    _tmp_315 = as(@functor_data_signed((as((<underscore_116>+<inlined_Mult_303>), address)+8),8), address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY indirect_jump))) (NOT (ISEMPTY op_indirect)))
         (FOR_IN t0 indirect_jump           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 op_indirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (STRING "NONE")) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 4) (UNSIGNED 8)))
            (IF (AND (AND (AND (AND (AND (AND (EXISTS instruction ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (NOT (EXISTS address_in_data ((TUPLE t2 5) UNDEF)))) (NOT (EXISTS invalid ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)) (UNSIGNED 8))) UNDEF)))) (EXISTS instruction ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)) (UNSIGNED 8))) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS invalid ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8))) UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)) (UNSIGNED 8)))  (UNSIGNED 1)))
             (INSERT ((INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8) (UNSIGNED 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8))) (STRING "first")) relative_address_start)
            ))))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 relative_address_start       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) @delta_relative_address_start)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_relative_address_start "@t-recursive-relation;relative_address_start;relative_jump_tables.dl [45:7-45:29];"
(STMTS (STMTS (STMTS       (DEBUG 
 "relative_address_start(as(Offset0, address),1,TableStart,(TableStart+(@functor_data_unsigned(as(Offset0, address),1)*4)),\"first\") :- \n   Pt_size = 8,\n   Mult = as(Pt_size, number),\n   relative_address_start(TableStart,Pt_size,_,_,_),\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_97,_),\n   instruction_get_op(EA_jmp,_,Op_jmp),\n   arch.jump(EA_jmp),\n   next(EA_mov,EA_jmp),\n   arch.memory_access(\"LOAD\",EA_mov,_,_,_,_,_,_,_),\n   instruction_get_op(EA_mov,_,Op_mov),\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\n   @functor_data_valid(as(Offset0, address),1) = 1,\n    _tmp_97 = as(TableStart, number).\nin file jump_tables.dl [91:1-124:32]" 
       (TIMER_ON @new_relative_address_start "@t-recursive-rule;relative_address_start;0;binary/pe/jump_tables.dl [91:1-124:32];relative_address_start(as(Offset0, address),1,TableStart,(TableStart+(@functor_data_unsigned(as(Offset0, address),1)*4)),\\\"first\\\") :- \\n   Pt_size = 8,\\n   Mult = as(Pt_size, number),\\n   relative_address_start(TableStart,Pt_size,_,_,_),\\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_97,_),\\n   instruction_get_op(EA_jmp,_,Op_jmp),\\n   arch.jump(EA_jmp),\\n   next(EA_mov,EA_jmp),\\n   arch.memory_access(\\\"LOAD\\\",EA_mov,_,_,_,_,_,_,_),\\n   instruction_get_op(EA_mov,_,Op_mov),\\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\\n   @functor_data_valid(as(Offset0, address),1) = 1,\\n    _tmp_97 = as(TableStart, number).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY @delta_relative_address_start))) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY instruction_get_op)))
          (FOR t0 @delta_relative_address_start (INDEX  (= (TUPLE t0 1) (UNSIGNED 8)))
           (FOR t1 op_indirect (INDEX  (= (TUPLE t1 4) (TUPLE t0 1)) (= (TUPLE t1 5) (TUPLE t0 0)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (IF (EXISTS arch.jump ((TUPLE t2 0)))
              (FOR t3 next (INDEX  (= (TUPLE t3 1) (TUPLE t2 0)))
               (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t3 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
                (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                 (FOR t5 op_indirect (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (= (TUPLE t5 4) (NUMBER 1)) (= (TUPLE t5 6) (UNSIGNED 8)))
                  (IF (AND (NOT (EXISTS relative_address_start ((TUPLE t5 5) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t5 5) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t5 5) (UNSIGNED 1)))  (UNSIGNED 1)))
                   (INSERT ((TUPLE t5 5) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t5 5) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")) @new_relative_address_start)
                  )))               ))             ))))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_address_start(as((Offset0+4), address),1,TableStart,(TableStart+(@functor_data_unsigned(as((Offset0+4), address),1)*4)),\"first\") :- \n   Pt_size = 8,\n   Mult = as(Pt_size, number),\n   relative_address_start(TableStart,Pt_size,_,_,_),\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_98,_),\n   instruction_get_op(EA_jmp,_,Op_jmp),\n   arch.jump(EA_jmp),\n   next(EA_mov,EA_jmp),\n   arch.memory_access(\"LOAD\",EA_mov,_,_,_,_,_,_,_),\n   instruction_get_op(EA_mov,_,Op_mov),\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\n   @functor_data_valid(as((Offset0+4), address),1) = 1,\n    _tmp_98 = as(TableStart, number).\nin file jump_tables.dl [91:1-124:32]" 
       (TIMER_ON @new_relative_address_start "@t-recursive-rule;relative_address_start;0;binary/pe/jump_tables.dl [91:1-124:32];relative_address_start(as((Offset0+4), address),1,TableStart,(TableStart+(@functor_data_unsigned(as((Offset0+4), address),1)*4)),\\\"first\\\") :- \\n   Pt_size = 8,\\n   Mult = as(Pt_size, number),\\n   relative_address_start(TableStart,Pt_size,_,_,_),\\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_98,_),\\n   instruction_get_op(EA_jmp,_,Op_jmp),\\n   arch.jump(EA_jmp),\\n   next(EA_mov,EA_jmp),\\n   arch.memory_access(\\\"LOAD\\\",EA_mov,_,_,_,_,_,_,_),\\n   instruction_get_op(EA_mov,_,Op_mov),\\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\\n   @functor_data_valid(as((Offset0+4), address),1) = 1,\\n    _tmp_98 = as(TableStart, number).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY @delta_relative_address_start))) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY instruction_get_op)))
          (FOR t0 @delta_relative_address_start (INDEX  (= (TUPLE t0 1) (UNSIGNED 8)))
           (FOR t1 op_indirect (INDEX  (= (TUPLE t1 4) (TUPLE t0 1)) (= (TUPLE t1 5) (TUPLE t0 0)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (IF (EXISTS arch.jump ((TUPLE t2 0)))
              (FOR t3 next (INDEX  (= (TUPLE t3 1) (TUPLE t2 0)))
               (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t3 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
                (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
                 (FOR t5 op_indirect (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (= (TUPLE t5 4) (NUMBER 1)) (= (TUPLE t5 6) (UNSIGNED 8)))
                  (IF (AND (NOT (EXISTS relative_address_start ((INTRINSIC + (TUPLE t5 5) (NUMBER 4)) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t5 5) (NUMBER 4)) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t5 5) (NUMBER 4)) (UNSIGNED 1)))  (UNSIGNED 1)))
                   (INSERT ((INTRINSIC + (TUPLE t5 5) (NUMBER 4)) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t5 5) (NUMBER 4)) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")) @new_relative_address_start)
                  )))               ))             ))))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_address_start(as(Offset0, address),1,TableStart,(TableStart+(@functor_data_unsigned(as(Offset0, address),1)*4)),\"first\") :- \n   Pt_size = 8,\n   Mult = as(Pt_size, number),\n   relative_address_start(TableStart,Pt_size,_,_,_),\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_99,_),\n   instruction_get_op(EA_jmp,_,Op_jmp),\n   arch.jump(EA_jmp),\n   next(EA_pop1,EA_jmp),\n   !arch.memory_access(\"LOAD\",EA_pop1,_,_,_,_,_,_,_),\n   next(EA_mov,EA_pop1),\n   arch.memory_access(\"LOAD\",EA_mov,_,_,_,_,_,_,_),\n   instruction_get_op(EA_mov,_,Op_mov),\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\n   @functor_data_valid(as(Offset0, address),1) = 1,\n    _tmp_99 = as(TableStart, number).\nin file jump_tables.dl [91:1-124:32]" 
       (TIMER_ON @new_relative_address_start "@t-recursive-rule;relative_address_start;0;binary/pe/jump_tables.dl [91:1-124:32];relative_address_start(as(Offset0, address),1,TableStart,(TableStart+(@functor_data_unsigned(as(Offset0, address),1)*4)),\\\"first\\\") :- \\n   Pt_size = 8,\\n   Mult = as(Pt_size, number),\\n   relative_address_start(TableStart,Pt_size,_,_,_),\\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_99,_),\\n   instruction_get_op(EA_jmp,_,Op_jmp),\\n   arch.jump(EA_jmp),\\n   next(EA_pop1,EA_jmp),\\n   !arch.memory_access(\\\"LOAD\\\",EA_pop1,_,_,_,_,_,_,_),\\n   next(EA_mov,EA_pop1),\\n   arch.memory_access(\\\"LOAD\\\",EA_mov,_,_,_,_,_,_,_),\\n   instruction_get_op(EA_mov,_,Op_mov),\\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\\n   @functor_data_valid(as(Offset0, address),1) = 1,\\n    _tmp_99 = as(TableStart, number).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY @delta_relative_address_start))) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY instruction_get_op)))
          (FOR t0 @delta_relative_address_start (INDEX  (= (TUPLE t0 1) (UNSIGNED 8)))
           (FOR t1 op_indirect (INDEX  (= (TUPLE t1 4) (TUPLE t0 1)) (= (TUPLE t1 5) (TUPLE t0 0)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (IF (EXISTS arch.jump ((TUPLE t2 0)))
              (FOR t3 next (INDEX  (= (TUPLE t3 1) (TUPLE t2 0)))
               (IF (NOT (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t3 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                (FOR t4 next (INDEX  (= (TUPLE t4 1) (TUPLE t3 0)))
                 (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t4 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
                  (FOR t5 instruction_get_op (INDEX  (= (TUPLE t5 0) (TUPLE t4 0)))
                   (FOR t6 op_indirect (INDEX  (= (TUPLE t6 0) (TUPLE t5 2)) (= (TUPLE t6 4) (NUMBER 1)) (= (TUPLE t6 6) (UNSIGNED 8)))
                    (IF (AND (NOT (EXISTS relative_address_start ((TUPLE t6 5) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t6 5) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t6 5) (UNSIGNED 1)))  (UNSIGNED 1)))
                     (INSERT ((TUPLE t6 5) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t6 5) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")) @new_relative_address_start)
                    )))                 ))               ))             ))))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_address_start(as((Offset0+4), address),1,TableStart,(TableStart+(@functor_data_unsigned(as((Offset0+4), address),1)*4)),\"first\") :- \n   Pt_size = 8,\n   Mult = as(Pt_size, number),\n   relative_address_start(TableStart,Pt_size,_,_,_),\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_100,_),\n   instruction_get_op(EA_jmp,_,Op_jmp),\n   arch.jump(EA_jmp),\n   next(EA_pop1,EA_jmp),\n   !arch.memory_access(\"LOAD\",EA_pop1,_,_,_,_,_,_,_),\n   next(EA_mov,EA_pop1),\n   arch.memory_access(\"LOAD\",EA_mov,_,_,_,_,_,_,_),\n   instruction_get_op(EA_mov,_,Op_mov),\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\n   @functor_data_valid(as((Offset0+4), address),1) = 1,\n    _tmp_100 = as(TableStart, number).\nin file jump_tables.dl [91:1-124:32]" 
       (TIMER_ON @new_relative_address_start "@t-recursive-rule;relative_address_start;0;binary/pe/jump_tables.dl [91:1-124:32];relative_address_start(as((Offset0+4), address),1,TableStart,(TableStart+(@functor_data_unsigned(as((Offset0+4), address),1)*4)),\\\"first\\\") :- \\n   Pt_size = 8,\\n   Mult = as(Pt_size, number),\\n   relative_address_start(TableStart,Pt_size,_,_,_),\\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_100,_),\\n   instruction_get_op(EA_jmp,_,Op_jmp),\\n   arch.jump(EA_jmp),\\n   next(EA_pop1,EA_jmp),\\n   !arch.memory_access(\\\"LOAD\\\",EA_pop1,_,_,_,_,_,_,_),\\n   next(EA_mov,EA_pop1),\\n   arch.memory_access(\\\"LOAD\\\",EA_mov,_,_,_,_,_,_,_),\\n   instruction_get_op(EA_mov,_,Op_mov),\\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\\n   @functor_data_valid(as((Offset0+4), address),1) = 1,\\n    _tmp_100 = as(TableStart, number).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY @delta_relative_address_start))) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY instruction_get_op)))
          (FOR t0 @delta_relative_address_start (INDEX  (= (TUPLE t0 1) (UNSIGNED 8)))
           (FOR t1 op_indirect (INDEX  (= (TUPLE t1 4) (TUPLE t0 1)) (= (TUPLE t1 5) (TUPLE t0 0)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (IF (EXISTS arch.jump ((TUPLE t2 0)))
              (FOR t3 next (INDEX  (= (TUPLE t3 1) (TUPLE t2 0)))
               (IF (NOT (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t3 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                (FOR t4 next (INDEX  (= (TUPLE t4 1) (TUPLE t3 0)))
                 (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t4 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
                  (FOR t5 instruction_get_op (INDEX  (= (TUPLE t5 0) (TUPLE t4 0)))
                   (FOR t6 op_indirect (INDEX  (= (TUPLE t6 0) (TUPLE t5 2)) (= (TUPLE t6 4) (NUMBER 1)) (= (TUPLE t6 6) (UNSIGNED 8)))
                    (IF (AND (NOT (EXISTS relative_address_start ((INTRINSIC + (TUPLE t6 5) (NUMBER 4)) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t6 5) (NUMBER 4)) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t6 5) (NUMBER 4)) (UNSIGNED 1)))  (UNSIGNED 1)))
                     (INSERT ((INTRINSIC + (TUPLE t6 5) (NUMBER 4)) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t6 5) (NUMBER 4)) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")) @new_relative_address_start)
                    )))                 ))               ))             ))))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_address_start(as(Offset0, address),1,TableStart,(TableStart+(@functor_data_unsigned(as(Offset0, address),1)*4)),\"first\") :- \n   Pt_size = 8,\n   Mult = as(Pt_size, number),\n   relative_address_start(TableStart,Pt_size,_,_,_),\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_101,_),\n   instruction_get_op(EA_jmp,_,Op_jmp),\n   arch.jump(EA_jmp),\n   next(EA_pop2,EA_jmp),\n   !arch.memory_access(\"LOAD\",EA_pop2,_,_,_,_,_,_,_),\n   next(EA_pop1,EA_pop2),\n   !arch.memory_access(\"LOAD\",EA_pop1,_,_,_,_,_,_,_),\n   next(EA_mov,EA_pop1),\n   arch.memory_access(\"LOAD\",EA_mov,_,_,_,_,_,_,_),\n   instruction_get_op(EA_mov,_,Op_mov),\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\n   @functor_data_valid(as(Offset0, address),1) = 1,\n    _tmp_101 = as(TableStart, number).\nin file jump_tables.dl [91:1-124:32]" 
       (TIMER_ON @new_relative_address_start "@t-recursive-rule;relative_address_start;0;binary/pe/jump_tables.dl [91:1-124:32];relative_address_start(as(Offset0, address),1,TableStart,(TableStart+(@functor_data_unsigned(as(Offset0, address),1)*4)),\\\"first\\\") :- \\n   Pt_size = 8,\\n   Mult = as(Pt_size, number),\\n   relative_address_start(TableStart,Pt_size,_,_,_),\\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_101,_),\\n   instruction_get_op(EA_jmp,_,Op_jmp),\\n   arch.jump(EA_jmp),\\n   next(EA_pop2,EA_jmp),\\n   !arch.memory_access(\\\"LOAD\\\",EA_pop2,_,_,_,_,_,_,_),\\n   next(EA_pop1,EA_pop2),\\n   !arch.memory_access(\\\"LOAD\\\",EA_pop1,_,_,_,_,_,_,_),\\n   next(EA_mov,EA_pop1),\\n   arch.memory_access(\\\"LOAD\\\",EA_mov,_,_,_,_,_,_,_),\\n   instruction_get_op(EA_mov,_,Op_mov),\\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\\n   @functor_data_valid(as(Offset0, address),1) = 1,\\n    _tmp_101 = as(TableStart, number).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY @delta_relative_address_start))) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY instruction_get_op)))
          (FOR t0 @delta_relative_address_start (INDEX  (= (TUPLE t0 1) (UNSIGNED 8)))
           (FOR t1 op_indirect (INDEX  (= (TUPLE t1 4) (TUPLE t0 1)) (= (TUPLE t1 5) (TUPLE t0 0)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (IF (EXISTS arch.jump ((TUPLE t2 0)))
              (FOR t3 next (INDEX  (= (TUPLE t3 1) (TUPLE t2 0)))
               (IF (NOT (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t3 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                (FOR t4 next (INDEX  (= (TUPLE t4 1) (TUPLE t3 0)))
                 (IF (NOT (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t4 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                  (FOR t5 next (INDEX  (= (TUPLE t5 1) (TUPLE t4 0)))
                   (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t5 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
                    (FOR t6 instruction_get_op (INDEX  (= (TUPLE t6 0) (TUPLE t5 0)))
                     (FOR t7 op_indirect (INDEX  (= (TUPLE t7 0) (TUPLE t6 2)) (= (TUPLE t7 4) (NUMBER 1)) (= (TUPLE t7 6) (UNSIGNED 8)))
                      (IF (AND (NOT (EXISTS relative_address_start ((TUPLE t7 5) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t7 5) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t7 5) (UNSIGNED 1)))  (UNSIGNED 1)))
                       (INSERT ((TUPLE t7 5) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t7 5) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")) @new_relative_address_start)
                      )))                   ))                 ))               ))             ))))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_address_start(as((Offset0+4), address),1,TableStart,(TableStart+(@functor_data_unsigned(as((Offset0+4), address),1)*4)),\"first\") :- \n   Pt_size = 8,\n   Mult = as(Pt_size, number),\n   relative_address_start(TableStart,Pt_size,_,_,_),\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_102,_),\n   instruction_get_op(EA_jmp,_,Op_jmp),\n   arch.jump(EA_jmp),\n   next(EA_pop2,EA_jmp),\n   !arch.memory_access(\"LOAD\",EA_pop2,_,_,_,_,_,_,_),\n   next(EA_pop1,EA_pop2),\n   !arch.memory_access(\"LOAD\",EA_pop1,_,_,_,_,_,_,_),\n   next(EA_mov,EA_pop1),\n   arch.memory_access(\"LOAD\",EA_mov,_,_,_,_,_,_,_),\n   instruction_get_op(EA_mov,_,Op_mov),\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\n   @functor_data_valid(as((Offset0+4), address),1) = 1,\n    _tmp_102 = as(TableStart, number).\nin file jump_tables.dl [91:1-124:32]" 
       (TIMER_ON @new_relative_address_start "@t-recursive-rule;relative_address_start;0;binary/pe/jump_tables.dl [91:1-124:32];relative_address_start(as((Offset0+4), address),1,TableStart,(TableStart+(@functor_data_unsigned(as((Offset0+4), address),1)*4)),\\\"first\\\") :- \\n   Pt_size = 8,\\n   Mult = as(Pt_size, number),\\n   relative_address_start(TableStart,Pt_size,_,_,_),\\n   op_indirect(Op_jmp,_,_,_,Mult, _tmp_102,_),\\n   instruction_get_op(EA_jmp,_,Op_jmp),\\n   arch.jump(EA_jmp),\\n   next(EA_pop2,EA_jmp),\\n   !arch.memory_access(\\\"LOAD\\\",EA_pop2,_,_,_,_,_,_,_),\\n   next(EA_pop1,EA_pop2),\\n   !arch.memory_access(\\\"LOAD\\\",EA_pop1,_,_,_,_,_,_,_),\\n   next(EA_mov,EA_pop1),\\n   arch.memory_access(\\\"LOAD\\\",EA_mov,_,_,_,_,_,_,_),\\n   instruction_get_op(EA_mov,_,Op_mov),\\n   op_indirect(Op_mov,_,_,_,1,Offset0,8),\\n   @functor_data_valid(as((Offset0+4), address),1) = 1,\\n    _tmp_102 = as(TableStart, number).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY @delta_relative_address_start))) (NOT (ISEMPTY next))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY arch.jump))) (NOT (ISEMPTY instruction_get_op)))
          (FOR t0 @delta_relative_address_start (INDEX  (= (TUPLE t0 1) (UNSIGNED 8)))
           (FOR t1 op_indirect (INDEX  (= (TUPLE t1 4) (TUPLE t0 1)) (= (TUPLE t1 5) (TUPLE t0 0)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (IF (EXISTS arch.jump ((TUPLE t2 0)))
              (FOR t3 next (INDEX  (= (TUPLE t3 1) (TUPLE t2 0)))
               (IF (NOT (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t3 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                (FOR t4 next (INDEX  (= (TUPLE t4 1) (TUPLE t3 0)))
                 (IF (NOT (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t4 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                  (FOR t5 next (INDEX  (= (TUPLE t5 1) (TUPLE t4 0)))
                   (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t5 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
                    (FOR t6 instruction_get_op (INDEX  (= (TUPLE t6 0) (TUPLE t5 0)))
                     (FOR t7 op_indirect (INDEX  (= (TUPLE t7 0) (TUPLE t6 2)) (= (TUPLE t7 4) (NUMBER 1)) (= (TUPLE t7 6) (UNSIGNED 8)))
                      (IF (AND (NOT (EXISTS relative_address_start ((INTRINSIC + (TUPLE t7 5) (NUMBER 4)) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t7 5) (NUMBER 4)) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t7 5) (NUMBER 4)) (UNSIGNED 1)))  (UNSIGNED 1)))
                       (INSERT ((INTRINSIC + (TUPLE t7 5) (NUMBER 4)) (UNSIGNED 1) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (INTRINSIC * (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t7 5) (NUMBER 4)) (UNSIGNED 1))) (UNSIGNED 4))) (STRING "first")) @new_relative_address_start)
                      )))                   ))                 ))               ))             ))))         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_relative_address_start "@t-recursive-relation;relative_address_start;relative_jump_tables.dl [45:7-45:29];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_relative_address_start))
 ) (STMTS      (TIMER_ON @new_relative_address_start "@c-recursive-relation;relative_address_start;relative_jump_tables.dl [45:7-45:29];"
(STMTS (QUERY
       (FOR_IN t0 @new_relative_address_start         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4)) relative_address_start)
)
      )
       (SWAP @delta_relative_address_start @new_relative_address_start)
       (CLEAR @new_relative_address_start)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_relative_address_start)
     (CLEAR @new_relative_address_start)
 ) )  ) (STMTS     (CLEAR jump_table_prelude)
 ) )  )
  (SUBROUTINE relative_jump_table_entry
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON relative_jump_table_entry "@t-nonrecursive-relation;relative_jump_table_entry;relative_jump_tables.dl [424:7-424:32];"
(STMTS      (DEBUG 
 "relative_jump_table_entry(EA,TableStart,Size,Reference,Dest,Scale,Offset) :- \n   relative_jump_table_entry_candidate(EA,TableStart,Size,Reference,Dest,Scale,Offset),\n   !discarded_jump_table_entry(TableStart,Reference,EA).\nin file relative_jump_tables.dl [426:1-428:58]" 
      (TIMER_ON relative_jump_table_entry "@t-nonrecursive-rule;relative_jump_table_entry;relative_jump_tables.dl [426:1-428:58];relative_jump_table_entry(EA,TableStart,Size,Reference,Dest,Scale,Offset) :- \\n   relative_jump_table_entry_candidate(EA,TableStart,Size,Reference,Dest,Scale,Offset),\\n   !discarded_jump_table_entry(TableStart,Reference,EA).;"
(QUERY
        (IF (NOT (ISEMPTY relative_jump_table_entry_candidate))
         (FOR_IN t0 relative_jump_table_entry_candidate           (IF (NOT (EXISTS discarded_jump_table_entry ((TUPLE t0 1) (TUPLE t0 3) (TUPLE t0 0))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) relative_jump_table_entry)
          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 relative_jump_table_entry       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) @delta_relative_jump_table_entry)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_relative_jump_table_entry "@t-recursive-relation;relative_jump_table_entry;relative_jump_tables.dl [424:7-424:32];"
(STMTS (STMTS (STMTS       (DEBUG 
 "relative_jump_table_entry((LastEA+Size),TableStart,Size,Reference,(Reference+@functor_data_unsigned((LastEA+Size),Size)),Scale,Offset) :- \n   relative_jump_table_entry(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   !jump_table_max(TableStart,_),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   next_data_limit(Prev,Next),\n   Prev < (LastEA+Size),\n   Next >= ((LastEA+Size)+Size),\n   jump_table_signed(TableStart,<inlined_Signed_1089>),\n   <inlined_Signed_1089> = 0,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   code_in_block( _tmp_316,_),\n    _tmp_316 = (Reference+@functor_data_unsigned((LastEA+Size),Size)).\nin file relative_jump_tables.dl [441:1-449:79]" 
       (TIMER_ON @new_relative_jump_table_entry "@t-recursive-rule;relative_jump_table_entry;0;relative_jump_tables.dl [441:1-449:79];relative_jump_table_entry((LastEA+Size),TableStart,Size,Reference,(Reference+@functor_data_unsigned((LastEA+Size),Size)),Scale,Offset) :- \\n   relative_jump_table_entry(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   !jump_table_max(TableStart,_),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   next_data_limit(Prev,Next),\\n   Prev < (LastEA+Size),\\n   Next >= ((LastEA+Size)+Size),\\n   jump_table_signed(TableStart,<inlined_Signed_1089>),\\n   <inlined_Signed_1089> = 0,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   code_in_block( _tmp_316,_),\\n    _tmp_316 = (Reference+@functor_data_unsigned((LastEA+Size),Size)).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY @delta_relative_jump_table_entry))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY next_data_limit))) (NOT (ISEMPTY jump_table_signed)))
          (FOR_IN t0 @delta_relative_jump_table_entry            (IF (AND (AND (AND (AND (AND (NOT (EXISTS relative_jump_table_entry ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) (TUPLE t0 5) (TUPLE t0 6)))) (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) UNDEF))) (NOT (EXISTS jump_table_max ((TUPLE t0 1) UNDEF)))) (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (EXISTS jump_table_signed ((TUPLE t0 1) (UNSIGNED 0)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (IF_EXISTS t1 data_segment (AND (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t1 1))) 
             (IF_EXISTS t2 next_data_limit (AND (CONSTRAINT < (TUPLE t2 0)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (CONSTRAINT >= (TUPLE t2 1)  (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) 
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry)
))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \n   relative_jump_table_entry(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   !jump_table_max(TableStart,_),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   next_data_limit(Prev,Next),\n   Prev < (LastEA+Size),\n   Next >= ((LastEA+Size)+Size),\n   jump_table_signed(TableStart,<inlined_Signed_1090>),\n   <inlined_Signed_1090> = 0,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   <inlined_Dest_1090> = (Reference+@functor_data_unsigned((LastEA+Size),Size)),\n   is_padding(<inlined_Dest_1090>),\n   after_end(<inlined_Dest_1090>,<inlined_End_1090>),\n   after_end(Dest,<inlined_End_1090>),\n   !is_padding(Dest),\n   code_in_block(Dest,_).\nin file relative_jump_tables.dl [441:1-449:79]" 
       (TIMER_ON @new_relative_jump_table_entry "@t-recursive-rule;relative_jump_table_entry;0;relative_jump_tables.dl [441:1-449:79];relative_jump_table_entry((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \\n   relative_jump_table_entry(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   !jump_table_max(TableStart,_),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   next_data_limit(Prev,Next),\\n   Prev < (LastEA+Size),\\n   Next >= ((LastEA+Size)+Size),\\n   jump_table_signed(TableStart,<inlined_Signed_1090>),\\n   <inlined_Signed_1090> = 0,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   <inlined_Dest_1090> = (Reference+@functor_data_unsigned((LastEA+Size),Size)),\\n   is_padding(<inlined_Dest_1090>),\\n   after_end(<inlined_Dest_1090>,<inlined_End_1090>),\\n   after_end(Dest,<inlined_End_1090>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY jump_table_signed)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY next_data_limit))) (NOT (ISEMPTY @delta_relative_jump_table_entry))) (NOT (ISEMPTY after_end)))
          (FOR_IN t0 @delta_relative_jump_table_entry            (IF (AND (AND (AND (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (EXISTS jump_table_signed ((TUPLE t0 1) (UNSIGNED 0)))) (NOT (EXISTS jump_table_max ((TUPLE t0 1) UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (FOR t1 is_padding (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 3) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))))
             (IF_EXISTS t2 data_segment (AND (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t2 1))) 
              (IF_EXISTS t3 next_data_limit (AND (CONSTRAINT < (TUPLE t3 0)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (CONSTRAINT >= (TUPLE t3 1)  (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) 
               (FOR t4 after_end (INDEX  (= (TUPLE t4 0) (TUPLE t1 0)))
                (FOR t5 after_end (INDEX  (= (TUPLE t5 1) (TUPLE t4 1)))
                 (IF (AND (AND (EXISTS code_in_block ((TUPLE t5 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t5 0))))) (NOT (EXISTS relative_jump_table_entry ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t5 0) (TUPLE t0 5) (TUPLE t0 6)))))
                  (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t5 0) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry)
                 ))))))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry((LastEA+Size),TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),Scale,Offset) :- \n   relative_jump_table_entry(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   !jump_table_max(TableStart,_),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   next_data_limit(Prev,Next),\n   Prev < (LastEA+Size),\n   Next >= ((LastEA+Size)+Size),\n   jump_table_signed(TableStart,<inlined_Signed_1091>),\n   <inlined_Signed_1091> = 1,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   code_in_block( _tmp_317,_),\n    _tmp_317 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address).\nin file relative_jump_tables.dl [441:1-449:79]" 
       (TIMER_ON @new_relative_jump_table_entry "@t-recursive-rule;relative_jump_table_entry;0;relative_jump_tables.dl [441:1-449:79];relative_jump_table_entry((LastEA+Size),TableStart,Size,Reference,as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),Scale,Offset) :- \\n   relative_jump_table_entry(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   !jump_table_max(TableStart,_),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   next_data_limit(Prev,Next),\\n   Prev < (LastEA+Size),\\n   Next >= ((LastEA+Size)+Size),\\n   jump_table_signed(TableStart,<inlined_Signed_1091>),\\n   <inlined_Signed_1091> = 1,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   code_in_block( _tmp_317,_),\\n    _tmp_317 = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address).;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY @delta_relative_jump_table_entry))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY next_data_limit))) (NOT (ISEMPTY jump_table_signed)))
          (FOR_IN t0 @delta_relative_jump_table_entry            (IF (AND (AND (AND (AND (AND (NOT (EXISTS relative_jump_table_entry ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) (TUPLE t0 5) (TUPLE t0 6)))) (EXISTS code_in_block ((INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) UNDEF))) (NOT (EXISTS jump_table_max ((TUPLE t0 1) UNDEF)))) (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))) (EXISTS jump_table_signed ((TUPLE t0 1) (UNSIGNED 1)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (IF_EXISTS t1 data_segment (AND (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t1 1))) 
             (IF_EXISTS t2 next_data_limit (AND (CONSTRAINT < (TUPLE t2 0)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (CONSTRAINT >= (TUPLE t2 1)  (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) 
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))))) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry)
))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "relative_jump_table_entry((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \n   relative_jump_table_entry(LastEA,TableStart,Size,Reference,_,Scale,Offset),\n   !jump_table_max(TableStart,_),\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\n   data_segment(BegData,EndData),\n   BegData <= TableStart,\n   ((LastEA+Size)+Size) <= EndData,\n   next_data_limit(Prev,Next),\n   Prev < (LastEA+Size),\n   Next >= ((LastEA+Size)+Size),\n   jump_table_signed(TableStart,<inlined_Signed_1092>),\n   <inlined_Signed_1092> = 1,\n   @functor_data_valid((LastEA+Size),Size) = 1,\n   <inlined_Dest_1092> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),\n   is_padding(<inlined_Dest_1092>),\n   after_end(<inlined_Dest_1092>,<inlined_End_1092>),\n   after_end(Dest,<inlined_End_1092>),\n   !is_padding(Dest),\n   code_in_block(Dest,_).\nin file relative_jump_tables.dl [441:1-449:79]" 
       (TIMER_ON @new_relative_jump_table_entry "@t-recursive-rule;relative_jump_table_entry;0;relative_jump_tables.dl [441:1-449:79];relative_jump_table_entry((LastEA+Size),TableStart,Size,Reference,Dest,Scale,Offset) :- \\n   relative_jump_table_entry(LastEA,TableStart,Size,Reference,_,Scale,Offset),\\n   !jump_table_max(TableStart,_),\\n   !symbol((LastEA+Size),_,_,_,_,_,_,_,_),\\n   data_segment(BegData,EndData),\\n   BegData <= TableStart,\\n   ((LastEA+Size)+Size) <= EndData,\\n   next_data_limit(Prev,Next),\\n   Prev < (LastEA+Size),\\n   Next >= ((LastEA+Size)+Size),\\n   jump_table_signed(TableStart,<inlined_Signed_1092>),\\n   <inlined_Signed_1092> = 1,\\n   @functor_data_valid((LastEA+Size),Size) = 1,\\n   <inlined_Dest_1092> = as((as(Reference, number)+(as(Scale, number)*@functor_data_signed((LastEA+Size),Size))), address),\\n   is_padding(<inlined_Dest_1092>),\\n   after_end(<inlined_Dest_1092>,<inlined_End_1092>),\\n   after_end(Dest,<inlined_End_1092>),\\n   !is_padding(Dest),\\n   code_in_block(Dest,_).;"
(QUERY
         (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY jump_table_signed)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY is_padding))) (NOT (ISEMPTY next_data_limit))) (NOT (ISEMPTY @delta_relative_jump_table_entry))) (NOT (ISEMPTY after_end)))
          (FOR_IN t0 @delta_relative_jump_table_entry            (IF (AND (AND (AND (NOT (EXISTS symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))) (EXISTS jump_table_signed ((TUPLE t0 1) (UNSIGNED 1)))) (NOT (EXISTS jump_table_max ((TUPLE t0 1) UNDEF)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))  (UNSIGNED 1)))
            (FOR t1 is_padding (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 3) (INTRINSIC * (TUPLE t0 5) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))))))
             (IF_EXISTS t2 data_segment (AND (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t0 1)) (CONSTRAINT <= (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2))  (TUPLE t2 1))) 
              (IF_EXISTS t3 next_data_limit (AND (CONSTRAINT < (TUPLE t3 0)  (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (CONSTRAINT >= (TUPLE t3 1)  (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 2)))) 
               (FOR t4 after_end (INDEX  (= (TUPLE t4 0) (TUPLE t1 0)))
                (FOR t5 after_end (INDEX  (= (TUPLE t5 1) (TUPLE t4 1)))
                 (IF (AND (AND (EXISTS code_in_block ((TUPLE t5 0) UNDEF)) (NOT (EXISTS is_padding ((TUPLE t5 0))))) (NOT (EXISTS relative_jump_table_entry ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t5 0) (TUPLE t0 5) (TUPLE t0 6)))))
                  (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t5 0) (TUPLE t0 5) (TUPLE t0 6)) @new_relative_jump_table_entry)
                 ))))))           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_relative_jump_table_entry "@t-recursive-relation;relative_jump_table_entry;relative_jump_tables.dl [424:7-424:32];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_relative_jump_table_entry))
 ) (STMTS      (TIMER_ON @new_relative_jump_table_entry "@c-recursive-relation;relative_jump_table_entry;relative_jump_tables.dl [424:7-424:32];"
(STMTS (QUERY
       (FOR_IN t0 @new_relative_jump_table_entry         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) relative_jump_table_entry)
)
      )
       (SWAP @delta_relative_jump_table_entry @new_relative_jump_table_entry)
       (CLEAR @new_relative_jump_table_entry)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_relative_jump_table_entry)
     (CLEAR @new_relative_jump_table_entry)
 ) )  ) (STMTS     (CLEAR data_segment)
     (CLEAR discarded_jump_table_entry)
     (CLEAR jump_table_max)
     (CLEAR jump_table_signed)
     (CLEAR next_data_limit)
     (CLEAR relative_jump_table_entry_candidate)
 ) )  )
  (SUBROUTINE reloc_type_nameless
(STMTS     (TIMER_ON reloc_type_nameless "@t-nonrecursive-relation;reloc_type_nameless;binary/elf/symbolization.dl [338:7-338:26];"
(STMTS      (DEBUG 
 "reloc_type_nameless(\"R32\").\nin file symbolization.dl [340:1-340:28]" 
      (TIMER_ON reloc_type_nameless "@t-nonrecursive-rule;reloc_type_nameless;binary/elf/symbolization.dl [340:1-340:28];reloc_type_nameless(\\\"R32\\\").;"
(QUERY
        (INSERT ((STRING "R32")) reloc_type_nameless)
       )
      )
     )
      (DEBUG 
 "reloc_type_nameless(\"R64\").\nin file symbolization.dl [341:1-341:28]" 
      (TIMER_ON reloc_type_nameless "@t-nonrecursive-rule;reloc_type_nameless;binary/elf/symbolization.dl [341:1-341:28];reloc_type_nameless(\\\"R64\\\").;"
(QUERY
        (INSERT ((STRING "R64")) reloc_type_nameless)
       )
      )
     )
      (DEBUG 
 "reloc_type_nameless(\"R32S\").\nin file symbolization.dl [342:1-342:29]" 
      (TIMER_ON reloc_type_nameless "@t-nonrecursive-rule;reloc_type_nameless;binary/elf/symbolization.dl [342:1-342:29];reloc_type_nameless(\\\"R32S\\\").;"
(QUERY
        (INSERT ((STRING "R32S")) reloc_type_nameless)
       )
      )
     )
      (DEBUG 
 "reloc_type_nameless(\"PC32\").\nin file symbolization.dl [345:1-345:29]" 
      (TIMER_ON reloc_type_nameless "@t-nonrecursive-rule;reloc_type_nameless;binary/elf/symbolization.dl [345:1-345:29];reloc_type_nameless(\\\"PC32\\\").;"
(QUERY
        (INSERT ((STRING "PC32")) reloc_type_nameless)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reloc_type_relpc
(STMTS     (TIMER_ON reloc_type_relpc "@t-nonrecursive-relation;reloc_type_relpc;binary/elf/symbolization.dl [286:7-286:23];"
(STMTS      (DEBUG 
 "reloc_type_relpc(\"PC32\").\nin file symbolization.dl [288:1-288:26]" 
      (TIMER_ON reloc_type_relpc "@t-nonrecursive-rule;reloc_type_relpc;binary/elf/symbolization.dl [288:1-288:26];reloc_type_relpc(\\\"PC32\\\").;"
(QUERY
        (INSERT ((STRING "PC32")) reloc_type_relpc)
       )
      )
     )
      (DEBUG 
 "reloc_type_relpc(\"GOTPCRELX\").\nin file symbolization.dl [289:1-289:31]" 
      (TIMER_ON reloc_type_relpc "@t-nonrecursive-rule;reloc_type_relpc;binary/elf/symbolization.dl [289:1-289:31];reloc_type_relpc(\\\"GOTPCRELX\\\").;"
(QUERY
        (INSERT ((STRING "GOTPCRELX")) reloc_type_relpc)
       )
      )
     )
      (DEBUG 
 "reloc_type_relpc(\"REX_GOTPCRELX\").\nin file symbolization.dl [290:1-290:35]" 
      (TIMER_ON reloc_type_relpc "@t-nonrecursive-rule;reloc_type_relpc;binary/elf/symbolization.dl [290:1-290:35];reloc_type_relpc(\\\"REX_GOTPCRELX\\\").;"
(QUERY
        (INSERT ((STRING "REX_GOTPCRELX")) reloc_type_relpc)
       )
      )
     )
      (DEBUG 
 "reloc_type_relpc(\"PLT32\").\nin file symbolization.dl [291:1-291:27]" 
      (TIMER_ON reloc_type_relpc "@t-nonrecursive-rule;reloc_type_relpc;binary/elf/symbolization.dl [291:1-291:27];reloc_type_relpc(\\\"PLT32\\\").;"
(QUERY
        (INSERT ((STRING "PLT32")) reloc_type_relpc)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE reloc_type_with_name
(STMTS     (TIMER_ON reloc_type_with_name "@t-nonrecursive-relation;reloc_type_with_name;binary/elf/symbolization.dl [312:7-312:27];"
(STMTS      (DEBUG 
 "reloc_type_with_name(\"R32\").\nin file symbolization.dl [314:1-314:29]" 
      (TIMER_ON reloc_type_with_name "@t-nonrecursive-rule;reloc_type_with_name;binary/elf/symbolization.dl [314:1-314:29];reloc_type_with_name(\\\"R32\\\").;"
(QUERY
        (INSERT ((STRING "R32")) reloc_type_with_name)
       )
      )
     )
      (DEBUG 
 "reloc_type_with_name(\"R64\").\nin file symbolization.dl [315:1-315:29]" 
      (TIMER_ON reloc_type_with_name "@t-nonrecursive-rule;reloc_type_with_name;binary/elf/symbolization.dl [315:1-315:29];reloc_type_with_name(\\\"R64\\\").;"
(QUERY
        (INSERT ((STRING "R64")) reloc_type_with_name)
       )
      )
     )
      (DEBUG 
 "reloc_type_with_name(\"R32S\").\nin file symbolization.dl [316:1-316:30]" 
      (TIMER_ON reloc_type_with_name "@t-nonrecursive-rule;reloc_type_with_name;binary/elf/symbolization.dl [316:1-316:30];reloc_type_with_name(\\\"R32S\\\").;"
(QUERY
        (INSERT ((STRING "R32S")) reloc_type_with_name)
       )
      )
     )
      (DEBUG 
 "reloc_type_with_name(\"PC32\").\nin file symbolization.dl [317:1-317:30]" 
      (TIMER_ON reloc_type_with_name "@t-nonrecursive-rule;reloc_type_with_name;binary/elf/symbolization.dl [317:1-317:30];reloc_type_with_name(\\\"PC32\\\").;"
(QUERY
        (INSERT ((STRING "PC32")) reloc_type_with_name)
       )
      )
     )
      (DEBUG 
 "reloc_type_with_name(\"PLT32\").\nin file symbolization.dl [318:1-318:31]" 
      (TIMER_ON reloc_type_with_name "@t-nonrecursive-rule;reloc_type_with_name;binary/elf/symbolization.dl [318:1-318:31];reloc_type_with_name(\\\"PLT32\\\").;"
(QUERY
        (INSERT ((STRING "PLT32")) reloc_type_with_name)
       )
      )
     )
      (DEBUG 
 "reloc_type_with_name(\"GOTPCRELX\").\nin file symbolization.dl [319:1-319:35]" 
      (TIMER_ON reloc_type_with_name "@t-nonrecursive-rule;reloc_type_with_name;binary/elf/symbolization.dl [319:1-319:35];reloc_type_with_name(\\\"GOTPCRELX\\\").;"
(QUERY
        (INSERT ((STRING "GOTPCRELX")) reloc_type_with_name)
       )
      )
     )
      (DEBUG 
 "reloc_type_with_name(\"REX_GOTPCRELX\").\nin file symbolization.dl [320:1-320:39]" 
      (TIMER_ON reloc_type_with_name "@t-nonrecursive-rule;reloc_type_with_name;binary/elf/symbolization.dl [320:1-320:39];reloc_type_with_name(\\\"REX_GOTPCRELX\\\").;"
(QUERY
        (INSERT ((STRING "REX_GOTPCRELX")) reloc_type_with_name)
       )
      )
     )
      (DEBUG 
 "reloc_type_with_name(\"ABS64\").\nin file symbolization.dl [321:1-321:31]" 
      (TIMER_ON reloc_type_with_name "@t-nonrecursive-rule;reloc_type_with_name;binary/elf/symbolization.dl [321:1-321:31];reloc_type_with_name(\\\"ABS64\\\").;"
(QUERY
        (INSERT ((STRING "ABS64")) reloc_type_with_name)
       )
      )
     )
      (DEBUG 
 "reloc_type_with_name(\"JUMP26\").\nin file symbolization.dl [322:1-322:32]" 
      (TIMER_ON reloc_type_with_name "@t-nonrecursive-rule;reloc_type_with_name;binary/elf/symbolization.dl [322:1-322:32];reloc_type_with_name(\\\"JUMP26\\\").;"
(QUERY
        (INSERT ((STRING "JUMP26")) reloc_type_with_name)
       )
      )
     )
      (DEBUG 
 "reloc_type_with_name(\"CALL26\").\nin file symbolization.dl [323:1-323:32]" 
      (TIMER_ON reloc_type_with_name "@t-nonrecursive-rule;reloc_type_with_name;binary/elf/symbolization.dl [323:1-323:32];reloc_type_with_name(\\\"CALL26\\\").;"
(QUERY
        (INSERT ((STRING "CALL26")) reloc_type_with_name)
       )
      )
     )
      (DEBUG 
 "reloc_type_with_name(\"JUMP_SLOT\").\nin file symbolization.dl [324:1-324:35]" 
      (TIMER_ON reloc_type_with_name "@t-nonrecursive-rule;reloc_type_with_name;binary/elf/symbolization.dl [324:1-324:35];reloc_type_with_name(\\\"JUMP_SLOT\\\").;"
(QUERY
        (INSERT ((STRING "JUMP_SLOT")) reloc_type_with_name)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE relocation
(STMTS (STMTS (STMTS     (TIMER_ON relocation "@t-relation-loadtime;relocation;/usr/local/src/ddisasm/src/datalog/main.dl [169:7-169:17];loadtime;"
     (IO relocation ((= IO "file") (= attributeNames "EA\tType\tName\tAddend\tSymbolIndex\tSection\tRelType") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "relocation") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 7, \"params\": [\"EA\", \"Type\", \"Name\", \"Addend\", \"SymbolIndex\", \"Section\", \"RelType\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 7, \"types\": [\"u:address\", \"s:symbol\", \"s:symbol\", \"i:number\", \"u:unsigned\", \"s:symbol\", \"s:symbol\"]}}")))
    )
 ) (STMTS     (LOGSIZE relocation "@n-nonrecursive-relation;relocation;/usr/local/src/ddisasm/src/datalog/main.dl [169:7-169:17];")
 )   )  )  )
  (SUBROUTINE relocation_active_symbol_table
(STMTS     (TIMER_ON relocation_active_symbol_table "@t-nonrecursive-relation;relocation_active_symbol_table;/usr/local/src/ddisasm/src/datalog/main.dl [800:7-800:37];"
(STMTS      (DEBUG 
 "relocation_active_symbol_table(\".dynsym\") :- \n   binary_format(\"ELF\"),\n   !binary_type(\"REL\").\nin file main.dl [802:1-804:25]" 
      (TIMER_ON relocation_active_symbol_table "@t-nonrecursive-rule;relocation_active_symbol_table;/usr/local/src/ddisasm/src/datalog/main.dl [802:1-804:25];relocation_active_symbol_table(\\\".dynsym\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   !binary_type(\\\"REL\\\").;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF")))) (NOT (EXISTS binary_type ((STRING "REL")))))
         (INSERT ((STRING ".dynsym")) relocation_active_symbol_table)
        )       )
      )
     )
      (DEBUG 
 "relocation_active_symbol_table(\".symtab\") :- \n   binary_format(\"ELF\"),\n   binary_type(\"REL\").\nin file main.dl [806:1-808:24]" 
      (TIMER_ON relocation_active_symbol_table "@t-nonrecursive-rule;relocation_active_symbol_table;/usr/local/src/ddisasm/src/datalog/main.dl [806:1-808:24];relocation_active_symbol_table(\\\".symtab\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   binary_type(\\\"REL\\\").;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "REL")))) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING ".symtab")) relocation_active_symbol_table)
        )       )
      )
     )
      (DEBUG 
 "relocation_active_symbol_table(\"\") :- \n   binary_format(\"PE\").\nin file main.dl [810:1-811:25]" 
      (TIMER_ON relocation_active_symbol_table "@t-nonrecursive-rule;relocation_active_symbol_table;/usr/local/src/ddisasm/src/datalog/main.dl [810:1-811:25];relocation_active_symbol_table(\\\"\\\") :- \\n   binary_format(\\\"PE\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "PE"))))
         (INSERT ((STRING "")) relocation_active_symbol_table)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE relocation_adjustment
(STMTS (STMTS     (TIMER_ON relocation_adjustment "@t-nonrecursive-relation;relocation_adjustment;/usr/local/src/ddisasm/src/datalog/main.dl [177:7-177:28];"
(STMTS      (DEBUG 
 "relocation_adjustment(EA,as(@functor_data_signed(EA,(Size/8)), number),\"implicit-addend\") :- \n   binary_format(\"ELF\"),\n   relocation(EA,Type,_,_,_,_,\"REL\"),\n   relocation_size(Type,Size),\n   Size != 8,\n   @functor_data_valid(EA,(Size/8)) = 1.\nin file symbolization.dl [274:1-281:7]" 
      (TIMER_ON relocation_adjustment "@t-nonrecursive-rule;relocation_adjustment;binary/elf/symbolization.dl [274:1-281:7];relocation_adjustment(EA,as(@functor_data_signed(EA,(Size/8)), number),\\\"implicit-addend\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   relocation(EA,Type,_,_,_,_,\\\"REL\\\"),\\n   relocation_size(Type,Size),\\n   Size != 8,\\n   @functor_data_valid(EA,(Size/8)) = 1.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY relocation_size))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 6) (STRING "REL")))
          (FOR t1 relocation_size (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (IF (AND (CONSTRAINT != (TUPLE t1 1)  (UNSIGNED 8)) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (INTRINSIC / (TUPLE t1 1) (UNSIGNED 8))))  (UNSIGNED 1)))
            (INSERT ((TUPLE t0 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 0) (INTRINSIC / (TUPLE t1 1) (UNSIGNED 8)))) (STRING "implicit-addend")) relocation_adjustment)
           )))        )       )
      )
     )
      (DEBUG 
 "relocation_adjustment(EA,as(@functor_data_unsigned(EA,1), number),\"implicit-addend\") :- \n   binary_format(\"ELF\"),\n   relocation(EA,Type,_,_,_,_,\"REL\"),\n   relocation_size(Type,Size),\n   Size = 8,\n   @functor_data_valid(EA,1) = 1.\nin file symbolization.dl [274:1-281:7]" 
      (TIMER_ON relocation_adjustment "@t-nonrecursive-rule;relocation_adjustment;binary/elf/symbolization.dl [274:1-281:7];relocation_adjustment(EA,as(@functor_data_unsigned(EA,1), number),\\\"implicit-addend\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   relocation(EA,Type,_,_,_,_,\\\"REL\\\"),\\n   relocation_size(Type,Size),\\n   Size = 8,\\n   @functor_data_valid(EA,1) = 1.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY relocation_size))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 6) (STRING "REL")))
          (IF (AND (EXISTS relocation_size ((TUPLE t0 1) (UNSIGNED 8))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 1)))  (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0) (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 1))) (STRING "implicit-addend")) relocation_adjustment)
          ))        )       )
      )
     )
      (DEBUG 
 "relocation_adjustment((EA+Offset),as((Size-Offset), number),\"distance-to-pc\") :- \n   code_in_block(EA,_),\n   instruction(EA,Size,_,_,_,_,_,_,_,Offset),\n   relocation( _tmp_116,Type,Symbol,_,SymbolIndex,_,_),\n   reloc_type_relpc(Type),\n   symbol(_,_,_,_,_,_,_,SymbolIndex,Symbol),\n   as((Size-Offset), number) > 0,\n    _tmp_116 = (EA+Offset).\nin file symbolization.dl [293:1-307:39]" 
      (TIMER_ON relocation_adjustment "@t-nonrecursive-rule;relocation_adjustment;binary/elf/symbolization.dl [293:1-307:39];relocation_adjustment((EA+Offset),as((Size-Offset), number),\\\"distance-to-pc\\\") :- \\n   code_in_block(EA,_),\\n   instruction(EA,Size,_,_,_,_,_,_,_,Offset),\\n   relocation( _tmp_116,Type,Symbol,_,SymbolIndex,_,_),\\n   reloc_type_relpc(Type),\\n   symbol(_,_,_,_,_,_,_,SymbolIndex,Symbol),\\n   as((Size-Offset), number) > 0,\\n    _tmp_116 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY reloc_type_relpc))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 code_in_block           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (CONSTRAINT > (INTRINSIC - (TUPLE t1 1) (TUPLE t1 9))  (NUMBER 0))
            (FOR t2 relocation (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 9))))
             (IF (AND (EXISTS symbol (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (TUPLE t2 4) (TUPLE t2 2))) (EXISTS reloc_type_relpc ((TUPLE t2 1))))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 9)) (INTRINSIC - (TUPLE t1 1) (TUPLE t1 9)) (STRING "distance-to-pc")) relocation_adjustment)
             ))           )))
        )       )
      )
     )
      (DEBUG 
 "relocation_adjustment((EA+Offset),as((Size-Offset), number),\"distance-to-pc\") :- \n   code_in_block(EA,_),\n   instruction(EA,Size,_,_,_,_,_,_,Offset,_),\n   relocation( _tmp_117,Type,Symbol,_,SymbolIndex,_,_),\n   reloc_type_relpc(Type),\n   symbol(_,_,_,_,_,_,_,SymbolIndex,Symbol),\n   as((Size-Offset), number) > 0,\n    _tmp_117 = (EA+Offset).\nin file symbolization.dl [293:1-307:39]" 
      (TIMER_ON relocation_adjustment "@t-nonrecursive-rule;relocation_adjustment;binary/elf/symbolization.dl [293:1-307:39];relocation_adjustment((EA+Offset),as((Size-Offset), number),\\\"distance-to-pc\\\") :- \\n   code_in_block(EA,_),\\n   instruction(EA,Size,_,_,_,_,_,_,Offset,_),\\n   relocation( _tmp_117,Type,Symbol,_,SymbolIndex,_,_),\\n   reloc_type_relpc(Type),\\n   symbol(_,_,_,_,_,_,_,SymbolIndex,Symbol),\\n   as((Size-Offset), number) > 0,\\n    _tmp_117 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY reloc_type_relpc))) (NOT (ISEMPTY instruction)))
         (FOR_IN t0 code_in_block           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (CONSTRAINT > (INTRINSIC - (TUPLE t1 1) (TUPLE t1 8))  (NUMBER 0))
            (FOR t2 relocation (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 8))))
             (IF (AND (EXISTS symbol (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (TUPLE t2 4) (TUPLE t2 2))) (EXISTS reloc_type_relpc ((TUPLE t2 1))))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 8)) (INTRINSIC - (TUPLE t1 1) (TUPLE t1 8)) (STRING "distance-to-pc")) relocation_adjustment)
             ))           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR reloc_type_relpc)
 ) )  )
  (SUBROUTINE relocation_adjustment_total
(STMTS (STMTS     (TIMER_ON relocation_adjustment_total "@t-nonrecursive-relation;relocation_adjustment_total;/usr/local/src/ddisasm/src/datalog/main.dl [181:7-181:34];"
(STMTS      (DEBUG 
 "relocation_adjustment_total(EA,0) :- \n   relocation(EA,_,_,_,_,_,_),\n   !relocation_adjustment(EA,_,_).\nin file main.dl [183:1-185:36]" 
      (TIMER_ON relocation_adjustment_total "@t-nonrecursive-rule;relocation_adjustment_total;/usr/local/src/ddisasm/src/datalog/main.dl [183:1-185:36];relocation_adjustment_total(EA,0) :- \\n   relocation(EA,_,_,_,_,_,_),\\n   !relocation_adjustment(EA,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR_IN t0 relocation           (IF (NOT (EXISTS relocation_adjustment ((TUPLE t0 0) UNDEF UNDEF)))
           (INSERT ((TUPLE t0 0) (NUMBER 0)) relocation_adjustment_total)
          ))
        )       )
      )
     )
      (DEBUG 
 "relocation_adjustment_total(EA,@generator_0) :- \n   relocation(EA,_,_,_,_,_,_),\n   @generator_0 = sum N : { relocation_adjustment(EA,N,+underscore_3358) }.\nin file main.dl [187:1-189:56]" 
      (TIMER_ON relocation_adjustment_total "@t-nonrecursive-rule;relocation_adjustment_total;/usr/local/src/ddisasm/src/datalog/main.dl [187:1-189:56];relocation_adjustment_total(EA,@generator_0) :- \\n   relocation(EA,_,_,_,_,_,_),\\n   @generator_0 = sum N : { relocation_adjustment(EA,N,+underscore_3358) }.;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR_IN t0 relocation           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION SUM  (TUPLE t1 1) ))  t1 relocation_adjustment (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) TRUE 
           (IF (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t1 0)) relocation_adjustment_total)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR relocation_adjustment)
 ) )  )
  (SUBROUTINE relocation_in_operand
(STMTS     (TIMER_ON relocation_in_operand "@t-nonrecursive-relation;relocation_in_operand;self_diagnose.dl [5:7-5:28];"
(STMTS      (DEBUG 
 "relocation_in_operand(EA,Index,Location,Offset) :- \n   code_in_block(EA,_),\n   instruction_immediate_offset(EA,Index,Offset,_),\n   relocation(Location,_,_,_,_,_,_),\n   Location = (EA+Offset).\nin file self_diagnose.dl [8:1-12:26]" 
      (TIMER_ON relocation_in_operand "@t-nonrecursive-rule;relocation_in_operand;self_diagnose.dl [8:1-12:26];relocation_in_operand(EA,Index,Location,Offset) :- \\n   code_in_block(EA,_),\\n   instruction_immediate_offset(EA,Index,Offset,_),\\n   relocation(Location,_,_,_,_,_,_),\\n   Location = (EA+Offset).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY instruction_immediate_offset)))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 relocation (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2))))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 0) (TUPLE t1 2)) relocation_in_operand)
)))
        )       )
      )
     )
      (DEBUG 
 "relocation_in_operand(EA,Index,Location,Offset) :- \n   code_in_block(EA,_),\n   instruction_displacement_offset(EA,Index,Offset,_),\n   relocation(Location,_,_,_,_,_,_),\n   Location = (EA+Offset).\nin file self_diagnose.dl [14:1-18:26]" 
      (TIMER_ON relocation_in_operand "@t-nonrecursive-rule;relocation_in_operand;self_diagnose.dl [14:1-18:26];relocation_in_operand(EA,Index,Location,Offset) :- \\n   code_in_block(EA,_),\\n   instruction_displacement_offset(EA,Index,Offset,_),\\n   relocation(Location,_,_,_,_,_,_),\\n   Location = (EA+Offset).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY instruction_displacement_offset)))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 relocation (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2))))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 0) (TUPLE t1 2)) relocation_in_operand)
)))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE relocation_size
(STMTS (STMTS     (TIMER_ON relocation_size "@t-nonrecursive-relation;relocation_size;/usr/local/src/ddisasm/src/datalog/main.dl [172:7-172:22];"
(STMTS      (DEBUG 
 "relocation_size(Type,Size) :- \n   binary_format(\"PE\"),\n   pe_relocation_size(Type,Size).\nin file relocations.dl [36:1-38:35]" 
      (TIMER_ON relocation_size "@t-nonrecursive-rule;relocation_size;relocations.dl [36:1-38:35];relocation_size(Type,Size) :- \\n   binary_format(\\\"PE\\\"),\\n   pe_relocation_size(Type,Size).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY pe_relocation_size))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 pe_relocation_size           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) relocation_size)
)
        )       )
      )
     )
      (DEBUG 
 "relocation_size(Type,Size) :- \n   ISA = \"X64\",\n   binary_format(\"ELF\"),\n   elf_relocation_size(ISA,Type,Size).\nin file relocations.dl [380:1-383:40]" 
      (TIMER_ON relocation_size "@t-nonrecursive-rule;relocation_size;relocations.dl [380:1-383:40];relocation_size(Type,Size) :- \\n   ISA = \\\"X64\\\",\\n   binary_format(\\\"ELF\\\"),\\n   elf_relocation_size(ISA,Type,Size).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY elf_relocation_size))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 elf_relocation_size (INDEX  (= (TUPLE t0 0) (STRING "X64")))
          (INSERT ((TUPLE t0 1) (TUPLE t0 2)) relocation_size)
)        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR pe_relocation_size)
 ) )  )
  (SUBROUTINE repeated_byte
(STMTS (STMTS (STMTS     (TIMER_ON repeated_byte "@t-relation-loadtime;repeated_byte;data.dl [59:7-59:20];loadtime;"
     (IO repeated_byte ((= IO "file") (= attributeNames "EA\tValue\tCount") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "repeated_byte") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"EA\", \"Value\", \"Count\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:address\", \"u:unsigned\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE repeated_byte "@n-nonrecursive-relation;repeated_byte;data.dl [59:7-59:20];")
 )   )  )  )
  (SUBROUTINE resolved_reaches
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON resolved_reaches "@t-nonrecursive-relation;resolved_reaches;code_inference.dl [1298:7-1298:23];"
(STMTS      (DEBUG 
 "resolved_reaches(Block,Size,7) :- \n   unresolved_block(Block,\"code\",Size),\n   may_fallthrough(EA,Block),\n   code_in_block_candidate_refined(EA,BlockPred),\n   !candidate_block_is_padding(BlockPred),\n   !unresolved_block(BlockPred,\"code\",_),\n   !impossible_block(BlockPred,\"code\",_,_).\nin file code_inference.dl [1301:1-1313:45]" 
      (TIMER_ON resolved_reaches "@t-nonrecursive-rule;resolved_reaches;code_inference.dl [1301:1-1313:45];resolved_reaches(Block,Size,7) :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   may_fallthrough(EA,Block),\\n   code_in_block_candidate_refined(EA,BlockPred),\\n   !candidate_block_is_padding(BlockPred),\\n   !unresolved_block(BlockPred,\\\"code\\\",_),\\n   !impossible_block(BlockPred,\\\"code\\\",_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_block_candidate_refined)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY may_fallthrough)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (AND (AND (NOT (EXISTS impossible_block ((TUPLE t2 1) (STRING "code") UNDEF UNDEF))) (NOT (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF)))) (NOT (EXISTS candidate_block_is_padding ((TUPLE t2 1)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 2) (NUMBER 7)) resolved_reaches)
)))        )       )
      )
     )
      (DEBUG 
 "resolved_reaches(Block,Size,7) :- \n   unresolved_block(Block,\"code\",Size),\n   direct_jump(EA,Block),\n   code_in_block_candidate_refined(EA,BlockPred),\n   !candidate_block_is_padding(BlockPred),\n   !unresolved_block(BlockPred,\"code\",_),\n   !impossible_block(BlockPred,\"code\",_,_).\nin file code_inference.dl [1301:1-1313:45]" 
      (TIMER_ON resolved_reaches "@t-nonrecursive-rule;resolved_reaches;code_inference.dl [1301:1-1313:45];resolved_reaches(Block,Size,7) :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   direct_jump(EA,Block),\\n   code_in_block_candidate_refined(EA,BlockPred),\\n   !candidate_block_is_padding(BlockPred),\\n   !unresolved_block(BlockPred,\\\"code\\\",_),\\n   !impossible_block(BlockPred,\\\"code\\\",_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_block_candidate_refined)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY direct_jump)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 direct_jump (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (AND (AND (NOT (EXISTS impossible_block ((TUPLE t2 1) (STRING "code") UNDEF UNDEF))) (NOT (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF)))) (NOT (EXISTS candidate_block_is_padding ((TUPLE t2 1)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 2) (NUMBER 7)) resolved_reaches)
)))        )       )
      )
     )
      (DEBUG 
 "resolved_reaches(Block,Size,7) :- \n   unresolved_block(Block,\"code\",Size),\n   direct_call(EA,Block),\n   code_in_block_candidate_refined(EA,BlockPred),\n   !candidate_block_is_padding(BlockPred),\n   !unresolved_block(BlockPred,\"code\",_),\n   !impossible_block(BlockPred,\"code\",_,_).\nin file code_inference.dl [1301:1-1313:45]" 
      (TIMER_ON resolved_reaches "@t-nonrecursive-rule;resolved_reaches;code_inference.dl [1301:1-1313:45];resolved_reaches(Block,Size,7) :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   direct_call(EA,Block),\\n   code_in_block_candidate_refined(EA,BlockPred),\\n   !candidate_block_is_padding(BlockPred),\\n   !unresolved_block(BlockPred,\\\"code\\\",_),\\n   !impossible_block(BlockPred,\\\"code\\\",_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY code_in_block_candidate_refined)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY direct_call)))
         (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
          (FOR t1 direct_call (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (AND (AND (NOT (EXISTS impossible_block ((TUPLE t2 1) (STRING "code") UNDEF UNDEF))) (NOT (EXISTS unresolved_block ((TUPLE t2 1) (STRING "code") UNDEF)))) (NOT (EXISTS candidate_block_is_padding ((TUPLE t2 1)))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 2) (NUMBER 7)) resolved_reaches)
)))        )       )
      )
     )
 )    )
 ) (STMTS     (DEBUG 
 "resolved_reaches(Block,Size,Points1) <= resolved_reaches(Block,Size,Points2) :- \n   Points2 >= Points1.\nin file code_inference.dl [1330:1-1331:24]" 
     (TIMER_ON resolved_reaches "@t-nonrecursive-rule;resolved_reaches;code_inference.dl [1330:1-1331:24];resolved_reaches(Block,Size,Points1) <= resolved_reaches(Block,Size,Points2) :- \\n   Points2 >= Points1.;"
(QUERY
       (IF (NOT (ISEMPTY resolved_reaches))
        (FOR_IN t0 resolved_reaches          (INDEXED_IF_EXISTS t1 resolved_reaches (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (<= (TUPLE t0 2) (TUPLE t1 2) )) (NOT (CONSTRAINT = (TUPLE t0 2)  (TUPLE t1 2)))
          (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delete_resolved_reaches)
))
       )      )
     )
    )
 (STMTS (QUERY
     (FOR_IN t0 @delete_resolved_reaches       (ERASE ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) resolved_reaches)
)
    )
     (CLEAR @delete_resolved_reaches)
 ) ) (QUERY
     (FOR_IN t0 resolved_reaches       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_resolved_reaches)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_resolved_reaches "@t-recursive-relation;resolved_reaches;code_inference.dl [1298:7-1298:23];"
(STMTS (STMTS (STMTS       (DEBUG 
 "resolved_reaches(Block,Size,(Points0-0)) :- \n   unresolved_block(Block,\"code\",Size),\n   must_fallthrough(EA,Block),\n   code_in_block_candidate_refined(EA,BlockPred),\n   resolved_reaches(BlockPred,_,Points0),\n   Points0 > 0.\nin file code_inference.dl [1315:1-1327:22]" 
       (TIMER_ON @new_resolved_reaches "@t-recursive-rule;resolved_reaches;0;code_inference.dl [1315:1-1327:22];resolved_reaches(Block,Size,(Points0-0)) :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   must_fallthrough(EA,Block),\\n   code_in_block_candidate_refined(EA,BlockPred),\\n   resolved_reaches(BlockPred,_,Points0),\\n   Points0 > 0.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY @delta_resolved_reaches))) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY must_fallthrough)))
          (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
           (FOR t1 must_fallthrough (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (FOR t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (FOR t3 @delta_resolved_reaches (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (<= (NUMBER 0) (TUPLE t3 2) ))
              (IF (AND (CONSTRAINT != (TUPLE t3 2)  (NUMBER 0)) (NOT (EXISTS resolved_reaches ((TUPLE t0 0) (TUPLE t0 2) (INTRINSIC - (TUPLE t3 2) (NUMBER 0))))))
               (INSERT ((TUPLE t0 0) (TUPLE t0 2) (INTRINSIC - (TUPLE t3 2) (NUMBER 0))) @new_resolved_reaches)
              )))))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "resolved_reaches(Block,Size,(Points0-0)) :- \n   unresolved_block(Block,\"code\",Size),\n   direct_jump(EA,Block),\n   code_in_block_candidate_refined(EA,BlockPred),\n   resolved_reaches(BlockPred,_,Points0),\n   Points0 > 0.\nin file code_inference.dl [1315:1-1327:22]" 
       (TIMER_ON @new_resolved_reaches "@t-recursive-rule;resolved_reaches;0;code_inference.dl [1315:1-1327:22];resolved_reaches(Block,Size,(Points0-0)) :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   direct_jump(EA,Block),\\n   code_in_block_candidate_refined(EA,BlockPred),\\n   resolved_reaches(BlockPred,_,Points0),\\n   Points0 > 0.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY @delta_resolved_reaches))) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY direct_jump)))
          (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
           (FOR t1 direct_jump (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (FOR t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (FOR t3 @delta_resolved_reaches (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (<= (NUMBER 0) (TUPLE t3 2) ))
              (IF (AND (CONSTRAINT != (TUPLE t3 2)  (NUMBER 0)) (NOT (EXISTS resolved_reaches ((TUPLE t0 0) (TUPLE t0 2) (INTRINSIC - (TUPLE t3 2) (NUMBER 0))))))
               (INSERT ((TUPLE t0 0) (TUPLE t0 2) (INTRINSIC - (TUPLE t3 2) (NUMBER 0))) @new_resolved_reaches)
              )))))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "resolved_reaches(Block,Size,(Points0-0)) :- \n   unresolved_block(Block,\"code\",Size),\n   direct_call(EA,Block),\n   code_in_block_candidate_refined(EA,BlockPred),\n   resolved_reaches(BlockPred,_,Points0),\n   Points0 > 0.\nin file code_inference.dl [1315:1-1327:22]" 
       (TIMER_ON @new_resolved_reaches "@t-recursive-rule;resolved_reaches;0;code_inference.dl [1315:1-1327:22];resolved_reaches(Block,Size,(Points0-0)) :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   direct_call(EA,Block),\\n   code_in_block_candidate_refined(EA,BlockPred),\\n   resolved_reaches(BlockPred,_,Points0),\\n   Points0 > 0.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY @delta_resolved_reaches))) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY direct_call)))
          (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
           (FOR t1 direct_call (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (FOR t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (FOR t3 @delta_resolved_reaches (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (<= (NUMBER 0) (TUPLE t3 2) ))
              (IF (AND (CONSTRAINT != (TUPLE t3 2)  (NUMBER 0)) (NOT (EXISTS resolved_reaches ((TUPLE t0 0) (TUPLE t0 2) (INTRINSIC - (TUPLE t3 2) (NUMBER 0))))))
               (INSERT ((TUPLE t0 0) (TUPLE t0 2) (INTRINSIC - (TUPLE t3 2) (NUMBER 0))) @new_resolved_reaches)
              )))))         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "resolved_reaches(Block,Size,(Points0-1)) :- \n   unresolved_block(Block,\"code\",Size),\n   may_fallthrough(EA,Block),\n   code_in_block_candidate_refined(EA,BlockPred),\n   resolved_reaches(BlockPred,_,Points0),\n   Points0 > 1.\nin file code_inference.dl [1315:1-1327:22]" 
       (TIMER_ON @new_resolved_reaches "@t-recursive-rule;resolved_reaches;0;code_inference.dl [1315:1-1327:22];resolved_reaches(Block,Size,(Points0-1)) :- \\n   unresolved_block(Block,\\\"code\\\",Size),\\n   may_fallthrough(EA,Block),\\n   code_in_block_candidate_refined(EA,BlockPred),\\n   resolved_reaches(BlockPred,_,Points0),\\n   Points0 > 1.;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY @delta_resolved_reaches))) (NOT (ISEMPTY code_in_block_candidate_refined))) (NOT (ISEMPTY may_fallthrough)))
          (FOR t0 unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "code")))
           (FOR t1 may_fallthrough (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (FOR t2 code_in_block_candidate_refined (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (FOR t3 @delta_resolved_reaches (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (<= (NUMBER 1) (TUPLE t3 2) ))
              (IF (AND (CONSTRAINT != (TUPLE t3 2)  (NUMBER 1)) (NOT (EXISTS resolved_reaches ((TUPLE t0 0) (TUPLE t0 2) (INTRINSIC - (TUPLE t3 2) (NUMBER 1))))))
               (INSERT ((TUPLE t0 0) (TUPLE t0 2) (INTRINSIC - (TUPLE t3 2) (NUMBER 1))) @new_resolved_reaches)
              )))))         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_resolved_reaches "@t-recursive-relation;resolved_reaches;code_inference.dl [1298:7-1298:23];"
(STMTS (STMTS       (CLEAR @delta_resolved_reaches)
 (STMTS       (DEBUG 
 "resolved_reaches(Block,Size,Points1) <= resolved_reaches(Block,Size,Points2) :- \n   Points2 >= Points1.\nin file code_inference.dl [1330:1-1331:24]" 
       (TIMER_ON @reject_resolved_reaches "@t-recursive-rule;resolved_reaches;0;code_inference.dl [1330:1-1331:24];resolved_reaches(Block,Size,Points1) <= resolved_reaches(Block,Size,Points2) :- \\n   Points2 >= Points1.;"
(QUERY
         (IF (NOT (ISEMPTY @new_resolved_reaches))
          (FOR_IN t0 @new_resolved_reaches            (INDEXED_IF_EXISTS t1 @new_resolved_reaches (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (<= (TUPLE t0 2) (TUPLE t1 2) )) (NOT (CONSTRAINT = (TUPLE t0 2)  (TUPLE t1 2)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @reject_resolved_reaches)
))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "resolved_reaches(Block,Size,Points1) <= resolved_reaches(Block,Size,Points2) :- \n   Points2 >= Points1.\nin file code_inference.dl [1330:1-1331:24]" 
       (TIMER_ON @reject_resolved_reaches "@t-recursive-rule;resolved_reaches;0;code_inference.dl [1330:1-1331:24];resolved_reaches(Block,Size,Points1) <= resolved_reaches(Block,Size,Points2) :- \\n   Points2 >= Points1.;"
(QUERY
         (IF (AND (NOT (ISEMPTY @new_resolved_reaches)) (NOT (ISEMPTY resolved_reaches)))
          (FOR_IN t0 @new_resolved_reaches            (INDEXED_IF_EXISTS t1 resolved_reaches (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (<= (TUPLE t0 2) (TUPLE t1 2) )) TRUE
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @reject_resolved_reaches)
))
         )        )
       )
      )
 ) (QUERY
       (FOR_IN t0 @new_resolved_reaches         (IF (NOT (EXISTS @reject_resolved_reaches ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2))))
         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_resolved_reaches)
        ))
      )
       (CLEAR @reject_resolved_reaches)
       (CLEAR @new_resolved_reaches)
 (STMTS       (DEBUG 
 "resolved_reaches(Block,Size,Points1) <= resolved_reaches(Block,Size,Points2) :- \n   Points2 >= Points1.\nin file code_inference.dl [1330:1-1331:24]" 
       (TIMER_ON @delete_resolved_reaches "@t-recursive-rule;resolved_reaches;0;code_inference.dl [1330:1-1331:24];resolved_reaches(Block,Size,Points1) <= resolved_reaches(Block,Size,Points2) :- \\n   Points2 >= Points1.;"
(QUERY
         (IF (AND (NOT (ISEMPTY resolved_reaches)) (NOT (ISEMPTY @delta_resolved_reaches)))
          (FOR_IN t0 resolved_reaches            (INDEXED_IF_EXISTS t1 @delta_resolved_reaches (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (<= (TUPLE t0 2) (TUPLE t1 2) )) TRUE
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delete_resolved_reaches)
))
         )        )
       )
      )
 ) (QUERY
       (FOR_IN t0 @delete_resolved_reaches         (ERASE ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) resolved_reaches)
)
      )
       (CLEAR @delete_resolved_reaches)
 ) )     )
 ) )  (STMTS      (EXIT (ISEMPTY @delta_resolved_reaches))
 ) (STMTS      (TIMER_ON @new_resolved_reaches "@c-recursive-relation;resolved_reaches;code_inference.dl [1298:7-1298:23];"
(QUERY
       (FOR_IN t0 @delta_resolved_reaches         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) resolved_reaches)
)
      )
     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_resolved_reaches)
     (CLEAR @new_resolved_reaches)
 ) )  )  )  )
  (SUBROUTINE resolved_transfer
(STMTS (STMTS     (TIMER_ON resolved_transfer "@t-nonrecursive-relation;resolved_transfer;cfg.dl [111:7-111:24];"
(STMTS      (DEBUG 
 "resolved_transfer(EA,DestAddr,\"branch\") :- \n   plt_entry(EA,Function),\n   defined_symbol(DestAddr,_,_,_,_,SectIndex,_,_,Function),\n   SectIndex != 0.\nin file cfg.dl [169:1-172:20]" 
      (TIMER_ON resolved_transfer "@t-nonrecursive-rule;resolved_transfer;cfg.dl [169:1-172:20];resolved_transfer(EA,DestAddr,\\\"branch\\\") :- \\n   plt_entry(EA,Function),\\n   defined_symbol(DestAddr,_,_,_,_,SectIndex,_,_,Function),\\n   SectIndex != 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY plt_entry)) (NOT (ISEMPTY defined_symbol)))
         (FOR_IN t0 plt_entry           (FOR t1 defined_symbol (INDEX  (= (TUPLE t1 8) (TUPLE t0 1)))
           (IF (CONSTRAINT != (TUPLE t1 5)  (UNSIGNED 0))
            (INSERT ((TUPLE t0 0) (TUPLE t1 0) (STRING "branch")) resolved_transfer)
           )))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer(EA,Dest,\"branch\") :- \n   jump_table_start(EA,Size,TableStart,_,_),\n   arch.jump(EA),\n   relative_jump_table_entry(_,TableStart,Size,_,Dest,_,_).\nin file cfg.dl [121:1-131:61]" 
      (TIMER_ON resolved_transfer "@t-nonrecursive-rule;resolved_transfer;cfg.dl [121:1-131:61];resolved_transfer(EA,Dest,\\\"branch\\\") :- \\n   jump_table_start(EA,Size,TableStart,_,_),\\n   arch.jump(EA),\\n   relative_jump_table_entry(_,TableStart,Size,_,Dest,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relative_jump_table_entry)) (NOT (ISEMPTY jump_table_start))) (NOT (ISEMPTY arch.jump)))
         (FOR_IN t0 jump_table_start           (IF (EXISTS arch.jump ((TUPLE t0 0)))
           (FOR t1 relative_jump_table_entry (INDEX  (= (TUPLE t1 1) (TUPLE t0 2)) (= (TUPLE t1 2) (TUPLE t0 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 4) (STRING "branch")) resolved_transfer)
)          ))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer(EA,Dest,\"call\") :- \n   jump_table_start(EA,Size,TableStart,_,_),\n   arch.call(EA,_),\n   relative_jump_table_entry(_,TableStart,Size,_,Dest,_,_).\nin file cfg.dl [121:1-131:61]" 
      (TIMER_ON resolved_transfer "@t-nonrecursive-rule;resolved_transfer;cfg.dl [121:1-131:61];resolved_transfer(EA,Dest,\\\"call\\\") :- \\n   jump_table_start(EA,Size,TableStart,_,_),\\n   arch.call(EA,_),\\n   relative_jump_table_entry(_,TableStart,Size,_,Dest,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relative_jump_table_entry)) (NOT (ISEMPTY jump_table_start))) (NOT (ISEMPTY arch.call)))
         (FOR_IN t0 jump_table_start           (IF (EXISTS arch.call ((TUPLE t0 0) UNDEF))
           (FOR t1 relative_jump_table_entry (INDEX  (= (TUPLE t1 1) (TUPLE t0 2)) (= (TUPLE t1 2) (TUPLE t0 1)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 4) (STRING "call")) resolved_transfer)
)          ))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer(EA,Dest,\"branch\") :- \n   jump_table(EA,Memory),\n   code_in_block(EA,_),\n   symbolic_data(Memory,_,Dest),\n   !symbolic_expr_from_relocation(Memory,_,_,_,_),\n   refined_block(Dest).\nin file cfg.dl [113:1-118:25]" 
      (TIMER_ON resolved_transfer "@t-nonrecursive-rule;resolved_transfer;cfg.dl [113:1-118:25];resolved_transfer(EA,Dest,\\\"branch\\\") :- \\n   jump_table(EA,Memory),\\n   code_in_block(EA,_),\\n   symbolic_data(Memory,_,Dest),\\n   !symbolic_expr_from_relocation(Memory,_,_,_,_),\\n   refined_block(Dest).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY jump_table)) (NOT (ISEMPTY refined_block))) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 jump_table           (IF (AND (EXISTS code_in_block ((TUPLE t0 0) UNDEF)) (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 symbolic_data (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (EXISTS refined_block ((TUPLE t1 2)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 2) (STRING "branch")) resolved_transfer)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer(EA,as(Dest, address),\"branch\") :- \n   reg_jump(EA,Reg),\n   !plt_entry(EA,_),\n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   value_reg(EA_def,Reg,_,\"NONE\",_,Dest,_),\n   code_in_block( _tmp_322,_),\n    _tmp_322 = as(Dest, address).\nin file cfg.dl [157:1-167:20]" 
      (TIMER_ON resolved_transfer "@t-nonrecursive-rule;resolved_transfer;cfg.dl [157:1-167:20];resolved_transfer(EA,as(Dest, address),\\\"branch\\\") :- \\n   reg_jump(EA,Reg),\\n   !plt_entry(EA,_),\\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   value_reg(EA_def,Reg,_,\\\"NONE\\\",_,Dest,_),\\n   code_in_block( _tmp_322,_),\\n    _tmp_322 = as(Dest, address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY reg_jump)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 reg_jump           (IF (NOT (EXISTS plt_entry ((TUPLE t0 0) UNDEF)))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
            (FOR t2 value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 3) (STRING "NONE")))
             (IF (EXISTS code_in_block ((TUPLE t2 5) UNDEF))
              (INSERT ((TUPLE t0 0) (TUPLE t2 5) (STRING "branch")) resolved_transfer)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer(EA,as(Dest, address),\"call\") :- \n   reg_call(EA,Reg),\n   !plt_entry(EA,_),\n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   value_reg(EA_def,Reg,_,\"NONE\",_,Dest,_),\n   code_in_block( _tmp_323,_),\n    _tmp_323 = as(Dest, address).\nin file cfg.dl [157:1-167:20]" 
      (TIMER_ON resolved_transfer "@t-nonrecursive-rule;resolved_transfer;cfg.dl [157:1-167:20];resolved_transfer(EA,as(Dest, address),\\\"call\\\") :- \\n   reg_call(EA,Reg),\\n   !plt_entry(EA,_),\\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   value_reg(EA_def,Reg,_,\\\"NONE\\\",_,Dest,_),\\n   code_in_block( _tmp_323,_),\\n    _tmp_323 = as(Dest, address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY reg_call)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY value_reg))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 reg_call           (IF (NOT (EXISTS plt_entry ((TUPLE t0 0) UNDEF)))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
            (FOR t2 value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 3) (STRING "NONE")))
             (IF (EXISTS code_in_block ((TUPLE t2 5) UNDEF))
              (INSERT ((TUPLE t0 0) (TUPLE t2 5) (STRING "call")) resolved_transfer)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer(EA,Dest,\"branch\") :- \n   PtrSize = 8,\n   indirect_jump(EA),\n   !plt_entry(EA,_),\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\n   symbolic_data(DataPointer,_,Dest),\n   !symbolic_expr_from_relocation(DataPointer,_,_,_,_),\n   code_in_block(Dest,_).\nin file cfg.dl [138:1-154:16]" 
      (TIMER_ON resolved_transfer "@t-nonrecursive-rule;resolved_transfer;cfg.dl [138:1-154:16];resolved_transfer(EA,Dest,\\\"branch\\\") :- \\n   PtrSize = 8,\\n   indirect_jump(EA),\\n   !plt_entry(EA,_),\\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\\n   symbolic_data(DataPointer,_,Dest),\\n   !symbolic_expr_from_relocation(DataPointer,_,_,_,_),\\n   code_in_block(Dest,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY indirect_jump)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY data_access_pattern_candidate_refined)))
         (FOR_IN t0 indirect_jump           (IF (NOT (EXISTS plt_entry ((TUPLE t0 0) UNDEF)))
           (FOR t1 data_access_pattern_candidate_refined (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)) (= (TUPLE t1 2) (NUMBER 0)) (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t1 0) UNDEF UNDEF UNDEF UNDEF)))
             (FOR t2 symbolic_data (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
              (IF (EXISTS code_in_block ((TUPLE t2 2) UNDEF))
               (INSERT ((TUPLE t0 0) (TUPLE t2 2) (STRING "branch")) resolved_transfer)
              ))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer(EA,Dest,\"branch\") :- \n   PtrSize = 8,\n   indirect_jump(EA),\n   !plt_entry(EA,_),\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\n   symbolic_expr_from_relocation(DataPointer,_,Symbol,_,Dest),\n   defined_symbol(_,_,_,_,_,_,_,_,Symbol),\n   code_in_block(Dest,_).\nin file cfg.dl [138:1-154:16]" 
      (TIMER_ON resolved_transfer "@t-nonrecursive-rule;resolved_transfer;cfg.dl [138:1-154:16];resolved_transfer(EA,Dest,\\\"branch\\\") :- \\n   PtrSize = 8,\\n   indirect_jump(EA),\\n   !plt_entry(EA,_),\\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\\n   symbolic_expr_from_relocation(DataPointer,_,Symbol,_,Dest),\\n   defined_symbol(_,_,_,_,_,_,_,_,Symbol),\\n   code_in_block(Dest,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY indirect_jump))) (NOT (ISEMPTY symbolic_expr_from_relocation))) (NOT (ISEMPTY defined_symbol))) (NOT (ISEMPTY data_access_pattern_candidate_refined)))
         (FOR_IN t0 indirect_jump           (IF (NOT (EXISTS plt_entry ((TUPLE t0 0) UNDEF)))
           (FOR t1 data_access_pattern_candidate_refined (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)) (= (TUPLE t1 2) (NUMBER 0)) (= (TUPLE t1 3) (TUPLE t0 0)))
            (FOR t2 symbolic_expr_from_relocation (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (IF (AND (EXISTS code_in_block ((TUPLE t2 4) UNDEF)) (EXISTS defined_symbol (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (TUPLE t2 2))))
              (INSERT ((TUPLE t0 0) (TUPLE t2 4) (STRING "branch")) resolved_transfer)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer(EA,Dest,\"call\") :- \n   PtrSize = 8,\n   indirect_call(EA),\n   !plt_entry(EA,_),\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\n   symbolic_data(DataPointer,_,Dest),\n   !symbolic_expr_from_relocation(DataPointer,_,_,_,_),\n   code_in_block(Dest,_).\nin file cfg.dl [138:1-154:16]" 
      (TIMER_ON resolved_transfer "@t-nonrecursive-rule;resolved_transfer;cfg.dl [138:1-154:16];resolved_transfer(EA,Dest,\\\"call\\\") :- \\n   PtrSize = 8,\\n   indirect_call(EA),\\n   !plt_entry(EA,_),\\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\\n   symbolic_data(DataPointer,_,Dest),\\n   !symbolic_expr_from_relocation(DataPointer,_,_,_,_),\\n   code_in_block(Dest,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY indirect_call)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY data_access_pattern_candidate_refined)))
         (FOR_IN t0 indirect_call           (IF (NOT (EXISTS plt_entry ((TUPLE t0 0) UNDEF)))
           (FOR t1 data_access_pattern_candidate_refined (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)) (= (TUPLE t1 2) (NUMBER 0)) (= (TUPLE t1 3) (TUPLE t0 0)))
            (IF (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t1 0) UNDEF UNDEF UNDEF UNDEF)))
             (FOR t2 symbolic_data (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
              (IF (EXISTS code_in_block ((TUPLE t2 2) UNDEF))
               (INSERT ((TUPLE t0 0) (TUPLE t2 2) (STRING "call")) resolved_transfer)
              ))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer(EA,Dest,\"call\") :- \n   PtrSize = 8,\n   indirect_call(EA),\n   !plt_entry(EA,_),\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\n   symbolic_expr_from_relocation(DataPointer,_,Symbol,_,Dest),\n   defined_symbol(_,_,_,_,_,_,_,_,Symbol),\n   code_in_block(Dest,_).\nin file cfg.dl [138:1-154:16]" 
      (TIMER_ON resolved_transfer "@t-nonrecursive-rule;resolved_transfer;cfg.dl [138:1-154:16];resolved_transfer(EA,Dest,\\\"call\\\") :- \\n   PtrSize = 8,\\n   indirect_call(EA),\\n   !plt_entry(EA,_),\\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\\n   symbolic_expr_from_relocation(DataPointer,_,Symbol,_,Dest),\\n   defined_symbol(_,_,_,_,_,_,_,_,Symbol),\\n   code_in_block(Dest,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY indirect_call))) (NOT (ISEMPTY symbolic_expr_from_relocation))) (NOT (ISEMPTY defined_symbol))) (NOT (ISEMPTY data_access_pattern_candidate_refined)))
         (FOR_IN t0 indirect_call           (IF (NOT (EXISTS plt_entry ((TUPLE t0 0) UNDEF)))
           (FOR t1 data_access_pattern_candidate_refined (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)) (= (TUPLE t1 2) (NUMBER 0)) (= (TUPLE t1 3) (TUPLE t0 0)))
            (FOR t2 symbolic_expr_from_relocation (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (IF (AND (EXISTS code_in_block ((TUPLE t2 4) UNDEF)) (EXISTS defined_symbol (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (TUPLE t2 2))))
              (INSERT ((TUPLE t0 0) (TUPLE t2 4) (STRING "call")) resolved_transfer)
             )))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR jump_table)
     (CLEAR jump_table_start)
     (CLEAR relative_jump_table_entry)
     (CLEAR value_reg)
 ) )  )
  (SUBROUTINE resolved_transfer_to_symbol
(STMTS (STMTS     (TIMER_ON resolved_transfer_to_symbol "@t-nonrecursive-relation;resolved_transfer_to_symbol;cfg.dl [180:7-180:34];"
(STMTS      (DEBUG 
 "resolved_transfer_to_symbol(EA,Function,\"branch\") :- \n   plt_entry(EA,Function),\n   symbol(_,_,_,_,_,SectIndex,_,_,Function),\n   SectIndex = 0.\nin file cfg.dl [229:1-232:19]" 
      (TIMER_ON resolved_transfer_to_symbol "@t-nonrecursive-rule;resolved_transfer_to_symbol;cfg.dl [229:1-232:19];resolved_transfer_to_symbol(EA,Function,\\\"branch\\\") :- \\n   plt_entry(EA,Function),\\n   symbol(_,_,_,_,_,SectIndex,_,_,Function),\\n   SectIndex = 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY plt_entry)) (NOT (ISEMPTY symbol)))
         (FOR_IN t0 plt_entry           (IF (EXISTS symbol (UNDEF UNDEF UNDEF UNDEF UNDEF (UNSIGNED 0) UNDEF UNDEF (TUPLE t0 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "branch")) resolved_transfer_to_symbol)
          ))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer_to_symbol(EA,Symbol,\"branch\") :- \n   PtrSize = 8,\n   indirect_jump(EA),\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\n   pointer_to_external_symbol(DataPointer,Symbol).\nin file cfg.dl [203:1-211:52]" 
      (TIMER_ON resolved_transfer_to_symbol "@t-nonrecursive-rule;resolved_transfer_to_symbol;cfg.dl [203:1-211:52];resolved_transfer_to_symbol(EA,Symbol,\\\"branch\\\") :- \\n   PtrSize = 8,\\n   indirect_jump(EA),\\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\\n   pointer_to_external_symbol(DataPointer,Symbol).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY pointer_to_external_symbol)) (NOT (ISEMPTY indirect_jump))) (NOT (ISEMPTY data_access_pattern_candidate_refined)))
         (FOR_IN t0 indirect_jump           (FOR t1 data_access_pattern_candidate_refined (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)) (= (TUPLE t1 2) (NUMBER 0)) (= (TUPLE t1 3) (TUPLE t0 0)))
           (FOR t2 pointer_to_external_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 1) (STRING "branch")) resolved_transfer_to_symbol)
)))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer_to_symbol(EA,Symbol,\"call\") :- \n   PtrSize = 8,\n   indirect_call(EA),\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\n   pointer_to_external_symbol(DataPointer,Symbol).\nin file cfg.dl [203:1-211:52]" 
      (TIMER_ON resolved_transfer_to_symbol "@t-nonrecursive-rule;resolved_transfer_to_symbol;cfg.dl [203:1-211:52];resolved_transfer_to_symbol(EA,Symbol,\\\"call\\\") :- \\n   PtrSize = 8,\\n   indirect_call(EA),\\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA),\\n   pointer_to_external_symbol(DataPointer,Symbol).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY pointer_to_external_symbol)) (NOT (ISEMPTY indirect_call))) (NOT (ISEMPTY data_access_pattern_candidate_refined)))
         (FOR_IN t0 indirect_call           (FOR t1 data_access_pattern_candidate_refined (INDEX  (= (TUPLE t1 1) (UNSIGNED 8)) (= (TUPLE t1 2) (NUMBER 0)) (= (TUPLE t1 3) (TUPLE t0 0)))
           (FOR t2 pointer_to_external_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 1) (STRING "call")) resolved_transfer_to_symbol)
)))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer_to_symbol(EA,Symbol,\"branch\") :- \n   reg_jump(EA,Reg),\n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   arch.memory_access(\"LOAD\",EA_def,_,_,Reg,_,_,_,_),\n   PtrSize = 8,\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA_def),\n   pointer_to_external_symbol(DataPointer,Symbol).\nin file cfg.dl [217:1-227:52]" 
      (TIMER_ON resolved_transfer_to_symbol "@t-nonrecursive-rule;resolved_transfer_to_symbol;cfg.dl [217:1-227:52];resolved_transfer_to_symbol(EA,Symbol,\\\"branch\\\") :- \\n   reg_jump(EA,Reg),\\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   arch.memory_access(\\\"LOAD\\\",EA_def,_,_,Reg,_,_,_,_),\\n   PtrSize = 8,\\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA_def),\\n   pointer_to_external_symbol(DataPointer,Symbol).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY pointer_to_external_symbol)) (NOT (ISEMPTY reg_jump))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY data_access_pattern_candidate_refined))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 reg_jump           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t1 0) UNDEF UNDEF (TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF))
            (FOR t2 data_access_pattern_candidate_refined (INDEX  (= (TUPLE t2 1) (UNSIGNED 8)) (= (TUPLE t2 2) (NUMBER 0)) (= (TUPLE t2 3) (TUPLE t1 0)))
             (FOR t3 pointer_to_external_symbol (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
              (INSERT ((TUPLE t0 0) (TUPLE t3 1) (STRING "branch")) resolved_transfer_to_symbol)
))           )))
        )       )
      )
     )
      (DEBUG 
 "resolved_transfer_to_symbol(EA,Symbol,\"call\") :- \n   reg_call(EA,Reg),\n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   arch.memory_access(\"LOAD\",EA_def,_,_,Reg,_,_,_,_),\n   PtrSize = 8,\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA_def),\n   pointer_to_external_symbol(DataPointer,Symbol).\nin file cfg.dl [217:1-227:52]" 
      (TIMER_ON resolved_transfer_to_symbol "@t-nonrecursive-rule;resolved_transfer_to_symbol;cfg.dl [217:1-227:52];resolved_transfer_to_symbol(EA,Symbol,\\\"call\\\") :- \\n   reg_call(EA,Reg),\\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   arch.memory_access(\\\"LOAD\\\",EA_def,_,_,Reg,_,_,_,_),\\n   PtrSize = 8,\\n   data_access_pattern_candidate_refined(DataPointer,PtrSize,0,EA_def),\\n   pointer_to_external_symbol(DataPointer,Symbol).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY pointer_to_external_symbol)) (NOT (ISEMPTY reg_call))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY data_access_pattern_candidate_refined))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 reg_call           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0)))
           (IF (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t1 0) UNDEF UNDEF (TUPLE t0 1) UNDEF UNDEF UNDEF UNDEF))
            (FOR t2 data_access_pattern_candidate_refined (INDEX  (= (TUPLE t2 1) (UNSIGNED 8)) (= (TUPLE t2 2) (NUMBER 0)) (= (TUPLE t2 3) (TUPLE t1 0)))
             (FOR t3 pointer_to_external_symbol (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
              (INSERT ((TUPLE t0 0) (TUPLE t3 1) (STRING "call")) resolved_transfer_to_symbol)
))           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.memory_access)
     (CLEAR data_access_pattern_candidate_refined)
     (CLEAR plt_entry)
 ) )  )
  (SUBROUTINE section
(STMTS (STMTS (STMTS     (TIMER_ON section "@t-relation-loadtime;section;/usr/local/src/ddisasm/src/datalog/main.dl [157:7-157:14];loadtime;"
     (IO section ((= IO "file") (= attributeNames "Name\tSize\tEA\tAlign\tIndex") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "section") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 5, \"params\": [\"Name\", \"Size\", \"EA\", \"Align\", \"Index\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 5, \"types\": [\"s:symbol\", \"u:unsigned\", \"u:address\", \"u:unsigned\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE section "@n-nonrecursive-relation;section;/usr/local/src/ddisasm/src/datalog/main.dl [157:7-157:14];")
 )   )  )  )
  (SUBROUTINE section_property
(STMTS (STMTS (STMTS     (TIMER_ON section_property "@t-relation-loadtime;section_property;/usr/local/src/ddisasm/src/datalog/main.dl [160:7-160:23];loadtime;"
     (IO section_property ((= IO "file") (= attributeNames "Name\tProperty") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "section_property") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"Name\", \"Property\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:symbol\", \"s:symbol\"]}}")))
    )
 ) (STMTS     (LOGSIZE section_property "@n-nonrecursive-relation;section_property;/usr/local/src/ddisasm/src/datalog/main.dl [160:7-160:23];")
 )   )  )  )
  (SUBROUTINE section_type
(STMTS (STMTS (STMTS     (TIMER_ON section_type "@t-relation-loadtime;section_type;/usr/local/src/ddisasm/src/datalog/main.dl [163:7-163:19];loadtime;"
     (IO section_type ((= IO "file") (= attributeNames "Name\tType") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "section_type") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"Name\", \"Type\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"s:symbol\", \"u:unsigned\"]}}")))
    )
 ) (STMTS     (LOGSIZE section_type "@n-nonrecursive-relation;section_type;/usr/local/src/ddisasm/src/datalog/main.dl [163:7-163:19];")
 )   )  )  )
  (SUBROUTINE simple_data_access_pattern
(STMTS (STMTS     (TIMER_ON simple_data_access_pattern "@t-nonrecursive-relation;simple_data_access_pattern;data_access_analysis.dl [177:7-177:33];"
(STMTS      (DEBUG 
 "simple_data_access_pattern(Address,Op_index,Size,EA) :- \n   data_access(EA,Op_index,_,_,_,_,_,Size),\n   instruction_has_relocation(EA,EA_rel),\n   symbolic_expr_from_relocation(EA_rel,_,_,_,Address),\n   data_segment(Beg,End),\n   Address >= Beg,\n   Address <= End.\nin file data_access_analysis.dl [211:1-217:20]" 
      (TIMER_ON simple_data_access_pattern "@t-nonrecursive-rule;simple_data_access_pattern;data_access_analysis.dl [211:1-217:20];simple_data_access_pattern(Address,Op_index,Size,EA) :- \\n   data_access(EA,Op_index,_,_,_,_,_,Size),\\n   instruction_has_relocation(EA,EA_rel),\\n   symbolic_expr_from_relocation(EA_rel,_,_,_,Address),\\n   data_segment(Beg,End),\\n   Address >= Beg,\\n   Address <= End.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY symbolic_expr_from_relocation))) (NOT (ISEMPTY instruction_has_relocation)))
         (FOR_IN t0 data_access           (FOR t1 instruction_has_relocation (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 symbolic_expr_from_relocation (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)))
            (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (TUPLE t2 4)  (TUPLE t3 0)) (CONSTRAINT <= (TUPLE t2 4)  (TUPLE t3 1))) 
             (INSERT ((TUPLE t2 4) (TUPLE t0 1) (TUPLE t0 7) (TUPLE t0 0)) simple_data_access_pattern)
))))
        )       )
      )
     )
      (DEBUG 
 "simple_data_access_pattern(as(Offset, address),Op_index,Size,EA) :- \n   data_access(EA,Op_index,\"NONE\",\"NONE\",\"NONE\",_,Offset,Size),\n   !instruction_has_relocation(EA,_),\n   data_segment(Beg,End),\n   as(Offset, address) >= Beg,\n   as(Offset, address) <= End.\nin file data_access_analysis.dl [190:1-196:20]" 
      (TIMER_ON simple_data_access_pattern "@t-nonrecursive-rule;simple_data_access_pattern;data_access_analysis.dl [190:1-196:20];simple_data_access_pattern(as(Offset, address),Op_index,Size,EA) :- \\n   data_access(EA,Op_index,\\\"NONE\\\",\\\"NONE\\\",\\\"NONE\\\",_,Offset,Size),\\n   !instruction_has_relocation(EA,_),\\n   data_segment(Beg,End),\\n   as(Offset, address) >= Beg,\\n   as(Offset, address) <= End.;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY data_segment)))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 2) (STRING "NONE")) (= (TUPLE t0 3) (STRING "NONE")) (= (TUPLE t0 4) (STRING "NONE")))
          (IF (NOT (EXISTS instruction_has_relocation ((TUPLE t0 0) UNDEF)))
           (IF_EXISTS t1 data_segment (AND (CONSTRAINT >= (TUPLE t0 6)  (TUPLE t1 0)) (CONSTRAINT <= (TUPLE t0 6)  (TUPLE t1 1))) 
            (INSERT ((TUPLE t0 6) (TUPLE t0 1) (TUPLE t0 7) (TUPLE t0 0)) simple_data_access_pattern)
)          ))        )       )
      )
     )
      (DEBUG 
 "simple_data_access_pattern(Address,Op_index,Size,EA) :- \n   code_in_block(EA,_),\n   pc_relative_operand(EA,Op_index,Address),\n   instruction_memory_access_size(EA,Op_index,Size),\n   data_segment(Beg,End),\n   Address >= Beg,\n   Address <= End.\nin file data_access_analysis.dl [199:1-208:20]" 
      (TIMER_ON simple_data_access_pattern "@t-nonrecursive-rule;simple_data_access_pattern;data_access_analysis.dl [199:1-208:20];simple_data_access_pattern(Address,Op_index,Size,EA) :- \\n   code_in_block(EA,_),\\n   pc_relative_operand(EA,Op_index,Address),\\n   instruction_memory_access_size(EA,Op_index,Size),\\n   data_segment(Beg,End),\\n   Address >= Beg,\\n   Address <= End.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY instruction_memory_access_size))) (NOT (ISEMPTY pc_relative_operand)))
         (FOR_IN t0 code_in_block           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 instruction_memory_access_size (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
            (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (TUPLE t1 2)  (TUPLE t3 0)) (CONSTRAINT <= (TUPLE t1 2)  (TUPLE t3 1))) 
             (INSERT ((TUPLE t1 2) (TUPLE t1 1) (TUPLE t2 2) (TUPLE t0 0)) simple_data_access_pattern)
))))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR instruction_memory_access_size)
 ) )  )
  (SUBROUTINE special_data_section
(STMTS     (TIMER_ON special_data_section "@t-nonrecursive-relation;special_data_section;/usr/local/src/ddisasm/src/datalog/main.dl [818:7-818:27];"
(STMTS      (DEBUG 
 "special_data_section(Section) :- \n   exception_section(Section).\nin file elf_binaries.dl [67:1-68:32]" 
      (TIMER_ON special_data_section "@t-nonrecursive-rule;special_data_section;binary/elf/elf_binaries.dl [67:1-68:32];special_data_section(Section) :- \\n   exception_section(Section).;"
(QUERY
        (IF (NOT (ISEMPTY exception_section))
         (FOR_IN t0 exception_section           (INSERT ((TUPLE t0 0)) special_data_section)
)
        )       )
      )
     )
      (DEBUG 
 "special_data_section(\".dynamic\").\nin file elf_binaries.dl [70:1-70:34]" 
      (TIMER_ON special_data_section "@t-nonrecursive-rule;special_data_section;binary/elf/elf_binaries.dl [70:1-70:34];special_data_section(\\\".dynamic\\\").;"
(QUERY
        (INSERT ((STRING ".dynamic")) special_data_section)
       )
      )
     )
      (DEBUG 
 "special_data_section(\".fini_array\").\nin file elf_binaries.dl [71:1-71:37]" 
      (TIMER_ON special_data_section "@t-nonrecursive-rule;special_data_section;binary/elf/elf_binaries.dl [71:1-71:37];special_data_section(\\\".fini_array\\\").;"
(QUERY
        (INSERT ((STRING ".fini_array")) special_data_section)
       )
      )
     )
      (DEBUG 
 "special_data_section(\".got\").\nin file elf_binaries.dl [72:1-72:30]" 
      (TIMER_ON special_data_section "@t-nonrecursive-rule;special_data_section;binary/elf/elf_binaries.dl [72:1-72:30];special_data_section(\\\".got\\\").;"
(QUERY
        (INSERT ((STRING ".got")) special_data_section)
       )
      )
     )
      (DEBUG 
 "special_data_section(\".got.plt\").\nin file elf_binaries.dl [73:1-73:34]" 
      (TIMER_ON special_data_section "@t-nonrecursive-rule;special_data_section;binary/elf/elf_binaries.dl [73:1-73:34];special_data_section(\\\".got.plt\\\").;"
(QUERY
        (INSERT ((STRING ".got.plt")) special_data_section)
       )
      )
     )
      (DEBUG 
 "special_data_section(\".init_array\").\nin file elf_binaries.dl [74:1-74:37]" 
      (TIMER_ON special_data_section "@t-nonrecursive-rule;special_data_section;binary/elf/elf_binaries.dl [74:1-74:37];special_data_section(\\\".init_array\\\").;"
(QUERY
        (INSERT ((STRING ".init_array")) special_data_section)
       )
      )
     )
      (DEBUG 
 "special_data_section(\".interp\").\nin file elf_binaries.dl [75:1-75:33]" 
      (TIMER_ON special_data_section "@t-nonrecursive-rule;special_data_section;binary/elf/elf_binaries.dl [75:1-75:33];special_data_section(\\\".interp\\\").;"
(QUERY
        (INSERT ((STRING ".interp")) special_data_section)
       )
      )
     )
      (DEBUG 
 "special_data_section(\".jcr\").\nin file elf_binaries.dl [76:1-76:30]" 
      (TIMER_ON special_data_section "@t-nonrecursive-rule;special_data_section;binary/elf/elf_binaries.dl [76:1-76:30];special_data_section(\\\".jcr\\\").;"
(QUERY
        (INSERT ((STRING ".jcr")) special_data_section)
       )
      )
     )
      (DEBUG 
 "special_data_section(\".tm_clone_table\").\nin file elf_binaries.dl [77:1-77:41]" 
      (TIMER_ON special_data_section "@t-nonrecursive-rule;special_data_section;binary/elf/elf_binaries.dl [77:1-77:41];special_data_section(\\\".tm_clone_table\\\").;"
(QUERY
        (INSERT ((STRING ".tm_clone_table")) special_data_section)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE special_encoding
(STMTS     (TIMER_ON special_encoding "@t-nonrecursive-relation;special_encoding;binary/elf/elf_binaries.dl [326:7-326:23];"
(STMTS      (DEBUG 
 "special_encoding(1,\"uleb128\").\nin file elf_binaries.dl [328:1-328:31]" 
      (TIMER_ON special_encoding "@t-nonrecursive-rule;special_encoding;binary/elf/elf_binaries.dl [328:1-328:31];special_encoding(1,\\\"uleb128\\\").;"
(QUERY
        (INSERT ((UNSIGNED 1) (STRING "uleb128")) special_encoding)
       )
      )
     )
      (DEBUG 
 "special_encoding(9,\"sleb128\").\nin file elf_binaries.dl [329:1-329:31]" 
      (TIMER_ON special_encoding "@t-nonrecursive-rule;special_encoding;binary/elf/elf_binaries.dl [329:1-329:31];special_encoding(9,\\\"sleb128\\\").;"
(QUERY
        (INSERT ((UNSIGNED 9) (STRING "sleb128")) special_encoding)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE split_block
(STMTS (STMTS     (TIMER_ON split_block "@t-nonrecursive-relation;split_block;code_inference_postprocess.dl [55:7-55:18];"
(STMTS      (DEBUG 
 "split_block(Block) :- \n   block(Block).\nin file code_inference_postprocess.dl [78:1-79:18]" 
      (TIMER_ON split_block "@t-nonrecursive-rule;split_block;code_inference_postprocess.dl [78:1-79:18];split_block(Block) :- \\n   block(Block).;"
(QUERY
        (IF (NOT (ISEMPTY block))
         (FOR_IN t0 block           (INSERT ((TUPLE t0 0)) split_block)
)
        )       )
      )
     )
      (DEBUG 
 "split_block(EA) :- \n   block_needs_splitting_at(EA).\nin file code_inference_postprocess.dl [80:1-81:34]" 
      (TIMER_ON split_block "@t-nonrecursive-rule;split_block;code_inference_postprocess.dl [80:1-81:34];split_block(EA) :- \\n   block_needs_splitting_at(EA).;"
(QUERY
        (IF (NOT (ISEMPTY block_needs_splitting_at))
         (FOR_IN t0 block_needs_splitting_at           (INSERT ((TUPLE t0 0)) split_block)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR block)
 ) )  )
  (SUBROUTINE stack_base_reg_move
(STMTS (STMTS     (TIMER_ON stack_base_reg_move "@t-nonrecursive-relation;stack_base_reg_move;use_def_analysis.dl [409:7-409:26];"
(STMTS      (DEBUG 
 "stack_base_reg_move(Block,EA,Src,Dst) :- \n   arch.frame_pointer(Src),\n   arch.frame_pointer(Dst),\n   Dst != Src,\n   arch.move_reg_reg(EA,Dst,Src),\n   code_in_block(EA,Block).\nin file use_def_analysis.dl [411:1-422:29]" 
      (TIMER_ON stack_base_reg_move "@t-nonrecursive-rule;stack_base_reg_move;use_def_analysis.dl [411:1-422:29];stack_base_reg_move(Block,EA,Src,Dst) :- \\n   arch.frame_pointer(Src),\\n   arch.frame_pointer(Dst),\\n   Dst != Src,\\n   arch.move_reg_reg(EA,Dst,Src),\\n   code_in_block(EA,Block).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY arch.frame_pointer)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY arch.move_reg_reg)))
         (FOR_IN t0 arch.frame_pointer           (FOR_IN t1 arch.frame_pointer            (IF (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 0))
            (FOR t2 arch.move_reg_reg (INDEX  (= (TUPLE t2 1) (TUPLE t1 0)) (= (TUPLE t2 2) (TUPLE t0 0)))
             (FOR t3 code_in_block (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
              (INSERT ((TUPLE t3 1) (TUPLE t2 0) (TUPLE t0 0) (TUPLE t1 0)) stack_base_reg_move)
))           ))
)
        )       )
      )
     )
      (DEBUG 
 "stack_base_reg_move(Block,EA,Src,Dst) :- \n   arch.frame_pointer(Src),\n   arch.stack_pointer(Dst),\n   Dst != Src,\n   arch.move_reg_reg(EA,Dst,Src),\n   code_in_block(EA,Block).\nin file use_def_analysis.dl [411:1-422:29]" 
      (TIMER_ON stack_base_reg_move "@t-nonrecursive-rule;stack_base_reg_move;use_def_analysis.dl [411:1-422:29];stack_base_reg_move(Block,EA,Src,Dst) :- \\n   arch.frame_pointer(Src),\\n   arch.stack_pointer(Dst),\\n   Dst != Src,\\n   arch.move_reg_reg(EA,Dst,Src),\\n   code_in_block(EA,Block).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY arch.frame_pointer)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY arch.move_reg_reg))) (NOT (ISEMPTY arch.stack_pointer)))
         (FOR_IN t0 arch.frame_pointer           (FOR_IN t1 arch.stack_pointer            (IF (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 0))
            (FOR t2 arch.move_reg_reg (INDEX  (= (TUPLE t2 1) (TUPLE t1 0)) (= (TUPLE t2 2) (TUPLE t0 0)))
             (FOR t3 code_in_block (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
              (INSERT ((TUPLE t3 1) (TUPLE t2 0) (TUPLE t0 0) (TUPLE t1 0)) stack_base_reg_move)
))           ))
)
        )       )
      )
     )
      (DEBUG 
 "stack_base_reg_move(Block,EA,Src,Dst) :- \n   arch.stack_pointer(Src),\n   arch.frame_pointer(Dst),\n   Dst != Src,\n   arch.move_reg_reg(EA,Dst,Src),\n   code_in_block(EA,Block).\nin file use_def_analysis.dl [411:1-422:29]" 
      (TIMER_ON stack_base_reg_move "@t-nonrecursive-rule;stack_base_reg_move;use_def_analysis.dl [411:1-422:29];stack_base_reg_move(Block,EA,Src,Dst) :- \\n   arch.stack_pointer(Src),\\n   arch.frame_pointer(Dst),\\n   Dst != Src,\\n   arch.move_reg_reg(EA,Dst,Src),\\n   code_in_block(EA,Block).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY arch.stack_pointer)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY arch.move_reg_reg))) (NOT (ISEMPTY arch.frame_pointer)))
         (FOR_IN t0 arch.stack_pointer           (FOR_IN t1 arch.frame_pointer            (IF (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 0))
            (FOR t2 arch.move_reg_reg (INDEX  (= (TUPLE t2 1) (TUPLE t1 0)) (= (TUPLE t2 2) (TUPLE t0 0)))
             (FOR t3 code_in_block (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
              (INSERT ((TUPLE t3 1) (TUPLE t2 0) (TUPLE t0 0) (TUPLE t1 0)) stack_base_reg_move)
))           ))
)
        )       )
      )
     )
      (DEBUG 
 "stack_base_reg_move(Block,EA,Src,Dst) :- \n   arch.stack_pointer(Src),\n   arch.stack_pointer(Dst),\n   Dst != Src,\n   arch.move_reg_reg(EA,Dst,Src),\n   code_in_block(EA,Block).\nin file use_def_analysis.dl [411:1-422:29]" 
      (TIMER_ON stack_base_reg_move "@t-nonrecursive-rule;stack_base_reg_move;use_def_analysis.dl [411:1-422:29];stack_base_reg_move(Block,EA,Src,Dst) :- \\n   arch.stack_pointer(Src),\\n   arch.stack_pointer(Dst),\\n   Dst != Src,\\n   arch.move_reg_reg(EA,Dst,Src),\\n   code_in_block(EA,Block).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY arch.stack_pointer)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY arch.move_reg_reg)))
         (FOR_IN t0 arch.stack_pointer           (FOR_IN t1 arch.stack_pointer            (IF (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 0))
            (FOR t2 arch.move_reg_reg (INDEX  (= (TUPLE t2 1) (TUPLE t1 0)) (= (TUPLE t2 2) (TUPLE t0 0)))
             (FOR t3 code_in_block (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
              (INSERT ((TUPLE t3 1) (TUPLE t2 0) (TUPLE t0 0) (TUPLE t1 0)) stack_base_reg_move)
))           ))
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.frame_pointer)
 ) )  )
  (SUBROUTINE stack_def_use.block_last_def
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON stack_def_use.block_last_def "@t-nonrecursive-relation;stack_def_use.block_last_def;use_def_analysis.dl [159:11-159:25];"
(STMTS      (DEBUG 
 "stack_def_use.block_last_def(EA_next,EA,Var) :- \n   stack_def_use.def(EA,Var),\n   code_in_block(EA,<inlined_Block_355>),\n   may_fallthrough(EA,EA_next),\n   code_in_block(EA_next,<inlined_Block_355>).\nin file use_def_analysis.dl [161:5-163:32]" 
      (TIMER_ON stack_def_use.block_last_def "@t-nonrecursive-rule;stack_def_use.block_last_def;use_def_analysis.dl [161:5-163:32];stack_def_use.block_last_def(EA_next,EA,Var) :- \\n   stack_def_use.def(EA,Var),\\n   code_in_block(EA,<inlined_Block_355>),\\n   may_fallthrough(EA,EA_next),\\n   code_in_block(EA_next,<inlined_Block_355>).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY stack_def_use.def)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY may_fallthrough)))
         (FOR_IN t0 stack_def_use.def           (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 may_fallthrough (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
            (IF (EXISTS code_in_block ((TUPLE t2 1) (TUPLE t1 1)))
             (INSERT ((TUPLE t2 1) (TUPLE t0 0) (TUPLE t0 1)) stack_def_use.block_last_def)
            ))))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 stack_def_use.block_last_def       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_stack_def_use.block_last_def)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_stack_def_use.block_last_def "@t-recursive-relation;stack_def_use.block_last_def;use_def_analysis.dl [159:11-159:25];"
(STMTS (STMTS (STMTS       (DEBUG 
 "stack_def_use.block_last_def(EA_next,EA_def,[<inlined_BaseReg_799>,<inlined_StackPos_799>]) :- \n   stack_def_use.block_last_def(EA,EA_def,[<inlined_BaseReg_799>,<inlined_StackPos_799>]),\n   !stack_def_use.def(EA,[<inlined_BaseReg_799>,<inlined_StackPos_799>]),\n   !reg_def_use.def(EA,<inlined_BaseReg_799>),\n   code_in_block(EA,<inlined_Block_1105>),\n   may_fallthrough(EA,EA_next),\n   code_in_block(EA_next,<inlined_Block_1105>).\nin file use_def_analysis.dl [165:5-169:32]" 
       (TIMER_ON @new_stack_def_use.block_last_def "@t-recursive-rule;stack_def_use.block_last_def;0;use_def_analysis.dl [165:5-169:32];stack_def_use.block_last_def(EA_next,EA_def,[<inlined_BaseReg_799>,<inlined_StackPos_799>]) :- \\n   stack_def_use.block_last_def(EA,EA_def,[<inlined_BaseReg_799>,<inlined_StackPos_799>]),\\n   !stack_def_use.def(EA,[<inlined_BaseReg_799>,<inlined_StackPos_799>]),\\n   !reg_def_use.def(EA,<inlined_BaseReg_799>),\\n   code_in_block(EA,<inlined_Block_1105>),\\n   may_fallthrough(EA,EA_next),\\n   code_in_block(EA_next,<inlined_Block_1105>).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_stack_def_use.block_last_def)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY may_fallthrough)))
          (FOR_IN t0 @delta_stack_def_use.block_last_def            (UNPACK t1 2 ((TUPLE t0 2))
            (IF (AND (NOT (EXISTS reg_def_use.def ((TUPLE t0 0) (TUPLE t1 0)))) (NOT (EXISTS stack_def_use.def ((TUPLE t0 0) (PACK (TUPLE t1 0) (TUPLE t1 1))))))
             (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
              (FOR t3 may_fallthrough (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)))
               (IF (AND (EXISTS code_in_block ((TUPLE t3 1) (TUPLE t2 1))) (NOT (EXISTS stack_def_use.block_last_def ((TUPLE t3 1) (TUPLE t0 1) (PACK (TUPLE t1 0) (TUPLE t1 1))))))
                (INSERT ((TUPLE t3 1) (TUPLE t0 1) (PACK (TUPLE t1 0) (TUPLE t1 1))) @new_stack_def_use.block_last_def)
               )))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "stack_def_use.block_last_def(EA_next,EA_def,[<inlined_BaseReg_800>,<inlined_StackPos_800>]) :- \n   stack_def_use.block_last_def(EA,EA_def,[<inlined_BaseReg_800>,<inlined_StackPos_800>]),\n   arch.conditional(EA,_),\n   !reg_def_use.def(EA,<inlined_BaseReg_800>),\n   code_in_block(EA,<inlined_Block_1106>),\n   may_fallthrough(EA,EA_next),\n   code_in_block(EA_next,<inlined_Block_1106>).\nin file use_def_analysis.dl [165:5-169:32]" 
       (TIMER_ON @new_stack_def_use.block_last_def "@t-recursive-rule;stack_def_use.block_last_def;0;use_def_analysis.dl [165:5-169:32];stack_def_use.block_last_def(EA_next,EA_def,[<inlined_BaseReg_800>,<inlined_StackPos_800>]) :- \\n   stack_def_use.block_last_def(EA,EA_def,[<inlined_BaseReg_800>,<inlined_StackPos_800>]),\\n   arch.conditional(EA,_),\\n   !reg_def_use.def(EA,<inlined_BaseReg_800>),\\n   code_in_block(EA,<inlined_Block_1106>),\\n   may_fallthrough(EA,EA_next),\\n   code_in_block(EA_next,<inlined_Block_1106>).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY arch.conditional))) (NOT (ISEMPTY @delta_stack_def_use.block_last_def))) (NOT (ISEMPTY may_fallthrough)))
          (FOR_IN t0 @delta_stack_def_use.block_last_def            (IF (EXISTS arch.conditional ((TUPLE t0 0) UNDEF))
            (UNPACK t1 2 ((TUPLE t0 2))
             (IF (NOT (EXISTS reg_def_use.def ((TUPLE t0 0) (TUPLE t1 0))))
              (FOR t2 code_in_block (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
               (FOR t3 may_fallthrough (INDEX  (= (TUPLE t3 0) (TUPLE t0 0)))
                (IF (AND (EXISTS code_in_block ((TUPLE t3 1) (TUPLE t2 1))) (NOT (EXISTS stack_def_use.block_last_def ((TUPLE t3 1) (TUPLE t0 1) (PACK (TUPLE t1 0) (TUPLE t1 1))))))
                 (INSERT ((TUPLE t3 1) (TUPLE t0 1) (PACK (TUPLE t1 0) (TUPLE t1 1))) @new_stack_def_use.block_last_def)
                )))             ))           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_stack_def_use.block_last_def "@t-recursive-relation;stack_def_use.block_last_def;use_def_analysis.dl [159:11-159:25];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_stack_def_use.block_last_def))
 ) (STMTS      (TIMER_ON @new_stack_def_use.block_last_def "@c-recursive-relation;stack_def_use.block_last_def;use_def_analysis.dl [159:11-159:25];"
(STMTS (QUERY
       (FOR_IN t0 @new_stack_def_use.block_last_def         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) stack_def_use.block_last_def)
)
      )
       (SWAP @delta_stack_def_use.block_last_def @new_stack_def_use.block_last_def)
       (CLEAR @new_stack_def_use.block_last_def)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_stack_def_use.block_last_def)
     (CLEAR @new_stack_def_use.block_last_def)
 ) )  )  )  )
  (SUBROUTINE stack_def_use.def
(STMTS     (TIMER_ON stack_def_use.def "@t-nonrecursive-relation;stack_def_use.def;basic_def_used.dl [45:11-45:14];"
(STMTS      (DEBUG 
 "stack_def_use.def(EA,[BaseReg,StackPos]) :- \n   arch.frame_pointer(BaseReg),\n   arch.memory_access(\"STORE\",EA,_,_,_,BaseReg,<inlined_IndexReg_358>,_,StackPos),\n   <inlined_IndexReg_358> = \"NONE\".\nin file use_def_analysis.dl [427:5-432:56]" 
      (TIMER_ON stack_def_use.def "@t-nonrecursive-rule;stack_def_use.def;use_def_analysis.dl [427:5-432:56];stack_def_use.def(EA,[BaseReg,StackPos]) :- \\n   arch.frame_pointer(BaseReg),\\n   arch.memory_access(\\\"STORE\\\",EA,_,_,_,BaseReg,<inlined_IndexReg_358>,_,StackPos),\\n   <inlined_IndexReg_358> = \\\"NONE\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.frame_pointer)) (NOT (ISEMPTY arch.memory_access)))
         (FOR_IN t0 arch.frame_pointer           (FOR t1 arch.memory_access (INDEX  (= (TUPLE t1 0) (STRING "STORE")) (= (TUPLE t1 5) (TUPLE t0 0)) (= (TUPLE t1 6) (STRING "NONE")))
           (INSERT ((TUPLE t1 1) (PACK (TUPLE t0 0) (TUPLE t1 8))) stack_def_use.def)
))
        )       )
      )
     )
      (DEBUG 
 "stack_def_use.def(EA,[BaseReg,StackPos]) :- \n   arch.stack_pointer(BaseReg),\n   arch.memory_access(\"STORE\",EA,_,_,_,BaseReg,<inlined_IndexReg_359>,_,StackPos),\n   <inlined_IndexReg_359> = \"NONE\".\nin file use_def_analysis.dl [427:5-432:56]" 
      (TIMER_ON stack_def_use.def "@t-nonrecursive-rule;stack_def_use.def;use_def_analysis.dl [427:5-432:56];stack_def_use.def(EA,[BaseReg,StackPos]) :- \\n   arch.stack_pointer(BaseReg),\\n   arch.memory_access(\\\"STORE\\\",EA,_,_,_,BaseReg,<inlined_IndexReg_359>,_,StackPos),\\n   <inlined_IndexReg_359> = \\\"NONE\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.stack_pointer)) (NOT (ISEMPTY arch.memory_access)))
         (FOR_IN t0 arch.stack_pointer           (FOR t1 arch.memory_access (INDEX  (= (TUPLE t1 0) (STRING "STORE")) (= (TUPLE t1 5) (TUPLE t0 0)) (= (TUPLE t1 6) (STRING "NONE")))
           (INSERT ((TUPLE t1 1) (PACK (TUPLE t0 0) (TUPLE t1 8))) stack_def_use.def)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE stack_def_use.defined_in_block
(STMTS     (TIMER_ON stack_def_use.defined_in_block "@t-nonrecursive-relation;stack_def_use.defined_in_block;use_def_analysis.dl [141:11-141:27];"
(STMTS      (DEBUG 
 "stack_def_use.defined_in_block(Block,Var) :- \n   stack_def_use.def(EA,Var),\n   code_in_block(EA,Block).\nin file use_def_analysis.dl [143:5-145:33]" 
      (TIMER_ON stack_def_use.defined_in_block "@t-nonrecursive-rule;stack_def_use.defined_in_block;use_def_analysis.dl [143:5-145:33];stack_def_use.defined_in_block(Block,Var) :- \\n   stack_def_use.def(EA,Var),\\n   code_in_block(EA,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY stack_def_use.def)) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 stack_def_use.def           (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 1) (TUPLE t0 1)) stack_def_use.defined_in_block)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE stack_def_use.last_def_in_block
(STMTS     (TIMER_ON stack_def_use.last_def_in_block "@t-nonrecursive-relation;stack_def_use.last_def_in_block;use_def_analysis.dl [176:11-176:28];"
(STMTS      (DEBUG 
 "stack_def_use.last_def_in_block(Block,BlockEnd,Var) :- \n   block_last_instruction(Block,BlockEnd),\n   stack_def_use.def(BlockEnd,Var).\nin file use_def_analysis.dl [178:5-187:11]" 
      (TIMER_ON stack_def_use.last_def_in_block "@t-nonrecursive-rule;stack_def_use.last_def_in_block;use_def_analysis.dl [178:5-187:11];stack_def_use.last_def_in_block(Block,BlockEnd,Var) :- \\n   block_last_instruction(Block,BlockEnd),\\n   stack_def_use.def(BlockEnd,Var).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY stack_def_use.def)))
         (FOR_IN t0 block_last_instruction           (FOR t1 stack_def_use.def (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1)) stack_def_use.last_def_in_block)
))
        )       )
      )
     )
      (DEBUG 
 "stack_def_use.last_def_in_block(Block,EA_def,[<inlined_BaseReg_801>,<inlined_StackPos_801>]) :- \n   block_last_instruction(Block,BlockEnd),\n   !stack_def_use.def(BlockEnd,[<inlined_BaseReg_801>,<inlined_StackPos_801>]),\n   !reg_def_use.def(BlockEnd,<inlined_BaseReg_801>),\n   stack_def_use.block_last_def(BlockEnd,EA_def,[<inlined_BaseReg_801>,<inlined_StackPos_801>]).\nin file use_def_analysis.dl [178:5-187:11]" 
      (TIMER_ON stack_def_use.last_def_in_block "@t-nonrecursive-rule;stack_def_use.last_def_in_block;use_def_analysis.dl [178:5-187:11];stack_def_use.last_def_in_block(Block,EA_def,[<inlined_BaseReg_801>,<inlined_StackPos_801>]) :- \\n   block_last_instruction(Block,BlockEnd),\\n   !stack_def_use.def(BlockEnd,[<inlined_BaseReg_801>,<inlined_StackPos_801>]),\\n   !reg_def_use.def(BlockEnd,<inlined_BaseReg_801>),\\n   stack_def_use.block_last_def(BlockEnd,EA_def,[<inlined_BaseReg_801>,<inlined_StackPos_801>]).;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_last_instruction)) (NOT (ISEMPTY stack_def_use.block_last_def)))
         (FOR_IN t0 block_last_instruction           (FOR t1 stack_def_use.block_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
           (UNPACK t2 2 ((TUPLE t1 2))
            (IF (AND (NOT (EXISTS reg_def_use.def ((TUPLE t0 1) (TUPLE t2 0)))) (NOT (EXISTS stack_def_use.def ((TUPLE t0 1) (PACK (TUPLE t2 0) (TUPLE t2 1))))))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (PACK (TUPLE t2 0) (TUPLE t2 1))) stack_def_use.last_def_in_block)
            ))))
        )       )
      )
     )
      (DEBUG 
 "stack_def_use.last_def_in_block(Block,EA_def,[<inlined_BaseReg_802>,<inlined_StackPos_802>]) :- \n   block_last_instruction(Block,BlockEnd),\n   arch.conditional(BlockEnd,_),\n   !reg_def_use.def(BlockEnd,<inlined_BaseReg_802>),\n   stack_def_use.block_last_def(BlockEnd,EA_def,[<inlined_BaseReg_802>,<inlined_StackPos_802>]).\nin file use_def_analysis.dl [178:5-187:11]" 
      (TIMER_ON stack_def_use.last_def_in_block "@t-nonrecursive-rule;stack_def_use.last_def_in_block;use_def_analysis.dl [178:5-187:11];stack_def_use.last_def_in_block(Block,EA_def,[<inlined_BaseReg_802>,<inlined_StackPos_802>]) :- \\n   block_last_instruction(Block,BlockEnd),\\n   arch.conditional(BlockEnd,_),\\n   !reg_def_use.def(BlockEnd,<inlined_BaseReg_802>),\\n   stack_def_use.block_last_def(BlockEnd,EA_def,[<inlined_BaseReg_802>,<inlined_StackPos_802>]).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY stack_def_use.block_last_def)) (NOT (ISEMPTY block_last_instruction))) (NOT (ISEMPTY arch.conditional)))
         (FOR_IN t0 block_last_instruction           (IF (EXISTS arch.conditional ((TUPLE t0 1) UNDEF))
           (FOR t1 stack_def_use.block_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (UNPACK t2 2 ((TUPLE t1 2))
             (IF (NOT (EXISTS reg_def_use.def ((TUPLE t0 1) (TUPLE t2 0))))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (PACK (TUPLE t2 0) (TUPLE t2 1))) stack_def_use.last_def_in_block)
             )))          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE stack_def_use.live_var_def
(STMTS (STMTS     (TIMER_ON stack_def_use.live_var_def "@t-nonrecursive-relation;stack_def_use.live_var_def;use_def_analysis.dl [204:11-204:23];"
(STMTS      (DEBUG 
 "stack_def_use.live_var_def(Block,Var,Var,EA_def) :- \n   stack_def_use.last_def_in_block(Block,EA_def,Var).\nin file use_def_analysis.dl [206:5-207:45]" 
      (TIMER_ON stack_def_use.live_var_def "@t-nonrecursive-rule;stack_def_use.live_var_def;use_def_analysis.dl [206:5-207:45];stack_def_use.live_var_def(Block,Var,Var,EA_def) :- \\n   stack_def_use.last_def_in_block(Block,EA_def,Var).;"
(QUERY
        (IF (NOT (ISEMPTY stack_def_use.last_def_in_block))
         (FOR_IN t0 stack_def_use.last_def_in_block           (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 2) (TUPLE t0 1)) stack_def_use.live_var_def)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR stack_def_use.last_def_in_block)
 ) )  )
  (SUBROUTINE stack_def_use.ref_in_block
(STMTS     (TIMER_ON stack_def_use.ref_in_block "@t-nonrecursive-relation;stack_def_use.ref_in_block;use_def_analysis.dl [192:11-192:23];"
(STMTS      (DEBUG 
 "stack_def_use.ref_in_block(Block,Var) :- \n   stack_def_use.defined_in_block(Block,Var).\nin file use_def_analysis.dl [194:5-196:38]" 
      (TIMER_ON stack_def_use.ref_in_block "@t-nonrecursive-rule;stack_def_use.ref_in_block;use_def_analysis.dl [194:5-196:38];stack_def_use.ref_in_block(Block,Var) :- \\n   stack_def_use.defined_in_block(Block,Var).;"
(QUERY
        (IF (NOT (ISEMPTY stack_def_use.defined_in_block))
         (FOR_IN t0 stack_def_use.defined_in_block           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) stack_def_use.ref_in_block)
)
        )       )
      )
     )
      (DEBUG 
 "stack_def_use.ref_in_block(Block,Var) :- \n   stack_def_use.used_in_block(Block,_,Var,_).\nin file use_def_analysis.dl [194:5-196:38]" 
      (TIMER_ON stack_def_use.ref_in_block "@t-nonrecursive-rule;stack_def_use.ref_in_block;use_def_analysis.dl [194:5-196:38];stack_def_use.ref_in_block(Block,Var) :- \\n   stack_def_use.used_in_block(Block,_,Var,_).;"
(QUERY
        (IF (NOT (ISEMPTY stack_def_use.used_in_block))
         (FOR_IN t0 stack_def_use.used_in_block           (INSERT ((TUPLE t0 0) (TUPLE t0 2)) stack_def_use.ref_in_block)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE stack_def_use.used
(STMTS     (TIMER_ON stack_def_use.used "@t-nonrecursive-relation;stack_def_use.used;basic_def_used.dl [50:11-50:15];"
(STMTS      (DEBUG 
 "stack_def_use.used(EA,[BaseReg,StackPos],OpIndex) :- \n   arch.frame_pointer(BaseReg),\n   op_indirect_mapped(IndirectOp,\"NONE\",BaseReg,\"NONE\",_,StackPos,_),\n   instruction_get_src_op(EA,OpIndex,IndirectOp).\nin file use_def_analysis.dl [447:5-453:55]" 
      (TIMER_ON stack_def_use.used "@t-nonrecursive-rule;stack_def_use.used;use_def_analysis.dl [447:5-453:55];stack_def_use.used(EA,[BaseReg,StackPos],OpIndex) :- \\n   arch.frame_pointer(BaseReg),\\n   op_indirect_mapped(IndirectOp,\\\"NONE\\\",BaseReg,\\\"NONE\\\",_,StackPos,_),\\n   instruction_get_src_op(EA,OpIndex,IndirectOp).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_get_src_op)) (NOT (ISEMPTY arch.frame_pointer))) (NOT (ISEMPTY op_indirect_mapped)))
         (FOR_IN t0 arch.frame_pointer           (FOR t1 op_indirect_mapped (INDEX  (= (TUPLE t1 1) (STRING "NONE")) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (STRING "NONE")))
           (FOR t2 instruction_get_src_op (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
            (INSERT ((TUPLE t2 0) (PACK (TUPLE t0 0) (TUPLE t1 5)) (TUPLE t2 1)) stack_def_use.used)
)))
        )       )
      )
     )
      (DEBUG 
 "stack_def_use.used(EA,[BaseReg,StackPos],OpIndex) :- \n   arch.stack_pointer(BaseReg),\n   op_indirect_mapped(IndirectOp,\"NONE\",BaseReg,\"NONE\",_,StackPos,_),\n   instruction_get_src_op(EA,OpIndex,IndirectOp).\nin file use_def_analysis.dl [447:5-453:55]" 
      (TIMER_ON stack_def_use.used "@t-nonrecursive-rule;stack_def_use.used;use_def_analysis.dl [447:5-453:55];stack_def_use.used(EA,[BaseReg,StackPos],OpIndex) :- \\n   arch.stack_pointer(BaseReg),\\n   op_indirect_mapped(IndirectOp,\\\"NONE\\\",BaseReg,\\\"NONE\\\",_,StackPos,_),\\n   instruction_get_src_op(EA,OpIndex,IndirectOp).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_get_src_op)) (NOT (ISEMPTY arch.stack_pointer))) (NOT (ISEMPTY op_indirect_mapped)))
         (FOR_IN t0 arch.stack_pointer           (FOR t1 op_indirect_mapped (INDEX  (= (TUPLE t1 1) (STRING "NONE")) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (STRING "NONE")))
           (FOR t2 instruction_get_src_op (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
            (INSERT ((TUPLE t2 0) (PACK (TUPLE t0 0) (TUPLE t1 5)) (TUPLE t2 1)) stack_def_use.used)
)))
        )       )
      )
     )
      (DEBUG 
 "stack_def_use.used(EA,[BaseReg,StackPos],SrcOp) :- \n   arch.frame_pointer(BaseReg),\n   arch.memory_access(\"LOAD\",EA,SrcOp,_,_,BaseReg,<inlined_IndexReg_364>,_,StackPos),\n   <inlined_IndexReg_364> = \"NONE\".\nin file use_def_analysis.dl [439:5-444:59]" 
      (TIMER_ON stack_def_use.used "@t-nonrecursive-rule;stack_def_use.used;use_def_analysis.dl [439:5-444:59];stack_def_use.used(EA,[BaseReg,StackPos],SrcOp) :- \\n   arch.frame_pointer(BaseReg),\\n   arch.memory_access(\\\"LOAD\\\",EA,SrcOp,_,_,BaseReg,<inlined_IndexReg_364>,_,StackPos),\\n   <inlined_IndexReg_364> = \\\"NONE\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.frame_pointer)) (NOT (ISEMPTY arch.memory_access)))
         (FOR_IN t0 arch.frame_pointer           (FOR t1 arch.memory_access (INDEX  (= (TUPLE t1 0) (STRING "LOAD")) (= (TUPLE t1 5) (TUPLE t0 0)) (= (TUPLE t1 6) (STRING "NONE")))
           (INSERT ((TUPLE t1 1) (PACK (TUPLE t0 0) (TUPLE t1 8)) (TUPLE t1 2)) stack_def_use.used)
))
        )       )
      )
     )
      (DEBUG 
 "stack_def_use.used(EA,[BaseReg,StackPos],SrcOp) :- \n   arch.stack_pointer(BaseReg),\n   arch.memory_access(\"LOAD\",EA,SrcOp,_,_,BaseReg,<inlined_IndexReg_365>,_,StackPos),\n   <inlined_IndexReg_365> = \"NONE\".\nin file use_def_analysis.dl [439:5-444:59]" 
      (TIMER_ON stack_def_use.used "@t-nonrecursive-rule;stack_def_use.used;use_def_analysis.dl [439:5-444:59];stack_def_use.used(EA,[BaseReg,StackPos],SrcOp) :- \\n   arch.stack_pointer(BaseReg),\\n   arch.memory_access(\\\"LOAD\\\",EA,SrcOp,_,_,BaseReg,<inlined_IndexReg_365>,_,StackPos),\\n   <inlined_IndexReg_365> = \\\"NONE\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY arch.stack_pointer)) (NOT (ISEMPTY arch.memory_access)))
         (FOR_IN t0 arch.stack_pointer           (FOR t1 arch.memory_access (INDEX  (= (TUPLE t1 0) (STRING "LOAD")) (= (TUPLE t1 5) (TUPLE t0 0)) (= (TUPLE t1 6) (STRING "NONE")))
           (INSERT ((TUPLE t1 1) (PACK (TUPLE t0 0) (TUPLE t1 8)) (TUPLE t1 2)) stack_def_use.used)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE stack_def_use.used_in_block
(STMTS     (TIMER_ON stack_def_use.used_in_block "@t-nonrecursive-relation;stack_def_use.used_in_block;use_def_analysis.dl [150:11-150:24];"
(STMTS      (DEBUG 
 "stack_def_use.used_in_block(Block,EA_used,Var,Index) :- \n   stack_def_use.used(EA_used,Var,Index),\n   code_in_block(EA_used,Block).\nin file use_def_analysis.dl [152:5-154:38]" 
      (TIMER_ON stack_def_use.used_in_block "@t-nonrecursive-rule;stack_def_use.used_in_block;use_def_analysis.dl [152:5-154:38];stack_def_use.used_in_block(Block,EA_used,Var,Index) :- \\n   stack_def_use.used(EA_used,Var,Index),\\n   code_in_block(EA_used,Block).;"
(QUERY
        (IF (AND (NOT (ISEMPTY stack_def_use.used)) (NOT (ISEMPTY code_in_block)))
         (FOR_IN t0 stack_def_use.used           (FOR t1 code_in_block (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INSERT ((TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) stack_def_use.used_in_block)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE start_function
(STMTS     (TIMER_ON start_function "@t-nonrecursive-relation;start_function;binary/elf/symbolization.dl [130:7-130:21];"
(STMTS      (DEBUG 
 "start_function(EA) :- \n   binary_format(\"ELF\"),\n   function_symbol(EA,\"_start\").\nin file symbolization.dl [132:1-134:34]" 
      (TIMER_ON start_function "@t-nonrecursive-rule;start_function;binary/elf/symbolization.dl [132:1-134:34];start_function(EA) :- \\n   binary_format(\\\"ELF\\\"),\\n   function_symbol(EA,\\\"_start\\\").;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY function_symbol))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 function_symbol (INDEX  (= (TUPLE t0 1) (STRING "_start")))
          (INSERT ((TUPLE t0 0)) start_function)
)        )       )
      )
     )
      (DEBUG 
 "start_function(Start_location) :- \n   binary_format(\"ELF\"),\n   !function_symbol(Start_location,\"_start\"),\n   entry_point(Start_location).\nin file symbolization.dl [136:1-139:33]" 
      (TIMER_ON start_function "@t-nonrecursive-rule;start_function;binary/elf/symbolization.dl [136:1-139:33];start_function(Start_location) :- \\n   binary_format(\\\"ELF\\\"),\\n   !function_symbol(Start_location,\\\"_start\\\"),\\n   entry_point(Start_location).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY entry_point))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 entry_point           (IF (NOT (EXISTS function_symbol ((TUPLE t0 0) (STRING "_start"))))
           (INSERT ((TUPLE t0 0)) start_function)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE step_limit
(STMTS     (TIMER_ON step_limit "@t-nonrecursive-relation;step_limit;value_analysis.dl [240:7-240:17];"
(STMTS      (DEBUG 
 "step_limit(12).\nin file value_analysis.dl [242:1-242:16]" 
      (TIMER_ON step_limit "@t-nonrecursive-rule;step_limit;value_analysis.dl [242:1-242:16];step_limit(12).;"
(QUERY
        (INSERT ((UNSIGNED 12)) step_limit)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE step_limit_small
(STMTS     (TIMER_ON step_limit_small "@t-nonrecursive-relation;step_limit_small;boundary_value_analysis.dl [271:7-271:23];"
(STMTS      (DEBUG 
 "step_limit_small(3).\nin file boundary_value_analysis.dl [273:1-273:21]" 
      (TIMER_ON step_limit_small "@t-nonrecursive-rule;step_limit_small;boundary_value_analysis.dl [273:1-273:21];step_limit_small(3).;"
(QUERY
        (INSERT ((UNSIGNED 3)) step_limit_small)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE straight_line_def_used
(STMTS (STMTS     (TIMER_ON straight_line_def_used "@t-nonrecursive-relation;straight_line_def_used;straight_line_def_used.dl [71:7-71:29];"
(STMTS      (DEBUG 
 "straight_line_def_used(EA_def,Reg,EA_used,Index) :- \n   basic_reg_def_use.used(EA_used,Reg,Index),\n   straight_line_last_def(EA_used,EA_def,Reg).\nin file straight_line_def_used.dl [73:1-75:48]" 
      (TIMER_ON straight_line_def_used "@t-nonrecursive-rule;straight_line_def_used;straight_line_def_used.dl [73:1-75:48];straight_line_def_used(EA_def,Reg,EA_used,Index) :- \\n   basic_reg_def_use.used(EA_used,Reg,Index),\\n   straight_line_last_def(EA_used,EA_def,Reg).;"
(QUERY
        (IF (AND (NOT (ISEMPTY basic_reg_def_use.used)) (NOT (ISEMPTY straight_line_last_def)))
         (FOR_IN t0 basic_reg_def_use.used           (FOR t1 straight_line_last_def (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 2) (TUPLE t0 1)))
           (INSERT ((TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 0) (TUPLE t0 2)) straight_line_def_used)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR basic_reg_def_use.used)
     (CLEAR straight_line_last_def)
 ) )  )
  (SUBROUTINE straight_line_last_def
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON straight_line_last_def "@t-nonrecursive-relation;straight_line_last_def;straight_line_def_used.dl [52:7-52:29];"
(STMTS      (DEBUG 
 "straight_line_last_def(EA_next,EA,Reg) :- \n   basic_reg_def_use.def(EA,Reg),\n   arch.pc_relative_addr(EA,_,_),\n   instruction(EA,_,_,_,_,_,_,_,_,_),\n   !invalid(EA,_),\n   must_fallthrough(EA,EA_next),\n   instruction(EA_next,_,_,_,_,_,_,_,_,_),\n   !invalid(EA_next,_).\nin file straight_line_def_used.dl [54:1-59:26]" 
      (TIMER_ON straight_line_last_def "@t-nonrecursive-rule;straight_line_last_def;straight_line_def_used.dl [54:1-59:26];straight_line_last_def(EA_next,EA,Reg) :- \\n   basic_reg_def_use.def(EA,Reg),\\n   arch.pc_relative_addr(EA,_,_),\\n   instruction(EA,_,_,_,_,_,_,_,_,_),\\n   !invalid(EA,_),\\n   must_fallthrough(EA,EA_next),\\n   instruction(EA_next,_,_,_,_,_,_,_,_,_),\\n   !invalid(EA_next,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY arch.pc_relative_addr))) (NOT (ISEMPTY basic_reg_def_use.def))) (NOT (ISEMPTY must_fallthrough)))
         (FOR_IN t0 basic_reg_def_use.def           (IF (AND (AND (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (EXISTS arch.pc_relative_addr ((TUPLE t0 0) UNDEF UNDEF))) (NOT (EXISTS invalid ((TUPLE t0 0) UNDEF))))
           (FOR t1 must_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (EXISTS instruction ((TUPLE t1 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (NOT (EXISTS invalid ((TUPLE t1 1) UNDEF))))
             (INSERT ((TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1)) straight_line_last_def)
            ))          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 straight_line_last_def       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_straight_line_last_def)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_straight_line_last_def "@t-recursive-relation;straight_line_last_def;straight_line_def_used.dl [52:7-52:29];"
(STMTS (STMTS (STMTS       (DEBUG 
 "straight_line_last_def(EA_next,EA_def,Reg) :- \n   straight_line_last_def(EA,EA_def,Reg),\n   !basic_reg_def_use.def(EA,Reg),\n   must_fallthrough(EA,EA_next),\n   instruction(EA_next,_,_,_,_,_,_,_,_,_),\n   !invalid(EA_next,_).\nin file straight_line_def_used.dl [61:1-65:26]" 
       (TIMER_ON @new_straight_line_last_def "@t-recursive-rule;straight_line_last_def;0;straight_line_def_used.dl [61:1-65:26];straight_line_last_def(EA_next,EA_def,Reg) :- \\n   straight_line_last_def(EA,EA_def,Reg),\\n   !basic_reg_def_use.def(EA,Reg),\\n   must_fallthrough(EA,EA_next),\\n   instruction(EA_next,_,_,_,_,_,_,_,_,_),\\n   !invalid(EA_next,_).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY @delta_straight_line_last_def))) (NOT (ISEMPTY must_fallthrough)))
          (FOR_IN t0 @delta_straight_line_last_def            (IF (NOT (EXISTS basic_reg_def_use.def ((TUPLE t0 0) (TUPLE t0 2))))
            (FOR t1 must_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (AND (AND (EXISTS instruction ((TUPLE t1 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (NOT (EXISTS invalid ((TUPLE t1 1) UNDEF)))) (NOT (EXISTS straight_line_last_def ((TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 2)))))
              (INSERT ((TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 2)) @new_straight_line_last_def)
             ))           ))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "straight_line_last_def(EA_next,EA_def,Reg) :- \n   straight_line_last_def(EA,EA_def,Reg),\n   arch.conditional(EA,_),\n   must_fallthrough(EA,EA_next),\n   instruction(EA_next,_,_,_,_,_,_,_,_,_),\n   !invalid(EA_next,_).\nin file straight_line_def_used.dl [61:1-65:26]" 
       (TIMER_ON @new_straight_line_last_def "@t-recursive-rule;straight_line_last_def;0;straight_line_def_used.dl [61:1-65:26];straight_line_last_def(EA_next,EA_def,Reg) :- \\n   straight_line_last_def(EA,EA_def,Reg),\\n   arch.conditional(EA,_),\\n   must_fallthrough(EA,EA_next),\\n   instruction(EA_next,_,_,_,_,_,_,_,_,_),\\n   !invalid(EA_next,_).;"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_straight_line_last_def)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY must_fallthrough))) (NOT (ISEMPTY arch.conditional)))
          (FOR_IN t0 @delta_straight_line_last_def            (IF (EXISTS arch.conditional ((TUPLE t0 0) UNDEF))
            (FOR t1 must_fallthrough (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
             (IF (AND (AND (EXISTS instruction ((TUPLE t1 1) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (NOT (EXISTS invalid ((TUPLE t1 1) UNDEF)))) (NOT (EXISTS straight_line_last_def ((TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 2)))))
              (INSERT ((TUPLE t1 1) (TUPLE t0 1) (TUPLE t0 2)) @new_straight_line_last_def)
             ))           ))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_straight_line_last_def "@t-recursive-relation;straight_line_last_def;straight_line_def_used.dl [52:7-52:29];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_straight_line_last_def))
 ) (STMTS      (TIMER_ON @new_straight_line_last_def "@c-recursive-relation;straight_line_last_def;straight_line_def_used.dl [52:7-52:29];"
(STMTS (QUERY
       (FOR_IN t0 @new_straight_line_last_def         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) straight_line_last_def)
)
      )
       (SWAP @delta_straight_line_last_def @new_straight_line_last_def)
       (CLEAR @new_straight_line_last_def)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_straight_line_last_def)
     (CLEAR @new_straight_line_last_def)
 ) )  ) (STMTS     (CLEAR basic_reg_def_use.def)
 ) )  )
  (SUBROUTINE string
(STMTS (STMTS (STMTS     (TIMER_ON string "@t-nonrecursive-relation;string;symbolization.dl [453:7-453:13];"
(STMTS      (DEBUG 
 "string(EA,End,Encoding) :- \n   data_object(EA,Size,\"string\"),\n   string_candidate_refined(EA,End,Encoding),\n   Size = (End-EA).\nin file symbolization.dl [500:1-503:19]" 
      (TIMER_ON string "@t-nonrecursive-rule;string;symbolization.dl [500:1-503:19];string(EA,End,Encoding) :- \\n   data_object(EA,Size,\\\"string\\\"),\\n   string_candidate_refined(EA,End,Encoding),\\n   Size = (End-EA).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object)) (NOT (ISEMPTY string_candidate_refined)))
         (FOR t0 data_object (INDEX  (= (TUPLE t0 2) (STRING "string")))
          (FOR t1 string_candidate_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (CONSTRAINT = (TUPLE t0 1)  (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t1 2)) string)
           )))        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON string "@t-relation-savetime;string;symbolization.dl [453:7-453:13];savetime;"
     (IO string ((= IO "file") (= attributeNames "EA\tEnd\tEncoding") (= auxArity "0") (= name "string") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"EA\", \"End\", \"Encoding\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:address\", \"u:address\", \"s:symbol\"]}}")))
    )
 ) ) (STMTS     (CLEAR string_candidate_refined)
 ) )  )
  (SUBROUTINE string_candidate
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON string_candidate "@t-nonrecursive-relation;string_candidate;symbolization.dl [456:7-456:23];"
(STMTS      (DEBUG 
 "string_candidate(EA,End,\"ascii\") :- \n   ascii_string(Beg,End),\n   labeled_data_candidate(EA),\n   EA >= Beg,\n   EA < End,\n   data_segment(DataBeg,DataEnd),\n   EA >= DataBeg,\n   End <= DataEnd.\nin file symbolization.dl [460:1-469:20]" 
      (TIMER_ON string_candidate "@t-nonrecursive-rule;string_candidate;symbolization.dl [460:1-469:20];string_candidate(EA,End,\\\"ascii\\\") :- \\n   ascii_string(Beg,End),\\n   labeled_data_candidate(EA),\\n   EA >= Beg,\\n   EA < End,\\n   data_segment(DataBeg,DataEnd),\\n   EA >= DataBeg,\\n   End <= DataEnd.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_segment)) (NOT (ISEMPTY ascii_string))) (NOT (ISEMPTY labeled_data_candidate)))
         (FOR_IN t0 ascii_string           (FOR_IN t1 labeled_data_candidate            (IF (AND (CONSTRAINT < (TUPLE t1 0)  (TUPLE t0 1)) (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t0 0)))
            (IF_EXISTS t2 data_segment (AND (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t2 0)) (CONSTRAINT <= (TUPLE t0 1)  (TUPLE t2 1))) 
             (INSERT ((TUPLE t1 0) (TUPLE t0 1) (STRING "ascii")) string_candidate)
)           ))
)
        )       )
      )
     )
      (DEBUG 
 "string_candidate(EA,End,\"ascii\") :- \n   ascii_string(Beg,End),\n   preferred_data_access(_,_,EA),\n   EA >= Beg,\n   EA < End,\n   data_segment(DataBeg,DataEnd),\n   EA >= DataBeg,\n   End <= DataEnd.\nin file symbolization.dl [460:1-469:20]" 
      (TIMER_ON string_candidate "@t-nonrecursive-rule;string_candidate;symbolization.dl [460:1-469:20];string_candidate(EA,End,\\\"ascii\\\") :- \\n   ascii_string(Beg,End),\\n   preferred_data_access(_,_,EA),\\n   EA >= Beg,\\n   EA < End,\\n   data_segment(DataBeg,DataEnd),\\n   EA >= DataBeg,\\n   End <= DataEnd.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_segment)) (NOT (ISEMPTY ascii_string))) (NOT (ISEMPTY preferred_data_access)))
         (FOR_IN t0 ascii_string           (FOR_IN t1 preferred_data_access            (IF (AND (CONSTRAINT < (TUPLE t1 2)  (TUPLE t0 1)) (CONSTRAINT >= (TUPLE t1 2)  (TUPLE t0 0)))
            (IF_EXISTS t2 data_segment (AND (CONSTRAINT >= (TUPLE t1 2)  (TUPLE t2 0)) (CONSTRAINT <= (TUPLE t0 1)  (TUPLE t2 1))) 
             (INSERT ((TUPLE t1 2) (TUPLE t0 1) (STRING "ascii")) string_candidate)
)           ))
)
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 string_candidate       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_string_candidate)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_string_candidate "@t-recursive-relation;string_candidate;symbolization.dl [456:7-456:23];"
(STMTS       (DEBUG 
 "string_candidate(EA,End,\"ascii\") :- \n   string_candidate(_,EA,\"ascii\"),\n   ascii_string(EA,End).\nin file symbolization.dl [471:1-473:26]" 
       (TIMER_ON @new_string_candidate "@t-recursive-rule;string_candidate;0;symbolization.dl [471:1-473:26];string_candidate(EA,End,\\\"ascii\\\") :- \\n   string_candidate(_,EA,\\\"ascii\\\"),\\n   ascii_string(EA,End).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_string_candidate)) (NOT (ISEMPTY ascii_string)))
          (FOR t0 @delta_string_candidate (INDEX  (= (TUPLE t0 2) (STRING "ascii")))
           (FOR t1 ascii_string (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (IF (NOT (EXISTS string_candidate ((TUPLE t0 1) (TUPLE t1 1) (STRING "ascii"))))
             (INSERT ((TUPLE t0 1) (TUPLE t1 1) (STRING "ascii")) @new_string_candidate)
            )))         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_string_candidate "@t-recursive-relation;string_candidate;symbolization.dl [456:7-456:23];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_string_candidate))
 ) (STMTS      (TIMER_ON @new_string_candidate "@c-recursive-relation;string_candidate;symbolization.dl [456:7-456:23];"
(STMTS (QUERY
       (FOR_IN t0 @new_string_candidate         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) string_candidate)
)
      )
       (SWAP @delta_string_candidate @new_string_candidate)
       (CLEAR @new_string_candidate)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_string_candidate)
     (CLEAR @new_string_candidate)
 ) )  ) (STMTS     (CLEAR ascii_string)
 ) )  )
  (SUBROUTINE string_candidate_refined
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON string_candidate_refined "@t-nonrecursive-relation;string_candidate_refined;symbolization.dl [458:7-458:31];"
(STMTS      (DEBUG 
 "string_candidate_refined(@generator_0,End,\"string\") :- \n   string_candidate(_,End,\"ascii\"),\n   @functor_data_valid((End-1),1) = 1,\n   0 = @functor_data_unsigned((End-1),1),\n   @generator_0 = max EA0 : { string_candidate(EA0,End,\"ascii\") }.\nin file symbolization.dl [490:1-493:56]" 
      (TIMER_ON string_candidate_refined "@t-nonrecursive-rule;string_candidate_refined;symbolization.dl [490:1-493:56];string_candidate_refined(@generator_0,End,\\\"string\\\") :- \\n   string_candidate(_,End,\\\"ascii\\\"),\\n   @functor_data_valid((End-1),1) = 1,\\n   0 = @functor_data_unsigned((End-1),1),\\n   @generator_0 = max EA0 : { string_candidate(EA0,End,\\\"ascii\\\") }.;"
(QUERY
        (IF (NOT (ISEMPTY string_candidate))
         (FOR t0 string_candidate (INDEX  (= (TUPLE t0 2) (STRING "ascii")))
          (IF (AND (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC - (TUPLE t0 1) (UNSIGNED 1)) (UNSIGNED 1)))  (UNSIGNED 1)) (CONSTRAINT = (UNSIGNED 0)  (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC - (TUPLE t0 1) (UNSIGNED 1)) (UNSIGNED 1)))))
           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MAX  (TUPLE t1 0) ))  t1 string_candidate (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (STRING "ascii"))) TRUE 
            (IF (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0))
             (INSERT ((TUPLE t1 0) (TUPLE t0 1) (STRING "string")) string_candidate_refined)
            ))          ))        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 string_candidate_refined       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_string_candidate_refined)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_string_candidate_refined "@t-recursive-relation;string_candidate_refined;symbolization.dl [458:7-458:31];"
(STMTS       (DEBUG 
 "string_candidate_refined(EA,@generator_0,\"ascii\") :- \n   string_candidate_refined(Tail,TailEnd,\"string\"),\n   string_candidate(EA,TailEnd,\"ascii\"),\n   EA < Tail,\n   @generator_0 = min Next : { string_candidate(Next,TailEnd,\"ascii\"),Next > EA }.\nin file symbolization.dl [495:1-498:76]" 
       (TIMER_ON @new_string_candidate_refined "@t-recursive-rule;string_candidate_refined;0;symbolization.dl [495:1-498:76];string_candidate_refined(EA,@generator_0,\\\"ascii\\\") :- \\n   string_candidate_refined(Tail,TailEnd,\\\"string\\\"),\\n   string_candidate(EA,TailEnd,\\\"ascii\\\"),\\n   EA < Tail,\\n   @generator_0 = min Next : { string_candidate(Next,TailEnd,\\\"ascii\\\"),Next > EA }.;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_string_candidate_refined)) (NOT (ISEMPTY string_candidate)))
          (FOR t0 @delta_string_candidate_refined (INDEX  (= (TUPLE t0 2) (STRING "string")))
           (FOR t1 string_candidate (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (STRING "ascii")))
            (IF (AND (CONSTRAINT <= (TUPLE t1 0)  (TUPLE t0 0)) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 0)))
             (INDEX_AGGREGATE (= (TUPLE t2 0) (AGGREGATE_FUNCTION MIN  (TUPLE t2 0) ))  t2 string_candidate (INDEX  (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (STRING "ascii"))) (AND (CONSTRAINT >= (TUPLE t2 0)  (TUPLE t1 0)) (CONSTRAINT != (TUPLE t2 0)  (TUPLE t1 0)))
              (IF (AND (CONSTRAINT = (TUPLE t2 0)  (TUPLE t2 0)) (NOT (EXISTS string_candidate_refined ((TUPLE t1 0) (TUPLE t2 0) (STRING "ascii")))))
               (INSERT ((TUPLE t1 0) (TUPLE t2 0) (STRING "ascii")) @new_string_candidate_refined)
              ))            )))         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_string_candidate_refined "@t-recursive-relation;string_candidate_refined;symbolization.dl [458:7-458:31];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_string_candidate_refined))
 ) (STMTS      (TIMER_ON @new_string_candidate_refined "@c-recursive-relation;string_candidate_refined;symbolization.dl [458:7-458:31];"
(STMTS (QUERY
       (FOR_IN t0 @new_string_candidate_refined         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) string_candidate_refined)
)
      )
       (SWAP @delta_string_candidate_refined @new_string_candidate_refined)
       (CLEAR @new_string_candidate_refined)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_string_candidate_refined)
     (CLEAR @new_string_candidate_refined)
 ) )  )  )  )
  (SUBROUTINE symbol
(STMTS (STMTS (STMTS     (TIMER_ON symbol "@t-relation-loadtime;symbol;/usr/local/src/ddisasm/src/datalog/main.dl [154:7-154:13];loadtime;"
     (IO symbol ((= IO "file") (= attributeNames "ea\tsize\ttype\tscope\tvisibility\tsectionIndex\toriginTable\ttableIndex\tname") (= auxArity "0") (= fact-dir "/workspace/facts/disassembly") (= name "symbol") (= operation "input") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 9, \"params\": [\"ea\", \"size\", \"type\", \"scope\", \"visibility\", \"sectionIndex\", \"originTable\", \"tableIndex\", \"name\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 9, \"types\": [\"u:address\", \"u:unsigned\", \"s:symbol\", \"s:symbol\", \"s:symbol\", \"u:unsigned\", \"s:symbol\", \"u:unsigned\", \"s:symbol\"]}}")))
    )
 ) (STMTS     (TIMER_ON symbol "@t-nonrecursive-relation;symbol;/usr/local/src/ddisasm/src/datalog/main.dl [154:7-154:13];"
(STMTS      (DEBUG 
 "symbol(0,0,\"NONE\",\"EXTERN\",\"DEFAULT\",0,\"none\",0,Function) :- \n   pe_import_entry(_,_,Function,_).\nin file pe_binaries.dl [113:1-114:37]" 
      (TIMER_ON symbol "@t-nonrecursive-rule;symbol;binary/pe/pe_binaries.dl [113:1-114:37];symbol(0,0,\\\"NONE\\\",\\\"EXTERN\\\",\\\"DEFAULT\\\",0,\\\"none\\\",0,Function) :- \\n   pe_import_entry(_,_,Function,_).;"
(QUERY
        (IF (NOT (ISEMPTY pe_import_entry))
         (FOR_IN t0 pe_import_entry           (INSERT ((UNSIGNED 0) (UNSIGNED 0) (STRING "NONE") (STRING "EXTERN") (STRING "DEFAULT") (UNSIGNED 0) (STRING "none") (UNSIGNED 0) (TUPLE t0 2)) symbol)
)
        )       )
      )
     )
      (DEBUG 
 "symbol(EA,0,\"NOTYPE\",\"GLOBAL\",\"DEFAULT\",0,\"export\",as(Ordinal, unsigned),Function) :- \n   pe_export_entry(EA,Ordinal,Function).\nin file pe_binaries.dl [116:1-117:42]" 
      (TIMER_ON symbol "@t-nonrecursive-rule;symbol;binary/pe/pe_binaries.dl [116:1-117:42];symbol(EA,0,\\\"NOTYPE\\\",\\\"GLOBAL\\\",\\\"DEFAULT\\\",0,\\\"export\\\",as(Ordinal, unsigned),Function) :- \\n   pe_export_entry(EA,Ordinal,Function).;"
(QUERY
        (IF (NOT (ISEMPTY pe_export_entry))
         (FOR_IN t0 pe_export_entry           (INSERT ((TUPLE t0 0) (UNSIGNED 0) (STRING "NOTYPE") (STRING "GLOBAL") (STRING "DEFAULT") (UNSIGNED 0) (STRING "export") (TUPLE t0 1) (TUPLE t0 2)) symbol)
)
        )       )
      )
     )
 )    )
 )   ) (STMTS     (CLEAR pe_export_entry)
 ) )  )
  (SUBROUTINE symbol_at_end
(STMTS (STMTS (STMTS     (TIMER_ON symbol_at_end "@t-nonrecursive-relation;symbol_at_end;symbols.dl [257:7-257:20];"
(STMTS      (DEBUG 
 "symbol_at_end(EA,SymbolName) :- \n   symbol(EA,_,_,_,_,SectionIndex,_,_,SymbolName),\n   section(_,Size,Beg,_,SectionIndex),\n   EA = (Beg+Size).\nin file symbols.dl [260:1-264:21]" 
      (TIMER_ON symbol_at_end "@t-nonrecursive-rule;symbol_at_end;symbols.dl [260:1-264:21];symbol_at_end(EA,SymbolName) :- \\n   symbol(EA,_,_,_,_,SectionIndex,_,_,SymbolName),\\n   section(_,Size,Beg,_,SectionIndex),\\n   EA = (Beg+Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY section)))
         (FOR_IN t0 symbol           (INDEXED_IF_EXISTS t1 section (INDEX  (= (TUPLE t1 4) (TUPLE t0 5))) (CONSTRAINT = (TUPLE t0 0)  (INTRINSIC + (TUPLE t1 2) (TUPLE t1 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 8)) symbol_at_end)
))
        )       )
      )
     )
      (DEBUG 
 "symbol_at_end(EA,SymbolName) :- \n   inferred_symbol(EA,SymbolName,_,_,_,\"End\").\nin file symbols.dl [266:1-267:48]" 
      (TIMER_ON symbol_at_end "@t-nonrecursive-rule;symbol_at_end;symbols.dl [266:1-267:48];symbol_at_end(EA,SymbolName) :- \\n   inferred_symbol(EA,SymbolName,_,_,_,\\\"End\\\").;"
(QUERY
        (IF (NOT (ISEMPTY inferred_symbol))
         (FOR t0 inferred_symbol (INDEX  (= (TUPLE t0 5) (STRING "End")))
          (INSERT ((TUPLE t0 0) (TUPLE t0 1)) symbol_at_end)
)        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON symbol_at_end "@t-relation-savetime;symbol_at_end;symbols.dl [257:7-257:20];savetime;"
     (IO symbol_at_end ((= IO "file") (= attributeNames "EA\tSymbolName") (= auxArity "0") (= name "symbol_at_end") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"EA\", \"SymbolName\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"s:symbol\"]}}")))
    )
 ) ) (STMTS     (CLEAR inferred_symbol)
     (CLEAR section)
     (CLEAR symbol)
 ) )  )
  (SUBROUTINE symbol_at_section_end
(STMTS     (TIMER_ON symbol_at_section_end "@t-nonrecursive-relation;symbol_at_section_end;symbols.dl [251:7-251:28];"
(STMTS      (DEBUG 
 "symbol_at_section_end(EA,SymbolName) :- \n   symbol(EA,_,_,_,_,SectionIndex,_,_,SymbolName),\n   section(_,Size,Beg,_,SectionIndex),\n   EA = (Beg+Size).\nin file symbols.dl [260:1-264:21]" 
      (TIMER_ON symbol_at_section_end "@t-nonrecursive-rule;symbol_at_section_end;symbols.dl [260:1-264:21];symbol_at_section_end(EA,SymbolName) :- \\n   symbol(EA,_,_,_,_,SectionIndex,_,_,SymbolName),\\n   section(_,Size,Beg,_,SectionIndex),\\n   EA = (Beg+Size).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY section)))
         (FOR_IN t0 symbol           (INDEXED_IF_EXISTS t1 section (INDEX  (= (TUPLE t1 4) (TUPLE t0 5))) (CONSTRAINT = (TUPLE t0 0)  (INTRINSIC + (TUPLE t1 2) (TUPLE t1 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 8)) symbol_at_section_end)
))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE symbol_before_section_beg
(STMTS (STMTS (STMTS     (TIMER_ON symbol_before_section_beg "@t-nonrecursive-relation;symbol_before_section_beg;symbols.dl [273:7-273:32];"
(STMTS      (DEBUG 
 "symbol_before_section_beg(EA,SymbolName,Beg) :- \n   symbol(EA,_,_,_,_,SectionIndex,_,_,SymbolName),\n   SectionIndex != 0,\n   section(_,_,Beg,_,SectionIndex),\n   EA < Beg.\nin file symbols.dl [276:1-280:14]" 
      (TIMER_ON symbol_before_section_beg "@t-nonrecursive-rule;symbol_before_section_beg;symbols.dl [276:1-280:14];symbol_before_section_beg(EA,SymbolName,Beg) :- \\n   symbol(EA,_,_,_,_,SectionIndex,_,_,SymbolName),\\n   SectionIndex != 0,\\n   section(_,_,Beg,_,SectionIndex),\\n   EA < Beg.;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY section)))
         (FOR_IN t0 symbol           (IF (CONSTRAINT != (TUPLE t0 5)  (UNSIGNED 0))
           (FOR t1 section (INDEX  (= (TUPLE t1 4) (TUPLE t0 5)))
            (IF (AND (CONSTRAINT <= (TUPLE t0 0)  (TUPLE t1 2)) (CONSTRAINT != (TUPLE t0 0)  (TUPLE t1 2)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 8) (TUPLE t1 2)) symbol_before_section_beg)
            ))          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON symbol_before_section_beg "@t-relation-savetime;symbol_before_section_beg;symbols.dl [273:7-273:32];savetime;"
     (IO symbol_before_section_beg ((= IO "file") (= attributeNames "EA\tSymbolName\tNewEA") (= auxArity "0") (= name "symbol_before_section_beg") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 3, \"params\": [\"EA\", \"SymbolName\", \"NewEA\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 3, \"types\": [\"u:address\", \"s:symbol\", \"u:address\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE symbol_minus_symbol
(STMTS (STMTS     (TIMER_ON symbol_minus_symbol "@t-nonrecursive-relation;symbol_minus_symbol;symbolization.dl [93:7-93:26];"
(STMTS      (DEBUG 
 "symbol_minus_symbol(Addr,4,(Addr+4),((Addr+Length)+4),1,0) :- \n   option(\"no-cfi-directives\"),\n   cie_entry(Addr,Length,_,_).\nin file exceptions.dl [252:1-254:32]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [252:1-254:32];symbol_minus_symbol(Addr,4,(Addr+4),((Addr+Length)+4),1,0) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   cie_entry(Addr,Length,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY option)) (NOT (ISEMPTY cie_entry))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 cie_entry           (INSERT ((TUPLE t0 0) (UNSIGNED 4) (INTRINSIC + (TUPLE t0 0) (UNSIGNED 4)) (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (UNSIGNED 4)) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
)
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol(Addr,4,(Addr+4),((Addr+Length)+4),1,0) :- \n   option(\"no-cfi-directives\"),\n   fde_entry(Addr,Length,_,_,_,_),\n   !last_fde(Addr).\nin file exceptions.dl [273:1-276:21]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [273:1-276:21];symbol_minus_symbol(Addr,4,(Addr+4),((Addr+Length)+4),1,0) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_entry(Addr,Length,_,_,_,_),\\n   !last_fde(Addr).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY option)) (NOT (ISEMPTY fde_entry))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 fde_entry           (IF (NOT (EXISTS last_fde ((TUPLE t0 0))))
           (INSERT ((TUPLE t0 0) (UNSIGNED 4) (INTRINSIC + (TUPLE t0 0) (UNSIGNED 4)) (INTRINSIC + (INTRINSIC + (TUPLE t0 0) (TUPLE t0 1)) (UNSIGNED 4)) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol(Addr,4,(Addr+4),EndSection,1,0) :- \n   option(\"no-cfi-directives\"),\n   fde_entry(Addr,_,_,_,_,_),\n   last_fde(Addr),\n   loaded_section(_,EndSection,\".eh_frame\").\nin file exceptions.dl [278:1-282:46]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [278:1-282:46];symbol_minus_symbol(Addr,4,(Addr+4),EndSection,1,0) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_entry(Addr,_,_,_,_,_),\\n   last_fde(Addr),\\n   loaded_section(_,EndSection,\\\".eh_frame\\\").;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY option))) (NOT (ISEMPTY last_fde))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 fde_entry           (IF (EXISTS last_fde ((TUPLE t0 0)))
           (FOR t1 loaded_section (INDEX  (= (TUPLE t1 2) (STRING ".eh_frame")))
            (INSERT ((TUPLE t0 0) (UNSIGNED 4) (INTRINSIC + (TUPLE t0 0) (UNSIGNED 4)) (TUPLE t1 1) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
)          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol((Addr+4),4,Cie,(Addr+4),1,0) :- \n   option(\"no-cfi-directives\"),\n   fde_entry(Addr,_,Cie,_,_,_).\nin file exceptions.dl [285:1-287:35]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [285:1-287:35];symbol_minus_symbol((Addr+4),4,Cie,(Addr+4),1,0) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_entry(Addr,_,Cie,_,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY option)) (NOT (ISEMPTY fde_entry))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 fde_entry           (INSERT ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 4)) (UNSIGNED 4) (TUPLE t0 2) (INTRINSIC + (TUPLE t0 0) (UNSIGNED 4)) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
)
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol(StartLocation,(EndLocation-StartLocation),StartLocation,StartFunction,1,0) :- \n   option(\"no-cfi-directives\"),\n   fde_entry(Addr,_,Cie,StartFunction,_,_),\n   cie_encoding(Cie,FdeEncoding,_),\n   (FdeEncoding&0x10) > 0,\n   fde_pointer_locations(Addr,StartLocation,EndLocation,_,_,_),\n   (EndLocation-StartLocation) > 0.\nin file exceptions.dl [308:1-315:35]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [308:1-315:35];symbol_minus_symbol(StartLocation,(EndLocation-StartLocation),StartLocation,StartFunction,1,0) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_entry(Addr,_,Cie,StartFunction,_,_),\\n   cie_encoding(Cie,FdeEncoding,_),\\n   (FdeEncoding&0x10) > 0,\\n   fde_pointer_locations(Addr,StartLocation,EndLocation,_,_,_),\\n   (EndLocation-StartLocation) > 0.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY fde_pointer_locations)) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY option))) (NOT (ISEMPTY cie_encoding))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 fde_entry           (INDEXED_IF_EXISTS t1 cie_encoding (INDEX  (= (TUPLE t1 0) (TUPLE t0 2))) (CONSTRAINT > (INTRINSIC band (TUPLE t1 1) (UNSIGNED 16))  (UNSIGNED 0))
           (FOR t2 fde_pointer_locations (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
            (IF (CONSTRAINT > (INTRINSIC - (TUPLE t2 2) (TUPLE t2 1))  (UNSIGNED 0))
             (INSERT ((TUPLE t2 1) (INTRINSIC - (TUPLE t2 2) (TUPLE t2 1)) (TUPLE t2 1) (TUPLE t0 3) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
            ))))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol(EndLocation,EndSize,StartFunction,EndFunction,1,0) :- \n   option(\"no-cfi-directives\"),\n   fde_entry(Addr,_,_,StartFunction,EndFunction,_),\n   fde_pointer_locations(Addr,_,EndLocation,EndSize,_,_),\n   EndSize > 0.\nin file exceptions.dl [319:1-323:17]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [319:1-323:17];symbol_minus_symbol(EndLocation,EndSize,StartFunction,EndFunction,1,0) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_entry(Addr,_,_,StartFunction,EndFunction,_),\\n   fde_pointer_locations(Addr,_,EndLocation,EndSize,_,_),\\n   EndSize > 0.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY fde_entry)) (NOT (ISEMPTY fde_pointer_locations))) (NOT (ISEMPTY option))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 fde_entry           (FOR t1 fde_pointer_locations (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (CONSTRAINT >= (TUPLE t1 3)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t1 3)  (UNSIGNED 0)))
            (INSERT ((TUPLE t1 2) (TUPLE t1 3) (TUPLE t0 3) (TUPLE t0 4) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
           )))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol(LsdaLocation,LsdaSize,LsdaLocation,LsdaAddress,1,0) :- \n   option(\"no-cfi-directives\"),\n   fde_entry(Addr,_,Cie,_,_,LsdaAddress),\n   fde_pointer_locations(Addr,_,_,_,LsdaLocation,LsdaSize),\n   LsdaSize > 0,\n   cie_encoding(Cie,_,LsdaEncoding),\n   (LsdaEncoding&0x10) > 0.\nin file exceptions.dl [343:1-350:32]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [343:1-350:32];symbol_minus_symbol(LsdaLocation,LsdaSize,LsdaLocation,LsdaAddress,1,0) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_entry(Addr,_,Cie,_,_,LsdaAddress),\\n   fde_pointer_locations(Addr,_,_,_,LsdaLocation,LsdaSize),\\n   LsdaSize > 0,\\n   cie_encoding(Cie,_,LsdaEncoding),\\n   (LsdaEncoding&0x10) > 0.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY cie_encoding)) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY option))) (NOT (ISEMPTY fde_pointer_locations))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 fde_entry           (FOR t1 fde_pointer_locations (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (CONSTRAINT >= (TUPLE t1 5)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t1 5)  (UNSIGNED 0)))
            (INDEXED_IF_EXISTS t2 cie_encoding (INDEX  (= (TUPLE t2 0) (TUPLE t0 2))) (CONSTRAINT > (INTRINSIC band (TUPLE t2 2) (UNSIGNED 16))  (UNSIGNED 0))
             (INSERT ((TUPLE t1 4) (TUPLE t1 5) (TUPLE t1 4) (TUPLE t0 5) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
)           )))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol((EA+Disp_offset),(Size/8),ImageBase,(ImageBase+Value),1,0) :- \n   base_relative_operand(EA,Op_index,Value),\n   !pc_relative_operand(EA,Op_index,_),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   instruction_get_op(EA,Op_index,Op),\n   op_indirect(Op,_,_,_,_,_,Size),\n   base_address(ImageBase).\nin file symbolization.dl [140:1-147:29]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;binary/pe/symbolization.dl [140:1-147:29];symbol_minus_symbol((EA+Disp_offset),(Size/8),ImageBase,(ImageBase+Value),1,0) :- \\n   base_relative_operand(EA,Op_index,Value),\\n   !pc_relative_operand(EA,Op_index,_),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   op_indirect(Op,_,_,_,_,_,Size),\\n   base_address(ImageBase).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY base_relative_operand))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY op_indirect))) (NOT (ISEMPTY instruction_displacement_offset)))
         (FOR_IN t0 base_relative_operand           (IF (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t0 1) UNDEF)))
           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
             (FOR t3 op_indirect (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)))
              (FOR_IN t4 base_address                (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (INTRINSIC / (TUPLE t3 6) (UNSIGNED 8)) (TUPLE t4 0) (INTRINSIC + (TUPLE t4 0) (TUPLE t0 2)) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset) :- \n   data_object(EA,Size,\"symbol-symbol\"),\n   symbol_minus_symbol_candidate(EA,Size,Symbol1,Symbol2,Scale,Offset).\nin file symbolization.dl [845:1-847:73]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;symbolization.dl [845:1-847:73];symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset) :- \\n   data_object(EA,Size,\\\"symbol-symbol\\\"),\\n   symbol_minus_symbol_candidate(EA,Size,Symbol1,Symbol2,Scale,Offset).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object)) (NOT (ISEMPTY symbol_minus_symbol_candidate)))
         (FOR t0 data_object (INDEX  (= (TUPLE t0 2) (STRING "symbol-symbol")))
          (FOR t1 symbol_minus_symbol_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) (TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5)) symbol_minus_symbol)
))        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol(TypeTablePointerLocation,((CallsiteTablePointerLoc-1)-TypeTablePointerLocation),(CallsiteTablePointerLoc-1),LsdaTypeTableAddress,1,0) :- \n   lsda_pointer_locations(Lsda,TypeTablePointerLocation,CallsiteTablePointerLoc),\n   lsda(Lsda,_,_,_,LsdaTypeTableAddress,_,_),\n   LsdaTypeTableAddress != 0,\n   ((CallsiteTablePointerLoc-1)-TypeTablePointerLocation) > 0.\nin file exceptions.dl [176:1-182:14]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [176:1-182:14];symbol_minus_symbol(TypeTablePointerLocation,((CallsiteTablePointerLoc-1)-TypeTablePointerLocation),(CallsiteTablePointerLoc-1),LsdaTypeTableAddress,1,0) :- \\n   lsda_pointer_locations(Lsda,TypeTablePointerLocation,CallsiteTablePointerLoc),\\n   lsda(Lsda,_,_,_,LsdaTypeTableAddress,_,_),\\n   LsdaTypeTableAddress != 0,\\n   ((CallsiteTablePointerLoc-1)-TypeTablePointerLocation) > 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY lsda_pointer_locations)) (NOT (ISEMPTY lsda)))
         (FOR_IN t0 lsda_pointer_locations           (IF (CONSTRAINT > (INTRINSIC - (INTRINSIC - (TUPLE t0 2) (UNSIGNED 1)) (TUPLE t0 1))  (UNSIGNED 0))
           (FOR t1 lsda (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (CONSTRAINT != (TUPLE t1 4)  (UNSIGNED 0))
             (INSERT ((TUPLE t0 1) (INTRINSIC - (INTRINSIC - (TUPLE t0 2) (UNSIGNED 1)) (TUPLE t0 1)) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 1)) (TUPLE t1 4) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol(CallsiteTablePointerLoc,(CallSiteTable_address-CallsiteTablePointerLoc),CallSiteTable_address,(CallSiteTable_address+CallSiteTableLength),1,0) :- \n   lsda_pointer_locations(Lsda,_,CallsiteTablePointerLoc),\n   lsda(Lsda,CallSiteTable_address,_,CallSiteTableLength,_,_,_),\n   (CallSiteTable_address-CallsiteTablePointerLoc) > 0.\nin file exceptions.dl [185:1-190:14]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [185:1-190:14];symbol_minus_symbol(CallsiteTablePointerLoc,(CallSiteTable_address-CallsiteTablePointerLoc),CallSiteTable_address,(CallSiteTable_address+CallSiteTableLength),1,0) :- \\n   lsda_pointer_locations(Lsda,_,CallsiteTablePointerLoc),\\n   lsda(Lsda,CallSiteTable_address,_,CallSiteTableLength,_,_,_),\\n   (CallSiteTable_address-CallsiteTablePointerLoc) > 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY lsda_pointer_locations)) (NOT (ISEMPTY lsda)))
         (FOR_IN t0 lsda_pointer_locations           (FOR t1 lsda (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (CONSTRAINT > (INTRINSIC - (TUPLE t1 1) (TUPLE t0 2))  (UNSIGNED 0))
            (INSERT ((TUPLE t0 2) (INTRINSIC - (TUPLE t1 1) (TUPLE t0 2)) (TUPLE t1 1) (INTRINSIC + (TUPLE t1 1) (TUPLE t1 3)) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
           )))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol(EA_start,(EA_end-EA_start),LandingPadBaseAddress,StartRegion,1,0) :- \n   lsda_callsite(CallSiteTable_address,EA_start,StartRegion,EA_end,_,_,_,_),\n   lsda(_,CallSiteTable_address,_,_,_,_,LandingPadBaseAddress),\n   (EA_end-EA_start) > 0.\nin file exceptions.dl [205:1-209:14]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [205:1-209:14];symbol_minus_symbol(EA_start,(EA_end-EA_start),LandingPadBaseAddress,StartRegion,1,0) :- \\n   lsda_callsite(CallSiteTable_address,EA_start,StartRegion,EA_end,_,_,_,_),\\n   lsda(_,CallSiteTable_address,_,_,_,_,LandingPadBaseAddress),\\n   (EA_end-EA_start) > 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY lsda_callsite)) (NOT (ISEMPTY lsda)))
         (FOR_IN t0 lsda_callsite           (IF (CONSTRAINT > (INTRINSIC - (TUPLE t0 3) (TUPLE t0 1))  (UNSIGNED 0))
           (FOR t1 lsda (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (INSERT ((TUPLE t0 1) (INTRINSIC - (TUPLE t0 3) (TUPLE t0 1)) (TUPLE t1 6) (TUPLE t0 2) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
)          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol(EA_end,(EA_landingPad-EA_end),StartRegion,EndRegion,1,0) :- \n   lsda_callsite(_,_,StartRegion,EA_end,EndRegion,EA_landingPad,_,_),\n   (EA_landingPad-EA_end) > 0,\n   block_boundaries(_,_,EndRegion).\nin file exceptions.dl [212:1-218:37]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [212:1-218:37];symbol_minus_symbol(EA_end,(EA_landingPad-EA_end),StartRegion,EndRegion,1,0) :- \\n   lsda_callsite(_,_,StartRegion,EA_end,EndRegion,EA_landingPad,_,_),\\n   (EA_landingPad-EA_end) > 0,\\n   block_boundaries(_,_,EndRegion).;"
(QUERY
        (IF (AND (NOT (ISEMPTY lsda_callsite)) (NOT (ISEMPTY block_boundaries)))
         (FOR_IN t0 lsda_callsite           (IF (AND (CONSTRAINT > (INTRINSIC - (TUPLE t0 5) (TUPLE t0 3))  (UNSIGNED 0)) (EXISTS block_boundaries (UNDEF UNDEF (TUPLE t0 4))))
           (INSERT ((TUPLE t0 3) (INTRINSIC - (TUPLE t0 5) (TUPLE t0 3)) (TUPLE t0 2) (TUPLE t0 4) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol(EA_landingPad,(EA_endLandingPad-EA_landingPad),LandingPadBaseAddress,LandingPad,1,0) :- \n   lsda_callsite(CallSiteTable_address,_,_,_,_,EA_landingPad,LandingPad,EA_endLandingPad),\n   lsda(_,CallSiteTable_address,_,_,_,_,LandingPadBaseAddress),\n   LandingPad != 0,\n   (EA_endLandingPad-EA_landingPad) > 0.\nin file exceptions.dl [221:1-226:14]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [221:1-226:14];symbol_minus_symbol(EA_landingPad,(EA_endLandingPad-EA_landingPad),LandingPadBaseAddress,LandingPad,1,0) :- \\n   lsda_callsite(CallSiteTable_address,_,_,_,_,EA_landingPad,LandingPad,EA_endLandingPad),\\n   lsda(_,CallSiteTable_address,_,_,_,_,LandingPadBaseAddress),\\n   LandingPad != 0,\\n   (EA_endLandingPad-EA_landingPad) > 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY lsda_callsite)) (NOT (ISEMPTY lsda)))
         (FOR_IN t0 lsda_callsite           (IF (AND (CONSTRAINT > (INTRINSIC - (TUPLE t0 7) (TUPLE t0 5))  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 6)  (UNSIGNED 0)))
           (FOR t1 lsda (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (INSERT ((TUPLE t0 5) (INTRINSIC - (TUPLE t0 7) (TUPLE t0 5)) (TUPLE t1 6) (TUPLE t0 6) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
)          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol((LsdaTypeTableAddress-(EncodingSize*(Index+1))),EncodingSize,(LsdaTypeTableAddress-(EncodingSize*(Index+1))),Type,1,0) :- \n   lsda_type_entry(LsdaTypeTableAddress,Index,Type),\n   lsda(_,_,_,_,LsdaTypeTableAddress,TypeTableEncoding,_),\n   (TypeTableEncoding&0xF) = Encoding,\n   (TypeTableEncoding&0x10) > 0,\n   dwarf_encoding_size(Encoding,EncodingSize),\n   Type != 0.\nin file exceptions.dl [239:1-246:15]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [239:1-246:15];symbol_minus_symbol((LsdaTypeTableAddress-(EncodingSize*(Index+1))),EncodingSize,(LsdaTypeTableAddress-(EncodingSize*(Index+1))),Type,1,0) :- \\n   lsda_type_entry(LsdaTypeTableAddress,Index,Type),\\n   lsda(_,_,_,_,LsdaTypeTableAddress,TypeTableEncoding,_),\\n   (TypeTableEncoding&0xF) = Encoding,\\n   (TypeTableEncoding&0x10) > 0,\\n   dwarf_encoding_size(Encoding,EncodingSize),\\n   Type != 0.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY dwarf_encoding_size)) (NOT (ISEMPTY lsda_type_entry))) (NOT (ISEMPTY lsda)))
         (FOR_IN t0 lsda_type_entry           (IF (CONSTRAINT != (TUPLE t0 2)  (UNSIGNED 0))
           (FOR t1 lsda (INDEX  (= (TUPLE t1 4) (TUPLE t0 0)))
            (IF (CONSTRAINT > (INTRINSIC band (TUPLE t1 5) (UNSIGNED 16))  (UNSIGNED 0))
             (FOR t2 dwarf_encoding_size (INDEX  (= (TUPLE t2 0) (INTRINSIC band (TUPLE t1 5) (UNSIGNED 15))))
              (INSERT ((INTRINSIC - (TUPLE t0 0) (INTRINSIC * (TUPLE t2 1) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)))) (TUPLE t2 1) (INTRINSIC - (TUPLE t0 0) (INTRINSIC * (TUPLE t2 1) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)))) (TUPLE t0 2) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol((InstructionAddr+1),(Size-1),(Addr+(as(Advance, unsigned)*CodeAlignmentFactor)),Addr,CodeAlignmentFactor,0) :- \n   option(\"no-cfi-directives\"),\n   fde_instruction(FdeAddr,Index,Size,InstructionAddr,\"advance_loc\",Advance,_),\n   Size > 1,\n   fde_instruction_ref(FdeAddr,Index,_,Addr),\n   fde_entry(FdeAddr,_,Cie,_,_,_),\n   cie_entry(Cie,_,CodeAlignmentFactor,_).\nin file exceptions.dl [354:1-361:44]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;exceptions.dl [354:1-361:44];symbol_minus_symbol((InstructionAddr+1),(Size-1),(Addr+(as(Advance, unsigned)*CodeAlignmentFactor)),Addr,CodeAlignmentFactor,0) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_instruction(FdeAddr,Index,Size,InstructionAddr,\\\"advance_loc\\\",Advance,_),\\n   Size > 1,\\n   fde_instruction_ref(FdeAddr,Index,_,Addr),\\n   fde_entry(FdeAddr,_,Cie,_,_,_),\\n   cie_entry(Cie,_,CodeAlignmentFactor,_).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY fde_instruction)) (NOT (ISEMPTY cie_entry))) (NOT (ISEMPTY fde_instruction_ref))) (NOT (ISEMPTY option))) (NOT (ISEMPTY fde_entry))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR t0 fde_instruction (INDEX  (= (TUPLE t0 4) (STRING "advance_loc")))
          (IF (AND (CONSTRAINT >= (TUPLE t0 2)  (UNSIGNED 1)) (CONSTRAINT != (TUPLE t0 2)  (UNSIGNED 1)))
           (FOR t1 fde_instruction_ref (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (FOR t2 fde_entry (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (FOR t3 cie_entry (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)))
              (INSERT ((INTRINSIC + (TUPLE t0 3) (UNSIGNED 1)) (INTRINSIC - (TUPLE t0 2) (UNSIGNED 1)) (INTRINSIC + (TUPLE t1 3) (INTRINSIC * (TUPLE t0 5) (TUPLE t3 2))) (TUPLE t1 3) (TUPLE t3 2) (NUMBER 0)) symbol_minus_symbol)
)))          ))        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol((EA+8),8,Start,(Start+Offset),1,0) :- \n   tls_segment(Start,_,_),\n   tls_index(EA,Offset).\nin file tls.dl [648:1-651:26]" 
      (TIMER_ON symbol_minus_symbol "@t-nonrecursive-rule;symbol_minus_symbol;tls.dl [648:1-651:26];symbol_minus_symbol((EA+8),8,Start,(Start+Offset),1,0) :- \\n   tls_segment(Start,_,_),\\n   tls_index(EA,Offset).;"
(QUERY
        (IF (AND (NOT (ISEMPTY tls_segment)) (NOT (ISEMPTY tls_index)))
         (FOR_IN t0 tls_segment           (FOR_IN t1 tls_index            (INSERT ((INTRINSIC + (TUPLE t1 0) (UNSIGNED 8)) (UNSIGNED 8) (TUPLE t0 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1)) (UNSIGNED 1) (NUMBER 0)) symbol_minus_symbol)
)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR base_relative_operand)
     (CLEAR block_boundaries)
     (CLEAR data_object)
     (CLEAR dwarf_encoding_size)
     (CLEAR last_fde)
     (CLEAR lsda_type_entry)
     (CLEAR symbol_minus_symbol_candidate)
 ) )  )
  (SUBROUTINE symbol_minus_symbol_candidate
(STMTS     (TIMER_ON symbol_minus_symbol_candidate "@t-nonrecursive-relation;symbol_minus_symbol_candidate;symbolization.dl [379:7-379:36];"
(STMTS      (DEBUG 
 "symbol_minus_symbol_candidate(EA,Size,Reference,Dest,as(Scale, unsigned),Offset) :- \n   relative_jump_table_entry(EA,_,Size,Reference,Dest,Scale,Offset),\n   Scale > 0,\n   Reference != 0.\nin file symbolization.dl [381:1-389:18]" 
      (TIMER_ON symbol_minus_symbol_candidate "@t-nonrecursive-rule;symbol_minus_symbol_candidate;symbolization.dl [381:1-389:18];symbol_minus_symbol_candidate(EA,Size,Reference,Dest,as(Scale, unsigned),Offset) :- \\n   relative_jump_table_entry(EA,_,Size,Reference,Dest,Scale,Offset),\\n   Scale > 0,\\n   Reference != 0.;"
(QUERY
        (IF (NOT (ISEMPTY relative_jump_table_entry))
         (FOR t0 relative_jump_table_entry (INDEX  (<= (NUMBER 0) (TUPLE t0 5) ))
          (IF (AND (CONSTRAINT != (TUPLE t0 3)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 5)  (NUMBER 0)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 6)) symbol_minus_symbol_candidate)
          ))        )       )
      )
     )
      (DEBUG 
 "symbol_minus_symbol_candidate(EA,Size,Dest,Reference,as(Scale, unsigned),Offset) :- \n   relative_jump_table_entry(EA,_,Size,Reference,Dest,Scale,Offset),\n   Scale < 0,\n   Dest != 0.\nin file symbolization.dl [381:1-389:18]" 
      (TIMER_ON symbol_minus_symbol_candidate "@t-nonrecursive-rule;symbol_minus_symbol_candidate;symbolization.dl [381:1-389:18];symbol_minus_symbol_candidate(EA,Size,Dest,Reference,as(Scale, unsigned),Offset) :- \\n   relative_jump_table_entry(EA,_,Size,Reference,Dest,Scale,Offset),\\n   Scale < 0,\\n   Dest != 0.;"
(QUERY
        (IF (NOT (ISEMPTY relative_jump_table_entry))
         (FOR t0 relative_jump_table_entry (INDEX  (<= (TUPLE t0 5) (NUMBER 0)))
          (IF (AND (CONSTRAINT != (TUPLE t0 4)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t0 5)  (NUMBER 0)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 2) (TUPLE t0 4) (TUPLE t0 3) (TUPLE t0 5) (TUPLE t0 6)) symbol_minus_symbol_candidate)
          ))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE symbol_scope_score
(STMTS     (TIMER_ON symbol_scope_score "@t-nonrecursive-relation;symbol_scope_score;symbols.dl [103:7-103:25];"
(STMTS      (DEBUG 
 "symbol_scope_score(Scope,0) :- \n   symbol(_,_,_,Scope,_,_,_,_,_),\n   Scope != \"LOCAL\",\n   Scope != \"GLOBAL\".\nin file symbols.dl [121:1-124:23]" 
      (TIMER_ON symbol_scope_score "@t-nonrecursive-rule;symbol_scope_score;symbols.dl [121:1-124:23];symbol_scope_score(Scope,0) :- \\n   symbol(_,_,_,Scope,_,_,_,_,_),\\n   Scope != \\\"LOCAL\\\",\\n   Scope != \\\"GLOBAL\\\".;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR_IN t0 symbol           (IF (AND (CONSTRAINT != (TUPLE t0 3)  (STRING "GLOBAL")) (CONSTRAINT != (TUPLE t0 3)  (STRING "LOCAL")))
           (INSERT ((TUPLE t0 3) (UNSIGNED 0)) symbol_scope_score)
          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_scope_score(\"LOCAL\",2).\nin file symbols.dl [108:1-109:25]" 
      (TIMER_ON symbol_scope_score "@t-nonrecursive-rule;symbol_scope_score;symbols.dl [108:1-109:25];symbol_scope_score(\\\"LOCAL\\\",2).;"
(QUERY
        (INSERT ((STRING "LOCAL") (UNSIGNED 2)) symbol_scope_score)
       )
      )
     )
      (DEBUG 
 "symbol_scope_score(\"GLOBAL\",1).\nin file symbols.dl [110:1-111:25]" 
      (TIMER_ON symbol_scope_score "@t-nonrecursive-rule;symbol_scope_score;symbols.dl [110:1-111:25];symbol_scope_score(\\\"GLOBAL\\\",1).;"
(QUERY
        (INSERT ((STRING "GLOBAL") (UNSIGNED 1)) symbol_scope_score)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE symbol_score
(STMTS (STMTS     (TIMER_ON symbol_score "@t-nonrecursive-relation;symbol_score;symbols.dl [85:7-85:19];"
(STMTS      (DEBUG 
 "symbol_score(EA,SymbolName,Type,Pos,1) :- \n   inferred_special_symbol(EA,SymbolName,_,_,Type,Pos).\nin file symbols.dl [64:1-66:70]" 
      (TIMER_ON symbol_score "@t-nonrecursive-rule;symbol_score;symbols.dl [64:1-66:70];symbol_score(EA,SymbolName,Type,Pos,1) :- \\n   inferred_special_symbol(EA,SymbolName,_,_,Type,Pos).;"
(QUERY
        (IF (NOT (ISEMPTY inferred_special_symbol))
         (FOR_IN t0 inferred_special_symbol           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 4) (TUPLE t0 5) (UNSIGNED 1)) symbol_score)
)
        )       )
      )
     )
      (DEBUG 
 "symbol_score(EA,SymbolName,Type,\"End\",((((((1<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(1<<32))|as(DynSymTableIndex, unsigned))) :- \n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,_,SymbolName),\n   !ambiguous_symbol(SymbolName),\n   !avoid_symbols(SymbolName),\n   Type != \"SECTION\",\n   symbol_at_section_end(EA,SymbolName),\n   relocation(EA,\"COPY\",SymbolName,_,_,_,_),\n   symbol_type_score(Type,TypeScore),\n   symbol_scope_score(Scope,ScopeScore),\n   symbol_visibility_score(Visibility,VisibilityScore),\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\".dynsym\",DynSymTableIndex,SymbolName).\nin file symbols.dl [139:1-173:45]" 
      (TIMER_ON symbol_score "@t-nonrecursive-rule;symbol_score;symbols.dl [139:1-173:45];symbol_score(EA,SymbolName,Type,\\\"End\\\",((((((1<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(1<<32))|as(DynSymTableIndex, unsigned))) :- \\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,_,SymbolName),\\n   !ambiguous_symbol(SymbolName),\\n   !avoid_symbols(SymbolName),\\n   Type != \\\"SECTION\\\",\\n   symbol_at_section_end(EA,SymbolName),\\n   relocation(EA,\\\"COPY\\\",SymbolName,_,_,_,_),\\n   symbol_type_score(Type,TypeScore),\\n   symbol_scope_score(Scope,ScopeScore),\\n   symbol_visibility_score(Visibility,VisibilityScore),\\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\\\".dynsym\\\",DynSymTableIndex,SymbolName).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY symbol_at_section_end))) (NOT (ISEMPTY symbol_type_score))) (NOT (ISEMPTY symbol_scope_score))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY symbol_visibility_score)))
         (FOR_IN t0 defined_symbol           (IF (AND (AND (AND (AND (CONSTRAINT != (TUPLE t0 2)  (STRING "SECTION")) (EXISTS symbol_at_section_end ((TUPLE t0 0) (TUPLE t0 8)))) (NOT (EXISTS ambiguous_symbol ((TUPLE t0 8))))) (EXISTS relocation ((TUPLE t0 0) (STRING "COPY") (TUPLE t0 8) UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS avoid_symbols ((TUPLE t0 8)))))
           (FOR t1 symbol_type_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 symbol_scope_score (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)))
             (FOR t3 symbol_visibility_score (INDEX  (= (TUPLE t3 0) (TUPLE t0 4)))
              (FOR t4 defined_symbol (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)) (= (TUPLE t4 1) (TUPLE t0 1)) (= (TUPLE t4 2) (TUPLE t0 2)) (= (TUPLE t4 3) (TUPLE t0 3)) (= (TUPLE t4 4) (TUPLE t0 4)) (= (TUPLE t4 5) (TUPLE t0 5)) (= (TUPLE t4 6) (STRING ".dynsym")) (= (TUPLE t4 8) (TUPLE t0 8)))
               (INSERT ((TUPLE t0 0) (TUPLE t0 8) (TUPLE t0 2) (STRING "End") (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bshl (UNSIGNED 1) (UNSIGNED 37)) (INTRINSIC bshl (TUPLE t1 1) (UNSIGNED 36))) (INTRINSIC bshl (TUPLE t2 1) (UNSIGNED 34))) (INTRINSIC bshl (TUPLE t3 1) (UNSIGNED 33))) (INTRINSIC bshl (UNSIGNED 1) (UNSIGNED 32))) (TUPLE t4 7))) symbol_score)
))))          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_score(EA,SymbolName,Type,\"End\",((((((1<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(0<<32))|as(TableIndex, unsigned))) :- \n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,TableIndex,SymbolName),\n   !ambiguous_symbol(SymbolName),\n   !avoid_symbols(SymbolName),\n   Type != \"SECTION\",\n   symbol_at_section_end(EA,SymbolName),\n   relocation(EA,\"COPY\",SymbolName,_,_,_,_),\n   symbol_type_score(Type,TypeScore),\n   symbol_scope_score(Scope,ScopeScore),\n   symbol_visibility_score(Visibility,VisibilityScore),\n   !defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\".dynsym\",_,SymbolName).\nin file symbols.dl [139:1-173:45]" 
      (TIMER_ON symbol_score "@t-nonrecursive-rule;symbol_score;symbols.dl [139:1-173:45];symbol_score(EA,SymbolName,Type,\\\"End\\\",((((((1<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(0<<32))|as(TableIndex, unsigned))) :- \\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,TableIndex,SymbolName),\\n   !ambiguous_symbol(SymbolName),\\n   !avoid_symbols(SymbolName),\\n   Type != \\\"SECTION\\\",\\n   symbol_at_section_end(EA,SymbolName),\\n   relocation(EA,\\\"COPY\\\",SymbolName,_,_,_,_),\\n   symbol_type_score(Type,TypeScore),\\n   symbol_scope_score(Scope,ScopeScore),\\n   symbol_visibility_score(Visibility,VisibilityScore),\\n   !defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\\\".dynsym\\\",_,SymbolName).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY symbol_visibility_score))) (NOT (ISEMPTY symbol_type_score))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY symbol_scope_score))) (NOT (ISEMPTY symbol_at_section_end)))
         (FOR_IN t0 defined_symbol           (IF (AND (AND (AND (AND (AND (CONSTRAINT != (TUPLE t0 2)  (STRING "SECTION")) (NOT (EXISTS ambiguous_symbol ((TUPLE t0 8))))) (EXISTS symbol_at_section_end ((TUPLE t0 0) (TUPLE t0 8)))) (NOT (EXISTS avoid_symbols ((TUPLE t0 8))))) (EXISTS relocation ((TUPLE t0 0) (STRING "COPY") (TUPLE t0 8) UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS defined_symbol ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (STRING ".dynsym") UNDEF (TUPLE t0 8)))))
           (FOR t1 symbol_type_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 symbol_scope_score (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)))
             (FOR t3 symbol_visibility_score (INDEX  (= (TUPLE t3 0) (TUPLE t0 4)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 8) (TUPLE t0 2) (STRING "End") (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bshl (UNSIGNED 1) (UNSIGNED 37)) (INTRINSIC bshl (TUPLE t1 1) (UNSIGNED 36))) (INTRINSIC bshl (TUPLE t2 1) (UNSIGNED 34))) (INTRINSIC bshl (TUPLE t3 1) (UNSIGNED 33))) (INTRINSIC bshl (UNSIGNED 0) (UNSIGNED 32))) (TUPLE t0 7))) symbol_score)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_score(EA,SymbolName,Type,\"End\",((((((0<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(1<<32))|as(DynSymTableIndex, unsigned))) :- \n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,_,SymbolName),\n   !ambiguous_symbol(SymbolName),\n   !avoid_symbols(SymbolName),\n   Type != \"SECTION\",\n   symbol_at_section_end(EA,SymbolName),\n   !relocation(EA,\"COPY\",SymbolName,_,_,_,_),\n   symbol_type_score(Type,TypeScore),\n   symbol_scope_score(Scope,ScopeScore),\n   symbol_visibility_score(Visibility,VisibilityScore),\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\".dynsym\",DynSymTableIndex,SymbolName).\nin file symbols.dl [139:1-173:45]" 
      (TIMER_ON symbol_score "@t-nonrecursive-rule;symbol_score;symbols.dl [139:1-173:45];symbol_score(EA,SymbolName,Type,\\\"End\\\",((((((0<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(1<<32))|as(DynSymTableIndex, unsigned))) :- \\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,_,SymbolName),\\n   !ambiguous_symbol(SymbolName),\\n   !avoid_symbols(SymbolName),\\n   Type != \\\"SECTION\\\",\\n   symbol_at_section_end(EA,SymbolName),\\n   !relocation(EA,\\\"COPY\\\",SymbolName,_,_,_,_),\\n   symbol_type_score(Type,TypeScore),\\n   symbol_scope_score(Scope,ScopeScore),\\n   symbol_visibility_score(Visibility,VisibilityScore),\\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\\\".dynsym\\\",DynSymTableIndex,SymbolName).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbol_at_section_end)) (NOT (ISEMPTY defined_symbol))) (NOT (ISEMPTY symbol_scope_score))) (NOT (ISEMPTY symbol_type_score))) (NOT (ISEMPTY symbol_visibility_score)))
         (FOR_IN t0 defined_symbol           (IF (AND (AND (AND (AND (CONSTRAINT != (TUPLE t0 2)  (STRING "SECTION")) (NOT (EXISTS ambiguous_symbol ((TUPLE t0 8))))) (NOT (EXISTS avoid_symbols ((TUPLE t0 8))))) (EXISTS symbol_at_section_end ((TUPLE t0 0) (TUPLE t0 8)))) (NOT (EXISTS relocation ((TUPLE t0 0) (STRING "COPY") (TUPLE t0 8) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 symbol_type_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 symbol_scope_score (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)))
             (FOR t3 symbol_visibility_score (INDEX  (= (TUPLE t3 0) (TUPLE t0 4)))
              (FOR t4 defined_symbol (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)) (= (TUPLE t4 1) (TUPLE t0 1)) (= (TUPLE t4 2) (TUPLE t0 2)) (= (TUPLE t4 3) (TUPLE t0 3)) (= (TUPLE t4 4) (TUPLE t0 4)) (= (TUPLE t4 5) (TUPLE t0 5)) (= (TUPLE t4 6) (STRING ".dynsym")) (= (TUPLE t4 8) (TUPLE t0 8)))
               (INSERT ((TUPLE t0 0) (TUPLE t0 8) (TUPLE t0 2) (STRING "End") (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bshl (UNSIGNED 0) (UNSIGNED 37)) (INTRINSIC bshl (TUPLE t1 1) (UNSIGNED 36))) (INTRINSIC bshl (TUPLE t2 1) (UNSIGNED 34))) (INTRINSIC bshl (TUPLE t3 1) (UNSIGNED 33))) (INTRINSIC bshl (UNSIGNED 1) (UNSIGNED 32))) (TUPLE t4 7))) symbol_score)
))))          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_score(EA,SymbolName,Type,\"End\",((((((0<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(0<<32))|as(TableIndex, unsigned))) :- \n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,TableIndex,SymbolName),\n   !ambiguous_symbol(SymbolName),\n   !avoid_symbols(SymbolName),\n   Type != \"SECTION\",\n   symbol_at_section_end(EA,SymbolName),\n   !relocation(EA,\"COPY\",SymbolName,_,_,_,_),\n   symbol_type_score(Type,TypeScore),\n   symbol_scope_score(Scope,ScopeScore),\n   symbol_visibility_score(Visibility,VisibilityScore),\n   !defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\".dynsym\",_,SymbolName).\nin file symbols.dl [139:1-173:45]" 
      (TIMER_ON symbol_score "@t-nonrecursive-rule;symbol_score;symbols.dl [139:1-173:45];symbol_score(EA,SymbolName,Type,\\\"End\\\",((((((0<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(0<<32))|as(TableIndex, unsigned))) :- \\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,TableIndex,SymbolName),\\n   !ambiguous_symbol(SymbolName),\\n   !avoid_symbols(SymbolName),\\n   Type != \\\"SECTION\\\",\\n   symbol_at_section_end(EA,SymbolName),\\n   !relocation(EA,\\\"COPY\\\",SymbolName,_,_,_,_),\\n   symbol_type_score(Type,TypeScore),\\n   symbol_scope_score(Scope,ScopeScore),\\n   symbol_visibility_score(Visibility,VisibilityScore),\\n   !defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\\\".dynsym\\\",_,SymbolName).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbol_visibility_score)) (NOT (ISEMPTY defined_symbol))) (NOT (ISEMPTY symbol_type_score))) (NOT (ISEMPTY symbol_scope_score))) (NOT (ISEMPTY symbol_at_section_end)))
         (FOR_IN t0 defined_symbol           (IF (AND (AND (AND (AND (AND (CONSTRAINT != (TUPLE t0 2)  (STRING "SECTION")) (NOT (EXISTS avoid_symbols ((TUPLE t0 8))))) (NOT (EXISTS ambiguous_symbol ((TUPLE t0 8))))) (NOT (EXISTS defined_symbol ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (STRING ".dynsym") UNDEF (TUPLE t0 8))))) (EXISTS symbol_at_section_end ((TUPLE t0 0) (TUPLE t0 8)))) (NOT (EXISTS relocation ((TUPLE t0 0) (STRING "COPY") (TUPLE t0 8) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 symbol_type_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 symbol_scope_score (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)))
             (FOR t3 symbol_visibility_score (INDEX  (= (TUPLE t3 0) (TUPLE t0 4)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 8) (TUPLE t0 2) (STRING "End") (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bshl (UNSIGNED 0) (UNSIGNED 37)) (INTRINSIC bshl (TUPLE t1 1) (UNSIGNED 36))) (INTRINSIC bshl (TUPLE t2 1) (UNSIGNED 34))) (INTRINSIC bshl (TUPLE t3 1) (UNSIGNED 33))) (INTRINSIC bshl (UNSIGNED 0) (UNSIGNED 32))) (TUPLE t0 7))) symbol_score)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_score(EA,SymbolName,Type,\"Beg\",((((((1<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(1<<32))|as(DynSymTableIndex, unsigned))) :- \n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,_,SymbolName),\n   !ambiguous_symbol(SymbolName),\n   !avoid_symbols(SymbolName),\n   Type != \"SECTION\",\n   !symbol_at_section_end(EA,SymbolName),\n   relocation(EA,\"COPY\",SymbolName,_,_,_,_),\n   symbol_type_score(Type,TypeScore),\n   symbol_scope_score(Scope,ScopeScore),\n   symbol_visibility_score(Visibility,VisibilityScore),\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\".dynsym\",DynSymTableIndex,SymbolName).\nin file symbols.dl [139:1-173:45]" 
      (TIMER_ON symbol_score "@t-nonrecursive-rule;symbol_score;symbols.dl [139:1-173:45];symbol_score(EA,SymbolName,Type,\\\"Beg\\\",((((((1<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(1<<32))|as(DynSymTableIndex, unsigned))) :- \\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,_,SymbolName),\\n   !ambiguous_symbol(SymbolName),\\n   !avoid_symbols(SymbolName),\\n   Type != \\\"SECTION\\\",\\n   !symbol_at_section_end(EA,SymbolName),\\n   relocation(EA,\\\"COPY\\\",SymbolName,_,_,_,_),\\n   symbol_type_score(Type,TypeScore),\\n   symbol_scope_score(Scope,ScopeScore),\\n   symbol_visibility_score(Visibility,VisibilityScore),\\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\\\".dynsym\\\",DynSymTableIndex,SymbolName).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY defined_symbol))) (NOT (ISEMPTY symbol_scope_score))) (NOT (ISEMPTY symbol_type_score))) (NOT (ISEMPTY symbol_visibility_score)))
         (FOR_IN t0 defined_symbol           (IF (AND (AND (AND (AND (CONSTRAINT != (TUPLE t0 2)  (STRING "SECTION")) (NOT (EXISTS ambiguous_symbol ((TUPLE t0 8))))) (NOT (EXISTS avoid_symbols ((TUPLE t0 8))))) (EXISTS relocation ((TUPLE t0 0) (STRING "COPY") (TUPLE t0 8) UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS symbol_at_section_end ((TUPLE t0 0) (TUPLE t0 8)))))
           (FOR t1 symbol_type_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 symbol_scope_score (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)))
             (FOR t3 symbol_visibility_score (INDEX  (= (TUPLE t3 0) (TUPLE t0 4)))
              (FOR t4 defined_symbol (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)) (= (TUPLE t4 1) (TUPLE t0 1)) (= (TUPLE t4 2) (TUPLE t0 2)) (= (TUPLE t4 3) (TUPLE t0 3)) (= (TUPLE t4 4) (TUPLE t0 4)) (= (TUPLE t4 5) (TUPLE t0 5)) (= (TUPLE t4 6) (STRING ".dynsym")) (= (TUPLE t4 8) (TUPLE t0 8)))
               (INSERT ((TUPLE t0 0) (TUPLE t0 8) (TUPLE t0 2) (STRING "Beg") (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bshl (UNSIGNED 1) (UNSIGNED 37)) (INTRINSIC bshl (TUPLE t1 1) (UNSIGNED 36))) (INTRINSIC bshl (TUPLE t2 1) (UNSIGNED 34))) (INTRINSIC bshl (TUPLE t3 1) (UNSIGNED 33))) (INTRINSIC bshl (UNSIGNED 1) (UNSIGNED 32))) (TUPLE t4 7))) symbol_score)
))))          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_score(EA,SymbolName,Type,\"Beg\",((((((1<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(0<<32))|as(TableIndex, unsigned))) :- \n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,TableIndex,SymbolName),\n   !ambiguous_symbol(SymbolName),\n   !avoid_symbols(SymbolName),\n   Type != \"SECTION\",\n   !symbol_at_section_end(EA,SymbolName),\n   relocation(EA,\"COPY\",SymbolName,_,_,_,_),\n   symbol_type_score(Type,TypeScore),\n   symbol_scope_score(Scope,ScopeScore),\n   symbol_visibility_score(Visibility,VisibilityScore),\n   !defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\".dynsym\",_,SymbolName).\nin file symbols.dl [139:1-173:45]" 
      (TIMER_ON symbol_score "@t-nonrecursive-rule;symbol_score;symbols.dl [139:1-173:45];symbol_score(EA,SymbolName,Type,\\\"Beg\\\",((((((1<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(0<<32))|as(TableIndex, unsigned))) :- \\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,TableIndex,SymbolName),\\n   !ambiguous_symbol(SymbolName),\\n   !avoid_symbols(SymbolName),\\n   Type != \\\"SECTION\\\",\\n   !symbol_at_section_end(EA,SymbolName),\\n   relocation(EA,\\\"COPY\\\",SymbolName,_,_,_,_),\\n   symbol_type_score(Type,TypeScore),\\n   symbol_scope_score(Scope,ScopeScore),\\n   symbol_visibility_score(Visibility,VisibilityScore),\\n   !defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\\\".dynsym\\\",_,SymbolName).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY symbol_visibility_score)) (NOT (ISEMPTY defined_symbol))) (NOT (ISEMPTY symbol_type_score))) (NOT (ISEMPTY symbol_scope_score))) (NOT (ISEMPTY relocation)))
         (FOR_IN t0 defined_symbol           (IF (AND (AND (AND (AND (AND (CONSTRAINT != (TUPLE t0 2)  (STRING "SECTION")) (NOT (EXISTS avoid_symbols ((TUPLE t0 8))))) (NOT (EXISTS ambiguous_symbol ((TUPLE t0 8))))) (NOT (EXISTS defined_symbol ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (STRING ".dynsym") UNDEF (TUPLE t0 8))))) (EXISTS relocation ((TUPLE t0 0) (STRING "COPY") (TUPLE t0 8) UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS symbol_at_section_end ((TUPLE t0 0) (TUPLE t0 8)))))
           (FOR t1 symbol_type_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 symbol_scope_score (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)))
             (FOR t3 symbol_visibility_score (INDEX  (= (TUPLE t3 0) (TUPLE t0 4)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 8) (TUPLE t0 2) (STRING "Beg") (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bshl (UNSIGNED 1) (UNSIGNED 37)) (INTRINSIC bshl (TUPLE t1 1) (UNSIGNED 36))) (INTRINSIC bshl (TUPLE t2 1) (UNSIGNED 34))) (INTRINSIC bshl (TUPLE t3 1) (UNSIGNED 33))) (INTRINSIC bshl (UNSIGNED 0) (UNSIGNED 32))) (TUPLE t0 7))) symbol_score)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_score(EA,SymbolName,Type,\"Beg\",((((((0<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(1<<32))|as(DynSymTableIndex, unsigned))) :- \n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,_,SymbolName),\n   !ambiguous_symbol(SymbolName),\n   !avoid_symbols(SymbolName),\n   Type != \"SECTION\",\n   !symbol_at_section_end(EA,SymbolName),\n   !relocation(EA,\"COPY\",SymbolName,_,_,_,_),\n   symbol_type_score(Type,TypeScore),\n   symbol_scope_score(Scope,ScopeScore),\n   symbol_visibility_score(Visibility,VisibilityScore),\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\".dynsym\",DynSymTableIndex,SymbolName).\nin file symbols.dl [139:1-173:45]" 
      (TIMER_ON symbol_score "@t-nonrecursive-rule;symbol_score;symbols.dl [139:1-173:45];symbol_score(EA,SymbolName,Type,\\\"Beg\\\",((((((0<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(1<<32))|as(DynSymTableIndex, unsigned))) :- \\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,_,SymbolName),\\n   !ambiguous_symbol(SymbolName),\\n   !avoid_symbols(SymbolName),\\n   Type != \\\"SECTION\\\",\\n   !symbol_at_section_end(EA,SymbolName),\\n   !relocation(EA,\\\"COPY\\\",SymbolName,_,_,_,_),\\n   symbol_type_score(Type,TypeScore),\\n   symbol_scope_score(Scope,ScopeScore),\\n   symbol_visibility_score(Visibility,VisibilityScore),\\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\\\".dynsym\\\",DynSymTableIndex,SymbolName).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY symbol_type_score))) (NOT (ISEMPTY symbol_scope_score))) (NOT (ISEMPTY symbol_visibility_score)))
         (FOR_IN t0 defined_symbol           (IF (AND (AND (AND (AND (CONSTRAINT != (TUPLE t0 2)  (STRING "SECTION")) (NOT (EXISTS avoid_symbols ((TUPLE t0 8))))) (NOT (EXISTS relocation ((TUPLE t0 0) (STRING "COPY") (TUPLE t0 8) UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS ambiguous_symbol ((TUPLE t0 8))))) (NOT (EXISTS symbol_at_section_end ((TUPLE t0 0) (TUPLE t0 8)))))
           (FOR t1 symbol_type_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 symbol_scope_score (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)))
             (FOR t3 symbol_visibility_score (INDEX  (= (TUPLE t3 0) (TUPLE t0 4)))
              (FOR t4 defined_symbol (INDEX  (= (TUPLE t4 0) (TUPLE t0 0)) (= (TUPLE t4 1) (TUPLE t0 1)) (= (TUPLE t4 2) (TUPLE t0 2)) (= (TUPLE t4 3) (TUPLE t0 3)) (= (TUPLE t4 4) (TUPLE t0 4)) (= (TUPLE t4 5) (TUPLE t0 5)) (= (TUPLE t4 6) (STRING ".dynsym")) (= (TUPLE t4 8) (TUPLE t0 8)))
               (INSERT ((TUPLE t0 0) (TUPLE t0 8) (TUPLE t0 2) (STRING "Beg") (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bshl (UNSIGNED 0) (UNSIGNED 37)) (INTRINSIC bshl (TUPLE t1 1) (UNSIGNED 36))) (INTRINSIC bshl (TUPLE t2 1) (UNSIGNED 34))) (INTRINSIC bshl (TUPLE t3 1) (UNSIGNED 33))) (INTRINSIC bshl (UNSIGNED 1) (UNSIGNED 32))) (TUPLE t4 7))) symbol_score)
))))          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_score(EA,SymbolName,Type,\"Beg\",((((((0<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(0<<32))|as(TableIndex, unsigned))) :- \n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,TableIndex,SymbolName),\n   !ambiguous_symbol(SymbolName),\n   !avoid_symbols(SymbolName),\n   Type != \"SECTION\",\n   !symbol_at_section_end(EA,SymbolName),\n   !relocation(EA,\"COPY\",SymbolName,_,_,_,_),\n   symbol_type_score(Type,TypeScore),\n   symbol_scope_score(Scope,ScopeScore),\n   symbol_visibility_score(Visibility,VisibilityScore),\n   !defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\".dynsym\",_,SymbolName).\nin file symbols.dl [139:1-173:45]" 
      (TIMER_ON symbol_score "@t-nonrecursive-rule;symbol_score;symbols.dl [139:1-173:45];symbol_score(EA,SymbolName,Type,\\\"Beg\\\",((((((0<<37)|(TypeScore<<36))|(ScopeScore<<34))|(VisibilityScore<<33))|(0<<32))|as(TableIndex, unsigned))) :- \\n   defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,TableIndex,SymbolName),\\n   !ambiguous_symbol(SymbolName),\\n   !avoid_symbols(SymbolName),\\n   Type != \\\"SECTION\\\",\\n   !symbol_at_section_end(EA,SymbolName),\\n   !relocation(EA,\\\"COPY\\\",SymbolName,_,_,_,_),\\n   symbol_type_score(Type,TypeScore),\\n   symbol_scope_score(Scope,ScopeScore),\\n   symbol_visibility_score(Visibility,VisibilityScore),\\n   !defined_symbol(EA,Size,Type,Scope,Visibility,SectIndex,\\\".dynsym\\\",_,SymbolName).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY defined_symbol)) (NOT (ISEMPTY symbol_visibility_score))) (NOT (ISEMPTY symbol_scope_score))) (NOT (ISEMPTY symbol_type_score)))
         (FOR_IN t0 defined_symbol           (IF (AND (AND (AND (AND (AND (CONSTRAINT != (TUPLE t0 2)  (STRING "SECTION")) (NOT (EXISTS symbol_at_section_end ((TUPLE t0 0) (TUPLE t0 8))))) (NOT (EXISTS avoid_symbols ((TUPLE t0 8))))) (NOT (EXISTS defined_symbol ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (STRING ".dynsym") UNDEF (TUPLE t0 8))))) (NOT (EXISTS ambiguous_symbol ((TUPLE t0 8))))) (NOT (EXISTS relocation ((TUPLE t0 0) (STRING "COPY") (TUPLE t0 8) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 symbol_type_score (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)))
            (FOR t2 symbol_scope_score (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)))
             (FOR t3 symbol_visibility_score (INDEX  (= (TUPLE t3 0) (TUPLE t0 4)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 8) (TUPLE t0 2) (STRING "Beg") (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bor (INTRINSIC bshl (UNSIGNED 0) (UNSIGNED 37)) (INTRINSIC bshl (TUPLE t1 1) (UNSIGNED 36))) (INTRINSIC bshl (TUPLE t2 1) (UNSIGNED 34))) (INTRINSIC bshl (TUPLE t3 1) (UNSIGNED 33))) (INTRINSIC bshl (UNSIGNED 0) (UNSIGNED 32))) (TUPLE t0 7))) symbol_score)
)))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR ambiguous_symbol)
     (CLEAR avoid_symbols)
     (CLEAR symbol_at_section_end)
     (CLEAR symbol_scope_score)
     (CLEAR symbol_type_score)
     (CLEAR symbol_visibility_score)
 ) )  )
  (SUBROUTINE symbol_set
(STMTS     (TIMER_ON symbol_set "@t-nonrecursive-relation;symbol_set;/usr/local/src/ddisasm/src/datalog/main.dl [751:7-751:17];"
(STMTS      (DEBUG 
 "symbol_set(EA,Size,Type,Scope,Visibility,SectIndex,Name) :- \n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,_,Name).\nin file main.dl [753:1-754:62]" 
      (TIMER_ON symbol_set "@t-nonrecursive-rule;symbol_set;/usr/local/src/ddisasm/src/datalog/main.dl [753:1-754:62];symbol_set(EA,Size,Type,Scope,Visibility,SectIndex,Name) :- \\n   symbol(EA,Size,Type,Scope,Visibility,SectIndex,_,_,Name).;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR_IN t0 symbol           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5) (TUPLE t0 8)) symbol_set)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE symbol_special_encoding
(STMTS (STMTS (STMTS     (TIMER_ON symbol_special_encoding "@t-nonrecursive-relation;symbol_special_encoding;exceptions.dl [43:7-43:30];"
(STMTS      (DEBUG 
 "symbol_special_encoding(EA_start,EncodingName) :- \n   lsda_callsite(CallSiteTable_address,EA_start,_,_,_,_,_,_),\n   lsda(_,CallSiteTable_address,CallSiteEncoding,_,_,_,_),\n   special_encoding(Encoding,EncodingName),\n   (CallSiteEncoding&0xF) = Encoding.\nin file exceptions.dl [195:1-201:42]" 
      (TIMER_ON symbol_special_encoding "@t-nonrecursive-rule;symbol_special_encoding;exceptions.dl [195:1-201:42];symbol_special_encoding(EA_start,EncodingName) :- \\n   lsda_callsite(CallSiteTable_address,EA_start,_,_,_,_,_,_),\\n   lsda(_,CallSiteTable_address,CallSiteEncoding,_,_,_,_),\\n   special_encoding(Encoding,EncodingName),\\n   (CallSiteEncoding&0xF) = Encoding.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY special_encoding)) (NOT (ISEMPTY lsda_callsite))) (NOT (ISEMPTY lsda)))
         (FOR_IN t0 lsda_callsite           (FOR t1 lsda (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (FOR t2 special_encoding (INDEX  (= (TUPLE t2 0) (INTRINSIC band (TUPLE t1 2) (UNSIGNED 15))))
            (INSERT ((TUPLE t0 1) (TUPLE t2 1)) symbol_special_encoding)
)))
        )       )
      )
     )
      (DEBUG 
 "symbol_special_encoding(EA_end,EncodingName) :- \n   lsda_callsite(CallSiteTable_address,_,_,EA_end,_,_,_,_),\n   lsda(_,CallSiteTable_address,CallSiteEncoding,_,_,_,_),\n   special_encoding(Encoding,EncodingName),\n   (CallSiteEncoding&0xF) = Encoding.\nin file exceptions.dl [195:1-201:42]" 
      (TIMER_ON symbol_special_encoding "@t-nonrecursive-rule;symbol_special_encoding;exceptions.dl [195:1-201:42];symbol_special_encoding(EA_end,EncodingName) :- \\n   lsda_callsite(CallSiteTable_address,_,_,EA_end,_,_,_,_),\\n   lsda(_,CallSiteTable_address,CallSiteEncoding,_,_,_,_),\\n   special_encoding(Encoding,EncodingName),\\n   (CallSiteEncoding&0xF) = Encoding.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY special_encoding)) (NOT (ISEMPTY lsda_callsite))) (NOT (ISEMPTY lsda)))
         (FOR_IN t0 lsda_callsite           (FOR t1 lsda (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (FOR t2 special_encoding (INDEX  (= (TUPLE t2 0) (INTRINSIC band (TUPLE t1 2) (UNSIGNED 15))))
            (INSERT ((TUPLE t0 3) (TUPLE t2 1)) symbol_special_encoding)
)))
        )       )
      )
     )
      (DEBUG 
 "symbol_special_encoding(EA_landingPad,EncodingName) :- \n   lsda_callsite(CallSiteTable_address,_,_,_,_,EA_landingPad,_,_),\n   lsda(_,CallSiteTable_address,CallSiteEncoding,_,_,_,_),\n   special_encoding(Encoding,EncodingName),\n   (CallSiteEncoding&0xF) = Encoding.\nin file exceptions.dl [195:1-201:42]" 
      (TIMER_ON symbol_special_encoding "@t-nonrecursive-rule;symbol_special_encoding;exceptions.dl [195:1-201:42];symbol_special_encoding(EA_landingPad,EncodingName) :- \\n   lsda_callsite(CallSiteTable_address,_,_,_,_,EA_landingPad,_,_),\\n   lsda(_,CallSiteTable_address,CallSiteEncoding,_,_,_,_),\\n   special_encoding(Encoding,EncodingName),\\n   (CallSiteEncoding&0xF) = Encoding.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY special_encoding)) (NOT (ISEMPTY lsda_callsite))) (NOT (ISEMPTY lsda)))
         (FOR_IN t0 lsda_callsite           (FOR t1 lsda (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
           (FOR t2 special_encoding (INDEX  (= (TUPLE t2 0) (INTRINSIC band (TUPLE t1 2) (UNSIGNED 15))))
            (INSERT ((TUPLE t0 5) (TUPLE t2 1)) symbol_special_encoding)
)))
        )       )
      )
     )
      (DEBUG 
 "symbol_special_encoding(PersonalityPos,EncodingName) :- \n   option(\"no-cfi-directives\"),\n   cie_personality(_,Personality,PersonalityPos,_,PersonalityEncoding),\n   Personality != 0,\n   special_encoding(Encoding,EncodingName),\n   (PersonalityEncoding&0xF) = Encoding.\nin file exceptions.dl [257:1-262:45]" 
      (TIMER_ON symbol_special_encoding "@t-nonrecursive-rule;symbol_special_encoding;exceptions.dl [257:1-262:45];symbol_special_encoding(PersonalityPos,EncodingName) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   cie_personality(_,Personality,PersonalityPos,_,PersonalityEncoding),\\n   Personality != 0,\\n   special_encoding(Encoding,EncodingName),\\n   (PersonalityEncoding&0xF) = Encoding.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY cie_personality)) (NOT (ISEMPTY special_encoding))) (NOT (ISEMPTY option))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 cie_personality           (IF (CONSTRAINT != (TUPLE t0 1)  (UNSIGNED 0))
           (FOR t1 special_encoding (INDEX  (= (TUPLE t1 0) (INTRINSIC band (TUPLE t0 4) (UNSIGNED 15))))
            (INSERT ((TUPLE t0 2) (TUPLE t1 1)) symbol_special_encoding)
)          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_special_encoding(StartLocation,EncodingName) :- \n   option(\"no-cfi-directives\"),\n   fde_pointer_locations(Addr,StartLocation,_,_,_,_),\n   fde_entry(Addr,_,Cie,_,_,_),\n   cie_encoding(Cie,FdeEncoding,_),\n   special_encoding(Encoding,EncodingName),\n   (FdeEncoding&0xF) = Encoding.\nin file exceptions.dl [290:1-297:37]" 
      (TIMER_ON symbol_special_encoding "@t-nonrecursive-rule;symbol_special_encoding;exceptions.dl [290:1-297:37];symbol_special_encoding(StartLocation,EncodingName) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_pointer_locations(Addr,StartLocation,_,_,_,_),\\n   fde_entry(Addr,_,Cie,_,_,_),\\n   cie_encoding(Cie,FdeEncoding,_),\\n   special_encoding(Encoding,EncodingName),\\n   (FdeEncoding&0xF) = Encoding.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY fde_pointer_locations)) (NOT (ISEMPTY special_encoding))) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY option))) (NOT (ISEMPTY cie_encoding))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 fde_pointer_locations           (FOR t1 fde_entry (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 cie_encoding (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
            (FOR t3 special_encoding (INDEX  (= (TUPLE t3 0) (INTRINSIC band (TUPLE t2 1) (UNSIGNED 15))))
             (INSERT ((TUPLE t0 1) (TUPLE t3 1)) symbol_special_encoding)
))))
        )       )
      )
     )
      (DEBUG 
 "symbol_special_encoding(EndLocation,EncodingName) :- \n   option(\"no-cfi-directives\"),\n   fde_pointer_locations(Addr,_,EndLocation,_,_,_),\n   fde_entry(Addr,_,Cie,_,_,_),\n   cie_encoding(Cie,FdeEncoding,_),\n   special_encoding(Encoding,EncodingName),\n   (FdeEncoding&0xF) = Encoding.\nin file exceptions.dl [290:1-297:37]" 
      (TIMER_ON symbol_special_encoding "@t-nonrecursive-rule;symbol_special_encoding;exceptions.dl [290:1-297:37];symbol_special_encoding(EndLocation,EncodingName) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_pointer_locations(Addr,_,EndLocation,_,_,_),\\n   fde_entry(Addr,_,Cie,_,_,_),\\n   cie_encoding(Cie,FdeEncoding,_),\\n   special_encoding(Encoding,EncodingName),\\n   (FdeEncoding&0xF) = Encoding.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY fde_pointer_locations)) (NOT (ISEMPTY special_encoding))) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY option))) (NOT (ISEMPTY cie_encoding))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 fde_pointer_locations           (FOR t1 fde_entry (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 cie_encoding (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
            (FOR t3 special_encoding (INDEX  (= (TUPLE t3 0) (INTRINSIC band (TUPLE t2 1) (UNSIGNED 15))))
             (INSERT ((TUPLE t0 2) (TUPLE t3 1)) symbol_special_encoding)
))))
        )       )
      )
     )
      (DEBUG 
 "symbol_special_encoding(LsdaLocation,EncodingName) :- \n   option(\"no-cfi-directives\"),\n   fde_pointer_locations(Addr,_,_,_,LsdaLocation,_),\n   fde_entry(Addr,_,Cie,_,_,_),\n   cie_encoding(Cie,_,LsdaEncoding),\n   special_encoding(Encoding,EncodingName),\n   (LsdaEncoding&0xF) = Encoding.\nin file exceptions.dl [326:1-332:38]" 
      (TIMER_ON symbol_special_encoding "@t-nonrecursive-rule;symbol_special_encoding;exceptions.dl [326:1-332:38];symbol_special_encoding(LsdaLocation,EncodingName) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_pointer_locations(Addr,_,_,_,LsdaLocation,_),\\n   fde_entry(Addr,_,Cie,_,_,_),\\n   cie_encoding(Cie,_,LsdaEncoding),\\n   special_encoding(Encoding,EncodingName),\\n   (LsdaEncoding&0xF) = Encoding.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY fde_pointer_locations)) (NOT (ISEMPTY special_encoding))) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY option))) (NOT (ISEMPTY cie_encoding))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 fde_pointer_locations           (FOR t1 fde_entry (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 cie_encoding (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
            (FOR t3 special_encoding (INDEX  (= (TUPLE t3 0) (INTRINSIC band (TUPLE t2 2) (UNSIGNED 15))))
             (INSERT ((TUPLE t0 4) (TUPLE t3 1)) symbol_special_encoding)
))))
        )       )
      )
     )
      (DEBUG 
 "symbol_special_encoding(TypeTablePointerLocation,\"uleb128\") :- \n   lsda_pointer_locations(Lsda,TypeTablePointerLocation,CallsiteTablePointerLoc),\n   lsda(Lsda,_,_,_,LsdaTypeTableAddress,_,_),\n   LsdaTypeTableAddress != 0,\n   ((CallsiteTablePointerLoc-1)-TypeTablePointerLocation) > 0.\nin file exceptions.dl [176:1-182:14]" 
      (TIMER_ON symbol_special_encoding "@t-nonrecursive-rule;symbol_special_encoding;exceptions.dl [176:1-182:14];symbol_special_encoding(TypeTablePointerLocation,\\\"uleb128\\\") :- \\n   lsda_pointer_locations(Lsda,TypeTablePointerLocation,CallsiteTablePointerLoc),\\n   lsda(Lsda,_,_,_,LsdaTypeTableAddress,_,_),\\n   LsdaTypeTableAddress != 0,\\n   ((CallsiteTablePointerLoc-1)-TypeTablePointerLocation) > 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY lsda_pointer_locations)) (NOT (ISEMPTY lsda)))
         (FOR_IN t0 lsda_pointer_locations           (IF (CONSTRAINT > (INTRINSIC - (INTRINSIC - (TUPLE t0 2) (UNSIGNED 1)) (TUPLE t0 1))  (UNSIGNED 0))
           (INDEXED_IF_EXISTS t1 lsda (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (CONSTRAINT != (TUPLE t1 4)  (UNSIGNED 0))
            (INSERT ((TUPLE t0 1) (STRING "uleb128")) symbol_special_encoding)
)          ))
        )       )
      )
     )
      (DEBUG 
 "symbol_special_encoding(CallsiteTablePointerLoc,\"uleb128\") :- \n   lsda_pointer_locations(Lsda,_,CallsiteTablePointerLoc),\n   lsda(Lsda,CallSiteTable_address,_,_,_,_,_),\n   (CallSiteTable_address-CallsiteTablePointerLoc) > 0.\nin file exceptions.dl [185:1-190:14]" 
      (TIMER_ON symbol_special_encoding "@t-nonrecursive-rule;symbol_special_encoding;exceptions.dl [185:1-190:14];symbol_special_encoding(CallsiteTablePointerLoc,\\\"uleb128\\\") :- \\n   lsda_pointer_locations(Lsda,_,CallsiteTablePointerLoc),\\n   lsda(Lsda,CallSiteTable_address,_,_,_,_,_),\\n   (CallSiteTable_address-CallsiteTablePointerLoc) > 0.;"
(QUERY
        (IF (AND (NOT (ISEMPTY lsda_pointer_locations)) (NOT (ISEMPTY lsda)))
         (FOR_IN t0 lsda_pointer_locations           (INDEXED_IF_EXISTS t1 lsda (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (CONSTRAINT > (INTRINSIC - (TUPLE t1 1) (TUPLE t0 2))  (UNSIGNED 0))
           (INSERT ((TUPLE t0 2) (STRING "uleb128")) symbol_special_encoding)
))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON symbol_special_encoding "@t-relation-savetime;symbol_special_encoding;exceptions.dl [43:7-43:30];savetime;"
     (IO symbol_special_encoding ((= IO "file") (= attributeNames "EA\tencoding") (= auxArity "0") (= name "symbol_special_encoding") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"EA\", \"encoding\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"s:symbol\"]}}")))
    )
 ) ) (STMTS     (CLEAR cie_encoding)
     (CLEAR cie_personality)
     (CLEAR fde_entry)
     (CLEAR fde_pointer_locations)
     (CLEAR lsda)
     (CLEAR lsda_callsite)
     (CLEAR lsda_pointer_locations)
     (CLEAR option)
     (CLEAR special_encoding)
 ) )  )
  (SUBROUTINE symbol_type_score
(STMTS     (TIMER_ON symbol_type_score "@t-nonrecursive-relation;symbol_type_score;symbols.dl [92:7-92:24];"
(STMTS      (DEBUG 
 "symbol_type_score(\"NOTYPE\",0).\nin file symbols.dl [94:1-94:31]" 
      (TIMER_ON symbol_type_score "@t-nonrecursive-rule;symbol_type_score;symbols.dl [94:1-94:31];symbol_type_score(\\\"NOTYPE\\\",0).;"
(QUERY
        (INSERT ((STRING "NOTYPE") (UNSIGNED 0)) symbol_type_score)
       )
      )
     )
      (DEBUG 
 "symbol_type_score(Type,1) :- \n   symbol(_,_,Type,_,_,_,_,_,_),\n   Type != \"NOTYPE\".\nin file symbols.dl [96:1-98:22]" 
      (TIMER_ON symbol_type_score "@t-nonrecursive-rule;symbol_type_score;symbols.dl [96:1-98:22];symbol_type_score(Type,1) :- \\n   symbol(_,_,Type,_,_,_,_,_,_),\\n   Type != \\\"NOTYPE\\\".;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR_IN t0 symbol           (IF (CONSTRAINT != (TUPLE t0 2)  (STRING "NOTYPE"))
           (INSERT ((TUPLE t0 2) (UNSIGNED 1)) symbol_type_score)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE symbol_visibility_score
(STMTS     (TIMER_ON symbol_visibility_score "@t-nonrecursive-relation;symbol_visibility_score;symbols.dl [130:7-130:30];"
(STMTS      (DEBUG 
 "symbol_visibility_score(\"HIDDEN\",0).\nin file symbols.dl [132:1-132:37]" 
      (TIMER_ON symbol_visibility_score "@t-nonrecursive-rule;symbol_visibility_score;symbols.dl [132:1-132:37];symbol_visibility_score(\\\"HIDDEN\\\",0).;"
(QUERY
        (INSERT ((STRING "HIDDEN") (UNSIGNED 0)) symbol_visibility_score)
       )
      )
     )
      (DEBUG 
 "symbol_visibility_score(Visibility,1) :- \n   symbol(_,_,_,_,Visibility,_,_,_,_),\n   Visibility != \"HIDDEN\".\nin file symbols.dl [134:1-136:28]" 
      (TIMER_ON symbol_visibility_score "@t-nonrecursive-rule;symbol_visibility_score;symbols.dl [134:1-136:28];symbol_visibility_score(Visibility,1) :- \\n   symbol(_,_,_,_,Visibility,_,_,_,_),\\n   Visibility != \\\"HIDDEN\\\".;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR_IN t0 symbol           (IF (CONSTRAINT != (TUPLE t0 4)  (STRING "HIDDEN"))
           (INSERT ((TUPLE t0 4) (UNSIGNED 1)) symbol_visibility_score)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE symbolic_data
(STMTS (STMTS     (TIMER_ON symbolic_data "@t-nonrecursive-relation;symbolic_data;symbolization.dl [84:7-84:20];"
(STMTS      (DEBUG 
 "symbolic_data(PersonalityPos,Size,Personality) :- \n   option(\"no-cfi-directives\"),\n   cie_personality(_,Personality,PersonalityPos,Size,_),\n   Personality != 0.\nin file exceptions.dl [264:1-267:22]" 
      (TIMER_ON symbolic_data "@t-nonrecursive-rule;symbolic_data;exceptions.dl [264:1-267:22];symbolic_data(PersonalityPos,Size,Personality) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   cie_personality(_,Personality,PersonalityPos,Size,_),\\n   Personality != 0.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY option)) (NOT (ISEMPTY cie_personality))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 cie_personality           (IF (CONSTRAINT != (TUPLE t0 1)  (UNSIGNED 0))
           (INSERT ((TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 1)) symbolic_data)
          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_data(StartLocation,(EndLocation-StartLocation),StartFunction) :- \n   option(\"no-cfi-directives\"),\n   fde_entry(Addr,_,Cie,StartFunction,_,_),\n   cie_encoding(Cie,FdeEncoding,_),\n   (FdeEncoding&0x10) = 0,\n   fde_pointer_locations(Addr,StartLocation,EndLocation,_,_,_).\nin file exceptions.dl [300:1-306:66]" 
      (TIMER_ON symbolic_data "@t-nonrecursive-rule;symbolic_data;exceptions.dl [300:1-306:66];symbolic_data(StartLocation,(EndLocation-StartLocation),StartFunction) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_entry(Addr,_,Cie,StartFunction,_,_),\\n   cie_encoding(Cie,FdeEncoding,_),\\n   (FdeEncoding&0x10) = 0,\\n   fde_pointer_locations(Addr,StartLocation,EndLocation,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY fde_pointer_locations)) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY option))) (NOT (ISEMPTY cie_encoding))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 fde_entry           (INDEXED_IF_EXISTS t1 cie_encoding (INDEX  (= (TUPLE t1 0) (TUPLE t0 2))) (CONSTRAINT = (INTRINSIC band (TUPLE t1 1) (UNSIGNED 16))  (UNSIGNED 0))
           (FOR t2 fde_pointer_locations (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
            (INSERT ((TUPLE t2 1) (INTRINSIC - (TUPLE t2 2) (TUPLE t2 1)) (TUPLE t0 3)) symbolic_data)
)))
        )       )
      )
     )
      (DEBUG 
 "symbolic_data(LsdaLocation,LsdaSize,LsdaAddress) :- \n   option(\"no-cfi-directives\"),\n   fde_entry(Addr,_,Cie,_,_,LsdaAddress),\n   fde_pointer_locations(Addr,_,_,_,LsdaLocation,LsdaSize),\n   LsdaSize > 0,\n   cie_encoding(Cie,_,LsdaEncoding),\n   (LsdaEncoding&0x10) = 0.\nin file exceptions.dl [334:1-341:32]" 
      (TIMER_ON symbolic_data "@t-nonrecursive-rule;symbolic_data;exceptions.dl [334:1-341:32];symbolic_data(LsdaLocation,LsdaSize,LsdaAddress) :- \\n   option(\\\"no-cfi-directives\\\"),\\n   fde_entry(Addr,_,Cie,_,_,LsdaAddress),\\n   fde_pointer_locations(Addr,_,_,_,LsdaLocation,LsdaSize),\\n   LsdaSize > 0,\\n   cie_encoding(Cie,_,LsdaEncoding),\\n   (LsdaEncoding&0x10) = 0.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY cie_encoding)) (NOT (ISEMPTY fde_entry))) (NOT (ISEMPTY option))) (NOT (ISEMPTY fde_pointer_locations))) (EXISTS option ((STRING "no-cfi-directives"))))
         (FOR_IN t0 fde_entry           (FOR t1 fde_pointer_locations (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (CONSTRAINT >= (TUPLE t1 5)  (UNSIGNED 0)) (CONSTRAINT != (TUPLE t1 5)  (UNSIGNED 0)))
            (INDEXED_IF_EXISTS t2 cie_encoding (INDEX  (= (TUPLE t2 0) (TUPLE t0 2))) (CONSTRAINT = (INTRINSIC band (TUPLE t2 2) (UNSIGNED 16))  (UNSIGNED 0))
             (INSERT ((TUPLE t1 4) (TUPLE t1 5) (TUPLE t0 5)) symbolic_data)
)           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_data(EA,Size,as(Val, address)) :- \n   data_object(EA,Size,\"symbol\"),\n   address_in_data_refined(EA,Val).\nin file symbolization.dl [841:1-843:37]" 
      (TIMER_ON symbolic_data "@t-nonrecursive-rule;symbolic_data;symbolization.dl [841:1-843:37];symbolic_data(EA,Size,as(Val, address)) :- \\n   data_object(EA,Size,\\\"symbol\\\"),\\n   address_in_data_refined(EA,Val).;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_object)) (NOT (ISEMPTY address_in_data_refined)))
         (FOR t0 data_object (INDEX  (= (TUPLE t0 2) (STRING "symbol")))
          (FOR t1 address_in_data_refined (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1)) symbolic_data)
))        )       )
      )
     )
      (DEBUG 
 "symbolic_data((LsdaTypeTableAddress-(EncodingSize*(Index+1))),EncodingSize,Type) :- \n   lsda_type_entry(LsdaTypeTableAddress,Index,Type),\n   lsda(_,_,_,_,LsdaTypeTableAddress,TypeTableEncoding,_),\n   (TypeTableEncoding&0xF) = Encoding,\n   (TypeTableEncoding&0x10) = 0,\n   dwarf_encoding_size(Encoding,EncodingSize),\n   Type != 0.\nin file exceptions.dl [230:1-237:15]" 
      (TIMER_ON symbolic_data "@t-nonrecursive-rule;symbolic_data;exceptions.dl [230:1-237:15];symbolic_data((LsdaTypeTableAddress-(EncodingSize*(Index+1))),EncodingSize,Type) :- \\n   lsda_type_entry(LsdaTypeTableAddress,Index,Type),\\n   lsda(_,_,_,_,LsdaTypeTableAddress,TypeTableEncoding,_),\\n   (TypeTableEncoding&0xF) = Encoding,\\n   (TypeTableEncoding&0x10) = 0,\\n   dwarf_encoding_size(Encoding,EncodingSize),\\n   Type != 0.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY dwarf_encoding_size)) (NOT (ISEMPTY lsda_type_entry))) (NOT (ISEMPTY lsda)))
         (FOR_IN t0 lsda_type_entry           (IF (CONSTRAINT != (TUPLE t0 2)  (UNSIGNED 0))
           (FOR t1 lsda (INDEX  (= (TUPLE t1 4) (TUPLE t0 0)))
            (IF (CONSTRAINT = (INTRINSIC band (TUPLE t1 5) (UNSIGNED 16))  (UNSIGNED 0))
             (FOR t2 dwarf_encoding_size (INDEX  (= (TUPLE t2 0) (INTRINSIC band (TUPLE t1 5) (UNSIGNED 15))))
              (INSERT ((INTRINSIC - (TUPLE t0 0) (INTRINSIC * (TUPLE t2 1) (INTRINSIC + (TUPLE t0 1) (UNSIGNED 1)))) (TUPLE t2 1) (TUPLE t0 2)) symbolic_data)
)            ))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR address_in_data_refined)
 ) )  )
  (SUBROUTINE symbolic_expr
(STMTS (STMTS (STMTS     (TIMER_ON symbolic_expr "@t-nonrecursive-relation;symbolic_expr;symbolization.dl [130:7-130:20];"
(STMTS      (DEBUG 
 "symbolic_expr(EA,Size,Symbol,Offset) :- \n   symbolic_expr_from_relocation(EA,Size,Symbol,Offset,_),\n   Symbol != \"\".\nin file symbolization.dl [921:1-924:18]" 
      (TIMER_ON symbolic_expr "@t-nonrecursive-rule;symbolic_expr;symbolization.dl [921:1-924:18];symbolic_expr(EA,Size,Symbol,Offset) :- \\n   symbolic_expr_from_relocation(EA,Size,Symbol,Offset,_),\\n   Symbol != \\\"\\\".;"
(QUERY
        (IF (NOT (ISEMPTY symbolic_expr_from_relocation))
         (FOR_IN t0 symbolic_expr_from_relocation           (IF (CONSTRAINT != (TUPLE t0 2)  (STRING ""))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) symbolic_expr)
          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr(EA,Size,Symbol,Offset) :- \n   symbolic_expr_from_relocation(EA,Size,\"\",Offset,TargetEA),\n   best_symexpr_symbol(TargetEA,Symbol,_).\nin file symbolization.dl [926:1-928:44]" 
      (TIMER_ON symbolic_expr "@t-nonrecursive-rule;symbolic_expr;symbolization.dl [926:1-928:44];symbolic_expr(EA,Size,Symbol,Offset) :- \\n   symbolic_expr_from_relocation(EA,Size,\\\"\\\",Offset,TargetEA),\\n   best_symexpr_symbol(TargetEA,Symbol,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_expr_from_relocation)) (NOT (ISEMPTY best_symexpr_symbol)))
         (FOR t0 symbolic_expr_from_relocation (INDEX  (= (TUPLE t0 2) (STRING "")))
          (FOR t1 best_symexpr_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 4)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1) (TUPLE t0 3)) symbolic_expr)
))        )       )
      )
     )
      (DEBUG 
 "symbolic_expr((EA+InstrOffset),Size,SymbolName,0) :- \n   symbolic_operand(EA,Index,Dest,_),\n   !moved_label(EA,Index,_,_),\n   instruction_immediate_offset(EA,Index,InstrOffset,Size),\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\n   !boundary_sym_expr((EA+InstrOffset),Dest),\n   SymbolLoc = \"Beg\",\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc).\nin file symbolization.dl [975:1-990:52]" 
      (TIMER_ON symbolic_expr "@t-nonrecursive-rule;symbolic_expr;symbolization.dl [975:1-990:52];symbolic_expr((EA+InstrOffset),Size,SymbolName,0) :- \\n   symbolic_operand(EA,Index,Dest,_),\\n   !moved_label(EA,Index,_,_),\\n   instruction_immediate_offset(EA,Index,InstrOffset,Size),\\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\\n   !boundary_sym_expr((EA+InstrOffset),Dest),\\n   SymbolLoc = \\\"Beg\\\",\\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_symexpr_symbol)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY instruction_immediate_offset)))
         (FOR_IN t0 symbolic_operand           (IF (NOT (EXISTS moved_label ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))
           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (AND (AND (NOT (EXISTS boundary_sym_expr ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t0 2)))) (NOT (EXISTS symbolic_expr_from_relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))))
             (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t0 2)) (= (TUPLE t2 2) (STRING "Beg")))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t1 3) (TUPLE t2 1) (NUMBER 0)) symbolic_expr)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr((EA+InstrOffset),Size,SymbolName,0) :- \n   symbolic_operand(EA,Index,Dest,_),\n   !moved_label(EA,Index,_,_),\n   instruction_displacement_offset(EA,Index,InstrOffset,Size),\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\n   !boundary_sym_expr((EA+InstrOffset),Dest),\n   SymbolLoc = \"Beg\",\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc).\nin file symbolization.dl [975:1-990:52]" 
      (TIMER_ON symbolic_expr "@t-nonrecursive-rule;symbolic_expr;symbolization.dl [975:1-990:52];symbolic_expr((EA+InstrOffset),Size,SymbolName,0) :- \\n   symbolic_operand(EA,Index,Dest,_),\\n   !moved_label(EA,Index,_,_),\\n   instruction_displacement_offset(EA,Index,InstrOffset,Size),\\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\\n   !boundary_sym_expr((EA+InstrOffset),Dest),\\n   SymbolLoc = \\\"Beg\\\",\\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_symexpr_symbol)) (NOT (ISEMPTY symbolic_operand))) (NOT (ISEMPTY instruction_displacement_offset)))
         (FOR_IN t0 symbolic_operand           (IF (NOT (EXISTS moved_label ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))
           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (AND (AND (NOT (EXISTS boundary_sym_expr ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t0 2)))) (NOT (EXISTS symbolic_expr_from_relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))))
             (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t0 2)) (= (TUPLE t2 2) (STRING "Beg")))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t1 3) (TUPLE t2 1) (NUMBER 0)) symbolic_expr)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr(EA,Size,SymbolName,0) :- \n   symbolic_data(EA,Size,Dest),\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\n   !symbol_minus_symbol(EA,_,_,_,_,_),\n   !moved_data_label(EA,_,_,_),\n   boundary_sym_expr(EA,Dest),\n   SymbolLoc = \"End\",\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc).\nin file symbolization.dl [1002:1-1013:52]" 
      (TIMER_ON symbolic_expr "@t-nonrecursive-rule;symbolic_expr;symbolization.dl [1002:1-1013:52];symbolic_expr(EA,Size,SymbolName,0) :- \\n   symbolic_data(EA,Size,Dest),\\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\\n   !symbol_minus_symbol(EA,_,_,_,_,_),\\n   !moved_data_label(EA,_,_,_),\\n   boundary_sym_expr(EA,Dest),\\n   SymbolLoc = \\\"End\\\",\\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_symexpr_symbol)) (NOT (ISEMPTY symbolic_data))) (NOT (ISEMPTY boundary_sym_expr)))
         (FOR_IN t0 symbolic_data           (IF (AND (AND (AND (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF UNDEF UNDEF))) (EXISTS boundary_sym_expr ((TUPLE t0 0) (TUPLE t0 2)))) (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbol_minus_symbol ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 best_symexpr_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 2) (STRING "End")))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1) (NUMBER 0)) symbolic_expr)
)          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr(EA,Size,SymbolName,0) :- \n   symbolic_data(EA,Size,Dest),\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\n   !symbol_minus_symbol(EA,_,_,_,_,_),\n   !moved_data_label(EA,_,_,_),\n   !boundary_sym_expr(EA,Dest),\n   SymbolLoc = \"Beg\",\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc).\nin file symbolization.dl [1002:1-1013:52]" 
      (TIMER_ON symbolic_expr "@t-nonrecursive-rule;symbolic_expr;symbolization.dl [1002:1-1013:52];symbolic_expr(EA,Size,SymbolName,0) :- \\n   symbolic_data(EA,Size,Dest),\\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\\n   !symbol_minus_symbol(EA,_,_,_,_,_),\\n   !moved_data_label(EA,_,_,_),\\n   !boundary_sym_expr(EA,Dest),\\n   SymbolLoc = \\\"Beg\\\",\\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_data)) (NOT (ISEMPTY best_symexpr_symbol)))
         (FOR_IN t0 symbolic_data           (IF (AND (AND (AND (NOT (EXISTS boundary_sym_expr ((TUPLE t0 0) (TUPLE t0 2)))) (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbol_minus_symbol ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF UNDEF UNDEF))))
           (FOR t1 best_symexpr_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 2) (STRING "Beg")))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1) (NUMBER 0)) symbolic_expr)
)          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr((EA+InstrOffset),Size,SymbolName,(as(Dest, number)-as(FinalDest, number))) :- \n   moved_label(EA,Index,Dest,FinalDest),\n   instruction_immediate_offset(EA,Index,InstrOffset,Size),\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\n   best_symexpr_symbol(FinalDest,SymbolName,\"Beg\").\nin file symbolization.dl [963:1-973:53]" 
      (TIMER_ON symbolic_expr "@t-nonrecursive-rule;symbolic_expr;symbolization.dl [963:1-973:53];symbolic_expr((EA+InstrOffset),Size,SymbolName,(as(Dest, number)-as(FinalDest, number))) :- \\n   moved_label(EA,Index,Dest,FinalDest),\\n   instruction_immediate_offset(EA,Index,InstrOffset,Size),\\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\\n   best_symexpr_symbol(FinalDest,SymbolName,\\\"Beg\\\").;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_symexpr_symbol)) (NOT (ISEMPTY moved_label))) (NOT (ISEMPTY instruction_immediate_offset)))
         (FOR_IN t0 moved_label           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (IF (AND (NOT (EXISTS symbolic_expr_from_relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))))
            (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)) (= (TUPLE t2 2) (STRING "Beg")))
             (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t1 3) (TUPLE t2 1) (INTRINSIC - (TUPLE t0 2) (TUPLE t0 3))) symbolic_expr)
)           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr((EA+InstrOffset),Size,SymbolName,(as(Dest, number)-as(FinalDest, number))) :- \n   moved_label(EA,Index,Dest,FinalDest),\n   instruction_displacement_offset(EA,Index,InstrOffset,Size),\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\n   best_symexpr_symbol(FinalDest,SymbolName,\"Beg\").\nin file symbolization.dl [963:1-973:53]" 
      (TIMER_ON symbolic_expr "@t-nonrecursive-rule;symbolic_expr;symbolization.dl [963:1-973:53];symbolic_expr((EA+InstrOffset),Size,SymbolName,(as(Dest, number)-as(FinalDest, number))) :- \\n   moved_label(EA,Index,Dest,FinalDest),\\n   instruction_displacement_offset(EA,Index,InstrOffset,Size),\\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\\n   best_symexpr_symbol(FinalDest,SymbolName,\\\"Beg\\\").;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_symexpr_symbol)) (NOT (ISEMPTY moved_label))) (NOT (ISEMPTY instruction_displacement_offset)))
         (FOR_IN t0 moved_label           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (IF (AND (NOT (EXISTS symbolic_expr_from_relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))))
            (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)) (= (TUPLE t2 2) (STRING "Beg")))
             (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t1 3) (TUPLE t2 1) (INTRINSIC - (TUPLE t0 2) (TUPLE t0 3))) symbolic_expr)
)           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr((EA+InstrOffset),Size,SymbolName,0) :- \n   symbolic_operand(EA,Index,Dest,_),\n   !moved_label(EA,Index,_,_),\n   instruction_immediate_offset(EA,Index,InstrOffset,Size),\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\n   boundary_sym_expr( _tmp_120,Dest),\n   SymbolLoc = \"End\",\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc),\n    _tmp_120 = (EA+InstrOffset).\nin file symbolization.dl [975:1-990:52]" 
      (TIMER_ON symbolic_expr "@t-nonrecursive-rule;symbolic_expr;symbolization.dl [975:1-990:52];symbolic_expr((EA+InstrOffset),Size,SymbolName,0) :- \\n   symbolic_operand(EA,Index,Dest,_),\\n   !moved_label(EA,Index,_,_),\\n   instruction_immediate_offset(EA,Index,InstrOffset,Size),\\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\\n   boundary_sym_expr( _tmp_120,Dest),\\n   SymbolLoc = \\\"End\\\",\\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc),\\n    _tmp_120 = (EA+InstrOffset).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY best_symexpr_symbol))) (NOT (ISEMPTY boundary_sym_expr))) (NOT (ISEMPTY instruction_immediate_offset)))
         (FOR_IN t0 symbolic_operand           (IF (NOT (EXISTS moved_label ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))
           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (AND (AND (EXISTS boundary_sym_expr ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t0 2))) (NOT (EXISTS symbolic_expr_from_relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))))
             (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t0 2)) (= (TUPLE t2 2) (STRING "End")))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t1 3) (TUPLE t2 1) (NUMBER 0)) symbolic_expr)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr((EA+InstrOffset),Size,SymbolName,0) :- \n   symbolic_operand(EA,Index,Dest,_),\n   !moved_label(EA,Index,_,_),\n   instruction_displacement_offset(EA,Index,InstrOffset,Size),\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\n   boundary_sym_expr( _tmp_121,Dest),\n   SymbolLoc = \"End\",\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc),\n    _tmp_121 = (EA+InstrOffset).\nin file symbolization.dl [975:1-990:52]" 
      (TIMER_ON symbolic_expr "@t-nonrecursive-rule;symbolic_expr;symbolization.dl [975:1-990:52];symbolic_expr((EA+InstrOffset),Size,SymbolName,0) :- \\n   symbolic_operand(EA,Index,Dest,_),\\n   !moved_label(EA,Index,_,_),\\n   instruction_displacement_offset(EA,Index,InstrOffset,Size),\\n   !symbolic_expr_from_relocation((EA+InstrOffset),_,_,_,_),\\n   !symbol_minus_symbol((EA+InstrOffset),_,_,_,_,_),\\n   boundary_sym_expr( _tmp_121,Dest),\\n   SymbolLoc = \\\"End\\\",\\n   best_symexpr_symbol(Dest,SymbolName,SymbolLoc),\\n    _tmp_121 = (EA+InstrOffset).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY best_symexpr_symbol))) (NOT (ISEMPTY boundary_sym_expr))) (NOT (ISEMPTY instruction_displacement_offset)))
         (FOR_IN t0 symbolic_operand           (IF (NOT (EXISTS moved_label ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))
           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
            (IF (AND (AND (EXISTS boundary_sym_expr ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t0 2))) (NOT (EXISTS symbolic_expr_from_relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS symbol_minus_symbol ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF UNDEF))))
             (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t0 2)) (= (TUPLE t2 2) (STRING "End")))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t1 3) (TUPLE t2 1) (NUMBER 0)) symbolic_expr)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr(EA,Size,SymbolName,(as(Dest, number)-as(FinalDest, number))) :- \n   moved_data_label(EA,Size,Dest,FinalDest),\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\n   !symbol_minus_symbol(EA,_,_,_,_,_),\n   best_symexpr_symbol(FinalDest,SymbolName,\"Beg\").\nin file symbolization.dl [994:1-1000:53]" 
      (TIMER_ON symbolic_expr "@t-nonrecursive-rule;symbolic_expr;symbolization.dl [994:1-1000:53];symbolic_expr(EA,Size,SymbolName,(as(Dest, number)-as(FinalDest, number))) :- \\n   moved_data_label(EA,Size,Dest,FinalDest),\\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\\n   !symbol_minus_symbol(EA,_,_,_,_,_),\\n   best_symexpr_symbol(FinalDest,SymbolName,\\\"Beg\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY moved_data_label)) (NOT (ISEMPTY best_symexpr_symbol)))
         (FOR_IN t0 moved_data_label           (IF (AND (NOT (EXISTS symbol_minus_symbol ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 best_symexpr_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 3)) (= (TUPLE t1 2) (STRING "Beg")))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1) (INTRINSIC - (TUPLE t0 2) (TUPLE t0 3))) symbolic_expr)
)          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON symbolic_expr "@t-relation-savetime;symbolic_expr;symbolization.dl [130:7-130:20];savetime;"
     (IO symbolic_expr ((= IO "file") (= attributeNames "EA\tSize\tSymbol\tOffset") (= auxArity "0") (= name "symbolic_expr") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 4, \"params\": [\"EA\", \"Size\", \"Symbol\", \"Offset\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 4, \"types\": [\"u:address\", \"u:unsigned\", \"s:symbol\", \"i:number\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE symbolic_expr_attribute
(STMTS (STMTS (STMTS     (TIMER_ON symbolic_expr_attribute "@t-nonrecursive-relation;symbolic_expr_attribute;symbolization.dl [154:7-154:30];"
(STMTS      (DEBUG 
 "symbolic_expr_attribute((EA+InstrOffset),Attr) :- \n   symbolic_operand_attribute(EA,Index,Attr),\n   instruction_immediate_offset(EA,Index,InstrOffset,_).\nin file symbolization.dl [1016:1-1021:7]" 
      (TIMER_ON symbolic_expr_attribute "@t-nonrecursive-rule;symbolic_expr_attribute;symbolization.dl [1016:1-1021:7];symbolic_expr_attribute((EA+InstrOffset),Attr) :- \\n   symbolic_operand_attribute(EA,Index,Attr),\\n   instruction_immediate_offset(EA,Index,InstrOffset,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_operand_attribute)) (NOT (ISEMPTY instruction_immediate_offset)))
         (FOR_IN t0 symbolic_operand_attribute           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t0 2)) symbolic_expr_attribute)
))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_attribute((EA+InstrOffset),Attr) :- \n   symbolic_operand_attribute(EA,Index,Attr),\n   instruction_displacement_offset(EA,Index,InstrOffset,_).\nin file symbolization.dl [1016:1-1021:7]" 
      (TIMER_ON symbolic_expr_attribute "@t-nonrecursive-rule;symbolic_expr_attribute;symbolization.dl [1016:1-1021:7];symbolic_expr_attribute((EA+InstrOffset),Attr) :- \\n   symbolic_operand_attribute(EA,Index,Attr),\\n   instruction_displacement_offset(EA,Index,InstrOffset,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_operand_attribute)) (NOT (ISEMPTY instruction_displacement_offset)))
         (FOR_IN t0 symbolic_operand_attribute           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)))
           (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) (TUPLE t0 2)) symbolic_expr_attribute)
))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON symbolic_expr_attribute "@t-relation-savetime;symbolic_expr_attribute;symbolization.dl [154:7-154:30];savetime;"
     (IO symbolic_expr_attribute ((= IO "file") (= attributeNames "ea\tattribute") (= auxArity "0") (= name "symbolic_expr_attribute") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 2, \"params\": [\"ea\", \"attribute\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 2, \"types\": [\"u:address\", \"s:symbol\"]}}")))
    )
 ) ) (STMTS     (CLEAR symbolic_operand_attribute)
 ) )  )
  (SUBROUTINE symbolic_expr_from_relocation
(STMTS (STMTS     (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-relation;symbolic_expr_from_relocation;symbolization.dl [103:7-103:36];"
(STMTS      (DEBUG 
 "symbolic_expr_from_relocation(EA,(Size/8),Symbol,(Addend+Adjustment),TargetEA) :- \n   binary_format(\"ELF\"),\n   relocation(EA,Type,Symbol,Addend,SymbolIndex,_,_),\n   relocation_size(Type,Size),\n   reloc_type_with_name(Type),\n   relocation_adjustment_total(EA,Adjustment),\n   symbol(TargetEA,_,_,_,_,_,_,SymbolIndex,Symbol),\n   Symbol != \"\".\nin file symbolization.dl [326:1-333:18]" 
      (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-rule;symbolic_expr_from_relocation;binary/elf/symbolization.dl [326:1-333:18];symbolic_expr_from_relocation(EA,(Size/8),Symbol,(Addend+Adjustment),TargetEA) :- \\n   binary_format(\\\"ELF\\\"),\\n   relocation(EA,Type,Symbol,Addend,SymbolIndex,_,_),\\n   relocation_size(Type,Size),\\n   reloc_type_with_name(Type),\\n   relocation_adjustment_total(EA,Adjustment),\\n   symbol(TargetEA,_,_,_,_,_,_,SymbolIndex,Symbol),\\n   Symbol != \\\"\\\".;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY reloc_type_with_name))) (NOT (ISEMPTY relocation_size))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY relocation_adjustment_total))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 relocation           (IF (AND (CONSTRAINT != (TUPLE t0 2)  (STRING "")) (EXISTS reloc_type_with_name ((TUPLE t0 1))))
           (FOR t1 relocation_size (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (FOR t2 relocation_adjustment_total (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (FOR t3 symbol (INDEX  (= (TUPLE t3 7) (TUPLE t0 4)) (= (TUPLE t3 8) (TUPLE t0 2)))
              (INSERT ((TUPLE t0 0) (INTRINSIC / (TUPLE t1 1) (UNSIGNED 8)) (TUPLE t0 2) (INTRINSIC + (TUPLE t0 3) (TUPLE t2 1)) (TUPLE t3 0)) symbolic_expr_from_relocation)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_from_relocation(EA,(Size/8),Symbol,0,TargetEA) :- \n   binary_type(\"REL\"),\n   relocation(EA,Type,\"\",Addend,SymbolIndex,_,_),\n   relocation_size(Type,Size),\n   reloc_type_nameless(Type),\n   relocation_adjustment_total(EA,Adjustment),\n   symbol(_,_,\"SECTION\",_,_,SectionIndex,_,SymbolIndex,_),\n   section(_,_,Begin,_,SectionIndex),\n   TargetEA = as(((as(Begin, number)+Addend)+Adjustment), address),\n   symbol(TargetEA,_,_,_,_,_,_,_,Symbol).\nin file symbolization.dl [348:1-362:7]" 
      (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-rule;symbolic_expr_from_relocation;binary/elf/symbolization.dl [348:1-362:7];symbolic_expr_from_relocation(EA,(Size/8),Symbol,0,TargetEA) :- \\n   binary_type(\\\"REL\\\"),\\n   relocation(EA,Type,\\\"\\\",Addend,SymbolIndex,_,_),\\n   relocation_size(Type,Size),\\n   reloc_type_nameless(Type),\\n   relocation_adjustment_total(EA,Adjustment),\\n   symbol(_,_,\\\"SECTION\\\",_,_,SectionIndex,_,SymbolIndex,_),\\n   section(_,_,Begin,_,SectionIndex),\\n   TargetEA = as(((as(Begin, number)+Addend)+Adjustment), address),\\n   symbol(TargetEA,_,_,_,_,_,_,_,Symbol).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY relocation_size))) (NOT (ISEMPTY relocation_adjustment_total))) (NOT (ISEMPTY reloc_type_nameless))) (NOT (ISEMPTY section))) (NOT (ISEMPTY binary_type))) (EXISTS binary_type ((STRING "REL"))))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 2) (STRING "")))
          (IF (EXISTS reloc_type_nameless ((TUPLE t0 1)))
           (FOR t1 relocation_size (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (FOR t2 relocation_adjustment_total (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (FOR t3 symbol (INDEX  (= (TUPLE t3 2) (STRING "SECTION")) (= (TUPLE t3 7) (TUPLE t0 4)))
              (FOR t4 section (INDEX  (= (TUPLE t4 4) (TUPLE t3 5)))
               (FOR t5 symbol (INDEX  (= (TUPLE t5 0) (INTRINSIC + (INTRINSIC + (TUPLE t4 2) (TUPLE t0 3)) (TUPLE t2 1))))
                (INSERT ((TUPLE t0 0) (INTRINSIC / (TUPLE t1 1) (UNSIGNED 8)) (TUPLE t5 8) (NUMBER 0) (TUPLE t5 0)) symbolic_expr_from_relocation)
)))))          ))        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_from_relocation((EA+Disp_offset),(Size/8),\"__ImageBase\",as((Dest-ImageBase), number),Dest) :- \n   binary_format(\"PE\"),\n   base_address(ImageBase),\n   pc_relative_operand(EA,_,Dest),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   instruction_get_op(EA,Op_index,Op),\n   op_indirect(Op,_,_,_,_,_,Size),\n   Dest > ImageBase,\n   Dest < (ImageBase+64).\nin file symbolization.dl [188:1-197:27]" 
      (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-rule;symbolic_expr_from_relocation;binary/pe/symbolization.dl [188:1-197:27];symbolic_expr_from_relocation((EA+Disp_offset),(Size/8),\\\"__ImageBase\\\",as((Dest-ImageBase), number),Dest) :- \\n   binary_format(\\\"PE\\\"),\\n   base_address(ImageBase),\\n   pc_relative_operand(EA,_,Dest),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   op_indirect(Op,_,_,_,_,_,Size),\\n   Dest > ImageBase,\\n   Dest < (ImageBase+64).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY base_address))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY instruction_get_op))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 base_address           (FOR_IN t1 pc_relative_operand            (IF (AND (CONSTRAINT < (TUPLE t1 2)  (INTRINSIC + (TUPLE t0 0) (UNSIGNED 64))) (CONSTRAINT > (TUPLE t1 2)  (TUPLE t0 0)))
            (FOR t2 instruction_displacement_offset (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (FOR t3 instruction_get_op (INDEX  (= (TUPLE t3 0) (TUPLE t1 0)) (= (TUPLE t3 1) (TUPLE t2 1)))
              (FOR t4 op_indirect (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)))
               (INSERT ((INTRINSIC + (TUPLE t1 0) (TUPLE t2 2)) (INTRINSIC / (TUPLE t4 6) (UNSIGNED 8)) (STRING "__ImageBase") (INTRINSIC - (TUPLE t1 2) (TUPLE t0 0)) (TUPLE t1 2)) symbolic_expr_from_relocation)
)))           ))
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_from_relocation(EA,(Size/8),\"\",0,as(((as(Begin, number)+Addend)+Adjustment), address)) :- \n   binary_type(\"REL\"),\n   relocation(EA,Type,\"\",Addend,SymbolIndex,_,_),\n   relocation_size(Type,Size),\n   reloc_type_nameless(Type),\n   relocation_adjustment_total(EA,Adjustment),\n   symbol(_,_,\"SECTION\",_,_,SectionIndex,_,SymbolIndex,_),\n   section(_,_,Begin,_,SectionIndex),\n   !symbol(as(((as(Begin, number)+Addend)+Adjustment), address),_,_,_,_,_,_,_,_).\nin file symbolization.dl [348:1-362:7]" 
      (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-rule;symbolic_expr_from_relocation;binary/elf/symbolization.dl [348:1-362:7];symbolic_expr_from_relocation(EA,(Size/8),\\\"\\\",0,as(((as(Begin, number)+Addend)+Adjustment), address)) :- \\n   binary_type(\\\"REL\\\"),\\n   relocation(EA,Type,\\\"\\\",Addend,SymbolIndex,_,_),\\n   relocation_size(Type,Size),\\n   reloc_type_nameless(Type),\\n   relocation_adjustment_total(EA,Adjustment),\\n   symbol(_,_,\\\"SECTION\\\",_,_,SectionIndex,_,SymbolIndex,_),\\n   section(_,_,Begin,_,SectionIndex),\\n   !symbol(as(((as(Begin, number)+Addend)+Adjustment), address),_,_,_,_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY section))) (NOT (ISEMPTY relocation_size))) (NOT (ISEMPTY reloc_type_nameless))) (NOT (ISEMPTY relocation_adjustment_total))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY symbol))) (EXISTS binary_type ((STRING "REL"))))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 2) (STRING "")))
          (IF (EXISTS reloc_type_nameless ((TUPLE t0 1)))
           (FOR t1 relocation_size (INDEX  (= (TUPLE t1 0) (TUPLE t0 1)))
            (FOR t2 relocation_adjustment_total (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (FOR t3 symbol (INDEX  (= (TUPLE t3 2) (STRING "SECTION")) (= (TUPLE t3 7) (TUPLE t0 4)))
              (FOR t4 section (INDEX  (= (TUPLE t4 4) (TUPLE t3 5)))
               (IF (NOT (EXISTS symbol ((INTRINSIC + (INTRINSIC + (TUPLE t4 2) (TUPLE t0 3)) (TUPLE t2 1)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)))
                (INSERT ((TUPLE t0 0) (INTRINSIC / (TUPLE t1 1) (UNSIGNED 8)) (STRING "") (NUMBER 0) (INTRINSIC + (INTRINSIC + (TUPLE t4 2) (TUPLE t0 3)) (TUPLE t2 1))) symbolic_expr_from_relocation)
               )))))          ))        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_from_relocation((EA+Disp_offset),(Size/8),\"__ImageBase\",as((as(Offset, address)-ImageBase), number),as(Offset, address)) :- \n   binary_format(\"PE\"),\n   base_address(ImageBase),\n   op_indirect(Op,_,_,_,1,Offset,Size),\n   instruction_get_op(EA,Op_index,Op),\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\n   as(Offset, address) >= ImageBase,\n   as(Offset, address) <= (ImageBase+64).\nin file symbolization.dl [199:1-208:26]" 
      (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-rule;symbolic_expr_from_relocation;binary/pe/symbolization.dl [199:1-208:26];symbolic_expr_from_relocation((EA+Disp_offset),(Size/8),\\\"__ImageBase\\\",as((as(Offset, address)-ImageBase), number),as(Offset, address)) :- \\n   binary_format(\\\"PE\\\"),\\n   base_address(ImageBase),\\n   op_indirect(Op,_,_,_,1,Offset,Size),\\n   instruction_get_op(EA,Op_index,Op),\\n   instruction_displacement_offset(EA,Op_index,Disp_offset,_),\\n   as(Offset, address) >= ImageBase,\\n   as(Offset, address) <= (ImageBase+64).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY op_indirect))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY instruction_get_op))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 base_address           (FOR t1 op_indirect (INDEX  (= (TUPLE t1 4) (NUMBER 1)))
           (IF (AND (CONSTRAINT >= (TUPLE t1 5)  (TUPLE t0 0)) (CONSTRAINT <= (TUPLE t1 5)  (INTRINSIC + (TUPLE t0 0) (UNSIGNED 64))))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (FOR t3 instruction_displacement_offset (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)) (= (TUPLE t3 1) (TUPLE t2 1)))
              (INSERT ((INTRINSIC + (TUPLE t2 0) (TUPLE t3 2)) (INTRINSIC / (TUPLE t1 6) (UNSIGNED 8)) (STRING "__ImageBase") (INTRINSIC - (TUPLE t1 5) (TUPLE t0 0)) (TUPLE t1 5)) symbolic_expr_from_relocation)
))           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_from_relocation((EA+Disp_offset),(8/8),\"__ImageBase\",as((as(Offset, address)-ImageBase), number),as(Offset, address)) :- \n   binary_format(\"PE\"),\n   base_address(ImageBase),\n   op_immediate(Op,Offset),\n   instruction_get_op(EA,Op_index,Op),\n   instruction_immediate_offset(EA,Op_index,Disp_offset,_),\n   as(Offset, address) >= ImageBase,\n   as(Offset, address) <= (ImageBase+64).\nin file symbolization.dl [210:1-220:26]" 
      (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-rule;symbolic_expr_from_relocation;binary/pe/symbolization.dl [210:1-220:26];symbolic_expr_from_relocation((EA+Disp_offset),(8/8),\\\"__ImageBase\\\",as((as(Offset, address)-ImageBase), number),as(Offset, address)) :- \\n   binary_format(\\\"PE\\\"),\\n   base_address(ImageBase),\\n   op_immediate(Op,Offset),\\n   instruction_get_op(EA,Op_index,Op),\\n   instruction_immediate_offset(EA,Op_index,Disp_offset,_),\\n   as(Offset, address) >= ImageBase,\\n   as(Offset, address) <= (ImageBase+64).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY base_address)) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY instruction_get_op))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 base_address           (FOR_IN t1 op_immediate            (IF (AND (CONSTRAINT <= (TUPLE t1 1)  (INTRINSIC + (TUPLE t0 0) (UNSIGNED 64))) (CONSTRAINT >= (TUPLE t1 1)  (TUPLE t0 0)))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
             (FOR t3 instruction_immediate_offset (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)) (= (TUPLE t3 1) (TUPLE t2 1)))
              (INSERT ((INTRINSIC + (TUPLE t2 0) (TUPLE t3 2)) (INTRINSIC / (UNSIGNED 8) (UNSIGNED 8)) (STRING "__ImageBase") (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)) (TUPLE t1 1)) symbolic_expr_from_relocation)
))           ))
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_from_relocation(EA,8,Symbol,Addend,TargetEA) :- \n   binary_format(\"ELF\"),\n   relocation(EA,\"GLOB_DAT\",Symbol,Addend,SymbolIndex,_,_),\n   symbol(TargetEA,_,_,_,_,_,_,SymbolIndex,Symbol).\nin file symbolization.dl [364:1-368:53]" 
      (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-rule;symbolic_expr_from_relocation;binary/elf/symbolization.dl [364:1-368:53];symbolic_expr_from_relocation(EA,8,Symbol,Addend,TargetEA) :- \\n   binary_format(\\\"ELF\\\"),\\n   relocation(EA,\\\"GLOB_DAT\\\",Symbol,Addend,SymbolIndex,_,_),\\n   symbol(TargetEA,_,_,_,_,_,_,SymbolIndex,Symbol).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY symbol))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "GLOB_DAT")))
          (FOR t1 symbol (INDEX  (= (TUPLE t1 7) (TUPLE t0 4)) (= (TUPLE t1 8) (TUPLE t0 2)))
           (INSERT ((TUPLE t0 0) (UNSIGNED 8) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t1 0)) symbolic_expr_from_relocation)
))        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_from_relocation(EA,8,\"\",0,as(Dest, address)) :- \n   relocation(EA,\"IRELATIVE\",\"\",Dest,_,_,_).\nin file symbolization.dl [370:1-372:46]" 
      (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-rule;symbolic_expr_from_relocation;binary/elf/symbolization.dl [370:1-372:46];symbolic_expr_from_relocation(EA,8,\\\"\\\",0,as(Dest, address)) :- \\n   relocation(EA,\\\"IRELATIVE\\\",\\\"\\\",Dest,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "IRELATIVE")) (= (TUPLE t0 2) (STRING "")))
          (INSERT ((TUPLE t0 0) (UNSIGNED 8) (STRING "") (NUMBER 0) (TUPLE t0 3)) symbolic_expr_from_relocation)
)        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_from_relocation((EA+Offset),(Size/8),Symbol,Addend,TargetEA) :- \n   binary_type(\"REL\"),\n   ISA = \"X64\",\n   instruction_displacement_offset(EA,_,Offset,_),\n   tls_operand_attribute(Type,_),\n   elf_relocation_size(ISA,Type,Size),\n   relocation( _tmp_122,Type,Symbol,Addend,_,_,_),\n   symbol(TargetEA,_,_,_,_,_,_,_,Symbol),\n    _tmp_122 = (EA+Offset).\nin file tls.dl [584:1-592:43]" 
      (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-rule;symbolic_expr_from_relocation;tls.dl [584:1-592:43];symbolic_expr_from_relocation((EA+Offset),(Size/8),Symbol,Addend,TargetEA) :- \\n   binary_type(\\\"REL\\\"),\\n   ISA = \\\"X64\\\",\\n   instruction_displacement_offset(EA,_,Offset,_),\\n   tls_operand_attribute(Type,_),\\n   elf_relocation_size(ISA,Type,Size),\\n   relocation( _tmp_122,Type,Symbol,Addend,_,_,_),\\n   symbol(TargetEA,_,_,_,_,_,_,_,Symbol),\\n    _tmp_122 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY tls_operand_attribute))) (NOT (ISEMPTY elf_relocation_size))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY relocation))) (EXISTS binary_type ((STRING "REL"))))
         (FOR_IN t0 instruction_displacement_offset           (FOR_IN t1 tls_operand_attribute            (FOR t2 elf_relocation_size (INDEX  (= (TUPLE t2 0) (STRING "X64")) (= (TUPLE t2 1) (TUPLE t1 0)))
            (FOR t3 relocation (INDEX  (= (TUPLE t3 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (= (TUPLE t3 1) (TUPLE t1 0)))
             (FOR t4 symbol (INDEX  (= (TUPLE t4 8) (TUPLE t3 2)))
              (INSERT ((INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)) (INTRINSIC / (TUPLE t2 2) (UNSIGNED 8)) (TUPLE t3 2) (TUPLE t3 3) (TUPLE t4 0)) symbolic_expr_from_relocation)
))))
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_from_relocation(Got_entry,(Size/8),\"\",0,as(((as(Beg, number)+Addend)+Adjustment), address)) :- \n   relocation(Got_entry,\"TPOFF64\",\"\",Addend,_,_,_),\n   elf_relocation_size(\"X64\",\"TPOFF64\",Size),\n   relocation_adjustment_total(Got_entry,Adjustment),\n   tls_segment(Beg,_,_).\nin file tls.dl [597:1-609:61]" 
      (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-rule;symbolic_expr_from_relocation;tls.dl [597:1-609:61];symbolic_expr_from_relocation(Got_entry,(Size/8),\\\"\\\",0,as(((as(Beg, number)+Addend)+Adjustment), address)) :- \\n   relocation(Got_entry,\\\"TPOFF64\\\",\\\"\\\",Addend,_,_,_),\\n   elf_relocation_size(\\\"X64\\\",\\\"TPOFF64\\\",Size),\\n   relocation_adjustment_total(Got_entry,Adjustment),\\n   tls_segment(Beg,_,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY tls_segment))) (NOT (ISEMPTY relocation_adjustment_total))) (NOT (ISEMPTY elf_relocation_size)))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "TPOFF64")) (= (TUPLE t0 2) (STRING "")))
          (FOR t1 elf_relocation_size (INDEX  (= (TUPLE t1 0) (STRING "X64")) (= (TUPLE t1 1) (STRING "TPOFF64")))
           (FOR t2 relocation_adjustment_total (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
            (FOR_IN t3 tls_segment              (INSERT ((TUPLE t0 0) (INTRINSIC / (TUPLE t1 2) (UNSIGNED 8)) (STRING "") (NUMBER 0) (INTRINSIC + (INTRINSIC + (TUPLE t3 0) (TUPLE t0 3)) (TUPLE t2 1))) symbolic_expr_from_relocation)
)
)))        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_from_relocation(EA_data,8,\"__ImageBase\",0,ImageBase) :- \n   binary_format(\"PE\"),\n   base_address(ImageBase),\n   code_in_block(EA_code,_),\n   arch.memory_access(\"LOAD\",EA_code,_,_,_,_,_,_,_),\n   pc_relative_operand(EA_code,_,EA_data),\n   @functor_data_valid(EA_data,8) = 1,\n   ImageBase = as(@functor_data_signed(EA_data,8), address),\n   reg_def_use.def(EA_code,_).\nin file symbolization.dl [55:1-64:34]" 
      (TIMER_ON symbolic_expr_from_relocation "@t-nonrecursive-rule;symbolic_expr_from_relocation;binary/pe/symbolization.dl [55:1-64:34];symbolic_expr_from_relocation(EA_data,8,\\\"__ImageBase\\\",0,ImageBase) :- \\n   binary_format(\\\"PE\\\"),\\n   base_address(ImageBase),\\n   code_in_block(EA_code,_),\\n   arch.memory_access(\\\"LOAD\\\",EA_code,_,_,_,_,_,_,_),\\n   pc_relative_operand(EA_code,_,EA_data),\\n   @functor_data_valid(EA_data,8) = 1,\\n   ImageBase = as(@functor_data_signed(EA_data,8), address),\\n   reg_def_use.def(EA_code,_).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY reg_def_use.def)) (NOT (ISEMPTY base_address))) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY arch.memory_access))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY pc_relative_operand))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 base_address           (FOR_IN t1 code_in_block            (IF (AND (EXISTS arch.memory_access ((STRING "LOAD") (TUPLE t1 0) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF)) (EXISTS reg_def_use.def ((TUPLE t1 0) UNDEF)))
            (FOR t2 pc_relative_operand (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (IF (AND (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t2 2) (UNSIGNED 8)))  (UNSIGNED 1)) (CONSTRAINT = (TUPLE t0 0)  (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t2 2) (UNSIGNED 8)))))
              (INSERT ((TUPLE t2 2) (UNSIGNED 8) (STRING "__ImageBase") (NUMBER 0) (TUPLE t0 0)) symbolic_expr_from_relocation)
             ))           ))
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR reloc_type_nameless)
     (CLEAR reloc_type_with_name)
     (CLEAR relocation_size)
 ) )  )
  (SUBROUTINE symbolic_expr_symbol_minus_symbol
(STMTS (STMTS (STMTS     (TIMER_ON symbolic_expr_symbol_minus_symbol "@t-nonrecursive-relation;symbolic_expr_symbol_minus_symbol;symbolization.dl [138:7-138:40];"
(STMTS      (DEBUG 
 "symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((((Offset+as(NewSymbol1, number))-as(Symbol1, number))+as(Symbol2, number))-as(NewSymbol2, number))) :- \n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\n   moved_data_label(EA,Size,Symbol1,NewSymbol1),\n   moved_data_label(EA,Size,Symbol2,NewSymbol2),\n   best_symexpr_symbol(NewSymbol1,SymbolName1,\"Beg\"),\n   boundary_sym_expr(EA,NewSymbol2),\n   Symbol2Loc = \"End\",\n   best_symexpr_symbol(NewSymbol2,SymbolName2,Symbol2Loc).\nin file symbolization.dl [934:1-960:60]" 
      (TIMER_ON symbolic_expr_symbol_minus_symbol "@t-nonrecursive-rule;symbolic_expr_symbol_minus_symbol;symbolization.dl [934:1-960:60];symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((((Offset+as(NewSymbol1, number))-as(Symbol1, number))+as(Symbol2, number))-as(NewSymbol2, number))) :- \\n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\\n   moved_data_label(EA,Size,Symbol1,NewSymbol1),\\n   moved_data_label(EA,Size,Symbol2,NewSymbol2),\\n   best_symexpr_symbol(NewSymbol1,SymbolName1,\\\"Beg\\\"),\\n   boundary_sym_expr(EA,NewSymbol2),\\n   Symbol2Loc = \\\"End\\\",\\n   best_symexpr_symbol(NewSymbol2,SymbolName2,Symbol2Loc).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY best_symexpr_symbol)) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY moved_data_label))) (NOT (ISEMPTY boundary_sym_expr)))
         (FOR_IN t0 symbol_minus_symbol           (IF (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF)))
           (FOR t1 moved_data_label (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
            (FOR t2 moved_data_label (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 3)))
             (IF (EXISTS boundary_sym_expr ((TUPLE t0 0) (TUPLE t2 3)))
              (FOR t3 best_symexpr_symbol (INDEX  (= (TUPLE t3 0) (TUPLE t1 3)) (= (TUPLE t3 2) (STRING "Beg")))
               (FOR t4 best_symexpr_symbol (INDEX  (= (TUPLE t4 0) (TUPLE t2 3)) (= (TUPLE t4 2) (STRING "End")))
                (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t3 1) (TUPLE t4 1) (TUPLE t0 4) (INTRINSIC - (INTRINSIC + (INTRINSIC - (INTRINSIC + (TUPLE t0 5) (TUPLE t1 3)) (TUPLE t0 2)) (TUPLE t0 3)) (TUPLE t2 3))) symbolic_expr_symbol_minus_symbol)
))             )))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((((Offset+as(NewSymbol1, number))-as(Symbol1, number))+as(Symbol2, number))-as(NewSymbol2, number))) :- \n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\n   moved_data_label(EA,Size,Symbol1,NewSymbol1),\n   moved_data_label(EA,Size,Symbol2,NewSymbol2),\n   best_symexpr_symbol(NewSymbol1,SymbolName1,\"Beg\"),\n   !boundary_sym_expr(EA,NewSymbol2),\n   Symbol2Loc = \"Beg\",\n   best_symexpr_symbol(NewSymbol2,SymbolName2,Symbol2Loc).\nin file symbolization.dl [934:1-960:60]" 
      (TIMER_ON symbolic_expr_symbol_minus_symbol "@t-nonrecursive-rule;symbolic_expr_symbol_minus_symbol;symbolization.dl [934:1-960:60];symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((((Offset+as(NewSymbol1, number))-as(Symbol1, number))+as(Symbol2, number))-as(NewSymbol2, number))) :- \\n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\\n   moved_data_label(EA,Size,Symbol1,NewSymbol1),\\n   moved_data_label(EA,Size,Symbol2,NewSymbol2),\\n   best_symexpr_symbol(NewSymbol1,SymbolName1,\\\"Beg\\\"),\\n   !boundary_sym_expr(EA,NewSymbol2),\\n   Symbol2Loc = \\\"Beg\\\",\\n   best_symexpr_symbol(NewSymbol2,SymbolName2,Symbol2Loc).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY symbol_minus_symbol)) (NOT (ISEMPTY best_symexpr_symbol))) (NOT (ISEMPTY moved_data_label)))
         (FOR_IN t0 symbol_minus_symbol           (IF (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF)))
           (FOR t1 moved_data_label (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
            (FOR t2 moved_data_label (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)) (= (TUPLE t2 2) (TUPLE t0 3)))
             (IF (NOT (EXISTS boundary_sym_expr ((TUPLE t0 0) (TUPLE t2 3))))
              (FOR t3 best_symexpr_symbol (INDEX  (= (TUPLE t3 0) (TUPLE t1 3)) (= (TUPLE t3 2) (STRING "Beg")))
               (FOR t4 best_symexpr_symbol (INDEX  (= (TUPLE t4 0) (TUPLE t2 3)) (= (TUPLE t4 2) (STRING "Beg")))
                (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t3 1) (TUPLE t4 1) (TUPLE t0 4) (INTRINSIC - (INTRINSIC + (INTRINSIC - (INTRINSIC + (TUPLE t0 5) (TUPLE t1 3)) (TUPLE t0 2)) (TUPLE t0 3)) (TUPLE t2 3))) symbolic_expr_symbol_minus_symbol)
))             )))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((Offset+as(NewSymbol1, number))-as(Symbol1, number))) :- \n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\n   moved_data_label(EA,Size,Symbol1,NewSymbol1),\n   !moved_data_label(EA,_,Symbol2,_),\n   best_symexpr_symbol(NewSymbol1,SymbolName1,\"Beg\"),\n   boundary_sym_expr(EA,Symbol2),\n   Symbol2Loc = \"End\",\n   best_symexpr_symbol(Symbol2,SymbolName2,Symbol2Loc).\nin file symbolization.dl [934:1-960:60]" 
      (TIMER_ON symbolic_expr_symbol_minus_symbol "@t-nonrecursive-rule;symbolic_expr_symbol_minus_symbol;symbolization.dl [934:1-960:60];symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((Offset+as(NewSymbol1, number))-as(Symbol1, number))) :- \\n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\\n   moved_data_label(EA,Size,Symbol1,NewSymbol1),\\n   !moved_data_label(EA,_,Symbol2,_),\\n   best_symexpr_symbol(NewSymbol1,SymbolName1,\\\"Beg\\\"),\\n   boundary_sym_expr(EA,Symbol2),\\n   Symbol2Loc = \\\"End\\\",\\n   best_symexpr_symbol(Symbol2,SymbolName2,Symbol2Loc).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY best_symexpr_symbol)) (NOT (ISEMPTY boundary_sym_expr))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY moved_data_label)))
         (FOR_IN t0 symbol_minus_symbol           (IF (AND (AND (EXISTS boundary_sym_expr ((TUPLE t0 0) (TUPLE t0 3))) (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF (TUPLE t0 3) UNDEF)))) (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 moved_data_label (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
            (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t1 3)) (= (TUPLE t2 2) (STRING "Beg")))
             (FOR t3 best_symexpr_symbol (INDEX  (= (TUPLE t3 0) (TUPLE t0 3)) (= (TUPLE t3 2) (STRING "End")))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 1) (TUPLE t3 1) (TUPLE t0 4) (INTRINSIC - (INTRINSIC + (TUPLE t0 5) (TUPLE t1 3)) (TUPLE t0 2))) symbolic_expr_symbol_minus_symbol)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((Offset+as(NewSymbol1, number))-as(Symbol1, number))) :- \n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\n   moved_data_label(EA,Size,Symbol1,NewSymbol1),\n   !moved_data_label(EA,_,Symbol2,_),\n   best_symexpr_symbol(NewSymbol1,SymbolName1,\"Beg\"),\n   !boundary_sym_expr(EA,Symbol2),\n   Symbol2Loc = \"Beg\",\n   best_symexpr_symbol(Symbol2,SymbolName2,Symbol2Loc).\nin file symbolization.dl [934:1-960:60]" 
      (TIMER_ON symbolic_expr_symbol_minus_symbol "@t-nonrecursive-rule;symbolic_expr_symbol_minus_symbol;symbolization.dl [934:1-960:60];symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((Offset+as(NewSymbol1, number))-as(Symbol1, number))) :- \\n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\\n   moved_data_label(EA,Size,Symbol1,NewSymbol1),\\n   !moved_data_label(EA,_,Symbol2,_),\\n   best_symexpr_symbol(NewSymbol1,SymbolName1,\\\"Beg\\\"),\\n   !boundary_sym_expr(EA,Symbol2),\\n   Symbol2Loc = \\\"Beg\\\",\\n   best_symexpr_symbol(Symbol2,SymbolName2,Symbol2Loc).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY moved_data_label)) (NOT (ISEMPTY best_symexpr_symbol))) (NOT (ISEMPTY symbol_minus_symbol)))
         (FOR_IN t0 symbol_minus_symbol           (IF (AND (AND (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF))) (NOT (EXISTS boundary_sym_expr ((TUPLE t0 0) (TUPLE t0 3))))) (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF (TUPLE t0 3) UNDEF))))
           (FOR t1 moved_data_label (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)))
            (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t1 3)) (= (TUPLE t2 2) (STRING "Beg")))
             (FOR t3 best_symexpr_symbol (INDEX  (= (TUPLE t3 0) (TUPLE t0 3)) (= (TUPLE t3 2) (STRING "Beg")))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 1) (TUPLE t3 1) (TUPLE t0 4) (INTRINSIC - (INTRINSIC + (TUPLE t0 5) (TUPLE t1 3)) (TUPLE t0 2))) symbolic_expr_symbol_minus_symbol)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((Offset+as(Symbol2, number))-as(NewSymbol2, number))) :- \n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\n   !moved_data_label(EA,_,Symbol1,_),\n   moved_data_label(EA,Size,Symbol2,NewSymbol2),\n   best_symexpr_symbol(Symbol1,SymbolName1,\"Beg\"),\n   boundary_sym_expr(EA,NewSymbol2),\n   Symbol2Loc = \"End\",\n   best_symexpr_symbol(NewSymbol2,SymbolName2,Symbol2Loc).\nin file symbolization.dl [934:1-960:60]" 
      (TIMER_ON symbolic_expr_symbol_minus_symbol "@t-nonrecursive-rule;symbolic_expr_symbol_minus_symbol;symbolization.dl [934:1-960:60];symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((Offset+as(Symbol2, number))-as(NewSymbol2, number))) :- \\n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\\n   !moved_data_label(EA,_,Symbol1,_),\\n   moved_data_label(EA,Size,Symbol2,NewSymbol2),\\n   best_symexpr_symbol(Symbol1,SymbolName1,\\\"Beg\\\"),\\n   boundary_sym_expr(EA,NewSymbol2),\\n   Symbol2Loc = \\\"End\\\",\\n   best_symexpr_symbol(NewSymbol2,SymbolName2,Symbol2Loc).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY best_symexpr_symbol)) (NOT (ISEMPTY moved_data_label))) (NOT (ISEMPTY symbol_minus_symbol))) (NOT (ISEMPTY boundary_sym_expr)))
         (FOR_IN t0 symbol_minus_symbol           (IF (AND (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF (TUPLE t0 2) UNDEF))) (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 moved_data_label (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 3)))
            (IF (EXISTS boundary_sym_expr ((TUPLE t0 0) (TUPLE t1 3)))
             (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t0 2)) (= (TUPLE t2 2) (STRING "Beg")))
              (FOR t3 best_symexpr_symbol (INDEX  (= (TUPLE t3 0) (TUPLE t1 3)) (= (TUPLE t3 2) (STRING "End")))
               (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 1) (TUPLE t3 1) (TUPLE t0 4) (INTRINSIC - (INTRINSIC + (TUPLE t0 5) (TUPLE t0 3)) (TUPLE t1 3))) symbolic_expr_symbol_minus_symbol)
))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((Offset+as(Symbol2, number))-as(NewSymbol2, number))) :- \n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\n   !moved_data_label(EA,_,Symbol1,_),\n   moved_data_label(EA,Size,Symbol2,NewSymbol2),\n   best_symexpr_symbol(Symbol1,SymbolName1,\"Beg\"),\n   !boundary_sym_expr(EA,NewSymbol2),\n   Symbol2Loc = \"Beg\",\n   best_symexpr_symbol(NewSymbol2,SymbolName2,Symbol2Loc).\nin file symbolization.dl [934:1-960:60]" 
      (TIMER_ON symbolic_expr_symbol_minus_symbol "@t-nonrecursive-rule;symbolic_expr_symbol_minus_symbol;symbolization.dl [934:1-960:60];symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,((Offset+as(Symbol2, number))-as(NewSymbol2, number))) :- \\n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\\n   !moved_data_label(EA,_,Symbol1,_),\\n   moved_data_label(EA,Size,Symbol2,NewSymbol2),\\n   best_symexpr_symbol(Symbol1,SymbolName1,\\\"Beg\\\"),\\n   !boundary_sym_expr(EA,NewSymbol2),\\n   Symbol2Loc = \\\"Beg\\\",\\n   best_symexpr_symbol(NewSymbol2,SymbolName2,Symbol2Loc).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY moved_data_label)) (NOT (ISEMPTY best_symexpr_symbol))) (NOT (ISEMPTY symbol_minus_symbol)))
         (FOR_IN t0 symbol_minus_symbol           (IF (AND (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF (TUPLE t0 2) UNDEF))) (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 moved_data_label (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 3)))
            (IF (NOT (EXISTS boundary_sym_expr ((TUPLE t0 0) (TUPLE t1 3))))
             (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t0 2)) (= (TUPLE t2 2) (STRING "Beg")))
              (FOR t3 best_symexpr_symbol (INDEX  (= (TUPLE t3 0) (TUPLE t1 3)) (= (TUPLE t3 2) (STRING "Beg")))
               (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t2 1) (TUPLE t3 1) (TUPLE t0 4) (INTRINSIC - (INTRINSIC + (TUPLE t0 5) (TUPLE t0 3)) (TUPLE t1 3))) symbolic_expr_symbol_minus_symbol)
))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,Offset) :- \n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\n   !moved_data_label(EA,_,Symbol1,_),\n   !moved_data_label(EA,_,Symbol2,_),\n   best_symexpr_symbol(Symbol1,SymbolName1,\"Beg\"),\n   boundary_sym_expr(EA,Symbol2),\n   Symbol2Loc = \"End\",\n   best_symexpr_symbol(Symbol2,SymbolName2,Symbol2Loc).\nin file symbolization.dl [934:1-960:60]" 
      (TIMER_ON symbolic_expr_symbol_minus_symbol "@t-nonrecursive-rule;symbolic_expr_symbol_minus_symbol;symbolization.dl [934:1-960:60];symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,Offset) :- \\n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\\n   !moved_data_label(EA,_,Symbol1,_),\\n   !moved_data_label(EA,_,Symbol2,_),\\n   best_symexpr_symbol(Symbol1,SymbolName1,\\\"Beg\\\"),\\n   boundary_sym_expr(EA,Symbol2),\\n   Symbol2Loc = \\\"End\\\",\\n   best_symexpr_symbol(Symbol2,SymbolName2,Symbol2Loc).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY boundary_sym_expr)) (NOT (ISEMPTY best_symexpr_symbol))) (NOT (ISEMPTY symbol_minus_symbol)))
         (FOR_IN t0 symbol_minus_symbol           (IF (AND (AND (AND (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF (TUPLE t0 3) UNDEF))) (EXISTS boundary_sym_expr ((TUPLE t0 0) (TUPLE t0 3)))) (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF (TUPLE t0 2) UNDEF))))
           (FOR t1 best_symexpr_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 2) (STRING "Beg")))
            (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)) (= (TUPLE t2 2) (STRING "End")))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1) (TUPLE t2 1) (TUPLE t0 4) (TUPLE t0 5)) symbolic_expr_symbol_minus_symbol)
))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,Offset) :- \n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\n   !moved_data_label(EA,_,Symbol1,_),\n   !moved_data_label(EA,_,Symbol2,_),\n   best_symexpr_symbol(Symbol1,SymbolName1,\"Beg\"),\n   !boundary_sym_expr(EA,Symbol2),\n   Symbol2Loc = \"Beg\",\n   best_symexpr_symbol(Symbol2,SymbolName2,Symbol2Loc).\nin file symbolization.dl [934:1-960:60]" 
      (TIMER_ON symbolic_expr_symbol_minus_symbol "@t-nonrecursive-rule;symbolic_expr_symbol_minus_symbol;symbolization.dl [934:1-960:60];symbolic_expr_symbol_minus_symbol(EA,Size,SymbolName1,SymbolName2,Scale,Offset) :- \\n   symbol_minus_symbol(EA,Size,Symbol1,Symbol2,Scale,Offset),\\n   !symbolic_expr_from_relocation(EA,_,_,_,_),\\n   !moved_data_label(EA,_,Symbol1,_),\\n   !moved_data_label(EA,_,Symbol2,_),\\n   best_symexpr_symbol(Symbol1,SymbolName1,\\\"Beg\\\"),\\n   !boundary_sym_expr(EA,Symbol2),\\n   Symbol2Loc = \\\"Beg\\\",\\n   best_symexpr_symbol(Symbol2,SymbolName2,Symbol2Loc).;"
(QUERY
        (IF (AND (NOT (ISEMPTY best_symexpr_symbol)) (NOT (ISEMPTY symbol_minus_symbol)))
         (FOR_IN t0 symbol_minus_symbol           (IF (AND (AND (AND (NOT (EXISTS boundary_sym_expr ((TUPLE t0 0) (TUPLE t0 3)))) (NOT (EXISTS symbolic_expr_from_relocation ((TUPLE t0 0) UNDEF UNDEF UNDEF UNDEF)))) (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF (TUPLE t0 2) UNDEF)))) (NOT (EXISTS moved_data_label ((TUPLE t0 0) UNDEF (TUPLE t0 3) UNDEF))))
           (FOR t1 best_symexpr_symbol (INDEX  (= (TUPLE t1 0) (TUPLE t0 2)) (= (TUPLE t1 2) (STRING "Beg")))
            (FOR t2 best_symexpr_symbol (INDEX  (= (TUPLE t2 0) (TUPLE t0 3)) (= (TUPLE t2 2) (STRING "Beg")))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1) (TUPLE t2 1) (TUPLE t0 4) (TUPLE t0 5)) symbolic_expr_symbol_minus_symbol)
))          ))
        )       )
      )
     )
 )    )
 )   (STMTS     (TIMER_ON symbolic_expr_symbol_minus_symbol "@t-relation-savetime;symbolic_expr_symbol_minus_symbol;symbolization.dl [138:7-138:40];savetime;"
     (IO symbolic_expr_symbol_minus_symbol ((= IO "file") (= attributeNames "EA\tSize\tSymbol\tSymbol2\tScale\tOffset") (= auxArity "0") (= name "symbolic_expr_symbol_minus_symbol") (= operation "output") (= output-dir "/workspace/facts/disassembly") (= params "{\"records\": {\"stack_var\": {\"arity\": 2, \"params\": [\"BaseReg\", \"StackPos\"]}}, \"relation\": {\"arity\": 6, \"params\": [\"EA\", \"Size\", \"Symbol\", \"Symbol2\", \"Scale\", \"Offset\"]}}") (= types "{\"ADTs\": {}, \"records\": {\"r:stack_var\": {\"arity\": 2, \"types\": [\"s:register\", \"i:number\"]}}, \"relation\": {\"arity\": 6, \"types\": [\"u:address\", \"u:unsigned\", \"s:symbol\", \"s:symbol\", \"u:unsigned\", \"i:number\"]}}")))
    )
 ) )  )  )
  (SUBROUTINE symbolic_operand
(STMTS (STMTS     (TIMER_ON symbolic_operand "@t-nonrecursive-relation;symbolic_operand;symbolization.dl [74:7-74:23];"
(STMTS      (DEBUG 
 "symbolic_operand(EA,Op_index,Value,Type) :- \n   symbolic_operand_candidate(EA,Op_index,Value,Type),\n   symbolic_operand_candidate(EA,Op_index,_,_),\n   <inlined_@generator_0_386> = sum <inlined_X_386> : { symbolic_operand_point(EA,Op_index,<inlined_X_386>,+underscore_3939) },\n   <inlined_@generator_0_386> >= 0.\nin file symbolization.dl [352:1-355:17]" 
      (TIMER_ON symbolic_operand "@t-nonrecursive-rule;symbolic_operand;symbolization.dl [352:1-355:17];symbolic_operand(EA,Op_index,Value,Type) :- \\n   symbolic_operand_candidate(EA,Op_index,Value,Type),\\n   symbolic_operand_candidate(EA,Op_index,_,_),\\n   <inlined_@generator_0_386> = sum <inlined_X_386> : { symbolic_operand_point(EA,Op_index,<inlined_X_386>,+underscore_3939) },\\n   <inlined_@generator_0_386> >= 0.;"
(QUERY
        (IF (NOT (ISEMPTY symbolic_operand_candidate))
         (FOR_IN t0 symbolic_operand_candidate           (IF (EXISTS symbolic_operand_candidate ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))
           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION SUM  (TUPLE t1 2) ))  t1 symbolic_operand_point (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1))) TRUE 
            (IF (AND (CONSTRAINT >= (TUPLE t1 0)  (NUMBER 0)) (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) symbolic_operand)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand(EA,Op_index,Value,Type) :- \n   symbolic_operand_candidate(EA,Op_index,Value,Type),\n   symbolic_operand_candidate(EA,Op_index,_,_),\n   !symbolic_operand_point(EA,Op_index,_,_),\n   0 >= 0.\nin file symbolization.dl [352:1-355:17]" 
      (TIMER_ON symbolic_operand "@t-nonrecursive-rule;symbolic_operand;symbolization.dl [352:1-355:17];symbolic_operand(EA,Op_index,Value,Type) :- \\n   symbolic_operand_candidate(EA,Op_index,Value,Type),\\n   symbolic_operand_candidate(EA,Op_index,_,_),\\n   !symbolic_operand_point(EA,Op_index,_,_),\\n   0 >= 0.;"
(QUERY
        (IF (AND (CONSTRAINT >= (NUMBER 0)  (NUMBER 0)) (NOT (ISEMPTY symbolic_operand_candidate)))
         (FOR_IN t0 symbolic_operand_candidate           (IF (AND (EXISTS symbolic_operand_candidate ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)) (NOT (EXISTS symbolic_operand_point ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3)) symbolic_operand)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR symbolic_operand_point)
 ) )  )
  (SUBROUTINE symbolic_operand_attribute
(STMTS (STMTS     (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-relation;symbolic_operand_attribute;symbolization.dl [146:7-146:33];"
(STMTS      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"TLSGD\") :- \n   tls_global_dynamic(EA),\n   symbolic_operand_candidate(EA,Index,Dest,_),\n   relocation(Dest,\"DTPMOD64\",_,_,_,_,_).\nin file tls.dl [655:1-661:7]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [655:1-661:7];symbolic_operand_attribute(EA,Index,\\\"TLSGD\\\") :- \\n   tls_global_dynamic(EA),\\n   symbolic_operand_candidate(EA,Index,Dest,_),\\n   relocation(Dest,\\\"DTPMOD64\\\",_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY tls_global_dynamic))) (NOT (ISEMPTY symbolic_operand_candidate)))
         (FOR_IN t0 tls_global_dynamic           (FOR t1 symbolic_operand_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS relocation ((TUPLE t1 2) (STRING "DTPMOD64") UNDEF UNDEF UNDEF UNDEF UNDEF))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "TLSGD")) symbolic_operand_attribute)
           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"TLSGD\") :- \n   tls_global_dynamic(EA),\n   symbolic_operand_candidate(EA,Index,Dest,_),\n   relocation(Dest,\"TLS_DTPMOD32\",_,_,_,_,_).\nin file tls.dl [655:1-661:7]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [655:1-661:7];symbolic_operand_attribute(EA,Index,\\\"TLSGD\\\") :- \\n   tls_global_dynamic(EA),\\n   symbolic_operand_candidate(EA,Index,Dest,_),\\n   relocation(Dest,\\\"TLS_DTPMOD32\\\",_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY tls_global_dynamic))) (NOT (ISEMPTY symbolic_operand_candidate)))
         (FOR_IN t0 tls_global_dynamic           (FOR t1 symbolic_operand_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS relocation ((TUPLE t1 2) (STRING "TLS_DTPMOD32") UNDEF UNDEF UNDEF UNDEF UNDEF))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "TLSGD")) symbolic_operand_attribute)
           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,Type) :- \n   tls_relative_operand(EA,Index,_,Type).\nin file tls.dl [706:1-707:43]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [706:1-707:43];symbolic_operand_attribute(EA,Index,Type) :- \\n   tls_relative_operand(EA,Index,_,Type).;"
(QUERY
        (IF (NOT (ISEMPTY tls_relative_operand))
         (FOR_IN t0 tls_relative_operand           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3)) symbolic_operand_attribute)
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"PLT\") :- \n   symbolic_operand(EA,Index,Dest,_),\n   plt_block(Dest,_).\nin file x86_64_symbolization.dl [27:1-29:23]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;arch/x86_64_symbolization.dl [27:1-29:23];symbolic_operand_attribute(EA,Index,\\\"PLT\\\") :- \\n   symbolic_operand(EA,Index,Dest,_),\\n   plt_block(Dest,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY plt_block)))
         (FOR_IN t0 symbolic_operand           (IF (EXISTS plt_block ((TUPLE t0 2) UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "PLT")) symbolic_operand_attribute)
          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"GOT\") :- \n   symbolic_operand(EA,Index,Dest,_),\n   !moved_label(EA,Index,_,_),\n   got_reference(Dest,_),\n   !tls_index(Dest,_),\n   !tls_descriptor(Dest,_),\n   !relocation(Dest,\"TPOFF64\",_,_,_,_,_),\n   !relocation(Dest,\"TLS_TPOFF\",_,_,_,_,_).\nin file x86_64_symbolization.dl [36:1-44:45]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;arch/x86_64_symbolization.dl [36:1-44:45];symbolic_operand_attribute(EA,Index,\\\"GOT\\\") :- \\n   symbolic_operand(EA,Index,Dest,_),\\n   !moved_label(EA,Index,_,_),\\n   got_reference(Dest,_),\\n   !tls_index(Dest,_),\\n   !tls_descriptor(Dest,_),\\n   !relocation(Dest,\\\"TPOFF64\\\",_,_,_,_,_),\\n   !relocation(Dest,\\\"TLS_TPOFF\\\",_,_,_,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY got_reference)))
         (FOR_IN t0 symbolic_operand           (IF (AND (AND (AND (AND (AND (NOT (EXISTS relocation ((TUPLE t0 2) (STRING "TLS_TPOFF") UNDEF UNDEF UNDEF UNDEF UNDEF))) (EXISTS got_reference ((TUPLE t0 2) UNDEF))) (NOT (EXISTS tls_index ((TUPLE t0 2) UNDEF)))) (NOT (EXISTS tls_descriptor ((TUPLE t0 2) UNDEF)))) (NOT (EXISTS moved_label ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS relocation ((TUPLE t0 2) (STRING "TPOFF64") UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "GOT")) symbolic_operand_attribute)
          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"PCREL\") :- \n   symbolic_operand(EA,Index,Dest,_),\n   !moved_label(EA,Index,_,_),\n   got_reference(Dest,_),\n   !tls_index(Dest,_),\n   !tls_descriptor(Dest,_),\n   !relocation(Dest,\"TPOFF64\",_,_,_,_,_),\n   !relocation(Dest,\"TLS_TPOFF\",_,_,_,_,_).\nin file x86_64_symbolization.dl [36:1-44:45]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;arch/x86_64_symbolization.dl [36:1-44:45];symbolic_operand_attribute(EA,Index,\\\"PCREL\\\") :- \\n   symbolic_operand(EA,Index,Dest,_),\\n   !moved_label(EA,Index,_,_),\\n   got_reference(Dest,_),\\n   !tls_index(Dest,_),\\n   !tls_descriptor(Dest,_),\\n   !relocation(Dest,\\\"TPOFF64\\\",_,_,_,_,_),\\n   !relocation(Dest,\\\"TLS_TPOFF\\\",_,_,_,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_operand)) (NOT (ISEMPTY got_reference)))
         (FOR_IN t0 symbolic_operand           (IF (AND (AND (AND (AND (AND (NOT (EXISTS relocation ((TUPLE t0 2) (STRING "TLS_TPOFF") UNDEF UNDEF UNDEF UNDEF UNDEF))) (EXISTS got_reference ((TUPLE t0 2) UNDEF))) (NOT (EXISTS tls_index ((TUPLE t0 2) UNDEF)))) (NOT (EXISTS tls_descriptor ((TUPLE t0 2) UNDEF)))) (NOT (EXISTS moved_label ((TUPLE t0 0) (TUPLE t0 1) UNDEF UNDEF)))) (NOT (EXISTS relocation ((TUPLE t0 2) (STRING "TPOFF64") UNDEF UNDEF UNDEF UNDEF UNDEF))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "PCREL")) symbolic_operand_attribute)
          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"TLSLD\") :- \n   tls_local_dynamic(EA),\n   symbolic_operand_candidate(EA,Index,Dest,_),\n   relocation(Dest,\"DTPMOD64\",_,_,_,_,_).\nin file tls.dl [665:1-674:7]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [665:1-674:7];symbolic_operand_attribute(EA,Index,\\\"TLSLD\\\") :- \\n   tls_local_dynamic(EA),\\n   symbolic_operand_candidate(EA,Index,Dest,_),\\n   relocation(Dest,\\\"DTPMOD64\\\",_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY tls_local_dynamic))) (NOT (ISEMPTY symbolic_operand_candidate)))
         (FOR_IN t0 tls_local_dynamic           (FOR t1 symbolic_operand_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS relocation ((TUPLE t1 2) (STRING "DTPMOD64") UNDEF UNDEF UNDEF UNDEF UNDEF))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "TLSLD")) symbolic_operand_attribute)
           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"TLSLDM\") :- \n   tls_local_dynamic(EA),\n   symbolic_operand_candidate(EA,Index,Dest,_),\n   relocation(Dest,\"TLS_DTPMOD32\",_,_,_,_,_).\nin file tls.dl [665:1-674:7]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [665:1-674:7];symbolic_operand_attribute(EA,Index,\\\"TLSLDM\\\") :- \\n   tls_local_dynamic(EA),\\n   symbolic_operand_candidate(EA,Index,Dest,_),\\n   relocation(Dest,\\\"TLS_DTPMOD32\\\",_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY tls_local_dynamic))) (NOT (ISEMPTY symbolic_operand_candidate)))
         (FOR_IN t0 tls_local_dynamic           (FOR t1 symbolic_operand_candidate (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS relocation ((TUPLE t1 2) (STRING "TLS_DTPMOD32") UNDEF UNDEF UNDEF UNDEF UNDEF))
            (INSERT ((TUPLE t0 0) (TUPLE t1 1) (STRING "TLSLDM")) symbolic_operand_attribute)
           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"PLT\") :- \n   instruction_immediate_offset(EA,Index,Offset,_),\n   instruction_has_relocation(EA, _tmp_124),\n   relocation( _tmp_124,\"PLT32\",_,_,_,_,_),\n    _tmp_124 = (EA+Offset).\nin file x86_64_symbolization.dl [31:1-34:45]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;arch/x86_64_symbolization.dl [31:1-34:45];symbolic_operand_attribute(EA,Index,\\\"PLT\\\") :- \\n   instruction_immediate_offset(EA,Index,Offset,_),\\n   instruction_has_relocation(EA, _tmp_124),\\n   relocation( _tmp_124,\\\"PLT32\\\",_,_,_,_,_),\\n    _tmp_124 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY instruction_has_relocation)))
         (FOR_IN t0 instruction_immediate_offset           (INDEXED_IF_EXISTS t1 instruction_has_relocation (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))) (EXISTS relocation ((TUPLE t1 1) (STRING "PLT32") UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "PLT")) symbolic_operand_attribute)
))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"GOT\") :- \n   instruction_displacement_offset(EA,Index,Offset,_),\n   symbolic_expr_from_relocation( _tmp_125,_,_,_,_),\n   relocation( _tmp_125,\"GOTPCRELX\",_,_,_,_,_),\n    _tmp_125 = (EA+Offset).\nin file x86_64_symbolization.dl [46:1-53:7]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;arch/x86_64_symbolization.dl [46:1-53:7];symbolic_operand_attribute(EA,Index,\\\"GOT\\\") :- \\n   instruction_displacement_offset(EA,Index,Offset,_),\\n   symbolic_expr_from_relocation( _tmp_125,_,_,_,_),\\n   relocation( _tmp_125,\\\"GOTPCRELX\\\",_,_,_,_,_),\\n    _tmp_125 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY symbolic_expr_from_relocation)))
         (FOR_IN t0 instruction_displacement_offset           (INDEXED_IF_EXISTS t1 symbolic_expr_from_relocation (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))) (EXISTS relocation ((TUPLE t1 0) (STRING "GOTPCRELX") UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "GOT")) symbolic_operand_attribute)
))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"GOT\") :- \n   instruction_displacement_offset(EA,Index,Offset,_),\n   symbolic_expr_from_relocation( _tmp_126,_,_,_,_),\n   relocation( _tmp_126,\"REX_GOTPCRELX\",_,_,_,_,_),\n    _tmp_126 = (EA+Offset).\nin file x86_64_symbolization.dl [46:1-53:7]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;arch/x86_64_symbolization.dl [46:1-53:7];symbolic_operand_attribute(EA,Index,\\\"GOT\\\") :- \\n   instruction_displacement_offset(EA,Index,Offset,_),\\n   symbolic_expr_from_relocation( _tmp_126,_,_,_,_),\\n   relocation( _tmp_126,\\\"REX_GOTPCRELX\\\",_,_,_,_,_),\\n    _tmp_126 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY symbolic_expr_from_relocation)))
         (FOR_IN t0 instruction_displacement_offset           (INDEXED_IF_EXISTS t1 symbolic_expr_from_relocation (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))) (EXISTS relocation ((TUPLE t1 0) (STRING "REX_GOTPCRELX") UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "GOT")) symbolic_operand_attribute)
))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"PCREL\") :- \n   instruction_displacement_offset(EA,Index,Offset,_),\n   symbolic_expr_from_relocation( _tmp_127,_,_,_,_),\n   relocation( _tmp_127,\"GOTPCRELX\",_,_,_,_,_),\n    _tmp_127 = (EA+Offset).\nin file x86_64_symbolization.dl [46:1-53:7]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;arch/x86_64_symbolization.dl [46:1-53:7];symbolic_operand_attribute(EA,Index,\\\"PCREL\\\") :- \\n   instruction_displacement_offset(EA,Index,Offset,_),\\n   symbolic_expr_from_relocation( _tmp_127,_,_,_,_),\\n   relocation( _tmp_127,\\\"GOTPCRELX\\\",_,_,_,_,_),\\n    _tmp_127 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY symbolic_expr_from_relocation)))
         (FOR_IN t0 instruction_displacement_offset           (INDEXED_IF_EXISTS t1 symbolic_expr_from_relocation (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))) (EXISTS relocation ((TUPLE t1 0) (STRING "GOTPCRELX") UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "PCREL")) symbolic_operand_attribute)
))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"PCREL\") :- \n   instruction_displacement_offset(EA,Index,Offset,_),\n   symbolic_expr_from_relocation( _tmp_128,_,_,_,_),\n   relocation( _tmp_128,\"REX_GOTPCRELX\",_,_,_,_,_),\n    _tmp_128 = (EA+Offset).\nin file x86_64_symbolization.dl [46:1-53:7]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;arch/x86_64_symbolization.dl [46:1-53:7];symbolic_operand_attribute(EA,Index,\\\"PCREL\\\") :- \\n   instruction_displacement_offset(EA,Index,Offset,_),\\n   symbolic_expr_from_relocation( _tmp_128,_,_,_,_),\\n   relocation( _tmp_128,\\\"REX_GOTPCRELX\\\",_,_,_,_,_),\\n    _tmp_128 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY symbolic_expr_from_relocation)))
         (FOR_IN t0 instruction_displacement_offset           (INDEXED_IF_EXISTS t1 symbolic_expr_from_relocation (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2)))) (EXISTS relocation ((TUPLE t1 0) (STRING "REX_GOTPCRELX") UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "PCREL")) symbolic_operand_attribute)
))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,Attr) :- \n   binary_type(\"REL\"),\n   ISA = \"X64\",\n   instruction_displacement_offset(EA,Index,Offset,_),\n   tls_operand_attribute(Type,Attr),\n   elf_relocation_size(ISA,Type,_),\n   relocation( _tmp_123,Type,Symbol,_,_,_,_),\n   symbol(_,_,_,_,_,_,_,_,Symbol),\n    _tmp_123 = (EA+Offset).\nin file tls.dl [584:1-592:43]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [584:1-592:43];symbolic_operand_attribute(EA,Index,Attr) :- \\n   binary_type(\\\"REL\\\"),\\n   ISA = \\\"X64\\\",\\n   instruction_displacement_offset(EA,Index,Offset,_),\\n   tls_operand_attribute(Type,Attr),\\n   elf_relocation_size(ISA,Type,_),\\n   relocation( _tmp_123,Type,Symbol,_,_,_,_),\\n   symbol(_,_,_,_,_,_,_,_,Symbol),\\n    _tmp_123 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY tls_operand_attribute))) (NOT (ISEMPTY elf_relocation_size))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY relocation))) (EXISTS binary_type ((STRING "REL"))))
         (FOR_IN t0 instruction_displacement_offset           (FOR_IN t1 tls_operand_attribute            (IF (EXISTS elf_relocation_size ((STRING "X64") (TUPLE t1 0) UNDEF))
            (INDEXED_IF_EXISTS t2 relocation (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t0 2))) (= (TUPLE t2 1) (TUPLE t1 0))) (EXISTS symbol (UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF (TUPLE t2 2)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 1)) symbolic_operand_attribute)
)           ))
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"GOT\") :- \n   binary_format(\"ELF\"),\n   symbolic_operand_candidate(EA,Index,Dest,_),\n   relocation(Dest,\"TPOFF64\",_,_,_,_,_).\nin file tls.dl [679:1-692:7]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [679:1-692:7];symbolic_operand_attribute(EA,Index,\\\"GOT\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   symbolic_operand_candidate(EA,Index,Dest,_),\\n   relocation(Dest,\\\"TPOFF64\\\",_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY symbolic_operand_candidate)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 symbolic_operand_candidate           (IF (EXISTS relocation ((TUPLE t0 2) (STRING "TPOFF64") UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "GOT")) symbolic_operand_attribute)
          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,Index,\"TPOFF\") :- \n   binary_format(\"ELF\"),\n   symbolic_operand_candidate(EA,Index,Dest,_),\n   relocation(Dest,\"TPOFF64\",_,_,_,_,_).\nin file tls.dl [679:1-692:7]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [679:1-692:7];symbolic_operand_attribute(EA,Index,\\\"TPOFF\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   symbolic_operand_candidate(EA,Index,Dest,_),\\n   relocation(Dest,\\\"TPOFF64\\\",_,_,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY symbolic_operand_candidate)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 symbolic_operand_candidate           (IF (EXISTS relocation ((TUPLE t0 2) (STRING "TPOFF64") UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "TPOFF")) symbolic_operand_attribute)
          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(Load,1,\"TLSDESC\") :- \n   +disconnected2(),\n   tls_descriptor(Desc,_),\n   pc_relative_operand(Load,_,Desc),\n   indirect_call(EA),\n   const_value_reg_used(EA,Load,_,_,_).\nin file tls.dl [711:1-722:25]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [711:1-722:25];symbolic_operand_attribute(Load,1,\\\"TLSDESC\\\") :- \\n   +disconnected2(),\\n   tls_descriptor(Desc,_),\\n   pc_relative_operand(Load,_,Desc),\\n   indirect_call(EA),\\n   const_value_reg_used(EA,Load,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY +disconnected2)) (NOT (ISEMPTY indirect_call))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY const_value_reg_used))) (NOT (ISEMPTY tls_descriptor)))
         (FOR_IN t0 tls_descriptor           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (IF_EXISTS t2 indirect_call (EXISTS const_value_reg_used ((TUPLE t2 0) (TUPLE t1 0) UNDEF UNDEF UNDEF)) 
            (INSERT ((TUPLE t1 0) (UNSIGNED 1) (STRING "TLSDESC")) symbolic_operand_attribute)
)))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(Load,1,\"TLSDESC\") :- \n   +disconnected2(),\n   tls_descriptor(Desc,_),\n   got_relative_operand(Load,_,Desc),\n   indirect_call(EA),\n   const_value_reg_used(EA,Load,_,_,_).\nin file tls.dl [711:1-722:25]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [711:1-722:25];symbolic_operand_attribute(Load,1,\\\"TLSDESC\\\") :- \\n   +disconnected2(),\\n   tls_descriptor(Desc,_),\\n   got_relative_operand(Load,_,Desc),\\n   indirect_call(EA),\\n   const_value_reg_used(EA,Load,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY +disconnected2)) (NOT (ISEMPTY indirect_call))) (NOT (ISEMPTY got_relative_operand))) (NOT (ISEMPTY const_value_reg_used))) (NOT (ISEMPTY tls_descriptor)))
         (FOR_IN t0 tls_descriptor           (FOR t1 got_relative_operand (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (IF_EXISTS t2 indirect_call (EXISTS const_value_reg_used ((TUPLE t2 0) (TUPLE t1 0) UNDEF UNDEF UNDEF)) 
            (INSERT ((TUPLE t1 0) (UNSIGNED 1) (STRING "TLSDESC")) symbolic_operand_attribute)
)))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,1,\"TLSCALL\") :- \n   +disconnected2(),\n   tls_descriptor(Desc,_),\n   pc_relative_operand(Load,_,Desc),\n   indirect_call(EA),\n   const_value_reg_used(EA,Load,_,_,_).\nin file tls.dl [711:1-722:25]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [711:1-722:25];symbolic_operand_attribute(EA,1,\\\"TLSCALL\\\") :- \\n   +disconnected2(),\\n   tls_descriptor(Desc,_),\\n   pc_relative_operand(Load,_,Desc),\\n   indirect_call(EA),\\n   const_value_reg_used(EA,Load,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY +disconnected2)) (NOT (ISEMPTY indirect_call))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY const_value_reg_used))) (NOT (ISEMPTY tls_descriptor)))
         (FOR_IN t0 tls_descriptor           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR_IN t2 indirect_call             (IF (EXISTS const_value_reg_used ((TUPLE t2 0) (TUPLE t1 0) UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t2 0) (UNSIGNED 1) (STRING "TLSCALL")) symbolic_operand_attribute)
            ))
))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_attribute(EA,1,\"TLSCALL\") :- \n   +disconnected2(),\n   tls_descriptor(Desc,_),\n   got_relative_operand(Load,_,Desc),\n   indirect_call(EA),\n   const_value_reg_used(EA,Load,_,_,_).\nin file tls.dl [711:1-722:25]" 
      (TIMER_ON symbolic_operand_attribute "@t-nonrecursive-rule;symbolic_operand_attribute;tls.dl [711:1-722:25];symbolic_operand_attribute(EA,1,\\\"TLSCALL\\\") :- \\n   +disconnected2(),\\n   tls_descriptor(Desc,_),\\n   got_relative_operand(Load,_,Desc),\\n   indirect_call(EA),\\n   const_value_reg_used(EA,Load,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY +disconnected2)) (NOT (ISEMPTY indirect_call))) (NOT (ISEMPTY got_relative_operand))) (NOT (ISEMPTY const_value_reg_used))) (NOT (ISEMPTY tls_descriptor)))
         (FOR_IN t0 tls_descriptor           (FOR t1 got_relative_operand (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (FOR_IN t2 indirect_call             (IF (EXISTS const_value_reg_used ((TUPLE t2 0) (TUPLE t1 0) UNDEF UNDEF UNDEF))
             (INSERT ((TUPLE t2 0) (UNSIGNED 1) (STRING "TLSCALL")) symbolic_operand_attribute)
            ))
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR +disconnected2)
     (CLEAR const_value_reg_used)
     (CLEAR elf_relocation_size)
     (CLEAR got_reference)
     (CLEAR instruction_has_relocation)
     (CLEAR plt_block)
     (CLEAR symbolic_operand_candidate)
     (CLEAR tls_descriptor)
     (CLEAR tls_global_dynamic)
     (CLEAR tls_index)
     (CLEAR tls_local_dynamic)
     (CLEAR tls_operand_attribute)
     (CLEAR tls_relative_operand)
 ) )  )
  (SUBROUTINE symbolic_operand_candidate
(STMTS (STMTS     (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-relation;symbolic_operand_candidate;symbolization.dl [180:7-180:33];"
(STMTS      (DEBUG 
 "symbolic_operand_candidate(EA,Index,Dest,\"data\") :- \n   tls_relative_operand(EA,Index,Dest,_).\nin file tls.dl [703:1-704:43]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;tls.dl [703:1-704:43];symbolic_operand_candidate(EA,Index,Dest,\\\"data\\\") :- \\n   tls_relative_operand(EA,Index,Dest,_).;"
(QUERY
        (IF (NOT (ISEMPTY tls_relative_operand))
         (FOR_IN t0 tls_relative_operand           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (STRING "data")) symbolic_operand_candidate)
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Index,Dest,\"data\") :- \n   got_relative_operand(EA,Index,Dest).\nin file symbolization.dl [124:1-125:41]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;binary/elf/symbolization.dl [124:1-125:41];symbolic_operand_candidate(EA,Index,Dest,\\\"data\\\") :- \\n   got_relative_operand(EA,Index,Dest).;"
(QUERY
        (IF (NOT (ISEMPTY got_relative_operand))
         (FOR_IN t0 got_relative_operand           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (STRING "data")) symbolic_operand_candidate)
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,1,(Start+Offset),\"data\") :- \n   tls_segment(Start,_,_),\n   tls_descriptor(Desc,Offset),\n   pc_relative_operand(Load,_,Desc),\n   indirect_call(EA),\n   const_value_reg_used(EA,Load,_,_,_).\nin file tls.dl [711:1-722:25]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;tls.dl [711:1-722:25];symbolic_operand_candidate(EA,1,(Start+Offset),\\\"data\\\") :- \\n   tls_segment(Start,_,_),\\n   tls_descriptor(Desc,Offset),\\n   pc_relative_operand(Load,_,Desc),\\n   indirect_call(EA),\\n   const_value_reg_used(EA,Load,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY const_value_reg_used)) (NOT (ISEMPTY tls_segment))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY indirect_call))) (NOT (ISEMPTY tls_descriptor)))
         (FOR_IN t0 tls_segment           (FOR_IN t1 tls_descriptor            (FOR t2 pc_relative_operand (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
            (FOR_IN t3 indirect_call              (IF (EXISTS const_value_reg_used ((TUPLE t3 0) (TUPLE t2 0) UNDEF UNDEF UNDEF))
              (INSERT ((TUPLE t3 0) (UNSIGNED 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1)) (STRING "data")) symbolic_operand_candidate)
             ))
))
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,1,(Start+Offset),\"data\") :- \n   tls_segment(Start,_,_),\n   tls_descriptor(Desc,Offset),\n   got_relative_operand(Load,_,Desc),\n   indirect_call(EA),\n   const_value_reg_used(EA,Load,_,_,_).\nin file tls.dl [711:1-722:25]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;tls.dl [711:1-722:25];symbolic_operand_candidate(EA,1,(Start+Offset),\\\"data\\\") :- \\n   tls_segment(Start,_,_),\\n   tls_descriptor(Desc,Offset),\\n   got_relative_operand(Load,_,Desc),\\n   indirect_call(EA),\\n   const_value_reg_used(EA,Load,_,_,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY const_value_reg_used)) (NOT (ISEMPTY tls_segment))) (NOT (ISEMPTY got_relative_operand))) (NOT (ISEMPTY indirect_call))) (NOT (ISEMPTY tls_descriptor)))
         (FOR_IN t0 tls_segment           (FOR_IN t1 tls_descriptor            (FOR t2 got_relative_operand (INDEX  (= (TUPLE t2 2) (TUPLE t1 0)))
            (FOR_IN t3 indirect_call              (IF (EXISTS const_value_reg_used ((TUPLE t3 0) (TUPLE t2 0) UNDEF UNDEF UNDEF))
              (INSERT ((TUPLE t3 0) (UNSIGNED 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 1)) (STRING "data")) symbolic_operand_candidate)
             ))
))
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,ImageBase,\"data\") :- \n   code_in_block(EA,_),\n   base_address(ImageBase),\n   pc_relative_operand(EA,Op_index,ImageBase).\nin file symbolization.dl [157:1-161:22]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;binary/pe/symbolization.dl [157:1-161:22];symbolic_operand_candidate(EA,Op_index,ImageBase,\\\"data\\\") :- \\n   code_in_block(EA,_),\\n   base_address(ImageBase),\\n   pc_relative_operand(EA,Op_index,ImageBase).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY pc_relative_operand)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY base_address)))
         (FOR_IN t0 code_in_block           (FOR_IN t1 base_address            (FOR t2 pc_relative_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 2) (TUPLE t1 0)))
            (INSERT ((TUPLE t0 0) (TUPLE t2 1) (TUPLE t1 0) (STRING "data")) symbolic_operand_candidate)
))
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,Dest,\"data\") :- \n   code_in_block(EA,_),\n   instruction_get_op(EA,Op_index,Op),\n   direct_call(EA,Dest),\n   op_immediate(Op,_),\n   arch.call(EA,Op_index),\n   data_segment(Begin,End),\n   Dest >= Begin,\n   Dest <= End.\nin file symbolization.dl [185:1-213:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [185:1-213:7];symbolic_operand_candidate(EA,Op_index,Dest,\\\"data\\\") :- \\n   code_in_block(EA,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   direct_call(EA,Dest),\\n   op_immediate(Op,_),\\n   arch.call(EA,Op_index),\\n   data_segment(Begin,End),\\n   Dest >= Begin,\\n   Dest <= End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY arch.call))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (EXISTS arch.call ((TUPLE t0 0) (TUPLE t1 1))) (EXISTS op_immediate ((TUPLE t1 2) UNDEF)))
            (FOR t2 direct_call (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (TUPLE t2 1)  (TUPLE t3 0)) (CONSTRAINT <= (TUPLE t2 1)  (TUPLE t3 1))) 
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 1) (STRING "data")) symbolic_operand_candidate)
))           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,Dest,\"data\") :- \n   code_in_block(EA,_),\n   instruction_get_op(EA,Op_index,_),\n   pc_relative_operand(EA,Op_index,Dest),\n   data_segment(Begin,End),\n   Dest >= Begin,\n   Dest <= End.\nin file symbolization.dl [185:1-213:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [185:1-213:7];symbolic_operand_candidate(EA,Op_index,Dest,\\\"data\\\") :- \\n   code_in_block(EA,_),\\n   instruction_get_op(EA,Op_index,_),\\n   pc_relative_operand(EA,Op_index,Dest),\\n   data_segment(Begin,End),\\n   Dest >= Begin,\\n   Dest <= End.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 pc_relative_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
            (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (TUPLE t2 2)  (TUPLE t3 0)) (CONSTRAINT <= (TUPLE t2 2)  (TUPLE t3 1))) 
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 2) (STRING "data")) symbolic_operand_candidate)
))))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,as((as(SymbolAddr, number)+Addend), address),\"data\") :- \n   !binary_type(\"EXEC\"),\n   !binary_type(\"REL\"),\n   code_in_block(EA,_),\n   instruction_immediate_offset(EA,Op_index,Offset,_),\n   relocation( _tmp_130,_,Symbol,Addend,_,_,_),\n   symbol(SymbolAddr,_,_,_,_,_,_,_,Symbol),\n   data_segment(Begin,End),\n   as((as(SymbolAddr, number)+Addend), address) >= Begin,\n   as((as(SymbolAddr, number)+Addend), address) <= End,\n    _tmp_130 = (EA+Offset).\nin file symbolization.dl [241:1-260:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [241:1-260:7];symbolic_operand_candidate(EA,Op_index,as((as(SymbolAddr, number)+Addend), address),\\\"data\\\") :- \\n   !binary_type(\\\"EXEC\\\"),\\n   !binary_type(\\\"REL\\\"),\\n   code_in_block(EA,_),\\n   instruction_immediate_offset(EA,Op_index,Offset,_),\\n   relocation( _tmp_130,_,Symbol,Addend,_,_,_),\\n   symbol(SymbolAddr,_,_,_,_,_,_,_,Symbol),\\n   data_segment(Begin,End),\\n   as((as(SymbolAddr, number)+Addend), address) >= Begin,\\n   as((as(SymbolAddr, number)+Addend), address) <= End,\\n    _tmp_130 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY code_in_block))) (NOT (EXISTS binary_type ((STRING "EXEC"))))) (NOT (EXISTS binary_type ((STRING "REL")))))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 relocation (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2))))
            (FOR t3 symbol (INDEX  (= (TUPLE t3 8) (TUPLE t2 2)))
             (IF_EXISTS t4 data_segment (AND (CONSTRAINT >= (INTRINSIC + (TUPLE t3 0) (TUPLE t2 3))  (TUPLE t4 0)) (CONSTRAINT <= (INTRINSIC + (TUPLE t3 0) (TUPLE t2 3))  (TUPLE t4 1))) 
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (INTRINSIC + (TUPLE t3 0) (TUPLE t2 3)) (STRING "data")) symbolic_operand_candidate)
)))))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,as((as(SymbolAddr, number)+Addend), address),\"data\") :- \n   !binary_type(\"EXEC\"),\n   !binary_type(\"REL\"),\n   code_in_block(EA,_),\n   instruction_displacement_offset(EA,Op_index,Offset,_),\n   relocation( _tmp_132,_,Symbol,Addend,_,_,_),\n   symbol(SymbolAddr,_,_,_,_,_,_,_,Symbol),\n   data_segment(Begin,End),\n   as((as(SymbolAddr, number)+Addend), address) >= Begin,\n   as((as(SymbolAddr, number)+Addend), address) <= End,\n    _tmp_132 = (EA+Offset).\nin file symbolization.dl [241:1-260:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [241:1-260:7];symbolic_operand_candidate(EA,Op_index,as((as(SymbolAddr, number)+Addend), address),\\\"data\\\") :- \\n   !binary_type(\\\"EXEC\\\"),\\n   !binary_type(\\\"REL\\\"),\\n   code_in_block(EA,_),\\n   instruction_displacement_offset(EA,Op_index,Offset,_),\\n   relocation( _tmp_132,_,Symbol,Addend,_,_,_),\\n   symbol(SymbolAddr,_,_,_,_,_,_,_,Symbol),\\n   data_segment(Begin,End),\\n   as((as(SymbolAddr, number)+Addend), address) >= Begin,\\n   as((as(SymbolAddr, number)+Addend), address) <= End,\\n    _tmp_132 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY symbol)) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY code_in_block))) (NOT (EXISTS binary_type ((STRING "EXEC"))))) (NOT (EXISTS binary_type ((STRING "REL")))))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 relocation (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2))))
            (FOR t3 symbol (INDEX  (= (TUPLE t3 8) (TUPLE t2 2)))
             (IF_EXISTS t4 data_segment (AND (CONSTRAINT >= (INTRINSIC + (TUPLE t3 0) (TUPLE t2 3))  (TUPLE t4 0)) (CONSTRAINT <= (INTRINSIC + (TUPLE t3 0) (TUPLE t2 3))  (TUPLE t4 1))) 
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (INTRINSIC + (TUPLE t3 0) (TUPLE t2 3)) (STRING "data")) symbolic_operand_candidate)
)))))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Index,as(Value, address),\"data\") :- \n   binary_format(\"PE\"),\n   code_in_block(EA,_),\n   instruction_immediate_offset(EA,Index,Offset,_),\n   instruction_get_op(EA,Index,Op),\n   op_immediate(Op,Value),\n   relocation( _tmp_134,_,_,_,_,_,_),\n   data_segment(Begin,End),\n   as(Value, address) >= Begin,\n   as(Value, address) <= End,\n    _tmp_134 = (EA+Offset).\nin file symbolization.dl [263:1-284:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [263:1-284:7];symbolic_operand_candidate(EA,Index,as(Value, address),\\\"data\\\") :- \\n   binary_format(\\\"PE\\\"),\\n   code_in_block(EA,_),\\n   instruction_immediate_offset(EA,Index,Offset,_),\\n   instruction_get_op(EA,Index,Op),\\n   op_immediate(Op,Value),\\n   relocation( _tmp_134,_,_,_,_,_,_),\\n   data_segment(Begin,End),\\n   as(Value, address) >= Begin,\\n   as(Value, address) <= End,\\n    _tmp_134 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY relocation))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 op_immediate (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)))
              (IF_EXISTS t4 data_segment (AND (CONSTRAINT >= (TUPLE t3 1)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t3 1)  (TUPLE t4 1))) 
               (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t3 1) (STRING "data")) symbolic_operand_candidate)
)))           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Index,as(Value, address),\"data\") :- \n   binary_format(\"PE\"),\n   code_in_block(EA,_),\n   instruction_displacement_offset(EA,Index,Offset,_),\n   instruction_get_op(EA,Index,Op),\n   op_indirect(Op,_,_,_,1,Value,_),\n   relocation( _tmp_136,_,_,_,_,_,_),\n   data_segment(Begin,End),\n   as(Value, address) >= Begin,\n   as(Value, address) <= End,\n    _tmp_136 = (EA+Offset).\nin file symbolization.dl [263:1-284:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [263:1-284:7];symbolic_operand_candidate(EA,Index,as(Value, address),\\\"data\\\") :- \\n   binary_format(\\\"PE\\\"),\\n   code_in_block(EA,_),\\n   instruction_displacement_offset(EA,Index,Offset,_),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect(Op,_,_,_,1,Value,_),\\n   relocation( _tmp_136,_,_,_,_,_,_),\\n   data_segment(Begin,End),\\n   as(Value, address) >= Begin,\\n   as(Value, address) <= End,\\n    _tmp_136 = (EA+Offset).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY op_indirect))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY relocation))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 op_indirect (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 4) (NUMBER 1)))
              (IF_EXISTS t4 data_segment (AND (CONSTRAINT >= (TUPLE t3 5)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t3 5)  (TUPLE t4 1))) 
               (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t3 5) (STRING "data")) symbolic_operand_candidate)
)))           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,Dest,\"code\") :- \n   code_in_block(EA,_),\n   instruction_get_op(EA,Op_index,Op),\n   direct_call(EA,Dest),\n   op_immediate(Op,_),\n   arch.call(EA,Op_index),\n   code_in_block(Dest,_).\nin file symbolization.dl [185:1-213:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [185:1-213:7];symbolic_operand_candidate(EA,Op_index,Dest,\\\"code\\\") :- \\n   code_in_block(EA,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   direct_call(EA,Dest),\\n   op_immediate(Op,_),\\n   arch.call(EA,Op_index),\\n   code_in_block(Dest,_).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY instruction_get_op)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY direct_call))) (NOT (ISEMPTY arch.call))) (NOT (ISEMPTY op_immediate)))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (EXISTS arch.call ((TUPLE t0 0) (TUPLE t1 1))) (EXISTS op_immediate ((TUPLE t1 2) UNDEF)))
            (FOR t2 direct_call (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
             (IF (EXISTS code_in_block ((TUPLE t2 1) UNDEF))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 1) (STRING "code")) symbolic_operand_candidate)
             ))           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,Dest,\"data\") :- \n   code_in_block(EA,_),\n   instruction_get_op(EA,Op_index,Op),\n   direct_jump(EA,Dest),\n   op_immediate(Op,_),\n   !instruction_has_loop_prefix(EA),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.jump_operation_op_index(Operation,Op_index),\n   data_segment(Begin,End),\n   Dest >= Begin,\n   Dest <= End.\nin file symbolization.dl [185:1-213:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [185:1-213:7];symbolic_operand_candidate(EA,Op_index,Dest,\\\"data\\\") :- \\n   code_in_block(EA,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   direct_jump(EA,Dest),\\n   op_immediate(Op,_),\\n   !instruction_has_loop_prefix(EA),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.jump_operation_op_index(Operation,Op_index),\\n   data_segment(Begin,End),\\n   Dest >= Begin,\\n   Dest <= End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY data_segment)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY direct_jump))) (NOT (ISEMPTY arch.jump_operation_op_index))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 code_in_block           (IF (NOT (EXISTS instruction_has_loop_prefix ((TUPLE t0 0))))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (EXISTS op_immediate ((TUPLE t1 2) UNDEF))
             (FOR t2 direct_jump (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
              (INDEXED_IF_EXISTS t3 instruction (INDEX  (= (TUPLE t3 0) (TUPLE t0 0))) (EXISTS arch.jump_operation_op_index ((TUPLE t3 3) (TUPLE t1 1)))
               (IF_EXISTS t4 data_segment (AND (CONSTRAINT >= (TUPLE t2 1)  (TUPLE t4 0)) (CONSTRAINT <= (TUPLE t2 1)  (TUPLE t4 1))) 
                (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 1) (STRING "data")) symbolic_operand_candidate)
)))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,Dest,\"code\") :- \n   code_in_block(EA,_),\n   instruction_get_op(EA,Op_index,_),\n   pc_relative_operand(EA,Op_index,Dest),\n   code_in_block(Dest,_).\nin file symbolization.dl [185:1-213:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [185:1-213:7];symbolic_operand_candidate(EA,Op_index,Dest,\\\"code\\\") :- \\n   code_in_block(EA,_),\\n   instruction_get_op(EA,Op_index,_),\\n   pc_relative_operand(EA,Op_index,Dest),\\n   code_in_block(Dest,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY instruction_get_op)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY pc_relative_operand)))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 pc_relative_operand (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
            (IF (EXISTS code_in_block ((TUPLE t2 2) UNDEF))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 2) (STRING "code")) symbolic_operand_candidate)
            ))))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,as((as(SymbolAddr, number)+Addend), address),\"code\") :- \n   !binary_type(\"EXEC\"),\n   !binary_type(\"REL\"),\n   code_in_block(EA,_),\n   instruction_immediate_offset(EA,Op_index,Offset,_),\n   relocation( _tmp_129,_,Symbol,Addend,_,_,_),\n   symbol(SymbolAddr,_,_,_,_,_,_,_,Symbol),\n   code_in_block( _tmp_326,_),\n    _tmp_129 = (EA+Offset),\n    _tmp_326 = as((as(SymbolAddr, number)+Addend), address).\nin file symbolization.dl [241:1-260:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [241:1-260:7];symbolic_operand_candidate(EA,Op_index,as((as(SymbolAddr, number)+Addend), address),\\\"code\\\") :- \\n   !binary_type(\\\"EXEC\\\"),\\n   !binary_type(\\\"REL\\\"),\\n   code_in_block(EA,_),\\n   instruction_immediate_offset(EA,Op_index,Offset,_),\\n   relocation( _tmp_129,_,Symbol,Addend,_,_,_),\\n   symbol(SymbolAddr,_,_,_,_,_,_,_,Symbol),\\n   code_in_block( _tmp_326,_),\\n    _tmp_129 = (EA+Offset),\\n    _tmp_326 = as((as(SymbolAddr, number)+Addend), address).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY instruction_immediate_offset))) (NOT (ISEMPTY symbol))) (NOT (EXISTS binary_type ((STRING "EXEC"))))) (NOT (EXISTS binary_type ((STRING "REL")))))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 relocation (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2))))
            (FOR t3 symbol (INDEX  (= (TUPLE t3 8) (TUPLE t2 2)))
             (IF (EXISTS code_in_block ((INTRINSIC + (TUPLE t3 0) (TUPLE t2 3)) UNDEF))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (INTRINSIC + (TUPLE t3 0) (TUPLE t2 3)) (STRING "code")) symbolic_operand_candidate)
             )))))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,as((as(SymbolAddr, number)+Addend), address),\"code\") :- \n   !binary_type(\"EXEC\"),\n   !binary_type(\"REL\"),\n   code_in_block(EA,_),\n   instruction_displacement_offset(EA,Op_index,Offset,_),\n   relocation( _tmp_131,_,Symbol,Addend,_,_,_),\n   symbol(SymbolAddr,_,_,_,_,_,_,_,Symbol),\n   code_in_block( _tmp_327,_),\n    _tmp_131 = (EA+Offset),\n    _tmp_327 = as((as(SymbolAddr, number)+Addend), address).\nin file symbolization.dl [241:1-260:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [241:1-260:7];symbolic_operand_candidate(EA,Op_index,as((as(SymbolAddr, number)+Addend), address),\\\"code\\\") :- \\n   !binary_type(\\\"EXEC\\\"),\\n   !binary_type(\\\"REL\\\"),\\n   code_in_block(EA,_),\\n   instruction_displacement_offset(EA,Op_index,Offset,_),\\n   relocation( _tmp_131,_,Symbol,Addend,_,_,_),\\n   symbol(SymbolAddr,_,_,_,_,_,_,_,Symbol),\\n   code_in_block( _tmp_327,_),\\n    _tmp_131 = (EA+Offset),\\n    _tmp_327 = as((as(SymbolAddr, number)+Addend), address).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY instruction_displacement_offset))) (NOT (ISEMPTY symbol))) (NOT (EXISTS binary_type ((STRING "EXEC"))))) (NOT (EXISTS binary_type ((STRING "REL")))))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 relocation (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t0 0) (TUPLE t1 2))))
            (FOR t3 symbol (INDEX  (= (TUPLE t3 8) (TUPLE t2 2)))
             (IF (EXISTS code_in_block ((INTRINSIC + (TUPLE t3 0) (TUPLE t2 3)) UNDEF))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (INTRINSIC + (TUPLE t3 0) (TUPLE t2 3)) (STRING "code")) symbolic_operand_candidate)
             )))))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Index,as(Value, address),\"code\") :- \n   binary_format(\"PE\"),\n   code_in_block(EA,_),\n   instruction_immediate_offset(EA,Index,Offset,_),\n   instruction_get_op(EA,Index,Op),\n   op_immediate(Op,Value),\n   relocation( _tmp_133,_,_,_,_,_,_),\n   code_in_block( _tmp_328,_),\n    _tmp_133 = (EA+Offset),\n    _tmp_328 = as(Value, address).\nin file symbolization.dl [263:1-284:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [263:1-284:7];symbolic_operand_candidate(EA,Index,as(Value, address),\\\"code\\\") :- \\n   binary_format(\\\"PE\\\"),\\n   code_in_block(EA,_),\\n   instruction_immediate_offset(EA,Index,Offset,_),\\n   instruction_get_op(EA,Index,Op),\\n   op_immediate(Op,Value),\\n   relocation( _tmp_133,_,_,_,_,_,_),\\n   code_in_block( _tmp_328,_),\\n    _tmp_133 = (EA+Offset),\\n    _tmp_328 = as(Value, address).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY instruction_immediate_offset))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_immediate_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 op_immediate (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)))
              (IF (EXISTS code_in_block ((TUPLE t3 1) UNDEF))
               (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t3 1) (STRING "code")) symbolic_operand_candidate)
              )))           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Index,as(Value, address),\"code\") :- \n   binary_format(\"PE\"),\n   code_in_block(EA,_),\n   instruction_displacement_offset(EA,Index,Offset,_),\n   instruction_get_op(EA,Index,Op),\n   op_indirect(Op,_,_,_,1,Value,_),\n   relocation( _tmp_135,_,_,_,_,_,_),\n   code_in_block( _tmp_329,_),\n    _tmp_135 = (EA+Offset),\n    _tmp_329 = as(Value, address).\nin file symbolization.dl [263:1-284:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [263:1-284:7];symbolic_operand_candidate(EA,Index,as(Value, address),\\\"code\\\") :- \\n   binary_format(\\\"PE\\\"),\\n   code_in_block(EA,_),\\n   instruction_displacement_offset(EA,Index,Offset,_),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect(Op,_,_,_,1,Value,_),\\n   relocation( _tmp_135,_,_,_,_,_,_),\\n   code_in_block( _tmp_329,_),\\n    _tmp_135 = (EA+Offset),\\n    _tmp_329 = as(Value, address).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY op_indirect))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY instruction_displacement_offset))) (EXISTS binary_format ((STRING "PE"))))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_displacement_offset (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (EXISTS relocation ((INTRINSIC + (TUPLE t0 0) (TUPLE t1 2)) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
            (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (FOR t3 op_indirect (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 4) (NUMBER 1)))
              (IF (EXISTS code_in_block ((TUPLE t3 5) UNDEF))
               (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t3 5) (STRING "code")) symbolic_operand_candidate)
              )))           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Index,as(Imm, address),\"code\") :- \n   code_in_block(EA,_),\n   instruction(EA,_,_,<inlined_Operation_827>,_,_,_,_,_,_),\n   <inlined_Operation_827> = \"XBEGIN\",\n   instruction_get_op(EA,Index,ImmOp),\n   op_immediate(ImmOp,Imm),\n   code_in_block( _tmp_330,_),\n    _tmp_330 = as(Imm, address).\nin file x86_64_symbolization.dl [55:1-62:17]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;arch/x86_64_symbolization.dl [55:1-62:17];symbolic_operand_candidate(EA,Index,as(Imm, address),\\\"code\\\") :- \\n   code_in_block(EA,_),\\n   instruction(EA,_,_,<inlined_Operation_827>,_,_,_,_,_,_),\\n   <inlined_Operation_827> = \\\"XBEGIN\\\",\\n   instruction_get_op(EA,Index,ImmOp),\\n   op_immediate(ImmOp,Imm),\\n   code_in_block( _tmp_330,_),\\n    _tmp_330 = as(Imm, address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY op_immediate)))
         (FOR_IN t0 code_in_block           (IF (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "XBEGIN") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 op_immediate (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (IF (EXISTS code_in_block ((TUPLE t2 1) UNDEF))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 1) (STRING "code")) symbolic_operand_candidate)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,Dest,\"code\") :- \n   code_in_block(EA,_),\n   instruction_get_op(EA,Op_index,Op),\n   direct_jump(EA,Dest),\n   op_immediate(Op,_),\n   !instruction_has_loop_prefix(EA),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.jump_operation_op_index(Operation,Op_index),\n   code_in_block(Dest,_).\nin file symbolization.dl [185:1-213:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [185:1-213:7];symbolic_operand_candidate(EA,Op_index,Dest,\\\"code\\\") :- \\n   code_in_block(EA,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   direct_jump(EA,Dest),\\n   op_immediate(Op,_),\\n   !instruction_has_loop_prefix(EA),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.jump_operation_op_index(Operation,Op_index),\\n   code_in_block(Dest,_).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY direct_jump))) (NOT (ISEMPTY arch.jump_operation_op_index)))
         (FOR_IN t0 code_in_block           (IF (NOT (EXISTS instruction_has_loop_prefix ((TUPLE t0 0))))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (EXISTS op_immediate ((TUPLE t1 2) UNDEF))
             (FOR t2 direct_jump (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
              (IF (EXISTS code_in_block ((TUPLE t2 1) UNDEF))
               (INDEXED_IF_EXISTS t3 instruction (INDEX  (= (TUPLE t3 0) (TUPLE t0 0))) (EXISTS arch.jump_operation_op_index ((TUPLE t3 3) (TUPLE t1 1)))
                (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 1) (STRING "code")) symbolic_operand_candidate)
)              ))            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,OpIndex,as(Offset, address),\"jump-table\") :- \n   indirect_jump(EA),\n   instruction_get_op(EA,OpIndex,<inlined_Op_394>),\n   op_indirect(<inlined_Op_394>,\"NONE\",\"NONE\",_,<inlined_Mult_394>,Offset,_),\n   8 = as(<inlined_Mult_394>, unsigned),\n   !address_in_data(as(Offset, address),_),\n   @functor_data_valid(as((Offset+<inlined_Mult_394>), address),8) = 1,\n   @functor_data_valid((as((Offset+<inlined_Mult_394>), address)+8),8) = 1,\n   code_in_block( _tmp_331,_),\n   code_in_block( _tmp_332,_),\n    _tmp_331 = as(@functor_data_signed(as((Offset+<inlined_Mult_394>), address),8), address),\n    _tmp_332 = as(@functor_data_signed((as((Offset+<inlined_Mult_394>), address)+8),8), address).\nin file symbolization.dl [257:1-262:17]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;binary/pe/symbolization.dl [257:1-262:17];symbolic_operand_candidate(EA,OpIndex,as(Offset, address),\\\"jump-table\\\") :- \\n   indirect_jump(EA),\\n   instruction_get_op(EA,OpIndex,<inlined_Op_394>),\\n   op_indirect(<inlined_Op_394>,\\\"NONE\\\",\\\"NONE\\\",_,<inlined_Mult_394>,Offset,_),\\n   8 = as(<inlined_Mult_394>, unsigned),\\n   !address_in_data(as(Offset, address),_),\\n   @functor_data_valid(as((Offset+<inlined_Mult_394>), address),8) = 1,\\n   @functor_data_valid((as((Offset+<inlined_Mult_394>), address)+8),8) = 1,\\n   code_in_block( _tmp_331,_),\\n   code_in_block( _tmp_332,_),\\n    _tmp_331 = as(@functor_data_signed(as((Offset+<inlined_Mult_394>), address),8), address),\\n    _tmp_332 = as(@functor_data_signed((as((Offset+<inlined_Mult_394>), address)+8),8), address).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY indirect_jump))) (NOT (ISEMPTY op_indirect)))
         (FOR_IN t0 indirect_jump           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (FOR t2 op_indirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (STRING "NONE")) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 4) (UNSIGNED 8)))
            (IF (AND (AND (AND (AND (EXISTS code_in_block ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8))) UNDEF)) (NOT (EXISTS address_in_data ((TUPLE t2 5) UNDEF)))) (EXISTS code_in_block ((USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)) (UNSIGNED 8))) UNDEF))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t2 5) (TUPLE t2 4)) (UNSIGNED 8)) (UNSIGNED 8)))  (UNSIGNED 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 5) (STRING "jump-table")) symbolic_operand_candidate)
            ))))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,as(Dest, address),\"data\") :- \n   binary_type(\"EXEC\"),\n   code_in_block(EA,_),\n   instruction_get_op(EA,Op_index,Op),\n   op_immediate(Op,Dest),\n   !direct_call(EA,_),\n   !direct_jump(EA,_),\n   data_segment(Begin,End),\n   as(Dest, address) >= Begin,\n   as(Dest, address) <= End.\nin file symbolization.dl [216:1-238:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [216:1-238:7];symbolic_operand_candidate(EA,Op_index,as(Dest, address),\\\"data\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   code_in_block(EA,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   op_immediate(Op,Dest),\\n   !direct_call(EA,_),\\n   !direct_jump(EA,_),\\n   data_segment(Begin,End),\\n   as(Dest, address) >= Begin,\\n   as(Dest, address) <= End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY op_immediate))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 code_in_block           (IF (AND (NOT (EXISTS direct_jump ((TUPLE t0 0) UNDEF))) (NOT (EXISTS direct_call ((TUPLE t0 0) UNDEF))))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 op_immediate (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (TUPLE t2 1)  (TUPLE t3 0)) (CONSTRAINT <= (TUPLE t2 1)  (TUPLE t3 1))) 
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 1) (STRING "data")) symbolic_operand_candidate)
)))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,as(Dest, address),\"data\") :- \n   binary_type(\"EXEC\"),\n   code_in_block(EA,_),\n   instruction_get_op(EA,Op_index,Op),\n   op_indirect(Op,_,_,_,_,Dest,_),\n   !pc_relative_operand(EA,Op_index,_),\n   data_segment(Begin,End),\n   as(Dest, address) >= Begin,\n   as(Dest, address) <= End.\nin file symbolization.dl [216:1-238:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [216:1-238:7];symbolic_operand_candidate(EA,Op_index,as(Dest, address),\\\"data\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   code_in_block(EA,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   op_indirect(Op,_,_,_,_,Dest,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   data_segment(Begin,End),\\n   as(Dest, address) >= Begin,\\n   as(Dest, address) <= End.;"
(QUERY
        (IF (AND (AND (AND (AND (AND (NOT (ISEMPTY code_in_block)) (NOT (ISEMPTY data_segment))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY binary_type))) (NOT (ISEMPTY op_indirect))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF)))
            (FOR t2 op_indirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (IF_EXISTS t3 data_segment (AND (CONSTRAINT >= (TUPLE t2 5)  (TUPLE t3 0)) (CONSTRAINT <= (TUPLE t2 5)  (TUPLE t3 1))) 
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 5) (STRING "data")) symbolic_operand_candidate)
))           )))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,as(Dest, address),\"code\") :- \n   binary_type(\"EXEC\"),\n   code_in_block(EA,_),\n   instruction_get_op(EA,Op_index,Op),\n   op_immediate(Op,Dest),\n   !direct_call(EA,_),\n   !direct_jump(EA,_),\n   code_in_block( _tmp_324,_),\n    _tmp_324 = as(Dest, address).\nin file symbolization.dl [216:1-238:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [216:1-238:7];symbolic_operand_candidate(EA,Op_index,as(Dest, address),\\\"code\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   code_in_block(EA,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   op_immediate(Op,Dest),\\n   !direct_call(EA,_),\\n   !direct_jump(EA,_),\\n   code_in_block( _tmp_324,_),\\n    _tmp_324 = as(Dest, address).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY binary_type)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY instruction_get_op))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 code_in_block           (IF (AND (NOT (EXISTS direct_jump ((TUPLE t0 0) UNDEF))) (NOT (EXISTS direct_call ((TUPLE t0 0) UNDEF))))
           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 op_immediate (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (IF (EXISTS code_in_block ((TUPLE t2 1) UNDEF))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 1) (STRING "code")) symbolic_operand_candidate)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_candidate(EA,Op_index,as(Dest, address),\"code\") :- \n   binary_type(\"EXEC\"),\n   code_in_block(EA,_),\n   instruction_get_op(EA,Op_index,Op),\n   op_indirect(Op,_,_,_,_,Dest,_),\n   !pc_relative_operand(EA,Op_index,_),\n   code_in_block( _tmp_325,_),\n    _tmp_325 = as(Dest, address).\nin file symbolization.dl [216:1-238:7]" 
      (TIMER_ON symbolic_operand_candidate "@t-nonrecursive-rule;symbolic_operand_candidate;symbolization.dl [216:1-238:7];symbolic_operand_candidate(EA,Op_index,as(Dest, address),\\\"code\\\") :- \\n   binary_type(\\\"EXEC\\\"),\\n   code_in_block(EA,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   op_indirect(Op,_,_,_,_,Dest,_),\\n   !pc_relative_operand(EA,Op_index,_),\\n   code_in_block( _tmp_325,_),\\n    _tmp_325 = as(Dest, address).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY binary_type)) (NOT (ISEMPTY code_in_block))) (NOT (ISEMPTY op_indirect))) (NOT (ISEMPTY instruction_get_op))) (EXISTS binary_type ((STRING "EXEC"))))
         (FOR_IN t0 code_in_block           (FOR t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) (TUPLE t1 1) UNDEF)))
            (FOR t2 op_indirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)))
             (IF (EXISTS code_in_block ((TUPLE t2 5) UNDEF))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1) (TUPLE t2 5) (STRING "code")) symbolic_operand_candidate)
             ))           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.jump_operation_op_index)
 ) )  )
  (SUBROUTINE symbolic_operand_point
(STMTS (STMTS     (TIMER_ON symbolic_operand_point "@t-nonrecursive-relation;symbolic_operand_point;symbolization.dl [181:7-181:29];"
(STMTS      (DEBUG 
 "symbolic_operand_point(EA,Index,10,\"pie code\") :- \n   !binary_type(\"EXEC\"),\n   symbolic_operand_candidate(EA,Index,_,_).\nin file symbolization.dl [290:1-292:46]" 
      (TIMER_ON symbolic_operand_point "@t-nonrecursive-rule;symbolic_operand_point;symbolization.dl [290:1-292:46];symbolic_operand_point(EA,Index,10,\\\"pie code\\\") :- \\n   !binary_type(\\\"EXEC\\\"),\\n   symbolic_operand_candidate(EA,Index,_,_).;"
(QUERY
        (IF (AND (NOT (ISEMPTY symbolic_operand_candidate)) (NOT (EXISTS binary_type ((STRING "EXEC")))))
         (FOR_IN t0 symbolic_operand_candidate           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (NUMBER 10) (STRING "pie code")) symbolic_operand_point)
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_point(EA,Imm_index,-1,\"compared to non-address\") :- \n   cmp_immediate_to_reg(EA,Reg,Imm_index,_),\n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   def_register_is_not_base_address(EA_def,Reg).\nin file symbolization.dl [294:1-297:50]" 
      (TIMER_ON symbolic_operand_point "@t-nonrecursive-rule;symbolic_operand_point;symbolization.dl [294:1-297:50];symbolic_operand_point(EA,Imm_index,-1,\\\"compared to non-address\\\") :- \\n   cmp_immediate_to_reg(EA,Reg,Imm_index,_),\\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   def_register_is_not_base_address(EA_def,Reg).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY def_register_is_not_base_address)) (NOT (ISEMPTY cmp_immediate_to_reg))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 cmp_immediate_to_reg           (INDEXED_IF_EXISTS t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 0))) (EXISTS def_register_is_not_base_address ((TUPLE t1 0) (TUPLE t0 1)))
           (INSERT ((TUPLE t0 0) (TUPLE t0 2) (NUMBER -1) (STRING "compared to non-address")) symbolic_operand_point)
))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_point(EA,Imm_index,-2,\"point to exception section\") :- \n   symbolic_operand_candidate(EA,Imm_index,Dest,_),\n   exception_section(Name),\n   loaded_section(Base,End,Name),\n   Base <= Dest,\n   Dest < End.\nin file symbolization.dl [306:1-310:30]" 
      (TIMER_ON symbolic_operand_point "@t-nonrecursive-rule;symbolic_operand_point;symbolization.dl [306:1-310:30];symbolic_operand_point(EA,Imm_index,-2,\\\"point to exception section\\\") :- \\n   symbolic_operand_candidate(EA,Imm_index,Dest,_),\\n   exception_section(Name),\\n   loaded_section(Base,End,Name),\\n   Base <= Dest,\\n   Dest < End.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY loaded_section)) (NOT (ISEMPTY symbolic_operand_candidate))) (NOT (ISEMPTY exception_section)))
         (FOR_IN t0 symbolic_operand_candidate           (FOR_IN t1 exception_section            (INDEXED_IF_EXISTS t2 loaded_section (INDEX  (= (TUPLE t2 2) (TUPLE t1 0))) (AND (AND (CONSTRAINT != (TUPLE t0 2)  (TUPLE t2 1)) (CONSTRAINT <= (TUPLE t0 2)  (TUPLE t2 1))) (CONSTRAINT <= (TUPLE t2 0)  (TUPLE t0 2)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (NUMBER -2) (STRING "point to exception section")) symbolic_operand_point)
))
)
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_point(EA,1,-1,\"result of LEA not base address\") :- \n   binary_format(\"ELF\"),\n   symbolic_operand_candidate(EA,1,_,_),\n   !pc_relative_operand(EA,_,_),\n   instruction(EA,_,_,\"LEA\",Op1,Op2,0,0,_,_),\n   op_regdirect_contains_reg(Op2,Reg_def),\n   op_indirect(Op1,_,_,_,_,_,_),\n   def_register_is_not_base_address(EA,Reg_def).\nin file symbolization.dl [321:1-328:50]" 
      (TIMER_ON symbolic_operand_point "@t-nonrecursive-rule;symbolic_operand_point;symbolization.dl [321:1-328:50];symbolic_operand_point(EA,1,-1,\\\"result of LEA not base address\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   symbolic_operand_candidate(EA,1,_,_),\\n   !pc_relative_operand(EA,_,_),\\n   instruction(EA,_,_,\\\"LEA\\\",Op1,Op2,0,0,_,_),\\n   op_regdirect_contains_reg(Op2,Reg_def),\\n   op_indirect(Op1,_,_,_,_,_,_),\\n   def_register_is_not_base_address(EA,Reg_def).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY symbolic_operand_candidate))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY op_regdirect_contains_reg))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY def_register_is_not_base_address))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 symbolic_operand_candidate (INDEX  (= (TUPLE t0 1) (UNSIGNED 1)))
          (IF (NOT (EXISTS pc_relative_operand ((TUPLE t0 0) UNDEF UNDEF)))
           (FOR t1 instruction (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 3) (STRING "LEA")) (= (TUPLE t1 6) (UNSIGNED 0)) (= (TUPLE t1 7) (UNSIGNED 0)))
            (IF (EXISTS op_indirect ((TUPLE t1 4) UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
             (INDEXED_IF_EXISTS t2 op_regdirect_contains_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 5))) (EXISTS def_register_is_not_base_address ((TUPLE t0 0) (TUPLE t2 1)))
              (INSERT ((TUPLE t0 0) (UNSIGNED 1) (NUMBER -1) (STRING "result of LEA not base address")) symbolic_operand_point)
)            ))          ))        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_point(EA,Op_index,1,\"used-for-address\") :- \n   symbolic_operand_candidate(EA,Op_index,_,_),\n   instruction_get_op(EA,Op_index,Op),\n   op_immediate(Op,_),\n   def_used_for_address(EA,_,_).\nin file symbolization.dl [339:1-343:34]" 
      (TIMER_ON symbolic_operand_point "@t-nonrecursive-rule;symbolic_operand_point;symbolization.dl [339:1-343:34];symbolic_operand_point(EA,Op_index,1,\\\"used-for-address\\\") :- \\n   symbolic_operand_candidate(EA,Op_index,_,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   op_immediate(Op,_),\\n   def_used_for_address(EA,_,_).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY symbolic_operand_candidate)) (NOT (ISEMPTY def_used_for_address))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 symbolic_operand_candidate           (IF (EXISTS def_used_for_address ((TUPLE t0 0) UNDEF UNDEF))
           (INDEXED_IF_EXISTS t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1))) (EXISTS op_immediate ((TUPLE t1 2) UNDEF))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (NUMBER 1) (STRING "used-for-address")) symbolic_operand_point)
)          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_point(EA,Imm_index,-1,\"immediate is bitmask\") :- \n   symbolic_operand_candidate(EA,Imm_index,_,_),\n   instruction_get_op(EA,Imm_index,Op),\n   op_immediate(Op,_),\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\n   arch.logic_operation(Operation).\nin file symbolization.dl [299:1-304:37]" 
      (TIMER_ON symbolic_operand_point "@t-nonrecursive-rule;symbolic_operand_point;symbolization.dl [299:1-304:37];symbolic_operand_point(EA,Imm_index,-1,\\\"immediate is bitmask\\\") :- \\n   symbolic_operand_candidate(EA,Imm_index,_,_),\\n   instruction_get_op(EA,Imm_index,Op),\\n   op_immediate(Op,_),\\n   instruction(EA,_,_,Operation,_,_,_,_,_,_),\\n   arch.logic_operation(Operation).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY arch.logic_operation)) (NOT (ISEMPTY symbolic_operand_candidate))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 symbolic_operand_candidate           (INDEXED_IF_EXISTS t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1))) (EXISTS op_immediate ((TUPLE t1 2) UNDEF))
           (INDEXED_IF_EXISTS t2 instruction (INDEX  (= (TUPLE t2 0) (TUPLE t0 0))) (EXISTS arch.logic_operation ((TUPLE t2 3)))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (NUMBER -1) (STRING "immediate is bitmask")) symbolic_operand_point)
)))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_point(EA,Imm_index,-1,\"operated on logical operation result\") :- \n   op_immediate_and_reg(EA,_,Reg,Imm_index,_),\n   !arch.jump(EA),\n   reg_def_use.def_used(EA_def,Reg,EA,_),\n   instruction(EA_def,_,_,Operation,_,_,_,_,_,_),\n   arch.logic_operation(Operation),\n   !low_pass_filter(EA_def),\n   !is_xor_reset(EA_def).\nin file symbolization.dl [312:1-319:27]" 
      (TIMER_ON symbolic_operand_point "@t-nonrecursive-rule;symbolic_operand_point;symbolization.dl [312:1-319:27];symbolic_operand_point(EA,Imm_index,-1,\\\"operated on logical operation result\\\") :- \\n   op_immediate_and_reg(EA,_,Reg,Imm_index,_),\\n   !arch.jump(EA),\\n   reg_def_use.def_used(EA_def,Reg,EA,_),\\n   instruction(EA_def,_,_,Operation,_,_,_,_,_,_),\\n   arch.logic_operation(Operation),\\n   !low_pass_filter(EA_def),\\n   !is_xor_reset(EA_def).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY op_immediate_and_reg)) (NOT (ISEMPTY arch.logic_operation))) (NOT (ISEMPTY instruction))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 op_immediate_and_reg           (IF (NOT (EXISTS arch.jump ((TUPLE t0 0))))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 2)) (= (TUPLE t1 2) (TUPLE t0 0)))
            (IF (AND (NOT (EXISTS low_pass_filter ((TUPLE t1 0)))) (NOT (EXISTS is_xor_reset ((TUPLE t1 0)))))
             (INDEXED_IF_EXISTS t2 instruction (INDEX  (= (TUPLE t2 0) (TUPLE t1 0))) (EXISTS arch.logic_operation ((TUPLE t2 3)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 3) (NUMBER -1) (STRING "operated on logical operation result")) symbolic_operand_point)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "symbolic_operand_point(EA,Op_index,-1,\"moved/compared-with-different-size\") :- \n   symbolic_operand_candidate(EA,Op_index,_,_),\n   instruction_get_op(EA,Op_index,Op),\n   op_immediate(Op,_),\n   instruction_get_op(EA,_,Op2),\n   op_indirect(Op2,_,_,_,_,_,Size),\n   (Size/8) < 8.\nin file symbolization.dl [330:1-337:22]" 
      (TIMER_ON symbolic_operand_point "@t-nonrecursive-rule;symbolic_operand_point;symbolization.dl [330:1-337:22];symbolic_operand_point(EA,Op_index,-1,\\\"moved/compared-with-different-size\\\") :- \\n   symbolic_operand_candidate(EA,Op_index,_,_),\\n   instruction_get_op(EA,Op_index,Op),\\n   op_immediate(Op,_),\\n   instruction_get_op(EA,_,Op2),\\n   op_indirect(Op2,_,_,_,_,_,Size),\\n   (Size/8) < 8.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY op_indirect)) (NOT (ISEMPTY symbolic_operand_candidate))) (NOT (ISEMPTY op_immediate))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 symbolic_operand_candidate           (INDEXED_IF_EXISTS t1 instruction_get_op (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1))) (EXISTS op_immediate ((TUPLE t1 2) UNDEF))
           (FOR t2 instruction_get_op (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)))
            (INDEXED_IF_EXISTS t3 op_indirect (INDEX  (= (TUPLE t3 0) (TUPLE t2 2))) (CONSTRAINT < (INTRINSIC / (TUPLE t3 6) (UNSIGNED 8))  (UNSIGNED 8))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (NUMBER -1) (STRING "moved/compared-with-different-size")) symbolic_operand_point)
))))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.logic_operation)
     (CLEAR def_register_is_not_base_address)
     (CLEAR def_used_for_address)
     (CLEAR is_xor_reset)
     (CLEAR low_pass_filter)
     (CLEAR op_immediate_and_reg)
 ) )  )
  (SUBROUTINE synchronous_access
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON synchronous_access "@t-nonrecursive-relation;synchronous_access;data_access_analysis.dl [437:7-437:25];"
(STMTS      (DEBUG 
 "synchronous_access(EA,EA2) :- \n   data_access_pattern_non_zero(EA,Size,Mult,From),\n   next_data_access(EA,EA2),\n   data_access_pattern(EA2,Size,Mult2_s,From),\n   synchronous_access_barrier_after_access(EA,Barrier),\n   EA2 < Barrier,\n   0 = as(Mult2_s, unsigned),\n   0 = ((EA2-EA)%Mult),\n   Size <= 0,\n   (0+Size) <= Mult.\nin file data_access_analysis.dl [439:1-457:7]" 
      (TIMER_ON synchronous_access "@t-nonrecursive-rule;synchronous_access;data_access_analysis.dl [439:1-457:7];synchronous_access(EA,EA2) :- \\n   data_access_pattern_non_zero(EA,Size,Mult,From),\\n   next_data_access(EA,EA2),\\n   data_access_pattern(EA2,Size,Mult2_s,From),\\n   synchronous_access_barrier_after_access(EA,Barrier),\\n   EA2 < Barrier,\\n   0 = as(Mult2_s, unsigned),\\n   0 = ((EA2-EA)%Mult),\\n   Size <= 0,\\n   (0+Size) <= Mult.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY data_access_pattern_non_zero)) (NOT (ISEMPTY synchronous_access_barrier_after_access))) (NOT (ISEMPTY data_access_pattern))) (NOT (ISEMPTY next_data_access)))
         (FOR_IN t0 data_access_pattern_non_zero           (IF (AND (CONSTRAINT <= (INTRINSIC + (UNSIGNED 0) (TUPLE t0 1))  (TUPLE t0 2)) (CONSTRAINT <= (TUPLE t0 1)  (UNSIGNED 0)))
           (FOR t1 next_data_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (CONSTRAINT = (UNSIGNED 0)  (INTRINSIC % (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)) (TUPLE t0 2))) (EXISTS data_access_pattern ((TUPLE t1 1) (TUPLE t0 1) (UNSIGNED 0) (TUPLE t0 3))))
             (INDEXED_IF_EXISTS t2 synchronous_access_barrier_after_access (INDEX  (= (TUPLE t2 0) (TUPLE t0 0))) (AND (CONSTRAINT != (TUPLE t1 1)  (TUPLE t2 1)) (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t2 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1)) synchronous_access)
)            ))          ))
        )       )
      )
     )
      (DEBUG 
 "synchronous_access(EA,EA2) :- \n   data_access_pattern_non_zero(EA,Size,Mult,_),\n   next_data_access(EA,EA2),\n   data_access_pattern(EA2,Size2,Mult2_s,_),\n   synchronous_access_barrier_after_access(EA,Barrier),\n   EA2 < Barrier,\n   Mult = as(Mult2_s, unsigned),\n   Size <= ((EA2-EA)%Mult),\n   (((EA2-EA)%Mult)+Size2) <= Mult.\nin file data_access_analysis.dl [439:1-457:7]" 
      (TIMER_ON synchronous_access "@t-nonrecursive-rule;synchronous_access;data_access_analysis.dl [439:1-457:7];synchronous_access(EA,EA2) :- \\n   data_access_pattern_non_zero(EA,Size,Mult,_),\\n   next_data_access(EA,EA2),\\n   data_access_pattern(EA2,Size2,Mult2_s,_),\\n   synchronous_access_barrier_after_access(EA,Barrier),\\n   EA2 < Barrier,\\n   Mult = as(Mult2_s, unsigned),\\n   Size <= ((EA2-EA)%Mult),\\n   (((EA2-EA)%Mult)+Size2) <= Mult.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY data_access_pattern_non_zero)) (NOT (ISEMPTY synchronous_access_barrier_after_access))) (NOT (ISEMPTY data_access_pattern))) (NOT (ISEMPTY next_data_access)))
         (FOR_IN t0 data_access_pattern_non_zero           (FOR t1 next_data_access (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (CONSTRAINT <= (TUPLE t0 1)  (INTRINSIC % (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)) (TUPLE t0 2)))
            (INDEXED_IF_EXISTS t2 data_access_pattern (INDEX  (= (TUPLE t2 0) (TUPLE t1 1)) (= (TUPLE t2 2) (TUPLE t0 2))) (CONSTRAINT <= (INTRINSIC + (INTRINSIC % (INTRINSIC - (TUPLE t1 1) (TUPLE t0 0)) (TUPLE t0 2)) (TUPLE t2 1))  (TUPLE t0 2))
             (INDEXED_IF_EXISTS t3 synchronous_access_barrier_after_access (INDEX  (= (TUPLE t3 0) (TUPLE t0 0))) (AND (CONSTRAINT != (TUPLE t1 1)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t1 1)  (TUPLE t3 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t1 1)) synchronous_access)
))           )))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 synchronous_access       (INSERT ((TUPLE t0 0) (TUPLE t0 1)) @delta_synchronous_access)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_synchronous_access "@t-recursive-relation;synchronous_access;data_access_analysis.dl [437:7-437:25];"
(STMTS (STMTS (STMTS       (DEBUG 
 "synchronous_access(EA,EA2) :- \n   synchronous_access(EA,EA_inter),\n   data_access_pattern_non_zero(EA,Size,Mult,From),\n   next_data_access(EA_inter,EA2),\n   data_access_pattern(EA2,Size,Mult2_s,From),\n   synchronous_access_barrier_after_access(EA_inter,Barrier),\n   EA2 < Barrier,\n   0 = as(Mult2_s, unsigned),\n   0 = ((EA2-EA)%Mult),\n   Size <= 0,\n   (0+Size) <= Mult.\nin file data_access_analysis.dl [459:1-478:7]" 
       (TIMER_ON @new_synchronous_access "@t-recursive-rule;synchronous_access;0;data_access_analysis.dl [459:1-478:7];synchronous_access(EA,EA2) :- \\n   synchronous_access(EA,EA_inter),\\n   data_access_pattern_non_zero(EA,Size,Mult,From),\\n   next_data_access(EA_inter,EA2),\\n   data_access_pattern(EA2,Size,Mult2_s,From),\\n   synchronous_access_barrier_after_access(EA_inter,Barrier),\\n   EA2 < Barrier,\\n   0 = as(Mult2_s, unsigned),\\n   0 = ((EA2-EA)%Mult),\\n   Size <= 0,\\n   (0+Size) <= Mult.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY synchronous_access_barrier_after_access)) (NOT (ISEMPTY @delta_synchronous_access))) (NOT (ISEMPTY next_data_access))) (NOT (ISEMPTY data_access_pattern))) (NOT (ISEMPTY data_access_pattern_non_zero)))
          (FOR_IN t0 @delta_synchronous_access            (FOR t1 data_access_pattern_non_zero (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (AND (CONSTRAINT <= (TUPLE t1 1)  (UNSIGNED 0)) (CONSTRAINT <= (INTRINSIC + (UNSIGNED 0) (TUPLE t1 1))  (TUPLE t1 2)))
             (FOR t2 next_data_access (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
              (IF (AND (AND (CONSTRAINT = (UNSIGNED 0)  (INTRINSIC % (INTRINSIC - (TUPLE t2 1) (TUPLE t0 0)) (TUPLE t1 2))) (EXISTS data_access_pattern ((TUPLE t2 1) (TUPLE t1 1) (UNSIGNED 0) (TUPLE t1 3)))) (NOT (EXISTS synchronous_access ((TUPLE t0 0) (TUPLE t2 1)))))
               (INDEXED_IF_EXISTS t3 synchronous_access_barrier_after_access (INDEX  (= (TUPLE t3 0) (TUPLE t0 1))) (AND (CONSTRAINT != (TUPLE t2 1)  (TUPLE t3 1)) (CONSTRAINT <= (TUPLE t2 1)  (TUPLE t3 1)))
                (INSERT ((TUPLE t0 0) (TUPLE t2 1)) @new_synchronous_access)
)              ))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "synchronous_access(EA,EA2) :- \n   synchronous_access(EA,EA_inter),\n   data_access_pattern_non_zero(EA,Size,Mult,_),\n   next_data_access(EA_inter,EA2),\n   data_access_pattern(EA2,Size2,Mult2_s,_),\n   synchronous_access_barrier_after_access(EA_inter,Barrier),\n   EA2 < Barrier,\n   Mult = as(Mult2_s, unsigned),\n   Size <= ((EA2-EA)%Mult),\n   (((EA2-EA)%Mult)+Size2) <= Mult.\nin file data_access_analysis.dl [459:1-478:7]" 
       (TIMER_ON @new_synchronous_access "@t-recursive-rule;synchronous_access;0;data_access_analysis.dl [459:1-478:7];synchronous_access(EA,EA2) :- \\n   synchronous_access(EA,EA_inter),\\n   data_access_pattern_non_zero(EA,Size,Mult,_),\\n   next_data_access(EA_inter,EA2),\\n   data_access_pattern(EA2,Size2,Mult2_s,_),\\n   synchronous_access_barrier_after_access(EA_inter,Barrier),\\n   EA2 < Barrier,\\n   Mult = as(Mult2_s, unsigned),\\n   Size <= ((EA2-EA)%Mult),\\n   (((EA2-EA)%Mult)+Size2) <= Mult.;"
(QUERY
         (IF (AND (AND (AND (AND (NOT (ISEMPTY synchronous_access_barrier_after_access)) (NOT (ISEMPTY @delta_synchronous_access))) (NOT (ISEMPTY next_data_access))) (NOT (ISEMPTY data_access_pattern))) (NOT (ISEMPTY data_access_pattern_non_zero)))
          (FOR_IN t0 @delta_synchronous_access            (FOR t1 data_access_pattern_non_zero (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 next_data_access (INDEX  (= (TUPLE t2 0) (TUPLE t0 1)))
             (IF (AND (CONSTRAINT <= (TUPLE t1 1)  (INTRINSIC % (INTRINSIC - (TUPLE t2 1) (TUPLE t0 0)) (TUPLE t1 2))) (NOT (EXISTS synchronous_access ((TUPLE t0 0) (TUPLE t2 1)))))
              (INDEXED_IF_EXISTS t3 data_access_pattern (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)) (= (TUPLE t3 2) (TUPLE t1 2))) (CONSTRAINT <= (INTRINSIC + (INTRINSIC % (INTRINSIC - (TUPLE t2 1) (TUPLE t0 0)) (TUPLE t1 2)) (TUPLE t3 1))  (TUPLE t1 2))
               (INDEXED_IF_EXISTS t4 synchronous_access_barrier_after_access (INDEX  (= (TUPLE t4 0) (TUPLE t0 1))) (AND (CONSTRAINT != (TUPLE t2 1)  (TUPLE t4 1)) (CONSTRAINT <= (TUPLE t2 1)  (TUPLE t4 1)))
                (INSERT ((TUPLE t0 0) (TUPLE t2 1)) @new_synchronous_access)
))             ))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_synchronous_access "@t-recursive-relation;synchronous_access;data_access_analysis.dl [437:7-437:25];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_synchronous_access))
 ) (STMTS      (TIMER_ON @new_synchronous_access "@c-recursive-relation;synchronous_access;data_access_analysis.dl [437:7-437:25];"
(STMTS (QUERY
       (FOR_IN t0 @new_synchronous_access         (INSERT ((TUPLE t0 0) (TUPLE t0 1)) synchronous_access)
)
      )
       (SWAP @delta_synchronous_access @new_synchronous_access)
       (CLEAR @new_synchronous_access)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_synchronous_access)
     (CLEAR @new_synchronous_access)
 ) )  ) (STMTS     (CLEAR synchronous_access_barrier_after_access)
 ) )  )
  (SUBROUTINE synchronous_access_barrier
(STMTS     (TIMER_ON synchronous_access_barrier "@t-nonrecursive-relation;synchronous_access_barrier;data_access_analysis.dl [400:7-400:33];"
(STMTS      (DEBUG 
 "synchronous_access_barrier(EA) :- \n   symbol(EA,_,_,_,_,_,_,_,_).\nin file data_access_analysis.dl [402:1-405:24]" 
      (TIMER_ON synchronous_access_barrier "@t-nonrecursive-rule;synchronous_access_barrier;data_access_analysis.dl [402:1-405:24];synchronous_access_barrier(EA) :- \\n   symbol(EA,_,_,_,_,_,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY symbol))
         (FOR_IN t0 symbol           (INSERT ((TUPLE t0 0)) synchronous_access_barrier)
)
        )       )
      )
     )
      (DEBUG 
 "synchronous_access_barrier(EA) :- \n   data_segment(_,EA).\nin file data_access_analysis.dl [402:1-405:24]" 
      (TIMER_ON synchronous_access_barrier "@t-nonrecursive-rule;synchronous_access_barrier;data_access_analysis.dl [402:1-405:24];synchronous_access_barrier(EA) :- \\n   data_segment(_,EA).;"
(QUERY
        (IF (NOT (ISEMPTY data_segment))
         (FOR_IN t0 data_segment           (INSERT ((TUPLE t0 1)) synchronous_access_barrier)
)
        )       )
      )
     )
      (DEBUG 
 "synchronous_access_barrier(EA) :- \n   data_segment(EA,_).\nin file data_access_analysis.dl [402:1-405:24]" 
      (TIMER_ON synchronous_access_barrier "@t-nonrecursive-rule;synchronous_access_barrier;data_access_analysis.dl [402:1-405:24];synchronous_access_barrier(EA) :- \\n   data_segment(EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY data_segment))
         (FOR_IN t0 data_segment           (INSERT ((TUPLE t0 0)) synchronous_access_barrier)
)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE synchronous_access_barrier_after_access
(STMTS (STMTS     (TIMER_ON synchronous_access_barrier_after_access "@t-nonrecursive-relation;synchronous_access_barrier_after_access;data_access_analysis.dl [411:7-411:46];"
(STMTS      (DEBUG 
 "synchronous_access_barrier_after_access(EA,@generator_0) :- \n   data_access_pattern(EA,_,_,_),\n   @generator_0 = min Barrier0 : { synchronous_access_barrier(Barrier0),Barrier0 > EA }.\nin file data_access_analysis.dl [413:1-415:81]" 
      (TIMER_ON synchronous_access_barrier_after_access "@t-nonrecursive-rule;synchronous_access_barrier_after_access;data_access_analysis.dl [413:1-415:81];synchronous_access_barrier_after_access(EA,@generator_0) :- \\n   data_access_pattern(EA,_,_,_),\\n   @generator_0 = min Barrier0 : { synchronous_access_barrier(Barrier0),Barrier0 > EA }.;"
(QUERY
        (IF (NOT (ISEMPTY data_access_pattern))
         (FOR_IN t0 data_access_pattern           (AGGREGATE t1 min (TUPLE t1 0)  t1 synchronous_access_barrier (CONSTRAINT > (TUPLE t1 0)  (TUPLE t0 0))
           (IF (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0))
            (INSERT ((TUPLE t0 0) (TUPLE t1 0)) synchronous_access_barrier_after_access)
           )))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR synchronous_access_barrier)
 ) )  )
  (SUBROUTINE take_address
(STMTS     (TIMER_ON take_address "@t-nonrecursive-relation;take_address;relative_jump_tables.dl [27:7-27:19];"
(STMTS      (DEBUG 
 "take_address(Src,Address) :- \n   pc_relative_operand(Src,1,Address),\n   instruction(Src,_,_,<inlined_Operation_420>,_,_,_,_,_,_),\n   <inlined_Operation_420> = \"LEA\".\nin file relative_jump_tables.dl [29:1-31:42]" 
      (TIMER_ON take_address "@t-nonrecursive-rule;take_address;relative_jump_tables.dl [29:1-31:42];take_address(Src,Address) :- \\n   pc_relative_operand(Src,1,Address),\\n   instruction(Src,_,_,<inlined_Operation_420>,_,_,_,_,_,_),\\n   <inlined_Operation_420> = \\\"LEA\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY pc_relative_operand)) (NOT (ISEMPTY instruction)))
         (FOR t0 pc_relative_operand (INDEX  (= (TUPLE t0 1) (UNSIGNED 1)))
          (IF (EXISTS instruction ((TUPLE t0 0) UNDEF UNDEF (STRING "LEA") UNDEF UNDEF UNDEF UNDEF UNDEF UNDEF))
           (INSERT ((TUPLE t0 0) (TUPLE t0 2)) take_address)
          ))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE tls_descriptor
(STMTS     (TIMER_ON tls_descriptor "@t-nonrecursive-relation;tls_descriptor;tls.dl [455:7-455:21];"
(STMTS      (DEBUG 
 "tls_descriptor(EA,as(Addend, unsigned)) :- \n   Type = \"TLSDESC\",\n   relocation(EA,Type,\"\",Addend,_,_,\"RELA\").\nin file tls.dl [457:1-463:34]" 
      (TIMER_ON tls_descriptor "@t-nonrecursive-rule;tls_descriptor;tls.dl [457:1-463:34];tls_descriptor(EA,as(Addend, unsigned)) :- \\n   Type = \\\"TLSDESC\\\",\\n   relocation(EA,Type,\\\"\\\",Addend,_,_,\\\"RELA\\\").;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "TLSDESC")) (= (TUPLE t0 2) (STRING "")) (= (TUPLE t0 6) (STRING "RELA")))
          (INSERT ((TUPLE t0 0) (TUPLE t0 3)) tls_descriptor)
)        )       )
      )
     )
      (DEBUG 
 "tls_descriptor(EA,(Dest-Start)) :- \n   Type = \"TLSDESC\",\n   relocation(EA,Type,Symbol,_,_,_,_),\n   Symbol != \"\",\n   symbol(Dest,_,\"TLS\",_,_,_,_,_,Symbol),\n   tls_segment(Start,_,_).\nin file tls.dl [465:1-473:27]" 
      (TIMER_ON tls_descriptor "@t-nonrecursive-rule;tls_descriptor;tls.dl [465:1-473:27];tls_descriptor(EA,(Dest-Start)) :- \\n   Type = \\\"TLSDESC\\\",\\n   relocation(EA,Type,Symbol,_,_,_,_),\\n   Symbol != \\\"\\\",\\n   symbol(Dest,_,\\\"TLS\\\",_,_,_,_,_,Symbol),\\n   tls_segment(Start,_,_).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY tls_segment)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY symbol)))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "TLSDESC")))
          (IF (CONSTRAINT != (TUPLE t0 2)  (STRING ""))
           (FOR t1 symbol (INDEX  (= (TUPLE t1 2) (STRING "TLS")) (= (TUPLE t1 8) (TUPLE t0 2)))
            (FOR_IN t2 tls_segment              (INSERT ((TUPLE t0 0) (INTRINSIC - (TUPLE t1 0) (TUPLE t2 0))) tls_descriptor)
)
)          ))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE tls_global_dynamic
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON tls_global_dynamic "@t-nonrecursive-relation;tls_global_dynamic;tls.dl [331:7-331:25];"
(STMTS      (DEBUG 
 "tls_global_dynamic(EA) :- \n   binary_format(\"ELF\"),\n   tls_get_addr(EA,_,_),\n   got_relative_operand(EA,_,TlsIndex),\n   tls_index(TlsIndex,Offset),\n   Offset > 0.\nin file tls.dl [360:1-364:44]" 
      (TIMER_ON tls_global_dynamic "@t-nonrecursive-rule;tls_global_dynamic;tls.dl [360:1-364:44];tls_global_dynamic(EA) :- \\n   binary_format(\\\"ELF\\\"),\\n   tls_get_addr(EA,_,_),\\n   got_relative_operand(EA,_,TlsIndex),\\n   tls_index(TlsIndex,Offset),\\n   Offset > 0.;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY tls_index)) (NOT (ISEMPTY tls_get_addr))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY got_relative_operand))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 tls_get_addr           (FOR t1 got_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (INDEXED_IF_EXISTS t2 tls_index (INDEX  (= (TUPLE t2 0) (TUPLE t1 2))) (AND (CONSTRAINT != (TUPLE t2 1)  (UNSIGNED 0)) (CONSTRAINT >= (TUPLE t2 1)  (UNSIGNED 0)))
            (INSERT ((TUPLE t0 0)) tls_global_dynamic)
)))
        )       )
      )
     )
      (DEBUG 
 "tls_global_dynamic(EA) :- \n   binary_format(\"ELF\"),\n   tls_get_addr(EA,_,_),\n   pc_relative_operand(EA,_,TlsIndex),\n   relocation(TlsIndex,\"DTPMOD64\",_,_,_,_,_),\n   relocation( _tmp_140,\"DTPOFF64\",_,_,_,_,_),\n    _tmp_140 = (TlsIndex+8).\nin file tls.dl [333:1-347:7]" 
      (TIMER_ON tls_global_dynamic "@t-nonrecursive-rule;tls_global_dynamic;tls.dl [333:1-347:7];tls_global_dynamic(EA) :- \\n   binary_format(\\\"ELF\\\"),\\n   tls_get_addr(EA,_,_),\\n   pc_relative_operand(EA,_,TlsIndex),\\n   relocation(TlsIndex,\\\"DTPMOD64\\\",_,_,_,_,_),\\n   relocation( _tmp_140,\\\"DTPOFF64\\\",_,_,_,_,_),\\n    _tmp_140 = (TlsIndex+8).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY tls_get_addr)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY pc_relative_operand))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 tls_get_addr           (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
           (IF (AND (EXISTS relocation ((INTRINSIC + (TUPLE t1 2) (UNSIGNED 8)) (STRING "DTPOFF64") UNDEF UNDEF UNDEF UNDEF UNDEF)) (EXISTS relocation ((TUPLE t1 2) (STRING "DTPMOD64") UNDEF UNDEF UNDEF UNDEF UNDEF)))
            (INSERT ((TUPLE t0 0)) tls_global_dynamic)
           )))
        )       )
      )
     )
      (DEBUG 
 "tls_global_dynamic(EA) :- \n   binary_format(\"ELF\"),\n   relocation(TlsIndex,\"DTPMOD64\",_,_,_,_,_),\n   pc_relative_operand(EA,_,TlsIndex),\n   @functor_data_valid(EA,1) = 1,\n   0x66 = @functor_data_unsigned(EA,1),\n   instruction( _tmp_142,Size,_,\"LEA\",_,_,_,_,_,_),\n   @functor_data_valid(((EA+Size)+1),1) = 1,\n   0x66 = @functor_data_unsigned(((EA+Size)+1),1),\n   @functor_data_valid(((EA+Size)+2),1) = 1,\n   0x66 = @functor_data_unsigned(((EA+Size)+2),1),\n   @functor_data_valid(((EA+Size)+3),1) = 1,\n   0x48 = @functor_data_unsigned(((EA+Size)+3),1),\n    _tmp_142 = (EA+1).\nin file tls.dl [349:1-358:31]" 
      (TIMER_ON tls_global_dynamic "@t-nonrecursive-rule;tls_global_dynamic;tls.dl [349:1-358:31];tls_global_dynamic(EA) :- \\n   binary_format(\\\"ELF\\\"),\\n   relocation(TlsIndex,\\\"DTPMOD64\\\",_,_,_,_,_),\\n   pc_relative_operand(EA,_,TlsIndex),\\n   @functor_data_valid(EA,1) = 1,\\n   0x66 = @functor_data_unsigned(EA,1),\\n   instruction( _tmp_142,Size,_,\\\"LEA\\\",_,_,_,_,_,_),\\n   @functor_data_valid(((EA+Size)+1),1) = 1,\\n   0x66 = @functor_data_unsigned(((EA+Size)+1),1),\\n   @functor_data_valid(((EA+Size)+2),1) = 1,\\n   0x66 = @functor_data_unsigned(((EA+Size)+2),1),\\n   @functor_data_valid(((EA+Size)+3),1) = 1,\\n   0x48 = @functor_data_unsigned(((EA+Size)+3),1),\\n    _tmp_142 = (EA+1).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY instruction)) (NOT (ISEMPTY relocation))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY pc_relative_operand))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "DTPMOD64")))
          (FOR t1 pc_relative_operand (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (IF (AND (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t1 0) (UNSIGNED 1)))  (UNSIGNED 1)) (CONSTRAINT = (UNSIGNED 102)  (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t1 0) (UNSIGNED 1)))))
            (INDEXED_IF_EXISTS t2 instruction (INDEX  (= (TUPLE t2 0) (INTRINSIC + (TUPLE t1 0) (UNSIGNED 1))) (= (TUPLE t2 3) (STRING "LEA"))) (AND (AND (AND (AND (AND (CONSTRAINT = (UNSIGNED 102)  (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t1 0) (TUPLE t2 1)) (UNSIGNED 1)) (UNSIGNED 1)))) (CONSTRAINT = (UNSIGNED 72)  (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t1 0) (TUPLE t2 1)) (UNSIGNED 3)) (UNSIGNED 1))))) (CONSTRAINT = (UNSIGNED 102)  (USER_FUNCTOR "functor_data_unsigned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t1 0) (TUPLE t2 1)) (UNSIGNED 2)) (UNSIGNED 1))))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t1 0) (TUPLE t2 1)) (UNSIGNED 2)) (UNSIGNED 1)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t1 0) (TUPLE t2 1)) (UNSIGNED 3)) (UNSIGNED 1)))  (UNSIGNED 1))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (INTRINSIC + (TUPLE t1 0) (TUPLE t2 1)) (UNSIGNED 1)) (UNSIGNED 1)))  (UNSIGNED 1)))
             (INSERT ((TUPLE t1 0)) tls_global_dynamic)
)           )))        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 tls_global_dynamic       (INSERT ((TUPLE t0 0)) @delta_tls_global_dynamic)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_tls_global_dynamic "@t-recursive-relation;tls_global_dynamic;tls.dl [331:7-331:25];"
(STMTS       (DEBUG 
 "tls_global_dynamic(EA2) :- \n   tls_global_dynamic(EA1),\n   got_relative_operand(EA1,_,TlsIndex),\n   tls_index( _tmp_146,_),\n   got_relative_operand(EA2,_, _tmp_146),\n    _tmp_146 = (TlsIndex-8).\nin file tls.dl [366:1-370:44]" 
       (TIMER_ON @new_tls_global_dynamic "@t-recursive-rule;tls_global_dynamic;0;tls.dl [366:1-370:44];tls_global_dynamic(EA2) :- \\n   tls_global_dynamic(EA1),\\n   got_relative_operand(EA1,_,TlsIndex),\\n   tls_index( _tmp_146,_),\\n   got_relative_operand(EA2,_, _tmp_146),\\n    _tmp_146 = (TlsIndex-8).;"
(QUERY
         (IF (AND (AND (NOT (ISEMPTY @delta_tls_global_dynamic)) (NOT (ISEMPTY got_relative_operand))) (NOT (ISEMPTY tls_index)))
          (FOR_IN t0 @delta_tls_global_dynamic            (FOR t1 got_relative_operand (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (FOR t2 tls_index (INDEX  (= (TUPLE t2 0) (INTRINSIC - (TUPLE t1 2) (UNSIGNED 8))))
             (FOR t3 got_relative_operand (INDEX  (= (TUPLE t3 2) (TUPLE t2 0)))
              (IF (NOT (EXISTS tls_global_dynamic ((TUPLE t3 0))))
               (INSERT ((TUPLE t3 0)) @new_tls_global_dynamic)
              )))))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_tls_global_dynamic "@t-recursive-relation;tls_global_dynamic;tls.dl [331:7-331:25];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_tls_global_dynamic))
 ) (STMTS      (TIMER_ON @new_tls_global_dynamic "@c-recursive-relation;tls_global_dynamic;tls.dl [331:7-331:25];"
(STMTS (QUERY
       (FOR_IN t0 @new_tls_global_dynamic         (INSERT ((TUPLE t0 0)) tls_global_dynamic)
)
      )
       (SWAP @delta_tls_global_dynamic @new_tls_global_dynamic)
       (CLEAR @new_tls_global_dynamic)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_tls_global_dynamic)
     (CLEAR @new_tls_global_dynamic)
 ) )  )  )  )
  (SUBROUTINE tls_index
(STMTS     (TIMER_ON tls_index "@t-nonrecursive-relation;tls_index;tls.dl [211:7-211:16];"
(STMTS      (DEBUG 
 "tls_index(EA,as(@functor_data_signed((EA+8),8), unsigned)) :- \n   binary_format(\"ELF\"),\n   relocation(EA,\"DTPMOD64\",_,_,_,_,_),\n   @functor_data_valid((EA+8),8) = 1.\nin file tls.dl [213:1-220:36]" 
      (TIMER_ON tls_index "@t-nonrecursive-rule;tls_index;tls.dl [213:1-220:36];tls_index(EA,as(@functor_data_signed((EA+8),8), unsigned)) :- \\n   binary_format(\\\"ELF\\\"),\\n   relocation(EA,\\\"DTPMOD64\\\",_,_,_,_,_),\\n   @functor_data_valid((EA+8),8) = 1.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY relocation))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "DTPMOD64")))
          (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 8)) (UNSIGNED 8)))  (UNSIGNED 1))
           (INSERT ((TUPLE t0 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 8)) (UNSIGNED 8)))) tls_index)
          ))        )       )
      )
     )
      (DEBUG 
 "tls_index(EA,as(@functor_data_signed((EA+8),8), unsigned)) :- \n   binary_format(\"ELF\"),\n   relocation(EA,\"TLS_DTPMOD32\",_,_,_,_,_),\n   @functor_data_valid((EA+8),8) = 1.\nin file tls.dl [213:1-220:36]" 
      (TIMER_ON tls_index "@t-nonrecursive-rule;tls_index;tls.dl [213:1-220:36];tls_index(EA,as(@functor_data_signed((EA+8),8), unsigned)) :- \\n   binary_format(\\\"ELF\\\"),\\n   relocation(EA,\\\"TLS_DTPMOD32\\\",_,_,_,_,_),\\n   @functor_data_valid((EA+8),8) = 1.;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY binary_format)) (NOT (ISEMPTY relocation))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 1) (STRING "TLS_DTPMOD32")))
          (IF (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 8)) (UNSIGNED 8)))  (UNSIGNED 1))
           (INSERT ((TUPLE t0 0) (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 8)) (UNSIGNED 8)))) tls_index)
          ))        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE tls_local_dynamic
(STMTS     (TIMER_ON tls_local_dynamic "@t-nonrecursive-relation;tls_local_dynamic;tls.dl [388:7-388:24];"
(STMTS      (DEBUG 
 "tls_local_dynamic(Load) :- \n   binary_format(\"ELF\"),\n   tls_segment(Start,_,_),\n   tls_get_addr(Load,_,Start),\n   !tls_global_dynamic(Load).\nin file tls.dl [390:1-394:31]" 
      (TIMER_ON tls_local_dynamic "@t-nonrecursive-rule;tls_local_dynamic;tls.dl [390:1-394:31];tls_local_dynamic(Load) :- \\n   binary_format(\\\"ELF\\\"),\\n   tls_segment(Start,_,_),\\n   tls_get_addr(Load,_,Start),\\n   !tls_global_dynamic(Load).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY tls_segment)) (NOT (ISEMPTY tls_get_addr))) (NOT (ISEMPTY binary_format))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 tls_segment           (FOR t1 tls_get_addr (INDEX  (= (TUPLE t1 2) (TUPLE t0 0)))
           (IF (NOT (EXISTS tls_global_dynamic ((TUPLE t1 0))))
            (INSERT ((TUPLE t1 0)) tls_local_dynamic)
           )))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE tls_operand_attribute
(STMTS     (TIMER_ON tls_operand_attribute "@t-nonrecursive-relation;tls_operand_attribute;tls.dl [566:7-566:28];"
(STMTS      (DEBUG 
 "tls_operand_attribute(\"TLSGD\",\"TLSGD\").\nin file tls.dl [569:1-569:41]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [569:1-569:41];tls_operand_attribute(\\\"TLSGD\\\",\\\"TLSGD\\\").;"
(QUERY
        (INSERT ((STRING "TLSGD") (STRING "TLSGD")) tls_operand_attribute)
       )
      )
     )
      (DEBUG 
 "tls_operand_attribute(\"TLSLD\",\"TLSLDM\").\nin file tls.dl [570:1-570:42]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [570:1-570:42];tls_operand_attribute(\\\"TLSLD\\\",\\\"TLSLDM\\\").;"
(QUERY
        (INSERT ((STRING "TLSLD") (STRING "TLSLDM")) tls_operand_attribute)
       )
      )
     )
      (DEBUG 
 "tls_operand_attribute(\"DTPOFF32\",\"DTPOFF\").\nin file tls.dl [571:1-571:45]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [571:1-571:45];tls_operand_attribute(\\\"DTPOFF32\\\",\\\"DTPOFF\\\").;"
(QUERY
        (INSERT ((STRING "DTPOFF32") (STRING "DTPOFF")) tls_operand_attribute)
       )
      )
     )
      (DEBUG 
 "tls_operand_attribute(\"TPOFF32\",\"TPOFF\").\nin file tls.dl [572:1-572:43]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [572:1-572:43];tls_operand_attribute(\\\"TPOFF32\\\",\\\"TPOFF\\\").;"
(QUERY
        (INSERT ((STRING "TPOFF32") (STRING "TPOFF")) tls_operand_attribute)
       )
      )
     )
      (DEBUG 
 "tls_operand_attribute(\"GOTTPOFF\",\"TPOFF\").\nin file tls.dl [573:1-573:44]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [573:1-573:44];tls_operand_attribute(\\\"GOTTPOFF\\\",\\\"TPOFF\\\").;"
(QUERY
        (INSERT ((STRING "GOTTPOFF") (STRING "TPOFF")) tls_operand_attribute)
       )
      )
     )
      (DEBUG 
 "tls_operand_attribute(\"GOTTPOFF\",\"GOT\").\nin file tls.dl [574:1-574:42]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [574:1-574:42];tls_operand_attribute(\\\"GOTTPOFF\\\",\\\"GOT\\\").;"
(QUERY
        (INSERT ((STRING "GOTTPOFF") (STRING "GOT")) tls_operand_attribute)
       )
      )
     )
      (DEBUG 
 "tls_operand_attribute(\"TLS_GD\",\"TLSGD\").\nin file tls.dl [577:1-577:42]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [577:1-577:42];tls_operand_attribute(\\\"TLS_GD\\\",\\\"TLSGD\\\").;"
(QUERY
        (INSERT ((STRING "TLS_GD") (STRING "TLSGD")) tls_operand_attribute)
       )
      )
     )
      (DEBUG 
 "tls_operand_attribute(\"TLS_LD\",\"TLSLD\").\nin file tls.dl [578:1-578:42]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [578:1-578:42];tls_operand_attribute(\\\"TLS_LD\\\",\\\"TLSLD\\\").;"
(QUERY
        (INSERT ((STRING "TLS_LD") (STRING "TLSLD")) tls_operand_attribute)
       )
      )
     )
      (DEBUG 
 "tls_operand_attribute(\"TLS_LDO_32\",\"DTPOFF\").\nin file tls.dl [579:1-579:47]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [579:1-579:47];tls_operand_attribute(\\\"TLS_LDO_32\\\",\\\"DTPOFF\\\").;"
(QUERY
        (INSERT ((STRING "TLS_LDO_32") (STRING "DTPOFF")) tls_operand_attribute)
       )
      )
     )
      (DEBUG 
 "tls_operand_attribute(\"TLS_LE\",\"NTPOFF\").\nin file tls.dl [580:1-580:43]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [580:1-580:43];tls_operand_attribute(\\\"TLS_LE\\\",\\\"NTPOFF\\\").;"
(QUERY
        (INSERT ((STRING "TLS_LE") (STRING "NTPOFF")) tls_operand_attribute)
       )
      )
     )
      (DEBUG 
 "tls_operand_attribute(\"TLS_GOTIE\",\"NTPOFF\").\nin file tls.dl [581:1-581:46]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [581:1-581:46];tls_operand_attribute(\\\"TLS_GOTIE\\\",\\\"NTPOFF\\\").;"
(QUERY
        (INSERT ((STRING "TLS_GOTIE") (STRING "NTPOFF")) tls_operand_attribute)
       )
      )
     )
      (DEBUG 
 "tls_operand_attribute(\"TLS_GOTIE\",\"GOTOFF\").\nin file tls.dl [582:1-582:46]" 
      (TIMER_ON tls_operand_attribute "@t-nonrecursive-rule;tls_operand_attribute;tls.dl [582:1-582:46];tls_operand_attribute(\\\"TLS_GOTIE\\\",\\\"GOTOFF\\\").;"
(QUERY
        (INSERT ((STRING "TLS_GOTIE") (STRING "GOTOFF")) tls_operand_attribute)
       )
      )
     )
 )    )
 )  )
  (SUBROUTINE tls_relative_operand
(STMTS (STMTS     (TIMER_ON tls_relative_operand "@t-nonrecursive-relation;tls_relative_operand;tls.dl [497:7-497:27];"
(STMTS      (DEBUG 
 "tls_relative_operand(EA,Index,(Start+as(Offset, address)),\"DTPOFF\") :- \n   binary_format(\"ELF\"),\n   tls_segment(Start,End,_),\n   tls_local_dynamic(Load),\n   tls_get_addr(Load,Call,_),\n   const_value_reg_used(EA,Call,_,Reg, _tmp_149),\n   instruction_get_op(EA,Index,Op),\n   op_indirect_mapped(Op,\"NONE\",Reg,_,_,Offset,_),\n   (Start+as(Offset, address)) < End,\n    _tmp_149 = as(Start, number).\nin file tls.dl [501:1-509:51]" 
      (TIMER_ON tls_relative_operand "@t-nonrecursive-rule;tls_relative_operand;tls.dl [501:1-509:51];tls_relative_operand(EA,Index,(Start+as(Offset, address)),\\\"DTPOFF\\\") :- \\n   binary_format(\\\"ELF\\\"),\\n   tls_segment(Start,End,_),\\n   tls_local_dynamic(Load),\\n   tls_get_addr(Load,Call,_),\\n   const_value_reg_used(EA,Call,_,Reg, _tmp_149),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect_mapped(Op,\\\"NONE\\\",Reg,_,_,Offset,_),\\n   (Start+as(Offset, address)) < End,\\n    _tmp_149 = as(Start, number).;"
(QUERY
        (IF (AND (AND (AND (AND (AND (AND (AND (NOT (ISEMPTY tls_segment)) (NOT (ISEMPTY op_indirect_mapped))) (NOT (ISEMPTY tls_get_addr))) (NOT (ISEMPTY tls_local_dynamic))) (NOT (ISEMPTY const_value_reg_used))) (NOT (ISEMPTY binary_format))) (NOT (ISEMPTY instruction_get_op))) (EXISTS binary_format ((STRING "ELF"))))
         (FOR_IN t0 tls_segment           (FOR_IN t1 tls_local_dynamic            (FOR t2 tls_get_addr (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
            (FOR t3 const_value_reg_used (INDEX  (= (TUPLE t3 1) (TUPLE t2 1)) (= (TUPLE t3 4) (TUPLE t0 0)))
             (FOR t4 instruction_get_op (INDEX  (= (TUPLE t4 0) (TUPLE t3 0)))
              (FOR t5 op_indirect_mapped (INDEX  (= (TUPLE t5 0) (TUPLE t4 2)) (= (TUPLE t5 1) (STRING "NONE")) (= (TUPLE t5 2) (TUPLE t3 3)))
               (IF (CONSTRAINT < (INTRINSIC + (TUPLE t0 0) (TUPLE t5 5))  (TUPLE t0 1))
                (INSERT ((TUPLE t3 0) (TUPLE t4 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t5 5)) (STRING "DTPOFF")) tls_relative_operand)
               ))))))
)
        )       )
      )
     )
      (DEBUG 
 "tls_relative_operand(EA,Index,(Start+as(Offset, address)),\"DTPOFF\") :- \n   tls_segment(Start,End,_),\n   tls_desc_call(_,Call,Base),\n   const_value_reg_used(EA,Call,_,Reg, _tmp_150),\n   instruction_get_op(EA,Index,Op),\n   op_indirect_mapped(Op,\"NONE\",Reg,_,_,Offset,_),\n   (Start+as(Offset, address)) < End,\n    _tmp_150 = as(Base, number).\nin file tls.dl [551:1-557:51]" 
      (TIMER_ON tls_relative_operand "@t-nonrecursive-rule;tls_relative_operand;tls.dl [551:1-557:51];tls_relative_operand(EA,Index,(Start+as(Offset, address)),\\\"DTPOFF\\\") :- \\n   tls_segment(Start,End,_),\\n   tls_desc_call(_,Call,Base),\\n   const_value_reg_used(EA,Call,_,Reg, _tmp_150),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect_mapped(Op,\\\"NONE\\\",Reg,_,_,Offset,_),\\n   (Start+as(Offset, address)) < End,\\n    _tmp_150 = as(Base, number).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY op_indirect_mapped)) (NOT (ISEMPTY tls_segment))) (NOT (ISEMPTY const_value_reg_used))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY tls_desc_call)))
         (FOR_IN t0 tls_segment           (FOR_IN t1 tls_desc_call            (FOR t2 const_value_reg_used (INDEX  (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 4) (TUPLE t1 2)))
            (FOR t3 instruction_get_op (INDEX  (= (TUPLE t3 0) (TUPLE t2 0)))
             (FOR t4 op_indirect_mapped (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)) (= (TUPLE t4 1) (STRING "NONE")) (= (TUPLE t4 2) (TUPLE t2 3)))
              (IF (CONSTRAINT < (INTRINSIC + (TUPLE t0 0) (TUPLE t4 5))  (TUPLE t0 1))
               (INSERT ((TUPLE t2 0) (TUPLE t3 1) (INTRINSIC + (TUPLE t0 0) (TUPLE t4 5)) (STRING "DTPOFF")) tls_relative_operand)
              )))))
)
        )       )
      )
     )
      (DEBUG 
 "tls_relative_operand(EA,Index,as((as(@functor_aligned(TlsEnd,max(Align,1)), number)+Offset), address),\"TPOFF\") :- \n   tls_segment_register(Reg),\n   instruction_get_op(EA,Index,Op),\n   op_indirect(Op,Reg,\"NONE\",\"NONE\",_,Offset,_),\n   Offset < 0,\n   tls_segment(_,TlsEnd,Align).\nin file tls.dl [513:1-526:36]" 
      (TIMER_ON tls_relative_operand "@t-nonrecursive-rule;tls_relative_operand;tls.dl [513:1-526:36];tls_relative_operand(EA,Index,as((as(@functor_aligned(TlsEnd,max(Align,1)), number)+Offset), address),\\\"TPOFF\\\") :- \\n   tls_segment_register(Reg),\\n   instruction_get_op(EA,Index,Op),\\n   op_indirect(Op,Reg,\\\"NONE\\\",\\\"NONE\\\",_,Offset,_),\\n   Offset < 0,\\n   tls_segment(_,TlsEnd,Align).;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY tls_segment_register)) (NOT (ISEMPTY tls_segment))) (NOT (ISEMPTY op_indirect))) (NOT (ISEMPTY instruction_get_op)))
         (FOR_IN t0 tls_segment_register           (FOR_IN t1 instruction_get_op            (FOR t2 op_indirect (INDEX  (= (TUPLE t2 0) (TUPLE t1 2)) (= (TUPLE t2 1) (TUPLE t0 0)) (= (TUPLE t2 2) (STRING "NONE")) (= (TUPLE t2 3) (STRING "NONE")) (<= (TUPLE t2 5) (NUMBER 0)))
            (IF (CONSTRAINT != (TUPLE t2 5)  (NUMBER 0))
             (FOR_IN t3 tls_segment               (INSERT ((TUPLE t1 0) (TUPLE t1 1) (INTRINSIC + (USER_FUNCTOR "functor_aligned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t3 1) (INTRINSIC max (TUPLE t3 2) (UNSIGNED 1)))) (TUPLE t2 5)) (STRING "TPOFF")) tls_relative_operand)
)
            )))
)
        )       )
      )
     )
      (DEBUG 
 "tls_relative_operand(EA_used,Index,as((as(@functor_aligned(TlsEnd,max(Align,1)), number)+Offset), address),\"TPOFF\") :- \n   tls_segment_register(Reg),\n   instruction_get_op(EA_def,_,Op_def),\n   op_indirect(Op_def,Reg,\"NONE\",\"NONE\",_,0,_),\n   reg_def_use.def_used(EA_def,_,EA_used,Index),\n   instruction_get_op(EA_used,Index,Op_used),\n   op_indirect(Op_used,\"NONE\",_,_,_,Offset,_),\n   Offset < 0,\n   tls_segment(_,TlsEnd,Align).\nin file tls.dl [531:1-547:36]" 
      (TIMER_ON tls_relative_operand "@t-nonrecursive-rule;tls_relative_operand;tls.dl [531:1-547:36];tls_relative_operand(EA_used,Index,as((as(@functor_aligned(TlsEnd,max(Align,1)), number)+Offset), address),\\\"TPOFF\\\") :- \\n   tls_segment_register(Reg),\\n   instruction_get_op(EA_def,_,Op_def),\\n   op_indirect(Op_def,Reg,\\\"NONE\\\",\\\"NONE\\\",_,0,_),\\n   reg_def_use.def_used(EA_def,_,EA_used,Index),\\n   instruction_get_op(EA_used,Index,Op_used),\\n   op_indirect(Op_used,\\\"NONE\\\",_,_,_,Offset,_),\\n   Offset < 0,\\n   tls_segment(_,TlsEnd,Align).;"
(QUERY
        (IF (AND (AND (AND (AND (NOT (ISEMPTY tls_segment_register)) (NOT (ISEMPTY tls_segment))) (NOT (ISEMPTY instruction_get_op))) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY op_indirect)))
         (FOR_IN t0 tls_segment_register           (FOR_IN t1 instruction_get_op            (IF (EXISTS op_indirect ((TUPLE t1 2) (TUPLE t0 0) (STRING "NONE") (STRING "NONE") UNDEF (NUMBER 0) UNDEF))
            (FOR t2 reg_def_use.def_used (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (FOR t3 instruction_get_op (INDEX  (= (TUPLE t3 0) (TUPLE t2 2)) (= (TUPLE t3 1) (TUPLE t2 3)))
              (FOR t4 op_indirect (INDEX  (= (TUPLE t4 0) (TUPLE t3 2)) (= (TUPLE t4 1) (STRING "NONE")) (<= (TUPLE t4 5) (NUMBER 0)))
               (IF (CONSTRAINT != (TUPLE t4 5)  (NUMBER 0))
                (FOR_IN t5 tls_segment                  (INSERT ((TUPLE t2 2) (TUPLE t2 3) (INTRINSIC + (USER_FUNCTOR "functor_aligned_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t5 1) (INTRINSIC max (TUPLE t5 2) (UNSIGNED 1)))) (TUPLE t4 5)) (STRING "TPOFF")) tls_relative_operand)
)
               ))))           ))
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR op_indirect_mapped)
     (CLEAR tls_desc_call)
     (CLEAR tls_get_addr)
     (CLEAR tls_segment_register)
 ) )  )
  (SUBROUTINE tls_section
(STMTS (STMTS     (TIMER_ON tls_section "@t-nonrecursive-relation;tls_section;/usr/local/src/ddisasm/src/datalog/main.dl [821:7-821:18];"
(STMTS      (DEBUG 
 "tls_section(Section) :- \n   data_section(Section),\n   section_property(Section,\"ThreadLocal\").\nin file main.dl [833:1-835:45]" 
      (TIMER_ON tls_section "@t-nonrecursive-rule;tls_section;/usr/local/src/ddisasm/src/datalog/main.dl [833:1-835:45];tls_section(Section) :- \\n   data_section(Section),\\n   section_property(Section,\\\"ThreadLocal\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY data_section)) (NOT (ISEMPTY section_property)))
         (FOR_IN t0 data_section           (IF (EXISTS section_property ((TUPLE t0 0) (STRING "ThreadLocal")))
           (INSERT ((TUPLE t0 0)) tls_section)
          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR section_property)
 ) )  )
  (SUBROUTINE tls_segment
(STMTS (STMTS     (TIMER_ON tls_segment "@t-nonrecursive-relation;tls_segment;tls.dl [190:7-190:18];"
(STMTS      (DEBUG 
 "tls_segment(z,z0,z1) :- \n   __agg_single(z),\n   __agg_single0(z0),\n   __agg_single1(z1).\nin file tls.dl [192:1-195:64]" 
      (TIMER_ON tls_segment "@t-nonrecursive-rule;tls_segment;tls.dl [192:1-195:64];tls_segment(z,z0,z1) :- \\n   __agg_single(z),\\n   __agg_single0(z0),\\n   __agg_single1(z1).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY __agg_single1)) (NOT (ISEMPTY __agg_single))) (NOT (ISEMPTY __agg_single0)))
         (FOR_IN t0 __agg_single           (FOR_IN t1 __agg_single0            (FOR_IN t2 __agg_single1             (INSERT ((TUPLE t0 0) (TUPLE t1 0) (TUPLE t2 0)) tls_segment)
)
)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR __agg_single)
     (CLEAR __agg_single0)
     (CLEAR __agg_single1)
 ) )  )
  (SUBROUTINE tls_segment_register
(STMTS     (TIMER_ON tls_segment_register "@t-nonrecursive-relation;tls_segment_register;tls.dl [175:7-175:27];"
(STMTS      (DEBUG 
 "tls_segment_register(\"FS\") :- \n   binary_format(\"ELF\").\nin file tls.dl [177:1-179:23]" 
      (TIMER_ON tls_segment_register "@t-nonrecursive-rule;tls_segment_register;tls.dl [177:1-179:23];tls_segment_register(\\\"FS\\\") :- \\n   binary_format(\\\"ELF\\\").;"
(QUERY
        (IF (AND (NOT (ISEMPTY binary_format)) (EXISTS binary_format ((STRING "ELF"))))
         (INSERT ((STRING "FS")) tls_segment_register)
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE track_register
(STMTS (STMTS     (TIMER_ON track_register "@t-nonrecursive-relation;track_register;basic_def_used.dl [31:7-31:21];"
(STMTS      (DEBUG 
 "track_register(Reg) :- \n   arch.general_purpose_reg(Reg).\nin file basic_def_used.dl [33:1-38:35]" 
      (TIMER_ON track_register "@t-nonrecursive-rule;track_register;basic_def_used.dl [33:1-38:35];track_register(Reg) :- \\n   arch.general_purpose_reg(Reg).;"
(QUERY
        (IF (NOT (ISEMPTY arch.general_purpose_reg))
         (FOR_IN t0 arch.general_purpose_reg           (INSERT ((TUPLE t0 0)) track_register)
)
        )       )
      )
     )
      (DEBUG 
 "track_register(Reg) :- \n   arch.frame_pointer(Reg).\nin file basic_def_used.dl [33:1-38:35]" 
      (TIMER_ON track_register "@t-nonrecursive-rule;track_register;basic_def_used.dl [33:1-38:35];track_register(Reg) :- \\n   arch.frame_pointer(Reg).;"
(QUERY
        (IF (NOT (ISEMPTY arch.frame_pointer))
         (FOR_IN t0 arch.frame_pointer           (INSERT ((TUPLE t0 0)) track_register)
)
        )       )
      )
     )
      (DEBUG 
 "track_register(Reg) :- \n   arch.stack_pointer(Reg).\nin file basic_def_used.dl [33:1-38:35]" 
      (TIMER_ON track_register "@t-nonrecursive-rule;track_register;basic_def_used.dl [33:1-38:35];track_register(Reg) :- \\n   arch.stack_pointer(Reg).;"
(QUERY
        (IF (NOT (ISEMPTY arch.stack_pointer))
         (FOR_IN t0 arch.stack_pointer           (INSERT ((TUPLE t0 0)) track_register)
)
        )       )
      )
     )
      (DEBUG 
 "track_register(Reg) :- \n   arch.return_reg(Reg).\nin file basic_def_used.dl [33:1-38:35]" 
      (TIMER_ON track_register "@t-nonrecursive-rule;track_register;basic_def_used.dl [33:1-38:35];track_register(Reg) :- \\n   arch.return_reg(Reg).;"
(QUERY
        (IF (NOT (ISEMPTY arch.return_reg))
         (FOR_IN t0 arch.return_reg           (INSERT ((TUPLE t0 0)) track_register)
)
        )       )
      )
     )
      (DEBUG 
 "track_register(Reg) :- \n   arch.condition_flags_reg(Reg).\nin file basic_def_used.dl [33:1-38:35]" 
      (TIMER_ON track_register "@t-nonrecursive-rule;track_register;basic_def_used.dl [33:1-38:35];track_register(Reg) :- \\n   arch.condition_flags_reg(Reg).;"
(QUERY
        (IF (NOT (ISEMPTY arch.condition_flags_reg))
         (FOR_IN t0 arch.condition_flags_reg           (INSERT ((TUPLE t0 0)) track_register)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR arch.general_purpose_reg)
 ) )  )
  (SUBROUTINE trivial_relocation
(STMTS     (TIMER_ON trivial_relocation "@t-nonrecursive-relation;trivial_relocation;self_diagnose.dl [21:7-21:25];"
(STMTS      (DEBUG 
 "trivial_relocation(EA) :- \n   relocation(EA,_,Symbol,0,_,_,_),\n   symbol(0,_,_,_,_,0,_,_,Symbol),\n   Symbol != \"\".\nin file self_diagnose.dl [23:1-26:18]" 
      (TIMER_ON trivial_relocation "@t-nonrecursive-rule;trivial_relocation;self_diagnose.dl [23:1-26:18];trivial_relocation(EA) :- \\n   relocation(EA,_,Symbol,0,_,_,_),\\n   symbol(0,_,_,_,_,0,_,_,Symbol),\\n   Symbol != \\\"\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY relocation)) (NOT (ISEMPTY symbol)))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 3) (NUMBER 0)))
          (IF (AND (CONSTRAINT != (TUPLE t0 2)  (STRING "")) (EXISTS symbol ((UNSIGNED 0) UNDEF UNDEF UNDEF UNDEF (UNSIGNED 0) UNDEF UNDEF (TUPLE t0 2))))
           (INSERT ((TUPLE t0 0)) trivial_relocation)
          ))        )       )
      )
     )
      (DEBUG 
 "trivial_relocation(EA) :- \n   relocation(EA,_,\"__TMC_END__\",7,_,_,_).\nin file self_diagnose.dl [28:1-29:44]" 
      (TIMER_ON trivial_relocation "@t-nonrecursive-rule;trivial_relocation;self_diagnose.dl [28:1-29:44];trivial_relocation(EA) :- \\n   relocation(EA,_,\\\"__TMC_END__\\\",7,_,_,_).;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR t0 relocation (INDEX  (= (TUPLE t0 2) (STRING "__TMC_END__")) (= (TUPLE t0 3) (NUMBER 7)))
          (INSERT ((TUPLE t0 0)) trivial_relocation)
)        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE unconditional_jump
(STMTS     (TIMER_ON unconditional_jump "@t-nonrecursive-relation;unconditional_jump;/usr/local/src/ddisasm/src/datalog/main.dl [506:7-506:25];"
(STMTS      (DEBUG 
 "unconditional_jump(EA) :- \n   arch.jump(EA),\n   !arch.conditional(EA,_).\nin file main.dl [508:1-510:29]" 
      (TIMER_ON unconditional_jump "@t-nonrecursive-rule;unconditional_jump;/usr/local/src/ddisasm/src/datalog/main.dl [508:1-510:29];unconditional_jump(EA) :- \\n   arch.jump(EA),\\n   !arch.conditional(EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY arch.jump))
         (FOR_IN t0 arch.jump           (IF (NOT (EXISTS arch.conditional ((TUPLE t0 0) UNDEF)))
           (INSERT ((TUPLE t0 0)) unconditional_jump)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE unconditional_return
(STMTS     (TIMER_ON unconditional_return "@t-nonrecursive-relation;unconditional_return;/usr/local/src/ddisasm/src/datalog/main.dl [898:7-898:27];"
(STMTS      (DEBUG 
 "unconditional_return(EA) :- \n   arch.return(EA),\n   !arch.conditional(EA,_).\nin file main.dl [900:1-902:29]" 
      (TIMER_ON unconditional_return "@t-nonrecursive-rule;unconditional_return;/usr/local/src/ddisasm/src/datalog/main.dl [900:1-902:29];unconditional_return(EA) :- \\n   arch.return(EA),\\n   !arch.conditional(EA,_).;"
(QUERY
        (IF (NOT (ISEMPTY arch.return))
         (FOR_IN t0 arch.return           (IF (NOT (EXISTS arch.conditional ((TUPLE t0 0) UNDEF)))
           (INSERT ((TUPLE t0 0)) unconditional_return)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE unresolved_block
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON unresolved_block "@t-nonrecursive-relation;unresolved_block;code_inference.dl [810:7-810:23];"
(STMTS      (DEBUG 
 "unresolved_block(Block,Type,Size) :- \n   block_candidate_boundaries(Block,Type,Beg,End),\n   Size = (End-Beg),\n   !known_block(Block,Type,Size,_),\n   !impossible_block(Block,Type,Size,_),\n   block_overlap(Block,Type,Size,Other,OtherType,OtherSize),\n   !impossible_block(Other,OtherType,OtherSize,_),\n   Type != \"data\".\nin file code_inference.dl [812:1-823:7]" 
      (TIMER_ON unresolved_block "@t-nonrecursive-rule;unresolved_block;code_inference.dl [812:1-823:7];unresolved_block(Block,Type,Size) :- \\n   block_candidate_boundaries(Block,Type,Beg,End),\\n   Size = (End-Beg),\\n   !known_block(Block,Type,Size,_),\\n   !impossible_block(Block,Type,Size,_),\\n   block_overlap(Block,Type,Size,Other,OtherType,OtherSize),\\n   !impossible_block(Other,OtherType,OtherSize,_),\\n   Type != \\\"data\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_candidate_boundaries)) (NOT (ISEMPTY block_overlap)))
         (FOR_IN t0 block_candidate_boundaries           (IF (CONSTRAINT != (TUPLE t0 1)  (STRING "data"))
           (FOR t1 block_overlap (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (INTRINSIC - (TUPLE t0 3) (TUPLE t0 2))))
            (IF (AND (AND (NOT (EXISTS impossible_block ((TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5) UNDEF))) (NOT (EXISTS known_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF)))) (NOT (EXISTS impossible_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF))))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2)) unresolved_block)
            ))          ))
        )       )
      )
     )
      (DEBUG 
 "unresolved_block(Block,Type,Size) :- \n   block_candidate_boundaries(Block,Type,Beg,End),\n   Size = (End-Beg),\n   !known_block(Block,Type,Size,_),\n   !impossible_block(Block,Type,Size,_),\n   block_overlap(Block,Type,Size,Other,OtherType,OtherSize),\n   !impossible_block(Other,OtherType,OtherSize,_),\n   OtherType != \"data\".\nin file code_inference.dl [812:1-823:7]" 
      (TIMER_ON unresolved_block "@t-nonrecursive-rule;unresolved_block;code_inference.dl [812:1-823:7];unresolved_block(Block,Type,Size) :- \\n   block_candidate_boundaries(Block,Type,Beg,End),\\n   Size = (End-Beg),\\n   !known_block(Block,Type,Size,_),\\n   !impossible_block(Block,Type,Size,_),\\n   block_overlap(Block,Type,Size,Other,OtherType,OtherSize),\\n   !impossible_block(Other,OtherType,OtherSize,_),\\n   OtherType != \\\"data\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY block_candidate_boundaries)) (NOT (ISEMPTY block_overlap)))
         (FOR_IN t0 block_candidate_boundaries           (FOR t1 block_overlap (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (INTRINSIC - (TUPLE t0 3) (TUPLE t0 2))))
           (IF (AND (AND (AND (CONSTRAINT != (TUPLE t1 4)  (STRING "data")) (NOT (EXISTS impossible_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF)))) (NOT (EXISTS impossible_block ((TUPLE t1 3) (TUPLE t1 4) (TUPLE t1 5) UNDEF)))) (NOT (EXISTS known_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2) UNDEF))))
            (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 2)) unresolved_block)
           )))
        )       )
      )
     )
      (DEBUG 
 "unresolved_block(Block,Type,Size) :- \n   negative_block_points(Block,Type,Size,_,_,_),\n   !known_block(Block,Type,Size,_),\n   !impossible_block(Block,Type,Size,_).\nin file code_inference.dl [833:1-836:42]" 
      (TIMER_ON unresolved_block "@t-nonrecursive-rule;unresolved_block;code_inference.dl [833:1-836:42];unresolved_block(Block,Type,Size) :- \\n   negative_block_points(Block,Type,Size,_,_,_),\\n   !known_block(Block,Type,Size,_),\\n   !impossible_block(Block,Type,Size,_).;"
(QUERY
        (IF (NOT (ISEMPTY negative_block_points))
         (FOR_IN t0 negative_block_points           (IF (AND (NOT (EXISTS impossible_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF))) (NOT (EXISTS known_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) UNDEF))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) unresolved_block)
          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 unresolved_block       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_unresolved_block)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_unresolved_block "@t-recursive-relation;unresolved_block;code_inference.dl [810:7-810:23];"
(STMTS       (DEBUG 
 "unresolved_block(Other,\"data\",OtherSize) :- \n   unresolved_block(Block,\"data\",Size),\n   block_overlap(Block,\"data\",Size,Other,\"data\",OtherSize),\n   !impossible_block(Other,\"data\",OtherSize,_).\nin file code_inference.dl [827:1-830:49]" 
       (TIMER_ON @new_unresolved_block "@t-recursive-rule;unresolved_block;0;code_inference.dl [827:1-830:49];unresolved_block(Other,\\\"data\\\",OtherSize) :- \\n   unresolved_block(Block,\\\"data\\\",Size),\\n   block_overlap(Block,\\\"data\\\",Size,Other,\\\"data\\\",OtherSize),\\n   !impossible_block(Other,\\\"data\\\",OtherSize,_).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_unresolved_block)) (NOT (ISEMPTY block_overlap)))
          (FOR t0 @delta_unresolved_block (INDEX  (= (TUPLE t0 1) (STRING "data")))
           (FOR t1 block_overlap (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (STRING "data")) (= (TUPLE t1 2) (TUPLE t0 2)) (= (TUPLE t1 4) (STRING "data")))
            (IF (AND (NOT (EXISTS impossible_block ((TUPLE t1 3) (STRING "data") (TUPLE t1 5) UNDEF))) (NOT (EXISTS unresolved_block ((TUPLE t1 3) (STRING "data") (TUPLE t1 5)))))
             (INSERT ((TUPLE t1 3) (STRING "data") (TUPLE t1 5)) @new_unresolved_block)
            )))         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_unresolved_block "@t-recursive-relation;unresolved_block;code_inference.dl [810:7-810:23];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_unresolved_block))
 ) (STMTS      (TIMER_ON @new_unresolved_block "@c-recursive-relation;unresolved_block;code_inference.dl [810:7-810:23];"
(STMTS (QUERY
       (FOR_IN t0 @new_unresolved_block         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) unresolved_block)
)
      )
       (SWAP @delta_unresolved_block @new_unresolved_block)
       (CLEAR @new_unresolved_block)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_unresolved_block)
     (CLEAR @new_unresolved_block)
 ) )  )  )  )
  (SUBROUTINE unresolved_block_overlap
(STMTS     (TIMER_ON unresolved_block_overlap "@t-nonrecursive-relation;unresolved_block_overlap;code_inference.dl [841:7-841:31];"
(STMTS      (DEBUG 
 "unresolved_block_overlap(Block1,Type1,Size1,Block2,Type2,Size2) :- \n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2),\n   unresolved_block(Block1,Type1,Size1),\n   unresolved_block(Block2,Type2,Size2),\n   Type1 != \"data\".\nin file code_inference.dl [843:1-851:7]" 
      (TIMER_ON unresolved_block_overlap "@t-nonrecursive-rule;unresolved_block_overlap;code_inference.dl [843:1-851:7];unresolved_block_overlap(Block1,Type1,Size1,Block2,Type2,Size2) :- \\n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2),\\n   unresolved_block(Block1,Type1,Size1),\\n   unresolved_block(Block2,Type2,Size2),\\n   Type1 != \\\"data\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY block_overlap)))
         (FOR_IN t0 block_overlap           (IF (AND (AND (CONSTRAINT != (TUPLE t0 1)  (STRING "data")) (EXISTS unresolved_block ((TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)))) (EXISTS unresolved_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) unresolved_block_overlap)
          ))
        )       )
      )
     )
      (DEBUG 
 "unresolved_block_overlap(Block1,Type1,Size1,Block2,Type2,Size2) :- \n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2),\n   unresolved_block(Block1,Type1,Size1),\n   unresolved_block(Block2,Type2,Size2),\n   Type2 != \"data\".\nin file code_inference.dl [843:1-851:7]" 
      (TIMER_ON unresolved_block_overlap "@t-nonrecursive-rule;unresolved_block_overlap;code_inference.dl [843:1-851:7];unresolved_block_overlap(Block1,Type1,Size1,Block2,Type2,Size2) :- \\n   block_overlap(Block1,Type1,Size1,Block2,Type2,Size2),\\n   unresolved_block(Block1,Type1,Size1),\\n   unresolved_block(Block2,Type2,Size2),\\n   Type2 != \\\"data\\\".;"
(QUERY
        (IF (AND (NOT (ISEMPTY unresolved_block)) (NOT (ISEMPTY block_overlap)))
         (FOR_IN t0 block_overlap           (IF (AND (AND (CONSTRAINT != (TUPLE t0 4)  (STRING "data")) (EXISTS unresolved_block ((TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)))) (EXISTS unresolved_block ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2) (TUPLE t0 3) (TUPLE t0 4) (TUPLE t0 5)) unresolved_block_overlap)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE unresolved_interval
(STMTS     (TIMER_ON unresolved_interval "@t-nonrecursive-relation;unresolved_interval;code_inference.dl [876:7-876:26];"
(STMTS      (DEBUG 
 "unresolved_interval(Start,End) :- \n   unresolved_block(Block,Type,Size),\n   block_total_points(Block,Type,Size,Points),\n   Points >= 0,\n   block_candidate_boundaries(Block,Type,Start,End),\n   Size = (End-Start).\nin file code_inference.dl [878:1-883:24]" 
      (TIMER_ON unresolved_interval "@t-nonrecursive-rule;unresolved_interval;code_inference.dl [878:1-883:24];unresolved_interval(Start,End) :- \\n   unresolved_block(Block,Type,Size),\\n   block_total_points(Block,Type,Size,Points),\\n   Points >= 0,\\n   block_candidate_boundaries(Block,Type,Start,End),\\n   Size = (End-Start).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY block_candidate_boundaries)) (NOT (ISEMPTY unresolved_block))) (NOT (ISEMPTY block_total_points)))
         (FOR_IN t0 unresolved_block           (INDEXED_IF_EXISTS t1 block_total_points (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1)) (= (TUPLE t1 2) (TUPLE t0 2)) (<= (NUMBER 0) (TUPLE t1 3) )) TRUE
           (FOR t2 block_candidate_boundaries (INDEX  (= (TUPLE t2 0) (TUPLE t0 0)) (= (TUPLE t2 1) (TUPLE t0 1)))
            (IF (CONSTRAINT = (TUPLE t0 2)  (INTRINSIC - (TUPLE t2 3) (TUPLE t2 2)))
             (INSERT ((TUPLE t2 2) (TUPLE t2 3)) unresolved_interval)
            ))))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE unresolved_interval_best_block
(STMTS (STMTS     (TIMER_ON unresolved_interval_best_block "@t-nonrecursive-relation;unresolved_interval_best_block;code_inference.dl [929:7-929:37];"
(STMTS      (DEBUG 
 "unresolved_interval_best_block(ID,SelectedBlock,SelectedType,Size,((Size*5)+as(@generator_0, unsigned))) :- \n   unresolved_interval_order(ID,Start,End),\n   Size = (End-Start),\n   block_type_priority(SelectedType,@generator_1),\n   block_total_points(SelectedBlock,SelectedType,Size,@generator_0),\n   block_candidate_boundaries(SelectedBlock,SelectedType,Start,End),\n   @generator_0 = max Points : { __agg_subclause6(+underscore_4442,End,Points,Size,Start,+underscore_4443) },\n   @generator_1 = max Priority : { __agg_subclause7(+underscore_4444,End,@generator_0,Priority,Size,Start,+underscore_4445) }.\nin file code_inference.dl [931:1-948:49]" 
      (TIMER_ON unresolved_interval_best_block "@t-nonrecursive-rule;unresolved_interval_best_block;code_inference.dl [931:1-948:49];unresolved_interval_best_block(ID,SelectedBlock,SelectedType,Size,((Size*5)+as(@generator_0, unsigned))) :- \\n   unresolved_interval_order(ID,Start,End),\\n   Size = (End-Start),\\n   block_type_priority(SelectedType,@generator_1),\\n   block_total_points(SelectedBlock,SelectedType,Size,@generator_0),\\n   block_candidate_boundaries(SelectedBlock,SelectedType,Start,End),\\n   @generator_0 = max Points : { __agg_subclause6(+underscore_4442,End,Points,Size,Start,+underscore_4443) },\\n   @generator_1 = max Priority : { __agg_subclause7(+underscore_4444,End,@generator_0,Priority,Size,Start,+underscore_4445) }.;"
(QUERY
        (IF (AND (AND (AND (NOT (ISEMPTY unresolved_interval_order)) (NOT (ISEMPTY block_candidate_boundaries))) (NOT (ISEMPTY block_total_points))) (NOT (ISEMPTY block_type_priority)))
         (FOR_IN t0 unresolved_interval_order           (FOR_IN t1 block_type_priority            (FOR t2 block_total_points (INDEX  (= (TUPLE t2 1) (TUPLE t1 0)) (= (TUPLE t2 2) (INTRINSIC - (TUPLE t0 2) (TUPLE t0 1))))
            (IF (EXISTS block_candidate_boundaries ((TUPLE t2 0) (TUPLE t1 0) (TUPLE t0 1) (TUPLE t0 2)))
             (INDEX_AGGREGATE (= (TUPLE t3 0) (AGGREGATE_FUNCTION MAX  (TUPLE t3 2) ))  t3 __agg_subclause6 (INDEX  (= (TUPLE t3 1) (TUPLE t0 2)) (= (TUPLE t3 3) (TUPLE t2 2)) (= (TUPLE t3 4) (TUPLE t0 1))) TRUE 
              (IF (CONSTRAINT = (TUPLE t2 3)  (TUPLE t3 0))
               (INDEX_AGGREGATE (= (TUPLE t4 0) (AGGREGATE_FUNCTION MAX  (TUPLE t4 3) ))  t4 __agg_subclause7 (INDEX  (= (TUPLE t4 1) (TUPLE t0 2)) (= (TUPLE t4 2) (TUPLE t2 3)) (= (TUPLE t4 4) (TUPLE t2 2)) (= (TUPLE t4 5) (TUPLE t0 1))) TRUE 
                (IF (CONSTRAINT = (TUPLE t1 1)  (TUPLE t4 0))
                 (INSERT ((TUPLE t0 0) (TUPLE t2 0) (TUPLE t1 0) (TUPLE t2 2) (INTRINSIC + (INTRINSIC * (TUPLE t2 2) (UNSIGNED 5)) (TUPLE t2 3))) unresolved_interval_best_block)
                ))              ))            )))
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR __agg_subclause6)
     (CLEAR __agg_subclause7)
 ) )  )
  (SUBROUTINE unresolved_interval_order
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON unresolved_interval_order "@t-nonrecursive-relation;unresolved_interval_order;code_inference.dl [888:7-888:32];"
(STMTS      (DEBUG 
 "unresolved_interval_order(1,@generator_0,z) :- \n   __agg_single6(z),\n   @generator_0 = min Start : { unresolved_interval(Start,z) }.\nin file code_inference.dl [890:1-897:7]" 
      (TIMER_ON unresolved_interval_order "@t-nonrecursive-rule;unresolved_interval_order;code_inference.dl [890:1-897:7];unresolved_interval_order(1,@generator_0,z) :- \\n   __agg_single6(z),\\n   @generator_0 = min Start : { unresolved_interval(Start,z) }.;"
(QUERY
        (IF (NOT (ISEMPTY __agg_single6))
         (FOR_IN t0 __agg_single6           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MIN  (TUPLE t1 0) ))  t1 unresolved_interval (INDEX  (= (TUPLE t1 1) (TUPLE t0 0))) TRUE 
           (IF (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0))
            (INSERT ((UNSIGNED 1) (TUPLE t1 0) (TUPLE t0 0)) unresolved_interval_order)
           )))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 unresolved_interval_order       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_unresolved_interval_order)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_unresolved_interval_order "@t-recursive-relation;unresolved_interval_order;code_inference.dl [888:7-888:32];"
(STMTS (STMTS (STMTS       (DEBUG 
 "unresolved_interval_order((LastID+1),@generator_0,LastEnd) :- \n   unresolved_interval_order(LastID,LastStart,LastEnd),\n   @generator_0 = min Start : { unresolved_interval(Start,LastEnd),Start > LastStart }.\nin file code_inference.dl [899:1-904:7]" 
       (TIMER_ON @new_unresolved_interval_order "@t-recursive-rule;unresolved_interval_order;0;code_inference.dl [899:1-904:7];unresolved_interval_order((LastID+1),@generator_0,LastEnd) :- \\n   unresolved_interval_order(LastID,LastStart,LastEnd),\\n   @generator_0 = min Start : { unresolved_interval(Start,LastEnd),Start > LastStart }.;"
(QUERY
         (IF (NOT (ISEMPTY @delta_unresolved_interval_order))
          (FOR_IN t0 @delta_unresolved_interval_order            (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MIN  (TUPLE t1 0) ))  t1 unresolved_interval (INDEX  (= (TUPLE t1 1) (TUPLE t0 2))) (AND (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t0 1)) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 1)))
            (IF (AND (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0)) (NOT (EXISTS unresolved_interval_order ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) (TUPLE t1 0) (TUPLE t0 2)))))
             (INSERT ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) (TUPLE t1 0) (TUPLE t0 2)) @new_unresolved_interval_order)
            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "unresolved_interval_order((LastID+1),@generator_2,@generator_1) :- \n   unresolved_interval_order(LastID,LastStart,LastEnd),\n   0 = count : { unresolved_interval(Start0,LastEnd),Start0 > LastStart },\n   @generator_1 = min End : { unresolved_interval(+underscore_4446,End),End > LastEnd },\n   @generator_2 = min Start : { unresolved_interval(Start,@generator_1) }.\nin file code_inference.dl [906:1-918:7]" 
       (TIMER_ON @new_unresolved_interval_order "@t-recursive-rule;unresolved_interval_order;0;code_inference.dl [906:1-918:7];unresolved_interval_order((LastID+1),@generator_2,@generator_1) :- \\n   unresolved_interval_order(LastID,LastStart,LastEnd),\\n   0 = count : { unresolved_interval(Start0,LastEnd),Start0 > LastStart },\\n   @generator_1 = min End : { unresolved_interval(+underscore_4446,End),End > LastEnd },\\n   @generator_2 = min Start : { unresolved_interval(Start,@generator_1) }.;"
(QUERY
         (IF (NOT (ISEMPTY @delta_unresolved_interval_order))
          (FOR_IN t0 @delta_unresolved_interval_order            (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION COUNT  UNDEF ))  t1 unresolved_interval (INDEX  (= (TUPLE t1 1) (TUPLE t0 2))) (AND (CONSTRAINT >= (TUPLE t1 0)  (TUPLE t0 1)) (CONSTRAINT != (TUPLE t1 0)  (TUPLE t0 1)))
            (IF (CONSTRAINT = (NUMBER 0)  (TUPLE t1 0))
             (AGGREGATE t2 min (TUPLE t2 1)  t2 unresolved_interval (CONSTRAINT > (TUPLE t2 1)  (TUPLE t0 2))
              (IF (CONSTRAINT = (TUPLE t2 0)  (TUPLE t2 0))
               (INDEX_AGGREGATE (= (TUPLE t3 0) (AGGREGATE_FUNCTION MIN  (TUPLE t3 0) ))  t3 unresolved_interval (INDEX  (= (TUPLE t3 1) (TUPLE t2 0))) TRUE 
                (IF (AND (CONSTRAINT = (TUPLE t3 0)  (TUPLE t3 0)) (NOT (EXISTS unresolved_interval_order ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) (TUPLE t3 0) (TUPLE t2 0)))))
                 (INSERT ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) (TUPLE t3 0) (TUPLE t2 0)) @new_unresolved_interval_order)
                ))              ))            )))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_unresolved_interval_order "@t-recursive-relation;unresolved_interval_order;code_inference.dl [888:7-888:32];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_unresolved_interval_order))
 ) (STMTS      (TIMER_ON @new_unresolved_interval_order "@c-recursive-relation;unresolved_interval_order;code_inference.dl [888:7-888:32];"
(STMTS (QUERY
       (FOR_IN t0 @new_unresolved_interval_order         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) unresolved_interval_order)
)
      )
       (SWAP @delta_unresolved_interval_order @new_unresolved_interval_order)
       (CLEAR @new_unresolved_interval_order)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_unresolved_interval_order)
     (CLEAR @new_unresolved_interval_order)
 ) )  ) (STMTS     (CLEAR __agg_single6)
     (CLEAR unresolved_interval)
 ) )  )
  (SUBROUTINE value_reg_at_operand
(STMTS     (TIMER_ON value_reg_at_operand "@t-nonrecursive-relation;value_reg_at_operand;data_access_analysis.dl [83:7-83:27];"
(STMTS      (DEBUG 
 "value_reg_at_operand(EA,Op_index,\"NONE\",0,0,0,\"complete\") :- \n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\n   \"NONE\" = Reg2.\nin file data_access_analysis.dl [148:1-157:18]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [148:1-157:18];value_reg_at_operand(EA,Op_index,\\\"NONE\\\",0,0,0,\\\"complete\\\") :- \\n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\\n   \\\"NONE\\\" = Reg2.;"
(QUERY
        (IF (NOT (ISEMPTY data_access))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 3) (STRING "NONE")))
          (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "NONE") (UNSIGNED 0) (NUMBER 0) (NUMBER 0) (STRING "complete")) value_reg_at_operand)
)        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand(EA,Op_index,\"NONE\",0,0,0,\"complete\") :- \n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\n   \"NONE\" = Reg3.\nin file data_access_analysis.dl [148:1-157:18]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [148:1-157:18];value_reg_at_operand(EA,Op_index,\\\"NONE\\\",0,0,0,\\\"complete\\\") :- \\n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\\n   \\\"NONE\\\" = Reg3.;"
(QUERY
        (IF (NOT (ISEMPTY data_access))
         (FOR t0 data_access (INDEX  (= (TUPLE t0 4) (STRING "NONE")))
          (INSERT ((TUPLE t0 0) (TUPLE t0 1) (STRING "NONE") (UNSIGNED 0) (NUMBER 0) (NUMBER 0) (STRING "complete")) value_reg_at_operand)
)        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand(EA,Op_index,Reg2,EA_from,Mult,Offset,\"loop\") :- \n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\n   Reg2 != \"NONE\",\n   Reg_nn = as(Reg2, register),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\"loop\"),\n   !reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).\nin file data_access_analysis.dl [90:1-111:7]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [90:1-111:7];value_reg_at_operand(EA,Op_index,Reg2,EA_from,Mult,Offset,\\\"loop\\\") :- \\n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\\n   Reg2 != \\\"NONE\\\",\\n   Reg_nn = as(Reg2, register),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\\\"loop\\\"),\\n   !reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_value_reg)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 data_access           (IF (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE"))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 3)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 5) (STRING "loop")))
             (IF (NOT (EXISTS reg_def_use.def_used ((TUPLE t2 2) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1))))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t2 4) (STRING "loop")) value_reg_at_operand)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand(EA,Op_index,Reg2,EA_from,Mult,(Offset-Mult),\"loop\") :- \n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\n   Reg2 != \"NONE\",\n   Reg_nn = as(Reg2, register),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\"loop\"),\n   reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).\nin file data_access_analysis.dl [90:1-111:7]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [90:1-111:7];value_reg_at_operand(EA,Op_index,Reg2,EA_from,Mult,(Offset-Mult),\\\"loop\\\") :- \\n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\\n   Reg2 != \\\"NONE\\\",\\n   Reg_nn = as(Reg2, register),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\\\"loop\\\"),\\n   reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY best_value_reg)))
         (FOR_IN t0 data_access           (IF (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE"))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 3)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 5) (STRING "loop")))
             (IF (EXISTS reg_def_use.def_used ((TUPLE t2 2) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC - (TUPLE t2 4) (TUPLE t2 3)) (STRING "loop")) value_reg_at_operand)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand(EA,Op_index,Reg3,EA_from,Mult,Offset,\"loop\") :- \n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\n   Reg3 != \"NONE\",\n   Reg_nn = as(Reg3, register),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\"loop\"),\n   !reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).\nin file data_access_analysis.dl [90:1-111:7]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [90:1-111:7];value_reg_at_operand(EA,Op_index,Reg3,EA_from,Mult,Offset,\\\"loop\\\") :- \\n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\\n   Reg3 != \\\"NONE\\\",\\n   Reg_nn = as(Reg3, register),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\\\"loop\\\"),\\n   !reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_value_reg)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 data_access           (IF (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE"))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 4)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 5) (STRING "loop")))
             (IF (NOT (EXISTS reg_def_use.def_used ((TUPLE t2 2) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1))))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 4) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t2 4) (STRING "loop")) value_reg_at_operand)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand(EA,Op_index,Reg3,EA_from,Mult,(Offset-Mult),\"loop\") :- \n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\n   Reg3 != \"NONE\",\n   Reg_nn = as(Reg3, register),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\"loop\"),\n   reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).\nin file data_access_analysis.dl [90:1-111:7]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [90:1-111:7];value_reg_at_operand(EA,Op_index,Reg3,EA_from,Mult,(Offset-Mult),\\\"loop\\\") :- \\n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\\n   Reg3 != \\\"NONE\\\",\\n   Reg_nn = as(Reg3, register),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\\\"loop\\\"),\\n   reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY best_value_reg)))
         (FOR_IN t0 data_access           (IF (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE"))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 4)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 5) (STRING "loop")))
             (IF (EXISTS reg_def_use.def_used ((TUPLE t2 2) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 4) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC - (TUPLE t2 4) (TUPLE t2 3)) (STRING "loop")) value_reg_at_operand)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand(EA,Op_index,Reg2,EA_from,Mult,max(Offset,0),Type) :- \n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\n   Reg2 != \"NONE\",\n   Reg_nn = as(Reg2, register),\n   !value_reg_at_operand_loop(EA,Op_index,Reg2,_,_,_,_),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,Type).\nin file data_access_analysis.dl [113:1-132:7]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [113:1-132:7];value_reg_at_operand(EA,Op_index,Reg2,EA_from,Mult,max(Offset,0),Type) :- \\n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\\n   Reg2 != \\\"NONE\\\",\\n   Reg_nn = as(Reg2, register),\\n   !value_reg_at_operand_loop(EA,Op_index,Reg2,_,_,_,_),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,Type).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_value_reg)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 data_access           (IF (AND (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE")) (NOT (EXISTS value_reg_at_operand_loop ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 3)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC max (TUPLE t2 4) (NUMBER 0)) (TUPLE t2 5)) value_reg_at_operand)
))          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand(EA,Op_index,Reg2,EA_from,Mult,0,Type) :- \n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\n   Reg2 != \"NONE\",\n   Reg_nn = as(Reg2, register),\n   !value_reg_at_operand_loop(EA,Op_index,Reg2,_,_,_,_),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,_,Type),\n   Type = \"incomplete\".\nin file data_access_analysis.dl [113:1-132:7]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [113:1-132:7];value_reg_at_operand(EA,Op_index,Reg2,EA_from,Mult,0,Type) :- \\n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\\n   Reg2 != \\\"NONE\\\",\\n   Reg_nn = as(Reg2, register),\\n   !value_reg_at_operand_loop(EA,Op_index,Reg2,_,_,_,_),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,_,Type),\\n   Type = \\\"incomplete\\\".;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_value_reg)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 data_access           (IF (AND (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE")) (NOT (EXISTS value_reg_at_operand_loop ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 3)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 5) (STRING "incomplete")))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t2 2) (TUPLE t2 3) (NUMBER 0) (TUPLE t2 5)) value_reg_at_operand)
))          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand(EA,Op_index,Reg3,EA_from,Mult,max(Offset,0),Type) :- \n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\n   Reg3 != \"NONE\",\n   Reg_nn = as(Reg3, register),\n   !value_reg_at_operand_loop(EA,Op_index,Reg3,_,_,_,_),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,Type).\nin file data_access_analysis.dl [113:1-132:7]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [113:1-132:7];value_reg_at_operand(EA,Op_index,Reg3,EA_from,Mult,max(Offset,0),Type) :- \\n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\\n   Reg3 != \\\"NONE\\\",\\n   Reg_nn = as(Reg3, register),\\n   !value_reg_at_operand_loop(EA,Op_index,Reg3,_,_,_,_),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,Type).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_value_reg)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 data_access           (IF (AND (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE")) (NOT (EXISTS value_reg_at_operand_loop ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 4) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 4)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 4) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC max (TUPLE t2 4) (NUMBER 0)) (TUPLE t2 5)) value_reg_at_operand)
))          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand(EA,Op_index,Reg3,EA_from,Mult,0,Type) :- \n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\n   Reg3 != \"NONE\",\n   Reg_nn = as(Reg3, register),\n   !value_reg_at_operand_loop(EA,Op_index,Reg3,_,_,_,_),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,_,Type),\n   Type = \"incomplete\".\nin file data_access_analysis.dl [113:1-132:7]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [113:1-132:7];value_reg_at_operand(EA,Op_index,Reg3,EA_from,Mult,0,Type) :- \\n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\\n   Reg3 != \\\"NONE\\\",\\n   Reg_nn = as(Reg3, register),\\n   !value_reg_at_operand_loop(EA,Op_index,Reg3,_,_,_,_),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,_,Type),\\n   Type = \\\"incomplete\\\".;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_value_reg)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 data_access           (IF (AND (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE")) (NOT (EXISTS value_reg_at_operand_loop ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 4) UNDEF UNDEF UNDEF UNDEF))))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 4)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 5) (STRING "incomplete")))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 4) (TUPLE t2 2) (TUPLE t2 3) (NUMBER 0) (TUPLE t2 5)) value_reg_at_operand)
))          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand(EA,Op_index,Reg2,0,1,0,\"incomplete\") :- \n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\n   Reg2 != \"NONE\",\n   !reg_def_use.def_used(_,as(Reg2, register),EA,Op_index).\nin file data_access_analysis.dl [135:1-145:49]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [135:1-145:49];value_reg_at_operand(EA,Op_index,Reg2,0,1,0,\\\"incomplete\\\") :- \\n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\\n   Reg2 != \\\"NONE\\\",\\n   !reg_def_use.def_used(_,as(Reg2, register),EA,Op_index).;"
(QUERY
        (IF (NOT (ISEMPTY data_access))
         (FOR_IN t0 data_access           (IF (AND (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE")) (NOT (EXISTS reg_def_use.def_used (UNDEF (TUPLE t0 3) (TUPLE t0 0) (TUPLE t0 1)))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3) (UNSIGNED 0) (NUMBER 1) (NUMBER 0) (STRING "incomplete")) value_reg_at_operand)
          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand(EA,Op_index,Reg3,0,1,0,\"incomplete\") :- \n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\n   Reg3 != \"NONE\",\n   !reg_def_use.def_used(_,as(Reg3, register),EA,Op_index).\nin file data_access_analysis.dl [135:1-145:49]" 
      (TIMER_ON value_reg_at_operand "@t-nonrecursive-rule;value_reg_at_operand;data_access_analysis.dl [135:1-145:49];value_reg_at_operand(EA,Op_index,Reg3,0,1,0,\\\"incomplete\\\") :- \\n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\\n   Reg3 != \\\"NONE\\\",\\n   !reg_def_use.def_used(_,as(Reg3, register),EA,Op_index).;"
(QUERY
        (IF (NOT (ISEMPTY data_access))
         (FOR_IN t0 data_access           (IF (AND (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE")) (NOT (EXISTS reg_def_use.def_used (UNDEF (TUPLE t0 4) (TUPLE t0 0) (TUPLE t0 1)))))
           (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 4) (UNSIGNED 0) (NUMBER 1) (NUMBER 0) (STRING "incomplete")) value_reg_at_operand)
          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE value_reg_at_operand_loop
(STMTS     (TIMER_ON value_reg_at_operand_loop "@t-nonrecursive-relation;value_reg_at_operand_loop;data_access_analysis.dl [87:7-87:32];"
(STMTS      (DEBUG 
 "value_reg_at_operand_loop(EA,Op_index,Reg2,EA_from,Mult,Offset,\"loop\") :- \n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\n   Reg2 != \"NONE\",\n   Reg_nn = as(Reg2, register),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\"loop\"),\n   !reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).\nin file data_access_analysis.dl [90:1-111:7]" 
      (TIMER_ON value_reg_at_operand_loop "@t-nonrecursive-rule;value_reg_at_operand_loop;data_access_analysis.dl [90:1-111:7];value_reg_at_operand_loop(EA,Op_index,Reg2,EA_from,Mult,Offset,\\\"loop\\\") :- \\n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\\n   Reg2 != \\\"NONE\\\",\\n   Reg_nn = as(Reg2, register),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\\\"loop\\\"),\\n   !reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_value_reg)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 data_access           (IF (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE"))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 3)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 5) (STRING "loop")))
             (IF (NOT (EXISTS reg_def_use.def_used ((TUPLE t2 2) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1))))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t2 4) (STRING "loop")) value_reg_at_operand_loop)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand_loop(EA,Op_index,Reg2,EA_from,Mult,(Offset-Mult),\"loop\") :- \n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\n   Reg2 != \"NONE\",\n   Reg_nn = as(Reg2, register),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\"loop\"),\n   reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).\nin file data_access_analysis.dl [90:1-111:7]" 
      (TIMER_ON value_reg_at_operand_loop "@t-nonrecursive-rule;value_reg_at_operand_loop;data_access_analysis.dl [90:1-111:7];value_reg_at_operand_loop(EA,Op_index,Reg2,EA_from,Mult,(Offset-Mult),\\\"loop\\\") :- \\n   data_access(EA,Op_index,_,Reg2,_,_,_,_),\\n   Reg2 != \\\"NONE\\\",\\n   Reg_nn = as(Reg2, register),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\\\"loop\\\"),\\n   reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY best_value_reg)))
         (FOR_IN t0 data_access           (IF (CONSTRAINT != (TUPLE t0 3)  (STRING "NONE"))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 3)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 5) (STRING "loop")))
             (IF (EXISTS reg_def_use.def_used ((TUPLE t2 2) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 3) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC - (TUPLE t2 4) (TUPLE t2 3)) (STRING "loop")) value_reg_at_operand_loop)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand_loop(EA,Op_index,Reg3,EA_from,Mult,Offset,\"loop\") :- \n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\n   Reg3 != \"NONE\",\n   Reg_nn = as(Reg3, register),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\"loop\"),\n   !reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).\nin file data_access_analysis.dl [90:1-111:7]" 
      (TIMER_ON value_reg_at_operand_loop "@t-nonrecursive-rule;value_reg_at_operand_loop;data_access_analysis.dl [90:1-111:7];value_reg_at_operand_loop(EA,Op_index,Reg3,EA_from,Mult,Offset,\\\"loop\\\") :- \\n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\\n   Reg3 != \\\"NONE\\\",\\n   Reg_nn = as(Reg3, register),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\\\"loop\\\"),\\n   !reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY best_value_reg)) (NOT (ISEMPTY data_access))) (NOT (ISEMPTY reg_def_use.def_used)))
         (FOR_IN t0 data_access           (IF (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE"))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 4)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 5) (STRING "loop")))
             (IF (NOT (EXISTS reg_def_use.def_used ((TUPLE t2 2) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1))))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 4) (TUPLE t2 2) (TUPLE t2 3) (TUPLE t2 4) (STRING "loop")) value_reg_at_operand_loop)
             )))          ))
        )       )
      )
     )
      (DEBUG 
 "value_reg_at_operand_loop(EA,Op_index,Reg3,EA_from,Mult,(Offset-Mult),\"loop\") :- \n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\n   Reg3 != \"NONE\",\n   Reg_nn = as(Reg3, register),\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\"loop\"),\n   reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).\nin file data_access_analysis.dl [90:1-111:7]" 
      (TIMER_ON value_reg_at_operand_loop "@t-nonrecursive-rule;value_reg_at_operand_loop;data_access_analysis.dl [90:1-111:7];value_reg_at_operand_loop(EA,Op_index,Reg3,EA_from,Mult,(Offset-Mult),\\\"loop\\\") :- \\n   data_access(EA,Op_index,_,_,Reg3,_,_,_),\\n   Reg3 != \\\"NONE\\\",\\n   Reg_nn = as(Reg3, register),\\n   reg_def_use.def_used(EA_def,Reg_nn,EA,Op_index),\\n   best_value_reg(EA_def,Reg_nn,EA_from,Mult,Offset,\\\"loop\\\"),\\n   reg_def_use.def_used(EA_from,Reg_nn,EA,Op_index).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY data_access)) (NOT (ISEMPTY reg_def_use.def_used))) (NOT (ISEMPTY best_value_reg)))
         (FOR_IN t0 data_access           (IF (CONSTRAINT != (TUPLE t0 4)  (STRING "NONE"))
           (FOR t1 reg_def_use.def_used (INDEX  (= (TUPLE t1 1) (TUPLE t0 4)) (= (TUPLE t1 2) (TUPLE t0 0)) (= (TUPLE t1 3) (TUPLE t0 1)))
            (FOR t2 best_value_reg (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)) (= (TUPLE t2 1) (TUPLE t1 1)) (= (TUPLE t2 5) (STRING "loop")))
             (IF (EXISTS reg_def_use.def_used ((TUPLE t2 2) (TUPLE t1 1) (TUPLE t0 0) (TUPLE t0 1)))
              (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 4) (TUPLE t2 2) (TUPLE t2 3) (INTRINSIC - (TUPLE t2 4) (TUPLE t2 3)) (STRING "loop")) value_reg_at_operand_loop)
             )))          ))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE value_reg_max_mult
(STMTS (STMTS     (TIMER_ON value_reg_max_mult "@t-nonrecursive-relation;value_reg_max_mult;value_analysis.dl [349:7-349:25];"
(STMTS      (DEBUG 
 "value_reg_max_mult(EA,Reg,@generator_0) :- \n   reg_def_use.def(EA,Reg),\n   !value_reg(EA,Reg,_,\"Unknown\",_,_,_),\n   @generator_0 = max Multiplier : { value_reg(EA,Reg,+underscore_4636,+underscore_4637,Multiplier,+underscore_4638,+underscore_4639) }.\nin file value_analysis.dl [351:1-354:69]" 
      (TIMER_ON value_reg_max_mult "@t-nonrecursive-rule;value_reg_max_mult;value_analysis.dl [351:1-354:69];value_reg_max_mult(EA,Reg,@generator_0) :- \\n   reg_def_use.def(EA,Reg),\\n   !value_reg(EA,Reg,_,\\\"Unknown\\\",_,_,_),\\n   @generator_0 = max Multiplier : { value_reg(EA,Reg,+underscore_4636,+underscore_4637,Multiplier,+underscore_4638,+underscore_4639) }.;"
(QUERY
        (IF (NOT (ISEMPTY reg_def_use.def))
         (FOR_IN t0 reg_def_use.def           (IF (NOT (EXISTS value_reg ((TUPLE t0 0) (TUPLE t0 1) UNDEF (STRING "Unknown") UNDEF UNDEF UNDEF)))
           (INDEX_AGGREGATE (= (TUPLE t1 0) (AGGREGATE_FUNCTION MAX  (TUPLE t1 4) ))  t1 value_reg (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)) (= (TUPLE t1 1) (TUPLE t0 1))) TRUE 
            (IF (CONSTRAINT = (TUPLE t1 0)  (TUPLE t1 0))
             (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t1 0)) value_reg_max_mult)
            ))          ))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR reg_def_use.def)
 ) )  )
  (SUBROUTINE wis_has_prior
(STMTS     (TIMER_ON wis_has_prior "@t-nonrecursive-relation;wis_has_prior;code_inference.dl [956:7-956:20];"
(STMTS      (DEBUG 
 "wis_has_prior(I,Prior) :- \n   unresolved_interval_order(Prior,_,PriorEnd),\n   unresolved_interval_order( _tmp_151,_,NextEnd),\n   NextEnd > PriorEnd,\n   unresolved_interval_order(I,Start,_),\n   NextEnd > Start,\n   Start >= PriorEnd,\n    _tmp_151 = (Prior+1).\nin file code_inference.dl [958:1-966:40]" 
      (TIMER_ON wis_has_prior "@t-nonrecursive-rule;wis_has_prior;code_inference.dl [958:1-966:40];wis_has_prior(I,Prior) :- \\n   unresolved_interval_order(Prior,_,PriorEnd),\\n   unresolved_interval_order( _tmp_151,_,NextEnd),\\n   NextEnd > PriorEnd,\\n   unresolved_interval_order(I,Start,_),\\n   NextEnd > Start,\\n   Start >= PriorEnd,\\n    _tmp_151 = (Prior+1).;"
(QUERY
        (IF (NOT (ISEMPTY unresolved_interval_order))
         (FOR_IN t0 unresolved_interval_order           (FOR t1 unresolved_interval_order (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1))))
           (IF (AND (CONSTRAINT >= (TUPLE t1 2)  (TUPLE t0 2)) (CONSTRAINT != (TUPLE t1 2)  (TUPLE t0 2)))
            (FOR_IN t2 unresolved_interval_order              (IF (AND (CONSTRAINT >= (TUPLE t2 1)  (TUPLE t0 2)) (CONSTRAINT > (TUPLE t1 2)  (TUPLE t2 1)))
              (INSERT ((TUPLE t2 0) (TUPLE t0 0)) wis_has_prior)
             ))
           )))
        )       )
      )
     )
 )    )
 )  )
  (SUBROUTINE wis_memo
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON wis_memo "@t-nonrecursive-relation;wis_memo;code_inference.dl [995:7-995:15];"
(STMTS      (DEBUG 
 "wis_memo(0,0,0).\nin file code_inference.dl [997:1-997:17]" 
      (TIMER_ON wis_memo "@t-nonrecursive-rule;wis_memo;code_inference.dl [997:1-997:17];wis_memo(0,0,0).;"
(QUERY
        (INSERT ((UNSIGNED 0) (UNSIGNED 0) (UNSIGNED 0)) wis_memo)
       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 wis_memo       (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) @delta_wis_memo)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_wis_memo "@t-recursive-relation;wis_memo;code_inference.dl [995:7-995:15];"
(STMTS (STMTS (STMTS       (DEBUG 
 "wis_memo(I,max(LeaveWeight,(TakeWeight0+IWeight)),@functor_choose_max(LeaveWeight,(TakeWeight0+IWeight),IPrev,P)) :- \n   wis_memo(IPrev,LeaveWeight,_),\n   I = (IPrev+1),\n   IPrev = (I-1),\n   unresolved_interval_best_block(I,_,_,_,IWeight),\n   wis_prior(I,P),\n   wis_memo(P,TakeWeight0,_). .plan 1:(4,3,2,1)\nin file code_inference.dl [999:1-1011:64]" 
       (TIMER_ON @new_wis_memo "@t-recursive-rule;wis_memo;0;code_inference.dl [999:1-1011:64];wis_memo(I,max(LeaveWeight,(TakeWeight0+IWeight)),@functor_choose_max(LeaveWeight,(TakeWeight0+IWeight),IPrev,P)) :- \\n   wis_memo(IPrev,LeaveWeight,_),\\n   I = (IPrev+1),\\n   IPrev = (I-1),\\n   unresolved_interval_best_block(I,_,_,_,IWeight),\\n   wis_prior(I,P),\\n   wis_memo(P,TakeWeight0,_). .plan 1:(4,3,2,1);"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_wis_memo)) (NOT (ISEMPTY wis_memo))) (NOT (ISEMPTY wis_prior))) (NOT (ISEMPTY unresolved_interval_best_block)))
          (FOR_IN t0 @delta_wis_memo            (FOR t1 unresolved_interval_best_block (INDEX  (= (TUPLE t1 0) (INTRINSIC + (TUPLE t0 0) (UNSIGNED 1))))
            (IF (CONSTRAINT = (TUPLE t0 0)  (INTRINSIC - (TUPLE t1 0) (UNSIGNED 1)))
             (FOR t2 wis_prior (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
              (FOR t3 wis_memo (INDEX  (= (TUPLE t3 0) (TUPLE t2 1)))
               (IF (AND (NOT (EXISTS wis_memo ((TUPLE t1 0) (INTRINSIC max (TUPLE t0 1) (INTRINSIC + (TUPLE t3 1) (TUPLE t1 4))) (USER_FUNCTOR "functor_choose_max_[TypeAttribute::Unsigned,TypeAttribute::Unsigned,TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (INTRINSIC + (TUPLE t3 1) (TUPLE t1 4)) (TUPLE t0 0) (TUPLE t2 1)))))) (NOT (EXISTS @delta_wis_memo ((TUPLE t2 1) (TUPLE t3 1) UNDEF))))
                (INSERT ((TUPLE t1 0) (INTRINSIC max (TUPLE t0 1) (INTRINSIC + (TUPLE t3 1) (TUPLE t1 4))) (USER_FUNCTOR "functor_choose_max_[TypeAttribute::Unsigned,TypeAttribute::Unsigned,TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 1) (INTRINSIC + (TUPLE t3 1) (TUPLE t1 4)) (TUPLE t0 0) (TUPLE t2 1)))) @new_wis_memo)
               )))            )))
         )        )
       )
      )
 ) (STMTS       (DEBUG 
 "wis_memo(I,max(LeaveWeight,(TakeWeight0+IWeight)),@functor_choose_max(LeaveWeight,(TakeWeight0+IWeight),IPrev,P)) :- \n   wis_memo(IPrev,LeaveWeight,_),\n   I = (IPrev+1),\n   IPrev = (I-1),\n   unresolved_interval_best_block(I,_,_,_,IWeight),\n   wis_prior(I,P),\n   wis_memo(P,TakeWeight0,_). .plan 1:(4,3,2,1)\nin file code_inference.dl [999:1-1011:64]" 
       (TIMER_ON @new_wis_memo "@t-recursive-rule;wis_memo;1;code_inference.dl [999:1-1011:64];wis_memo(I,max(LeaveWeight,(TakeWeight0+IWeight)),@functor_choose_max(LeaveWeight,(TakeWeight0+IWeight),IPrev,P)) :- \\n   wis_memo(IPrev,LeaveWeight,_),\\n   I = (IPrev+1),\\n   IPrev = (I-1),\\n   unresolved_interval_best_block(I,_,_,_,IWeight),\\n   wis_prior(I,P),\\n   wis_memo(P,TakeWeight0,_). .plan 1:(4,3,2,1);"
(QUERY
         (IF (AND (AND (AND (NOT (ISEMPTY @delta_wis_memo)) (NOT (ISEMPTY wis_memo))) (NOT (ISEMPTY unresolved_interval_best_block))) (NOT (ISEMPTY wis_prior)))
          (FOR_IN t0 @delta_wis_memo            (FOR t1 wis_prior (INDEX  (= (TUPLE t1 1) (TUPLE t0 0)))
            (FOR t2 unresolved_interval_best_block (INDEX  (= (TUPLE t2 0) (TUPLE t1 0)))
             (FOR t3 wis_memo (INDEX  (= (TUPLE t3 0) (INTRINSIC - (TUPLE t1 0) (UNSIGNED 1))))
              (IF (AND (CONSTRAINT = (TUPLE t1 0)  (INTRINSIC + (TUPLE t3 0) (UNSIGNED 1))) (NOT (EXISTS wis_memo ((TUPLE t1 0) (INTRINSIC max (TUPLE t3 1) (INTRINSIC + (TUPLE t0 1) (TUPLE t2 4))) (USER_FUNCTOR "functor_choose_max_[TypeAttribute::Unsigned,TypeAttribute::Unsigned,TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t3 1) (INTRINSIC + (TUPLE t0 1) (TUPLE t2 4)) (TUPLE t3 0) (TUPLE t0 0)))))))
               (INSERT ((TUPLE t1 0) (INTRINSIC max (TUPLE t3 1) (INTRINSIC + (TUPLE t0 1) (TUPLE t2 4))) (USER_FUNCTOR "functor_choose_max_[TypeAttribute::Unsigned,TypeAttribute::Unsigned,TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t3 1) (INTRINSIC + (TUPLE t0 1) (TUPLE t2 4)) (TUPLE t3 0) (TUPLE t0 0)))) @new_wis_memo)
              )))))
         )        )
       )
      )
 ) ) )     )
 ) (STMTS      (TIMER_ON @new_wis_memo "@t-recursive-relation;wis_memo;code_inference.dl [995:7-995:15];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_wis_memo))
 ) (STMTS      (TIMER_ON @new_wis_memo "@c-recursive-relation;wis_memo;code_inference.dl [995:7-995:15];"
(STMTS (QUERY
       (FOR_IN t0 @new_wis_memo         (INSERT ((TUPLE t0 0) (TUPLE t0 1) (TUPLE t0 2)) wis_memo)
)
      )
       (SWAP @delta_wis_memo @new_wis_memo)
       (CLEAR @new_wis_memo)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_wis_memo)
     (CLEAR @new_wis_memo)
 ) )  )  )  )
  (SUBROUTINE wis_prior
(STMTS (STMTS     (TIMER_ON wis_prior "@t-nonrecursive-relation;wis_prior;code_inference.dl [972:7-972:16];"
(STMTS      (DEBUG 
 "wis_prior(I,0) :- \n   unresolved_interval_order(I,_,_),\n   !wis_has_prior(I,_).\nin file code_inference.dl [974:1-976:25]" 
      (TIMER_ON wis_prior "@t-nonrecursive-rule;wis_prior;code_inference.dl [974:1-976:25];wis_prior(I,0) :- \\n   unresolved_interval_order(I,_,_),\\n   !wis_has_prior(I,_).;"
(QUERY
        (IF (NOT (ISEMPTY unresolved_interval_order))
         (FOR_IN t0 unresolved_interval_order           (IF (NOT (EXISTS wis_has_prior ((TUPLE t0 0) UNDEF)))
           (INSERT ((TUPLE t0 0) (UNSIGNED 0)) wis_prior)
          ))
        )       )
      )
     )
      (DEBUG 
 "wis_prior(I,Prior) :- \n   wis_has_prior(I,Prior).\nin file code_inference.dl [978:1-979:28]" 
      (TIMER_ON wis_prior "@t-nonrecursive-rule;wis_prior;code_inference.dl [978:1-979:28];wis_prior(I,Prior) :- \\n   wis_has_prior(I,Prior).;"
(QUERY
        (IF (NOT (ISEMPTY wis_has_prior))
         (FOR_IN t0 wis_has_prior           (INSERT ((TUPLE t0 0) (TUPLE t0 1)) wis_prior)
)
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR wis_has_prior)
 ) )  )
  (SUBROUTINE wis_schedule
(STMTS (STMTS     (TIMER_ON wis_schedule "@t-nonrecursive-relation;wis_schedule;code_inference.dl [1044:7-1044:19];"
(STMTS      (DEBUG 
 "wis_schedule(I) :- \n   wis_schedule_iter(I),\n   wis_memo(I,_,P),\n   wis_prior(I,P).\nin file code_inference.dl [1054:1-1057:20]" 
      (TIMER_ON wis_schedule "@t-nonrecursive-rule;wis_schedule;code_inference.dl [1054:1-1057:20];wis_schedule(I) :- \\n   wis_schedule_iter(I),\\n   wis_memo(I,_,P),\\n   wis_prior(I,P).;"
(QUERY
        (IF (AND (AND (NOT (ISEMPTY wis_prior)) (NOT (ISEMPTY wis_schedule_iter))) (NOT (ISEMPTY wis_memo)))
         (FOR_IN t0 wis_schedule_iter           (INDEXED_IF_EXISTS t1 wis_memo (INDEX  (= (TUPLE t1 0) (TUPLE t0 0))) (EXISTS wis_prior ((TUPLE t0 0) (TUPLE t1 2)))
           (INSERT ((TUPLE t0 0)) wis_schedule)
))
        )       )
      )
     )
 )    )
 ) (STMTS     (CLEAR wis_schedule_iter)
 ) )  )
  (SUBROUTINE wis_schedule_iter
(STMTS (STMTS (STMTS (STMTS (STMTS     (TIMER_ON wis_schedule_iter "@t-nonrecursive-relation;wis_schedule_iter;code_inference.dl [1046:7-1046:24];"
(STMTS      (DEBUG 
 "wis_schedule_iter(I) :- \n   unresolved_interval_order(I,_,_),\n   !unresolved_interval_order((I+1),_,_).\nin file code_inference.dl [1049:1-1051:41]" 
      (TIMER_ON wis_schedule_iter "@t-nonrecursive-rule;wis_schedule_iter;code_inference.dl [1049:1-1051:41];wis_schedule_iter(I) :- \\n   unresolved_interval_order(I,_,_),\\n   !unresolved_interval_order((I+1),_,_).;"
(QUERY
        (IF (NOT (ISEMPTY unresolved_interval_order))
         (FOR_IN t0 unresolved_interval_order           (IF (NOT (EXISTS unresolved_interval_order ((INTRINSIC + (TUPLE t0 0) (UNSIGNED 1)) UNDEF UNDEF)))
           (INSERT ((TUPLE t0 0)) wis_schedule_iter)
          ))
        )       )
      )
     )
 )    )
 )  (QUERY
     (FOR_IN t0 wis_schedule_iter       (INSERT ((TUPLE t0 0)) @delta_wis_schedule_iter)
)
    )
 )     (ASSIGN (VARIABLE loop_counter) (UNSIGNED 1))
 (LOOP
(STMTS (STMTS (STMTS      (TIMER_ON @new_wis_schedule_iter "@t-recursive-relation;wis_schedule_iter;code_inference.dl [1046:7-1046:24];"
(STMTS       (DEBUG 
 "wis_schedule_iter(Pred) :- \n   wis_schedule_iter(I),\n   wis_memo(I,_,Pred).\nin file code_inference.dl [1060:1-1062:24]" 
       (TIMER_ON @new_wis_schedule_iter "@t-recursive-rule;wis_schedule_iter;0;code_inference.dl [1060:1-1062:24];wis_schedule_iter(Pred) :- \\n   wis_schedule_iter(I),\\n   wis_memo(I,_,Pred).;"
(QUERY
         (IF (AND (NOT (ISEMPTY @delta_wis_schedule_iter)) (NOT (ISEMPTY wis_memo)))
          (FOR_IN t0 @delta_wis_schedule_iter            (FOR t1 wis_memo (INDEX  (= (TUPLE t1 0) (TUPLE t0 0)))
            (IF (NOT (EXISTS wis_schedule_iter ((TUPLE t1 2))))
             (INSERT ((TUPLE t1 2)) @new_wis_schedule_iter)
            )))
         )        )
       )
      )
 )     )
 ) (STMTS      (TIMER_ON @new_wis_schedule_iter "@t-recursive-relation;wis_schedule_iter;code_inference.dl [1046:7-1046:24];"
     )
 ) )  (STMTS      (EXIT (ISEMPTY @new_wis_schedule_iter))
 ) (STMTS      (TIMER_ON @new_wis_schedule_iter "@c-recursive-relation;wis_schedule_iter;code_inference.dl [1046:7-1046:24];"
(STMTS (QUERY
       (FOR_IN t0 @new_wis_schedule_iter         (INSERT ((TUPLE t0 0)) wis_schedule_iter)
)
      )
       (SWAP @delta_wis_schedule_iter @new_wis_schedule_iter)
       (CLEAR @new_wis_schedule_iter)
 )     )
 )      (ASSIGN (VARIABLE loop_counter) (INTRINSIC + (VARIABLE loop_counter) (UNSIGNED 1)))
 )    ) (STMTS     (CLEAR @delta_wis_schedule_iter)
     (CLEAR @new_wis_schedule_iter)
 ) )  )  )  )
  (SUBROUTINE zero_relocation
(STMTS     (TIMER_ON zero_relocation "@t-nonrecursive-relation;zero_relocation;self_diagnose.dl [114:7-114:22];"
(STMTS      (DEBUG 
 "zero_relocation(EA) :- \n   relocation(EA,_,_,_,_,_,_),\n   @functor_data_valid(EA,8) = 1,\n   0 = @functor_data_signed(EA,8).\nin file self_diagnose.dl [116:1-118:23]" 
      (TIMER_ON zero_relocation "@t-nonrecursive-rule;zero_relocation;self_diagnose.dl [116:1-118:23];zero_relocation(EA) :- \\n   relocation(EA,_,_,_,_,_,_),\\n   @functor_data_valid(EA,8) = 1,\\n   0 = @functor_data_signed(EA,8).;"
(QUERY
        (IF (NOT (ISEMPTY relocation))
         (FOR_IN t0 relocation           (IF (AND (CONSTRAINT = (NUMBER 0)  (USER_FUNCTOR "functor_data_signed_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Signed"  FALSE  ((TUPLE t0 0) (UNSIGNED 8)))) (CONSTRAINT = (USER_FUNCTOR "functor_data_valid_[TypeAttribute::Unsigned,TypeAttribute::Unsigned]_TypeAttribute::Unsigned"  FALSE  ((TUPLE t0 0) (UNSIGNED 8)))  (UNSIGNED 1)))
           (INSERT ((TUPLE t0 0)) zero_relocation)
          ))
        )       )
      )
     )
 )    )
 )  )
)
  (MAIN 
(STMTS     (TIMER "@runtime;"
(STMTS      (CALL stratum_base_address)
      (CALL stratum_+disconnected0)
      (CALL stratum_address_in_data)
      (CALL stratum_aligned_address_in_data)
      (CALL stratum_arch.call_operation)
      (CALL stratum_arch.call_operation_op_index)
      (CALL stratum_instruction)
      (CALL stratum_arch.call)
      (CALL stratum_instruction_get_op)
      (CALL stratum_next)
      (CALL stratum_arch.instruction_at)
      (CALL stratum_max_instruction_size)
      (CALL stratum_arch.move_operation)
      (CALL stratum_arch.jump_condition_code)
      (CALL stratum_arch.loop_operation)
      (CALL stratum_arch.jump_operation)
      (CALL stratum_arch.jump_operation_op_index)
      (CALL stratum_arch.conditional_operation)
      (CALL stratum_arch.conditional)
      (CALL stratum_arch.cmp_zero_operation)
      (CALL stratum_binary_format)
      (CALL stratum_no_return_function)
      (CALL stratum_arch.integer_reg_param)
      (CALL stratum_tls_segment_register)
      (CALL stratum_binary_type)
      (CALL stratum_relocation_active_symbol_table)
      (CALL stratum_instruction_op_access)
      (CALL stratum_instruction_get_dest_op)
      (CALL stratum_instruction_get_src_op)
      (CALL stratum_op_regdirect)
      (CALL stratum_arch.data_access_size)
      (CALL stratum_op_register_bitfield)
      (CALL stratum_arch.reg_map_rule)
      (CALL stratum_op_indirect)
      (CALL stratum_instruction_displacement_offset)
      (CALL stratum_op_shifted_w_reg)
      (CALL stratum_register_access)
      (CALL stratum_reg_map_nullable)
      (CALL stratum_reg_map)
      (CALL stratum_op_regdirect_contains_reg)
      (CALL stratum_reg_call)
      (CALL stratum_is_xor_reset)
      (CALL stratum_arch.move_reg_reg)
      (CALL stratum_op_indirect_contains_reg)
      (CALL stratum_op_indirect_mapped)
      (CALL stratum_arch.memory_access)
      (CALL stratum_arch.reg_reg_arithmetic_operation)
      (CALL stratum_op_immediate)
      (CALL stratum_instruction_immediate_offset)
      (CALL stratum_arch.reg_arithmetic_operation)
      (CALL stratum_arch.is_nop)
      (CALL stratum_limit_reg_op)
      (CALL stratum_arch.move_reg_imm)
      (CALL stratum_op_immediate_and_reg)
      (CALL stratum_relocation)
      (CALL stratum_instruction_has_relocation)
      (CALL stratum_tls_index)
      (CALL stratum_zero_relocation)
      (CALL stratum_pe_export_entry)
      (CALL stratum_pe_import_entry)
      (CALL stratum_symbol)
      (CALL stratum_pc_relative_operand)
      (CALL stratum_arch.pc_relative_addr)
      (CALL stratum_pc_relative_call)
      (CALL stratum_take_address)
      (CALL stratum_defined_symbol)
      (CALL stratum_direct_call)
      (CALL stratum_pc_load_call)
      (CALL stratum_ifunc_scope_score)
      (CALL stratum_symbol_visibility_score)
      (CALL stratum_ifunc_symbol_score)
      (CALL stratum_best_ifunc_symbol)
      (CALL stratum_function_symbol)
      (CALL stratum_symbol_set)
      (CALL stratum_ambiguous_symbol)
      (CALL stratum_symbol_scope_score)
      (CALL stratum_symbol_type_score)
      (CALL stratum_copy_relocated_symbol)
      (CALL stratum_trivial_relocation)
      (CALL stratum_byte_interval)
      (CALL stratum_section)
      (CALL stratum_symbol_at_section_end)
      (CALL stratum_symbol_before_section_beg)
      (CALL stratum_section_property)
      (CALL stratum_code_section)
      (CALL stratum_loaded_section)
      (CALL stratum_possible_rva_operand)
      (CALL stratum_got_reference_pointer)
      (CALL stratum_abi_intrinsic)
      (CALL stratum_bss_section)
      (CALL stratum___agg_subclause4)
      (CALL stratum___agg_single7)
      (CALL stratum___agg_subclause5)
      (CALL stratum___agg_single8)
      (CALL stratum_bss_section_limits)
      (CALL stratum_dynamic_entry)
      (CALL stratum_entry_point)
      (CALL stratum_start_function)
      (CALL stratum_fde_entry)
      (CALL stratum_fde_addresses)
      (CALL stratum_misaligned_fde_start)
      (CALL stratum_known_code)
      (CALL stratum_lsda_callsite)
      (CALL stratum_lsda_callsite_addresses)
      (CALL stratum_pe_data_directory)
      (CALL stratum_pe_debug_data)
      (CALL stratum_merged_data_region)
      (CALL stratum___agg_single4)
      (CALL stratum_arch.return_operation)
      (CALL stratum_arch.return)
      (CALL stratum_arch.jump)
      (CALL stratum_unconditional_jump)
      (CALL stratum_conditional_jump)
      (CALL stratum_pc_relative_jump)
      (CALL stratum_indirect_jump)
      (CALL stratum_reg_jump)
      (CALL stratum_conditional_return)
      (CALL stratum_unconditional_return)
      (CALL stratum_indirect_call)
      (CALL stratum_arch.loop_prefix)
      (CALL stratum_instruction_has_loop_prefix)
      (CALL stratum_direct_jump)
      (CALL stratum_npad)
      (CALL stratum_direct_or_pcrel_jump)
      (CALL stratum_repeated_byte)
      (CALL stratum_incremental_linking_candidate)
      (CALL stratum_incremental_linking)
      (CALL stratum_data_region)
      (CALL stratum_invalid_op_code)
      (CALL stratum_arch.interrupt_operation)
      (CALL stratum_arch.syscall_operation)
      (CALL stratum_arch.halt_operation)
      (CALL stratum_halt)
      (CALL stratum_plt_section)
      (CALL stratum_plt_entry)
      (CALL stratum_no_return_call)
      (CALL stratum_may_fallthrough)
      (CALL stratum_must_fallthrough)
      (CALL stratum_invalid)
      (CALL stratum_jump_table_prelude)
      (CALL stratum_relative_address_start)
      (CALL stratum_relative_address)
      (CALL stratum_basic_target)
      (CALL stratum_block_limit)
      (CALL stratum_instruction_memory_access_size)
      (CALL stratum_arch.simple_data_load)
      (CALL stratum_arch.reg_relative_load)
      (CALL stratum_arch.extend_load)
      (CALL stratum_is_padding)
      (CALL stratum_arch.logic_operation)
      (CALL stratum_may_have_symbolic_immediate)
      (CALL stratum_after_end)
      (CALL stratum_common_tail)
      (CALL stratum_code_in_block_candidate_refined)
      (CALL stratum_arch.condition_flags_reg)
      (CALL stratum_arch.frame_pointer)
      (CALL stratum_arch.general_purpose_reg)
      (CALL stratum_arch.return_reg)
      (CALL stratum_arch.stack_pointer)
      (CALL stratum_track_register)
      (CALL stratum_basic_reg_def_use.used_explicit)
      (CALL stratum_basic_reg_def_use.used)
      (CALL stratum_basic_reg_def_use.def)
      (CALL stratum_straight_line_last_def)
      (CALL stratum_straight_line_def_used)
      (CALL stratum_composite_data_access)
      (CALL stratum_data_block_candidate)
      (CALL stratum_padding_block_limit)
      (CALL stratum_nop_in_padding_candidate)
      (CALL stratum_padding_block_candidate)
      (CALL stratum_block_candidate_boundaries)
      (CALL stratum_block_overlap)
      (CALL stratum_overlapping_instruction)
      (CALL stratum_block_candidate_dependency_edge)
      (CALL stratum_reg_def_use.def)
      (CALL stratum_reg_def_use.used_explicit)
      (CALL stratum_stack_def_use.def)
      (CALL stratum_stack_def_use.used)
      (CALL stratum_elf_pointer_array_section_type)
      (CALL stratum_elf_section_type)
      (CALL stratum_section_type)
      (CALL stratum_function_pointer_section)
      (CALL stratum_known_block)
      (CALL stratum_impossible_block)
      (CALL stratum_data_section)
      (CALL stratum_non_zero_data_section)
      (CALL stratum_tls_section)
      (CALL stratum___agg_subclause)
      (CALL stratum___agg_single)
      (CALL stratum___agg_subclause0)
      (CALL stratum___agg_single0)
      (CALL stratum___agg_subclause1)
      (CALL stratum___agg_single1)
      (CALL stratum_tls_segment)
      (CALL stratum_tls_descriptor)
      (CALL stratum_+disconnected2)
      (CALL stratum_ascii_string)
      (CALL stratum_negative_block_points)
      (CALL stratum_unresolved_block)
      (CALL stratum_candidate_block_is_not_padding)
      (CALL stratum_candidate_block_is_padding)
      (CALL stratum_resolved_reaches)
      (CALL stratum_unresolved_block_overlap)
      (CALL stratum_elf_relocation_size)
      (CALL stratum_pe_relocation_size)
      (CALL stratum_relocation_size)
      (CALL stratum_block_points)
      (CALL stratum_block_total_points)
      (CALL stratum___agg_subclause6)
      (CALL stratum_unresolved_interval)
      (CALL stratum___agg_single6)
      (CALL stratum_unresolved_interval_order)
      (CALL stratum_wis_has_prior)
      (CALL stratum_wis_prior)
      (CALL stratum_block_type_priority)
      (CALL stratum___agg_subclause7)
      (CALL stratum_unresolved_interval_best_block)
      (CALL stratum_wis_memo)
      (CALL stratum_wis_schedule_iter)
      (CALL stratum_wis_schedule)
      (CALL stratum_discarded_block)
      (CALL stratum_code_in_block)
      (CALL stratum_reg_def_use.block_last_def)
      (CALL stratum_block)
      (CALL stratum_function_inference.function_entry_initial)
      (CALL stratum_inter_procedural_edge)
      (CALL stratum_block_last_instruction)
      (CALL stratum_incomplete_block)
      (CALL stratum_reg_def_use.return_block_end)
      (CALL stratum_reg_def_use.last_def_in_block)
      (CALL stratum_data_access)
      (CALL stratum_block_boundaries)
      (CALL stratum_data_in_code_propagate)
      (CALL stratum_first_block_in_byte_interval)
      (CALL stratum_data_in_code)
      (CALL stratum_initialized_data_segment)
      (CALL stratum_data_segment)
      (CALL stratum_address_in_data_refined)
      (CALL stratum_address_in_data_refined_range.in_ea)
      (CALL stratum_synchronous_access_barrier)
      (CALL stratum_next_block_in_byte_interval)
      (CALL stratum___agg_subclause2)
      (CALL stratum___agg_single2)
      (CALL stratum_inferred_main_dispatch)
      (CALL stratum_inferred_main_in_reg)
      (CALL stratum_plt_block)
      (CALL stratum_call_tls_get_addr)
      (CALL stratum_reg_def_use.used)
      (CALL stratum_reg_used_for)
      (CALL stratum_reg_def_use.used_in_block)
      (CALL stratum_no_return_call_refined)
      (CALL stratum_no_return_block)
      (CALL stratum_stack_def_use.block_last_def)
      (CALL stratum_stack_def_use.last_def_in_block)
      (CALL stratum_stack_def_use.live_var_def)
      (CALL stratum_reg_def_use.defined_in_block)
      (CALL stratum_reg_def_use.ref_in_block)
      (CALL stratum_adjusts_stack_in_block)
      (CALL stratum_block_instruction_next)
      (CALL stratum_stack_base_reg_move)
      (CALL stratum_stack_def_use.used_in_block)
      (CALL stratum_stack_def_use.defined_in_block)
      (CALL stratum_stack_def_use.ref_in_block)
      (CALL stratum_relocation_in_operand)
      (CALL stratum_block_still_overlap)
      (CALL stratum_interval_schedule_tie)
      (CALL stratum_got_section)
      (CALL stratum_reloc_type_relpc)
      (CALL stratum_relocation_adjustment)
      (CALL stratum_relocation_adjustment_total)
      (CALL stratum_arch.cmp_operation)
      (CALL stratum_cmp_immediate_to_reg)
      (CALL stratum_reg_def_use.flow_def)
      (CALL stratum_reg_def_use.live_var_def)
      (CALL stratum_cmp_reg_to_reg)
      (CALL stratum_reloc_type_nameless)
      (CALL stratum_reloc_type_with_name)
      (CALL stratum_tls_operand_attribute)
      (CALL stratum_symbolic_expr_from_relocation)
      (CALL stratum_simple_data_access_pattern)
      (CALL stratum_step_limit)
      (CALL stratum_step_limit_small)
      (CALL stratum_limit_type_map)
      (CALL stratum_arch.register_size_bits)
      (CALL stratum_arch.extend_reg)
      (CALL stratum_base_relative_jump)
      (CALL stratum_tls_global_dynamic)
      (CALL stratum_tls_local_dynamic)
      (CALL stratum_tls_relative_operand)
      (CALL stratum_symbolic_operand_candidate)
      (CALL stratum_value_reg_max_mult)
      (CALL stratum_best_value_reg)
      (CALL stratum_value_reg_at_operand_loop)
      (CALL stratum_value_reg_at_operand)
      (CALL stratum_data_access_pattern_candidate)
      (CALL stratum_data_access_pattern_candidate_refined)
      (CALL stratum_dap_location)
      (CALL stratum_dap_max_mult)
      (CALL stratum_data_access_pattern)
      (CALL stratum_data_access_pattern_non_zero)
      (CALL stratum_next_data_access)
      (CALL stratum_synchronous_access_barrier_after_access)
      (CALL stratum_synchronous_access)
      (CALL stratum_first_synchronous_access)
      (CALL stratum_next_dyssynchronous_data_access)
      (CALL stratum_base_relative_symbolic_operand)
      (CALL stratum_missed_jump_table)
      (CALL stratum_arch.multiplication_operation)
      (CALL stratum_arch.shift_rotate_operation)
      (CALL stratum_def_register_is_not_base_address)
      (CALL stratum_exception_section)
      (CALL stratum_special_data_section)
      (CALL stratum_regular_data_section)
      (CALL stratum_addr_outside_section_used_for_memory_access)
      (CALL stratum_dest_enlarged_data_section)
      (CALL stratum_moved_immediate_candidate)
      (CALL stratum_low_pass_mask)
      (CALL stratum_low_pass_filter)
      (CALL stratum_symbolic_operand_point)
      (CALL stratum_symbolic_operand)
      (CALL stratum_+disconnected1)
      (CALL stratum_labeled_data_candidate)
      (CALL stratum_after_address_in_data)
      (CALL stratum_next_address_in_data)
      (CALL stratum_address_array_aux)
      (CALL stratum_address_array)
      (CALL stratum_boundary_sym_expr)
      (CALL stratum_data_limit)
      (CALL stratum_data_limit_after_access)
      (CALL stratum_preferred_data_access)
      (CALL stratum_string_candidate)
      (CALL stratum_string_candidate_refined)
      (CALL stratum_next_data_limit)
      (CALL stratum_moved_displacement_candidate)
      (CALL stratum_discarded_jump_table_entry)
      (CALL stratum_relative_jump_table_entry)
      (CALL stratum_symbol_minus_symbol_candidate)
      (CALL stratum_data_object_candidate)
      (CALL stratum_data_object_conflict)
      (CALL stratum_label_conflict)
      (CALL stratum_data_object_point)
      (CALL stratum_data_object_total_points)
      (CALL stratum_discarded_data_object)
      (CALL stratum_data_object)
      (CALL stratum_string)
      (CALL stratum_inferred_main_function)
      (CALL stratum_alignment)
      (CALL stratum_elf_avoid_symbols)
      (CALL stratum_avoid_symbols)
      (CALL stratum_cie_entry)
      (CALL stratum_moved_pc_relative_candidate)
      (CALL stratum_last_fde)
      (CALL stratum_cie_encoding)
      (CALL stratum_cie_personality)
      (CALL stratum_dwarf_encoding_size)
      (CALL stratum_fde_pointer_locations)
      (CALL stratum_lsda)
      (CALL stratum_lsda_type_entry)
      (CALL stratum_option)
      (CALL stratum_symbolic_data)
      (CALL stratum_moved_label_candidate)
      (CALL stratum_moved_label)
      (CALL stratum_bad_symbol_constant)
      (CALL stratum_code_pointer_in_data)
      (CALL stratum_fde_instruction)
      (CALL stratum_fde_instruction_ref)
      (CALL stratum_last_fde_instruction)
      (CALL stratum_endproc_local_index)
      (CALL stratum_lsda_pointer_locations)
      (CALL stratum_symbol_minus_symbol)
      (CALL stratum_block_needs_splitting_at)
      (CALL stratum_split_block)
      (CALL stratum_code_in_split_block)
      (CALL stratum_moved_data_label)
      (CALL stratum_block_needs_merging)
      (CALL stratum_refined_block)
      (CALL stratum_code_in_refined_block)
      (CALL stratum_main_function)
      (CALL stratum_block_has_non_nop)
      (CALL stratum_nop_block)
      (CALL stratum_refined_block_last_instruction)
      (CALL stratum_block_information)
      (CALL stratum_next_refined_block_in_byte_interval)
      (CALL stratum_fde_block_addresses)
      (CALL stratum_fde_instruction_block_offset)
      (CALL stratum_padding)
      (CALL stratum_jump_table)
      (CALL stratum_resolved_transfer)
      (CALL stratum_function_inference.function_entry)
      (CALL stratum_inferred_special_symbol)
      (CALL stratum_symbol_score)
      (CALL stratum_best_func_symbol)
      (CALL stratum_function_inference.function_entry_name)
      (CALL stratum_function_inference.function_without_callframe)
      (CALL stratum_function_inference.in_function_initial)
      (CALL stratum_function_inference.not_in_function_initial)
      (CALL stratum_function_inference.in_function)
      (CALL stratum_cfg_edge)
      (CALL stratum_labeled_ea)
      (CALL stratum_best_symexpr_symbol)
      (CALL stratum_symbolic_expr)
      (CALL stratum_symbolic_expr_symbol_minus_symbol)
      (CALL stratum_got_reference)
      (CALL stratum_missing_relocation_handling)
      (CALL stratum_symbolic_operand_attribute)
      (CALL stratum_symbolic_expr_attribute)
      (CALL stratum_bss_data)
      (CALL stratum_inferred_symbol)
      (CALL stratum_pointer_to_external_symbol)
      (CALL stratum_resolved_transfer_to_symbol)
      (CALL stratum_cfg_edge_to_symbol)
      (CALL stratum_cfg_edge_to_top)
      (CALL stratum_symbol_at_end)
      (CALL stratum_data_object_boundary)
      (CALL stratum_false_negative)
      (CALL stratum_false_positive)
      (CALL stratum_moved_label_class)
      (CALL stratum_cfi_operand_is_register)
      (CALL stratum_dwarf_to_cfi)
      (CALL stratum_cfi_directive)
      (CALL stratum_pe_exception_handler)
      (CALL stratum_pe_load_config)
      (CALL stratum_special_encoding)
      (CALL stratum_symbol_special_encoding)
 )    )
 )  )
)